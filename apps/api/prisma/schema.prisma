generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                                                      Int                       @id @default(autoincrement())
  first_name                                              String?                   @db.VarChar
  email_id                                                String?                   @unique @db.VarChar
  password_hash                                           String?                   @db.VarChar
  status                                                  status_type?
  created_at                                              DateTime                  @default(now()) @db.Timestamp(6)
  updated_at                                              DateTime?                 @db.Timestamp(6)
  last_name                                               String?                   @db.VarChar
  organization_id                                         BigInt?
  created_by                                              Int?
  updated_by                                              Int?
  projectPermissions                                      ProjectPermission[]
  ownedLibraries                                          library[]                 @relation("LibraryOwner")
  // createMolecule                                        molecule[]                @relation("userWhoCreated")
  // updateMolecule                                        molecule[]                @relation("userWhoUpdated")
  createMoleculeCart                                      molecule_cart[]           @relation("userWhoCreated")
  updateMoleculeCart                                      molecule_cart[]           @relation("userWhoUpdated")
  user_favourite_molecule                                 user_favourite_molecule[]
  createMoleculeOrder                                     molecule_order[]          @relation("userWhoCreated")
  updateMoleculeOrder                                     molecule_order[]          @relation("userWhoUpdated")
  createOrganization                                      organization[]            @relation("userWhoCreated")
  orgAdmin                                                organization?             @relation("organizationAdmin")
  updateOrganization                                      organization[]            @relation("userWhoUpdated")
  ownedProjects                                           project[]                 @relation("ProjectOwner")
  createRole                                              role[]                    @relation("userWhoCreated")
  updateRole                                              role[]                    @relation("userWhoUpdated")
  userWhoCreated                                          users?                    @relation("userWhoCreated", fields: [created_by], references: [id])
  createUser                                              users[]                   @relation("userWhoCreated")
  orgUser                                                 organization?             @relation("organizationUser", fields: [organization_id], references: [id])
  userWhoUpdated                                          users?                    @relation("userWhoUpdated", fields: [updated_by], references: [id])
  updateUser                                              users[]                   @relation("userWhoUpdated")
  createProject                                           project[]                 @relation("userWhoCreated")
  updateProject                                           project[]                 @relation("userWhoUpdated")
  createLibrary                                           library[]                 @relation("userWhoCreated")
  updateLibrary                                           library[]                 @relation("userWhoUpdated")
  user_role                                               user_role[]
  createContainer                                         container[]               @relation("userWhoCreated")
  updateContainer                                         container[]               @relation("userWhoUpdated")
  reaction_detail_reaction_detail_created_byTousers       reaction_detail[]         @relation("reaction_detail_created_byTousers")
  reaction_detail_reaction_detail_updated_byTousers       reaction_detail[]         @relation("reaction_detail_updated_byTousers")
  reaction_compound_reaction_compound_created_byTousers   reaction_compound[]       @relation("reaction_compound_created_byTousers")
  reaction_compound_reaction_compound_updated_byTousers   reaction_compound[]       @relation("reaction_compound_updated_byTousers")
  lab_job_order_lab_job_order_created_byTousers           lab_job_order[]           @relation("lab_job_order_created_byTousers")
  lab_job_order_lab_job_order_submitted_byTousers         lab_job_order[]           @relation("lab_job_order_submitted_byTousers")
  lab_job_order_lab_job_order_updated_byTousers           lab_job_order[]           @relation("lab_job_order_updated_byTousers")
  molecule_molecule_created_byTousers                     molecule[]                @relation("molecule_created_byTousers")
  molecule_molecule_updated_byTousers                     molecule[]                @relation("molecule_updated_byTousers")
  pathway_pathway_created_byTousers                       pathway[]                 @relation("pathway_created_byTousers")
  pathway_pathway_updated_byTousers                       pathway[]                 @relation("pathway_updated_byTousers")
  org_product_module_org_product_module_created_byTousers org_product_module[]      @relation("org_product_module_created_byTousers")
  org_product_module_org_product_module_updated_byTousers org_product_module[]      @relation("org_product_module_updated_byTousers")
  product_module_product_module_created_byTousers         product_module[]          @relation("product_module_created_byTousers")
  product_module_product_module_updated_byTousers         product_module[]          @relation("product_module_updated_byTousers")

  product_module_action product_module_action[] @relation(map: "con_fk_product_module_actn_created_by")
}

model user_role {
  id      Int   @id @default(autoincrement())
  user_id Int
  role_id Int
  role    role  @relation(fields: [role_id], references: [id])
  user    users @relation(fields: [user_id], references: [id])
}

model role {
  id                                    Int                                     @id @default(autoincrement())
  type                                  String
  name                                  String
  status                                status_type
  priority                              Int
  created_at                            DateTime                                @default(now()) @db.Timestamp(6)
  updated_at                            DateTime?                               @db.Timestamp(6)
  created_by                            Int?
  definition                            String
  orgType                               organization_type?
  updated_by                            Int?
  product_module_action_role_permission product_module_action_role_permission[]
  userWhoCreated                        users?                                  @relation("userWhoCreated", fields: [created_by], references: [id])
  userWhoUpdated                        users?                                  @relation("userWhoUpdated", fields: [updated_by], references: [id])
  user_role                             user_role[]
}

model container {
  id             Int       @id @default(autoincrement())
  name           String
  type           String // O => 'Internal', CO => 'Client Org', P => 'Project', L => 'Library'
  description    String
  parent_id      Int
  owner_id       Int
  status         Int
  config         Json?
  metadata       Json?     @db.Json
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime? @db.Timestamp(6)
  created_by     Int
  updated_by     Int?
  // molecule          molecule[]
  // molecule_cart     molecule_cart[]
  // molecule_order    molecule_order[]
  // org_product_module        org_product_module[]       @relation("organizationPurchasedModule")
  userWhoCreated users     @relation("userWhoCreated", fields: [created_by], references: [id])
  // user              user               @relation("organizationAdmin", fields: [orgAdminId], references: [id])
  userWhoUpdated users?    @relation("userWhoUpdated", fields: [updated_by], references: [id])
  // projects          project[]          @relation("OrganizationProjects")
  // orgUser           users[]             @relation("organizationUser")
}

enum container_type {
  Organization       @map("0")
  Project            @map("1")
  Library            @map("2")
  ClientOrganization @map("3")
}

model organization {
  id                 BigInt               @id @default(autoincrement())
  name               String
  orgAdminId         Int                  @unique
  status             status_type?
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime?            @db.Timestamp(6)
  metadata           Json?                @db.Json
  type               organization_type?
  created_by         Int
  updated_by         Int?
  molecule           molecule[]
  molecule_cart      molecule_cart[]
  molecule_order     molecule_order[]
  userWhoCreated     users                @relation("userWhoCreated", fields: [created_by], references: [id])
  user               users                @relation("organizationAdmin", fields: [orgAdminId], references: [id])
  userWhoUpdated     users?               @relation("userWhoUpdated", fields: [updated_by], references: [id])
  projects           project[]            @relation("OrganizationProjects")
  orgUser            users[]              @relation("organizationUser")
  org_product_module org_product_module[] @relation(map: "con_fk_org_product_module_org_id")
}

// model molecule {
//   id                   Int                  @id @default(autoincrement())
//   source_molecule_name String?
//   library_id           Int
//   library              library              @relation(fields: [library_id], references: [id])
//   project_id           Int
//   project              project              @relation(fields: [project_id], references: [id])
//   organization_id      Int
//   organization         organization         @relation(fields: [organization_id], references: [id])
//   smiles_string        String
//   inchi_key            String
//   molecular_weight     Decimal
//   finger_print         Bytes
//   status               Int
//   is_added_to_cart     Boolean              @default(false)
//   created_at           DateTime             @default(now()) @db.Timestamp(6)
//   created_by           Int
//   userWhoCreated       users                @relation("userWhoCreated", fields: [created_by], references: [id])
//   updated_at           DateTime?            @db.Timestamp(6)
//   updated_by           Int?
//   userWhoUpdated       users?                @relation("userWhoUpdated", fields: [updated_by], references: [id])
//   molecule_cart        molecule_cart[]
//   molecule_order       molecule_order[]
//   user_favourite_molecule   user_favourite_molecule[]

//   lab_job_order lab_job_order[] @relation(map: "con_fk_lab_job_order_mol_id")
// }

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule {
  id                               BigInt                    @id(map: "con_pk_molecule_id") @default(autoincrement())
  source_molecule_name             String?                   @db.VarChar(150)
  library_id                       BigInt
  library                          library                   @relation(fields: [library_id], references: [id])
  project_id                       BigInt
  project                          project                   @relation(fields: [project_id], references: [id])
  organization_id                  BigInt
  organization                     organization              @relation(fields: [organization_id], references: [id])
  smiles_string                    String
  inchi_key                        String?                   @db.VarChar(27)
  molecular_weight                 Decimal                   @db.Decimal(10, 2)
  finger_print                     Bytes
  status                           Int                       @db.SmallInt
  is_added_to_cart                 Boolean                   @default(false)
  created_at                       DateTime                  @db.Timestamptz(6)
  created_by                       Int
  updated_at                       DateTime?                 @db.Timestamptz(6)
  updated_by                       Int?
  lab_job_order                    lab_job_order[]
  users_molecule_created_byTousers users                     @relation("molecule_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_created_by")
  users_molecule_updated_byTousers users?                    @relation("molecule_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_updated_by")
  molecule_adme_data               molecule_adme_data[]
  molecule_bio_data                molecule_bio_data[]
  molecule_cart                    molecule_cart[]
  molecule_chem_data               molecule_chem_data[]
  pathway                          pathway[]
  user_favourite_molecule          user_favourite_molecule[]
  molecule_order                   molecule_order[]

  @@index([finger_print], map: "idx_molecule_fingerprint")
  @@index([is_added_to_cart], map: "idx_molecule_is_added_to_cart")
  @@index([library_id], map: "idx_molecule_library_id")
  @@index([organization_id], map: "idx_molecule_organization_id")
  @@index([project_id], map: "idx_molecule_project_id")
  @@index([smiles_string], map: "idx_molecule_smiles")
  @@index([status], map: "idx_molecule_status")
}

model user_favourite_molecule {
  id          Int      @id @default(autoincrement())
  molecule_id BigInt
  user_id     Int
  molecule    molecule @relation(fields: [molecule_id], references: [id])
  user        users    @relation(fields: [user_id], references: [id])
}

model molecule_cart {
  id              Int          @id @default(autoincrement())
  molecule_id     BigInt
  library_id      BigInt
  order_id        Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  updated_at      DateTime?    @db.Timestamp(6)
  updated_by      Int?
  organization_id BigInt
  project_id      BigInt
  userWhoCreated  users        @relation("userWhoCreated", fields: [created_by], references: [id])
  library         library      @relation(fields: [library_id], references: [id])
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  organization    organization @relation(fields: [organization_id], references: [id])
  project         project      @relation(fields: [project_id], references: [id])
  userWhoUpdated  users?       @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

model molecule_order {
  id              Int          @id @default(autoincrement())
  order_id        Int
  order_name      String
  molecule_id     BigInt
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  library_id      BigInt
  library         library      @relation(fields: [library_id], references: [id])
  batch_detail    Json
  organization_id BigInt
  organization    organization @relation(fields: [organization_id], references: [id])
  project_id      BigInt
  project         project      @relation(fields: [project_id], references: [id])
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  users        @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?    @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  users?       @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module {
  id                                     Int                     @id(map: "con_pk_product_module_id") @default(autoincrement())
  name                                   String                  @unique(map: "con_uk_product_module_name") @db.VarChar(255)
  description                            String?
  is_active                              Boolean                 @default(true)
  created_at                             DateTime                @db.Timestamptz(6)
  created_by                             Int
  updated_at                             DateTime?               @db.Timestamptz(6)
  updated_by                             Int?
  org_product_module                     org_product_module[]
  users_product_module_created_byTousers users                   @relation("product_module_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_created_by")
  users_product_module_updated_byTousers users?                  @relation("product_module_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_updated_by")
  product_module_action                  product_module_action[]

  @@index([is_active], map: "idx_product_module_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module_action {
  id                                    Int                                     @id(map: "con_pk_product_module_action_id") @default(autoincrement())
  name                                  String
  type                                  String                                  @db.VarChar(30)
  product_module_id                     Int
  route                                 String
  created_at                            DateTime                                @db.Timestamptz(6)
  created_by                            Int
  updated_at                            DateTime?                               @db.Timestamptz(6)
  updated_by                            Int?
  users                                 users?                                  @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_created_by")
  product_module                        product_module                          @relation(fields: [product_module_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_module_id")
  product_module_action_role_permission product_module_action_role_permission[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module_action_role_permission {
  id                       Int                   @id(map: "con_pk_prod_module_actn_role_perm_id") @default(autoincrement())
  product_module_action_id Int
  role_id                  Int
  product_module_action    product_module_action @relation(fields: [product_module_action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_id")
  role                     role                  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_role_id")

  @@unique([product_module_action_id, role_id], map: "con_uk_prod_module_actn_role_perm")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model org_product_module {
  organization_id                            BigInt
  product_module_id                          Int
  is_active                                  Boolean        @default(true)
  created_at                                 DateTime       @db.Timestamptz(6)
  created_by                                 Int
  updated_at                                 DateTime?      @db.Timestamptz(6)
  updated_by                                 Int?
  users_org_product_module_created_byTousers users          @relation("org_product_module_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_created_by")
  organization                               organization   @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_org_id")
  product_module                             product_module @relation(fields: [product_module_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_prod_module_id")
  users_org_product_module_updated_byTousers users?         @relation("org_product_module_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_updated_by")

  @@id([organization_id, product_module_id], map: "con_pk_org_product_module_org_n_module")
}

model project {
  id              BigInt              @id @default(autoincrement())
  name            String              @db.VarChar
  target          String?
  type            project_type
  description     String?
  organization_id BigInt
  ownerId         Int
  sharedUsers     ProjectPermission[] @relation("SharedProjectPermissions")
  libraries       library[]           @relation("ProjectLibraries")
  molecule        molecule[]
  molecule_cart   molecule_cart[]
  molecule_order  molecule_order[]
  organization    organization        @relation("OrganizationProjects", fields: [organization_id], references: [id])
  owner           users               @relation("ProjectOwner", fields: [ownerId], references: [id])
  created_at      DateTime            @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  users               @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?           @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  users?              @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

model library {
  id             BigInt           @id @default(autoincrement())
  name           String           @db.VarChar
  description    String?
  target         String?
  project_id     BigInt
  ownerId        Int
  owner          users            @relation("LibraryOwner", fields: [ownerId], references: [id])
  project        project          @relation("ProjectLibraries", fields: [project_id], references: [id])
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  created_by     Int
  userWhoCreated users            @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at     DateTime?        @db.Timestamp(6)
  updated_by     Int?
  userWhoUpdated users?           @relation("userWhoUpdated", fields: [updated_by], references: [id])
  molecule       molecule[]
  moleculeCart   molecule_cart[]
  moleculeOrder  molecule_order[]
}

model ProjectPermission {
  id         Int        @id @default(autoincrement())
  user_id    Int
  project_id BigInt
  role       permission
  first_name String?
  project    project    @relation("SharedProjectPermissions", fields: [project_id], references: [id])
  user       users      @relation(fields: [user_id], references: [id])

  @@unique([user_id, project_id])
}

model inventory {
  id                  Int                @id @default(autoincrement())
  version             Int
  smiles_string       String             @db.VarChar
  price_per_unit      Decimal?           @db.Decimal(10, 2)
  unit_size           Decimal?           @db.Decimal(10, 2)
  unit_of_measurement String?            @db.VarChar(50)
  stock_keeping_unit  String?            @db.VarChar(25)
  vendor              String?            @db.VarChar(25)
  in_stock            Boolean
  last_synced_at      DateTime           @default(now()) @db.Timestamptz(6)
  metadata_id         Int
  inventory_metadata  inventory_metadata @relation(fields: [metadata_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id, version], map: "con_uk_inventory_id_n_version")
  @@index([id], map: "ix_inventory_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model inventory_metadata {
  id                  Int                 @id(map: "con_pk_inventory_metadata_id") @default(autoincrement())
  smiles_string       String
  inchi_key           String?             @db.VarChar(27)
  finger_print        Bytes?
  cas_number          String?             @db.VarChar(100)
  link                String?
  source              String              @db.Char(3)
  last_available_date DateTime?           @db.Timestamptz(6)
  last_synced_at      DateTime            @db.Timestamptz(6)
  inventory           inventory[]
  reaction_compound   reaction_compound[]

  @@index([finger_print], map: "idx_inventory_metadata_fingerprint")
  @@index([smiles_string], map: "idx_inventory_metadata_smiles")
  @@index([source], map: "idx_inventory_metadata_source")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model lab_job_order {
  lab_job_order_id                        BigInt               @default(autoincrement())
  molecule_id                             BigInt
  pathway_id                              BigInt
  pathway_instance_id                     Int
  product_smiles_string                   String
  product_molecule_weight                 Decimal?             @db.Decimal
  no_of_steps                             Int?
  functional_bioassays                    Json?
  reactions                               Json?
  file_path                               String?
  status                                  Int
  created_at                              DateTime             @db.Timestamptz(6)
  created_by                              Int
  submitted_at                            DateTime?            @db.Timestamptz(6)
  submitted_by                            Int
  updated_at                              DateTime?            @db.Timestamptz(6)
  updated_by                              Int?
  users_lab_job_order_created_byTousers   users                @relation("lab_job_order_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_created_by")
  molecule                                molecule             @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_mol_id")
  pathway                                 pathway              @relation(fields: [pathway_id, pathway_instance_id], references: [id, pathway_instance_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_pathway_ref")
  users_lab_job_order_submitted_byTousers users                @relation("lab_job_order_submitted_byTousers", fields: [submitted_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_submit_by")
  users_lab_job_order_updated_byTousers   users?               @relation("lab_job_order_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_updated_by")
  molecule_adme_data                      molecule_adme_data[]
  molecule_bio_data                       molecule_bio_data[]
  molecule_chem_data                      molecule_chem_data[]

  @@id([lab_job_order_id, molecule_id], map: "con_pk_lab_job_order_id_mol_id")
  @@index([status], map: "idx_lab_job_order_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_bio_data {
  id               BigInt        @id(map: "con_pk_molecule_bio_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_bio_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_bio_data_mol_id")

  @@index([status], map: "idx_molecule_bio_data_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_chem_data {
  id               BigInt        @id(map: "con_pk_molecule_chem_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  reaction_step_no Int
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_chem_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_chem_data_mol_id")

  @@index([status], map: "idx_molecule_chem_data_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_adme_data {
  id               BigInt        @id(map: "con_pk_molecule_adme_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_adme_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_adme_data_mol_id")

  @@index([status], map: "idx_molecule_adme_data_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model pathway {
  id                              BigInt            @default(autoincrement())
  pathway_instance_id             Int               @default(0) @db.SmallInt
  pathway_index                   Int?              @db.SmallInt
  pathway_score                   Decimal?          @db.Decimal
  step_count                      Int?              @db.SmallInt
  molecule_id                     BigInt
  description                     String?
  selected                        Boolean           @default(false)
  created_at                      DateTime          @db.Timestamptz(6)
  created_by                      Int
  updated_at                      DateTime?         @db.Timestamptz(6)
  updated_by                      Int?
  lab_job_order                   lab_job_order[]
  users_pathway_created_byTousers users             @relation("pathway_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_created_by")
  molecule                        molecule          @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_molecule_id")
  users_pathway_updated_byTousers users?            @relation("pathway_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_updated_by")
  reaction_detail                 reaction_detail[]

  @@id([id, pathway_instance_id], map: "con_pk_pathway_pathway_id_n_instance_id")
  @@index([selected], map: "idx_pathway_selected")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_compound {
  id                                        BigInt              @id(map: "con_pk_reaction_compound_id") @default(autoincrement())
  reaction_id                               BigInt
  compound_id                               String?             @db.VarChar(30)
  compound_label                            String?             @db.VarChar(30)
  compound_name                             String?             @db.VarChar(100)
  smiles_string                             String
  compound_type                             String?             @db.Char(1)
  role                                      String?             @db.VarChar(50)
  molar_ratio                               Decimal?            @db.Decimal
  dispense_time                             Int?                @db.SmallInt
  source                                    String?             @db.Char(2)
  inventory_id                              Int?
  inventory_url                             String?
  created_at                                DateTime            @db.Timestamptz(6)
  created_by                                Int
  updated_at                                DateTime?           @db.Timestamptz(6)
  updated_by                                Int?
  users_reaction_compound_created_byTousers users               @relation("reaction_compound_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_created_by")
  inventory_metadata                        inventory_metadata? @relation(fields: [inventory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_inv_id")
  reaction_detail                           reaction_detail     @relation(fields: [reaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_rxn_id")
  users_reaction_compound_updated_byTousers users?              @relation("reaction_compound_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_updated_by")

  @@index([compound_type], map: "idx_reaction_compound_compound_type")
  @@index([smiles_string], map: "idx_reaction_compound_smiles")
  @@index([source], map: "idx_reaction_compound_source")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_detail {
  id                                      BigInt                   @id(map: "con_pk_reaction_detail_id") @default(autoincrement())
  reaction_name                           String                   @db.VarChar(100)
  reaction_template                       String                   @db.VarChar(100)
  reaction_template_group                 String?                  @db.VarChar(100)
  reaction_code                           String?                  @db.VarChar(10)
  pathway_id                              BigInt
  pathway_instance_id                     Int                      @db.SmallInt
  reaction_sequence_no                    Int?                     @db.SmallInt
  confidence                              Decimal?                 @db.Decimal
  reaction_smiles_string                  String?
  temperature                             Float?
  solvent                                 String?                  @db.VarChar(50)
  product_smiles_string                   String?
  product_molecular_weight                Decimal?                 @db.Decimal
  product_type                            String?                  @db.Char(1)
  status                                  Int                      @db.SmallInt
  created_at                              DateTime                 @db.Timestamptz(6)
  created_by                              Int
  updated_at                              DateTime?                @db.Timestamptz(6)
  updated_by                              Int?
  reaction_compound                       reaction_compound[]
  users_reaction_detail_created_byTousers users                    @relation("reaction_detail_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_created_by")
  pathway                                 pathway                  @relation(fields: [pathway_id, pathway_instance_id], references: [id, pathway_instance_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_pathway_ref")
  reaction_template_master                reaction_template_master @relation(fields: [reaction_template], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_rxn_template")
  users_reaction_detail_updated_byTousers users?                   @relation("reaction_detail_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_updated_by")

  @@index([product_smiles_string], map: "idx_reaction_product_smiles")
  @@index([product_type], map: "idx_reaction_product_type")
  @@index([status], map: "idx_reaction_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_template_master {
  id               Int               @id(map: "con_pk_reaction_template_master_id") @default(autoincrement())
  name             String            @unique(map: "con_uk_reaction_template_name") @db.VarChar(255)
  type             String            @db.VarChar(255)
  version          Int
  chemaical_1      String?           @db.VarChar(50)
  chemaical_2      String?           @db.VarChar(50)
  chemaical_3      String?           @db.VarChar(50)
  chemaical_4      String?           @db.VarChar(50)
  chemaical_5      String?           @db.VarChar(50)
  chemaical_6      String?           @db.VarChar(50)
  no_of_components Int?
  solvent          String?           @db.VarChar(50)
  temperature      String?           @db.VarChar(10)
  is_active        Boolean           @default(true)
  last_synced_at   DateTime          @db.Timestamptz(6)
  reaction_detail  reaction_detail[]

  @@index([is_active], map: "idx_reaction_template_master_is_active")
}

enum status_type {
  Disabled @map("0")
  Enabled  @map("1")
}

enum project_type {
  Retrosynthesis @map("0")
  Optimization   @map("1")
  Combinatorial  @map("2")
}

enum permission {
  View  @map("0")
  Edit  @map("1")
  Admin @map("2")
}

enum organization_type {
  Internal @map("0")
  External @map("1")
}
