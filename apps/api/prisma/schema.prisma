generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int                  @id @default(autoincrement())
  firstName           String?              @db.VarChar
  email               String?              @unique @db.VarChar
  password            String?              @db.VarChar
  status              status_type?
  lastName            String?              @db.VarChar
  user_role           user_role[]
  organizationId      Int?
  orgUser             organization?        @relation("organizationUser", fields: [organizationId], references: [id])
  orgAdmin            organization?        @relation("organizationAdmin")
  createdAt           DateTime             @default(now()) @db.Timestamp(6)
  createdBy           Int?
  userWhoCreated      user?                @relation("userWhoCreated", fields: [createdBy], references: [id])
  updatedAt           DateTime?            @default(now()) @db.Timestamp(6)
  updatedBy           Int?
  userWhoUpdated      user?                @relation("userWhoUpdated", fields: [updatedBy], references: [id])
  ownedProjects       project[]            @relation("ProjectOwner") // Projects owned by the user
  updatedProjects     project[]            @relation("ProjectUpdater") // Projects updated by the user
  ownedLibraries      library[]            @relation("LibraryOwner") // Libraries owned by the user
  updatedLibraries    library[]            @relation("LibraryUpdater") // Libraries updated by the user
  projectPermissions  ProjectPermission[] // Permissions for projects
  molecule            molecule[]
  moleculeCart        molecule_cart[]
  moleculeOrder       molecule_order[]
  molecule_favorites  molecule_favorites[]
  createModule        module[]             @relation("userWhoCreated")
  updateModule        module[]             @relation("userWhoUpdated")
  createRole          role[]               @relation("userWhoCreated")
  updateRole          role[]               @relation("userWhoUpdated")
  createUser          user[]               @relation("userWhoCreated")
  updateUser          user[]               @relation("userWhoUpdated")
  createOrganization  organization[]       @relation("userWhoCreated")
  updateOrganization  organization[]       @relation("userWhoUpdated")
  createMolecule      molecule[]           @relation("userWhoCreated")
  updateMolecule      molecule[]           @relation("userWhoUpdated")
  createMoleculeCart  molecule_cart[]      @relation("userWhoCreated")
  updateMoleculeCart  molecule_cart[]      @relation("userWhoUpdated")
  createMoleculeOrder molecule_order[]     @relation("userWhoCreated")
  updateMoleculeOrder molecule_order[]     @relation("userWhoUpdated")
}

model user_role {
  id     Int  @id @default(autoincrement())
  userId Int
  user   user @relation(fields: [userId], references: [id])
  roleId Int
  role   role @relation(fields: [roleId], references: [id])
}

model role {
  id                            Int                             @id @default(autoincrement())
  name                          String
  definition                    String
  type                          String
  orgType                       organization_type?
  priority                      Int
  status                        status_type
  createdAt                     DateTime                        @default(now()) @db.Timestamp(6)
  createdBy                     Int?
  userWhoCreated                user?                           @relation("userWhoCreated", fields: [createdBy], references: [id])
  updatedAt                     DateTime?                       @default(now()) @db.Timestamp(6)
  updatedBy                     Int?
  userWhoUpdated                user?                           @relation("userWhoUpdated", fields: [updatedBy], references: [id])
  user_role                     user_role[]
  module_action_role_permission module_action_role_permission[]
  //module_role_permission            module_role_permission[]
}

model organization {
  id             Int                @id @default(autoincrement())
  name           String
  orgAdminId     Int                @unique
  user           user               @relation("organizationAdmin", fields: [orgAdminId], references: [id])
  status         status_type?
  type           organization_type?
  metadata       Json?              @db.Json
  createdAt      DateTime           @default(now()) @db.Timestamp(6)
  createdBy      Int
  userWhoCreated user               @relation("userWhoCreated", fields: [createdBy], references: [id])
  updatedAt      DateTime?          @default(now()) @db.Timestamp(6)
  updatedBy      Int?
  userWhoUpdated user?              @relation("userWhoUpdated", fields: [updatedBy], references: [id])
  orgUser        user[]             @relation("organizationUser")
  projects       project[]          @relation("OrganizationProjects") // Multiple projects
  org_module     org_module[]       @relation("organizationPurchasedModule")
  molecule       molecule[]
  molecule_cart  molecule_cart[]
  molecule_order molecule_order[]
}

model module {
  id               Int             @id @default(autoincrement())
  name             String
  description      String
  requiredPurchase Boolean         @default(false)
  createdAt        DateTime        @default(now()) @db.Timestamp(6)
  createdBy        Int
  userWhoCreated   user            @relation("userWhoCreated", fields: [createdBy], references: [id])
  updatedAt        DateTime?       @default(now()) @db.Timestamp(6)
  updatedBy        Int?
  userWhoUpdated   user?           @relation("userWhoUpdated", fields: [updatedBy], references: [id])
  org_module       org_module[]
  //sub_module             sub_module[]
  module_action    module_action[]
  //module_role_permission module_role_permission[]
}

model molecule {
  id                   Int                  @id @default(autoincrement())
  source_molecule_name String
  organizationId       Int
  organization         organization         @relation(fields: [organizationId], references: [id])
  projectId            Int
  project              project              @relation(fields: [projectId], references: [id])
  library_id           Int
  library              library              @relation(fields: [library_id], references: [id])
  smiles_string        String
  inchi_key            String
  molecular_weight     Decimal
  finger_print         String
  is_added_to_cart     Boolean
  status               molecule_status
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  created_by           Int
  userWhoCreated       user                 @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at           DateTime?            @default(now()) @db.Timestamp(6)
  updated_by           Int?
  userWhoUpdated       user?                @relation("userWhoUpdated", fields: [updated_by], references: [id])
  molecule_cart        molecule_cart[]
  user                 user?                @relation(fields: [userId], references: [id])
  userId               Int?
  molecule_favorites   molecule_favorites[]
  molecule_order       molecule_order[]
}

model molecule_favorites {
  id         Int      @id @default(autoincrement())
  moleculeId Int
  molecule   molecule @relation(fields: [moleculeId], references: [id])
  userId     Int
  user       user     @relation(fields: [userId], references: [id])
}

model molecule_cart {
  id              Int          @id @default(autoincrement())
  molecule_id     Int
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  organization_id Int
  organization    organization @relation(fields: [organization_id], references: [id])
  project_id      Int
  project         project      @relation(fields: [project_id], references: [id])
  library_id      Int
  library         library      @relation(fields: [library_id], references: [id])
  batch_detail    Json
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  user         @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  user?        @relation("userWhoUpdated", fields: [updated_by], references: [id])
  user            user?        @relation(fields: [userId], references: [id])
  userId          Int?
}

model molecule_order {
  id              Int          @id @default(autoincrement())
  order_id        Int
  order_name      String
  molecule_id     Int
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  organization_id Int
  organization    organization @relation(fields: [organization_id], references: [id])
  project_id      Int
  project         project      @relation(fields: [project_id], references: [id])
  library_id      Int
  library         library      @relation(fields: [library_id], references: [id])
  batch_detail    Json
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  user         @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  user?        @relation("userWhoUpdated", fields: [updated_by], references: [id])
  user            user?        @relation(fields: [userId], references: [id])
  userId          Int?
}

//model module_role_permission {
//id       Int    @id @default(autoincrement())
//roleId   Int
//role     role   @relation(fields: [roleId], references: [id])
//moduleId Int
//module   module @relation(fields: [moduleId], references: [id])
//}

model org_module {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   organization @relation("organizationPurchasedModule", fields: [organizationId], references: [id])
  moduleId       Int
  module         module       @relation(fields: [moduleId], references: [id])
}

//model sub_module {
//id                Int                 @id @default(autoincrement())
//name              String
//route             String
//moduleId          Int
//module            module              @relation(fields: [moduleId], references: [id])
//sub_module_action sub_module_action[]
//}

model module_action {
  id                            Int                             @id @default(autoincrement())
  name                          String
  type                          String
  route                         String
  moduleId                      Int
  module                        module                          @relation(fields: [moduleId], references: [id])
  //subModuleId                       Int
  //sub_module                        sub_module                          @relation(fields: [subModuleId], references: [id])
  module_action_role_permission module_action_role_permission[]
}

model module_action_role_permission {
  id            Int           @id @default(autoincrement())
  actionId      Int
  module_action module_action @relation(fields: [actionId], references: [id])
  roleId        Int
  role          role          @relation(fields: [roleId], references: [id])
}

model project {
  id             Int                 @id @default(autoincrement())
  name           String              @db.VarChar
  target         String?
  type           project_type
  description    String?
  organizationId Int
  organization   organization        @relation("OrganizationProjects", fields: [organizationId], references: [id]) // Organization of the project
  createdAt      DateTime            @default(now()) @db.Timestamp(6)
  updatedAt      DateTime            @default(now()) @db.Timestamp(6)
  ownerId        Int // Foreign key to the user who owns the project
  owner          user                @relation("ProjectOwner", fields: [ownerId], references: [id]) // User who owns the project
  updatedById    Int // Foreign key to the user who last updated the project
  updatedBy      user                @relation("ProjectUpdater", fields: [updatedById], references: [id]) // User who last updated the project
  sharedUsers    ProjectPermission[] @relation("SharedProjectPermissions") // Users with admin or editor access for the project
  libraries      library[]           @relation("ProjectLibraries") // Relationship to libraries
  molecule       molecule[]
  molecule_cart  molecule_cart[]
  molecule_order molecule_order[]
}

model library {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar
  description   String?
  target        String?
  projectId     Int
  project       project          @relation("ProjectLibraries", fields: [projectId], references: [id])
  createdAt     DateTime         @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?        @db.Timestamp(6)
  ownerId       Int // Foreign key to the user who owns the project
  owner         user             @relation("LibraryOwner", fields: [ownerId], references: [id]) // User who owns the project
  updatedById   Int? // Foreign key to the user who last updated the project
  updatedBy     user?            @relation("LibraryUpdater", fields: [updatedById], references: [id]) // User who last updated the project
  molecule      molecule[]
  moleculeCart  molecule_cart[]
  moleculeOrder molecule_order[]
}

enum status_type {
  Disabled @map("0")
  Enabled  @map("1")
}

enum project_type {
  Retrosynthesis @map("0")
  Optimization   @map("1")
  Combinatorial  @map("2")
}

enum permission {
  View  @map("0")
  Edit  @map("1")
  Admin @map("2")
}

model ProjectPermission {
  id        Int        @id @default(autoincrement())
  userId    Int
  projectId Int
  role      permission
  firstName String?

  user    user    @relation(fields: [userId], references: [id])
  project project @relation(fields: [projectId], references: [id], name: "SharedProjectPermissions")

  @@unique([userId, projectId]) // Composite unique constraint
}

enum organization_type {
  Internal @map("0")
  External @map("1")
}

enum molecule_status {
  New          @map("1")
  Ordered      @map("2")
  InRetroQueue @map("3")
  Ready        @map("4")
  FailedRetro  @map("5")
  InReview     @map("6")
  Validated    @map("7")
  Done         @map("8")
  Failed       @map("9")
}
