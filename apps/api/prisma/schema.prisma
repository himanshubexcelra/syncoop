generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model ProjectPermission {
  id         Int
  userId     Int
  project_id Int
  role       permission
  first_name String?

  @@ignore
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model container {
  id                     BigInt    @id(map: "con_pk_container_id") @default(autoincrement())
  parent_id              BigInt?
  type                   String    @db.VarChar(2)
  name                   String    @db.VarChar(255)
  description            String?
  owner_id               Int?
  inherits_configuration Boolean?  @default(true)
  config                 Json?
  metadata               Json?
  is_active              Boolean
  created_at             DateTime  @db.Timestamptz(6)
  created_by             Int
  updated_at             DateTime? @db.Timestamptz(6)
  updated_by             Int?

  // users_container_created_byTousers                        users                @relation("container_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_created_by")
  userWhoCreated users @relation("container_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_created_by")

  // users_container_owner_idTousers                          users?               @relation("container_owner_idTousers", fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_owner_id")
  owner users? @relation("container_owner_idTousers", fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_owner_id")

  container       container?  @relation("containerTocontainer", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_parent_id")
  other_container container[] @relation("containerTocontainer")

  // users_container_updated_byTousers                        users?               @relation("container_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_updated_by")
  userWhoUpdated users? @relation("container_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_container_updated_by")

  // molecule_molecule_library_idTocontainer                  molecule[]           @relation("molecule_library_idTocontainer")
  libraryMolecules molecule[] @relation("molecule_library_idTocontainer")

  // molecule_molecule_organization_idTocontainer             molecule[]           @relation("molecule_organization_idTocontainer")
  organizationMolecules molecule[] @relation("molecule_organization_idTocontainer")

  // molecule_molecule_project_idTocontainer                  molecule[]           @relation("molecule_project_idTocontainer")
  projectMolecules molecule[] @relation("molecule_project_idTocontainer")

  molecule_cart_molecule_cart_library_idTocontainer        molecule_cart[]      @relation("molecule_cart_library_idTocontainer")
  molecule_cart_molecule_cart_organization_idTocontainer   molecule_cart[]      @relation("molecule_cart_organization_idTocontainer")
  molecule_cart_molecule_cart_project_idTocontainer        molecule_cart[]      @relation("molecule_cart_project_idTocontainer")
  molecule_order_molecule_order_organization_idTocontainer molecule_order[]     @relation("molecule_order_organization_idTocontainer")
  org_product_module                                       org_product_module[]

  // users_users_organization_idTocontainer                   users[]              @relation("users_organization_idTocontainer")
  orgUser users[] @relation("users_organization_idTocontainer")

  @@unique([type, name, parent_id], map: "con_uk_container_type_and_name_and_parent_id")
  @@index([is_active], map: "idx_container_is_active")
  @@index([owner_id], map: "idx_container_owner_id")
  @@index([parent_id], map: "idx_container_parent_id")
  @@index([type], map: "idx_container_type")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model display_format {
  id                                                    Int       @id(map: "con_pk_display_format_id") @default(autoincrement())
  locale                                                String    @unique(map: "con_uk_display_format_locale") @db.VarChar(100)
  number_format                                         String    @db.VarChar(100)
  datetime_format                                       String    @db.VarChar(100)
  description                                           String    @db.VarChar(100)
  is_active                                             Boolean   @default(true)
  created_at                                            DateTime  @db.Timestamptz(6)
  created_by                                            Int
  updated_at                                            DateTime? @db.Timestamptz(6)
  updated_by                                            Int?
  users_display_format_created_byTousers                users     @relation("display_format_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_display_format_created_by")
  users_display_format_updated_byTousers                users?    @relation("display_format_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_display_format_updated_by")
  users_users_number_datetime_format_idTodisplay_format users[]   @relation("users_number_datetime_format_idTodisplay_format")

  @@index([is_active], map: "idx_display_format_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model inventory {
  id                  Int                @id(map: "con_pk_inventory_id") @default(autoincrement())
  inventory_id        Int
  version             BigInt
  smiles_string       String
  price_per_unit      Decimal?           @db.Decimal
  unit_size           Decimal?           @db.Decimal
  unit_of_measurement String?            @db.VarChar(100)
  stock_keeping_unit  String?            @db.VarChar(255)
  vendor              String?            @db.VarChar(100)
  in_stock            Boolean
  last_synced_at      DateTime           @db.Timestamptz(6)
  inventory_metadata  inventory_metadata @relation(fields: [inventory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_inventory_metadata_inv_id")

  @@unique([id, version], map: "con_uk_inventory_id_n_version")
  @@index([in_stock], map: "idx_inventory_in_stock")
  @@index([smiles_string], map: "idx_inventory_smiles", type: Gist)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model inventory_metadata {
  id                  Int                 @id(map: "con_pk_inventory_metadata_id") @default(autoincrement())
  smiles_string       String
  inchi_key           String?             @db.VarChar(27)
  finger_print        Bytes?
  cas_number          String?             @db.VarChar(100)
  link                String?
  source              String              @db.Char(3)
  last_available_date DateTime?           @db.Timestamptz(6)
  last_synced_at      DateTime            @db.Timestamptz(6)
  inventory           inventory[]
  reaction_compound   reaction_compound[]

  @@index([finger_print], map: "idx_inventory_metadata_fingerprint")
  @@index([smiles_string], map: "idx_inventory_metadata_smiles", type: Gist)
  @@index([source], map: "idx_inventory_metadata_source")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model lab_job_order {
  lab_job_order_id                        BigInt               @default(autoincrement())
  molecule_id                             BigInt
  pathway_id                              BigInt
  product_smiles_string                   String
  product_molecular_weight                Decimal?             @db.Decimal
  no_of_steps                             Int?
  functional_bioassays                    Json?
  reactions                               Json?
  file_path                               String?
  status                                  Int
  created_at                              DateTime             @db.Timestamptz(6)
  created_by                              Int
  submitted_at                            DateTime?            @db.Timestamptz(6)
  submitted_by                            Int?
  updated_at                              DateTime?            @db.Timestamptz(6)
  updated_by                              Int?
  users_lab_job_order_created_byTousers   users                @relation("lab_job_order_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_created_by")
  molecule                                molecule             @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_mol_id")
  pathway                                 pathway              @relation(fields: [pathway_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_pathway_id")
  users_lab_job_order_submitted_byTousers users?               @relation("lab_job_order_submitted_byTousers", fields: [submitted_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_submit_by")
  users_lab_job_order_updated_byTousers   users?               @relation("lab_job_order_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_lab_job_order_updated_by")
  molecule_adme_data                      molecule_adme_data[]
  molecule_bio_data                       molecule_bio_data[]
  molecule_chem_data                      molecule_chem_data[]

  @@id([lab_job_order_id, molecule_id], map: "con_pk_lab_job_order_id_mol_id")
  @@index([status], map: "idx_lab_job_order_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule {
  id                   BigInt          @id(map: "con_pk_molecule_id") @default(autoincrement())
  source_molecule_name String?         @db.VarChar(150)
  library_id           BigInt
  project_id           BigInt
  organization_id      BigInt
  smiles_string        String
  inchi_key            String?         @db.VarChar(27)
  molecular_weight     Decimal         @db.Decimal
  finger_print         Bytes
  status               Int             @db.SmallInt
  is_added_to_cart     Boolean         @default(false)
  created_at           DateTime        @db.Timestamptz(6)
  created_by           Int
  updated_at           DateTime?       @db.Timestamptz(6)
  updated_by           Int?
  lab_job_order        lab_job_order[]

  // users_molecule_created_byTousers              users                     @relation("molecule_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_created_by")
  userWhoCreated users @relation("molecule_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_created_by")

  // container_molecule_library_idTocontainer      container                 @relation("molecule_library_idTocontainer", fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_library_id")
  library container @relation("molecule_library_idTocontainer", fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_library_id")

  // container_molecule_organization_idTocontainer container                 @relation("molecule_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_org_id")
  organization container @relation("molecule_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_org_id")

  // container_molecule_project_idTocontainer      container                 @relation("molecule_project_idTocontainer", fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_project_id")
  project container @relation("molecule_project_idTocontainer", fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_project_id")

  // users_molecule_updated_byTousers              users?                    @relation("molecule_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_updated_by")
  userWhoUpdated users? @relation("molecule_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_updated_by")

  molecule_adme_data      molecule_adme_data[]
  molecule_bio_data       molecule_bio_data[]
  molecule_cart           molecule_cart[]
  molecule_chem_data      molecule_chem_data[]
  pathway                 pathway[]
  user_favourite_molecule user_favourite_molecule[]

  @@index([finger_print], map: "idx_molecule_fingerprint")
  @@index([is_added_to_cart], map: "idx_molecule_is_added_to_cart")
  @@index([library_id], map: "idx_molecule_library_id")
  @@index([smiles_string], map: "idx_molecule_smiles", type: Gist)
  @@index([status], map: "idx_molecule_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_adme_data {
  id               BigInt        @id(map: "con_pk_molecule_adme_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_adme_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_adme_data_mol_id")

  @@index([status], map: "idx_molecule_adme_data_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_bio_data {
  id               BigInt        @id(map: "con_pk_molecule_bio_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_bio_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_bio_data_mol_id")

  @@index([status], map: "idx_molecule_bio_data_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_cart {
  id                BigInt    @id(map: "con_pk_molecule_cart_id") @default(autoincrement())
  molecule_order_id Int?
  molecule_id       BigInt
  library_id        BigInt
  project_id        BigInt
  organization_id   BigInt
  created_at        DateTime  @db.Timestamptz(6)
  created_by        Int
  updated_at        DateTime? @db.Timestamptz(6)
  updated_by        Int?

  // users_molecule_cart_created_byTousers              users           @relation("molecule_cart_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_created_by")
  userWhoCreated users @relation("molecule_cart_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_created_by")

  // container_molecule_cart_library_idTocontainer      container       @relation("molecule_cart_library_idTocontainer", fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_library_id")
  library container @relation("molecule_cart_library_idTocontainer", fields: [library_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_library_id")

  molecule_order molecule_order? @relation(fields: [molecule_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_mol_order_id")
  molecule       molecule        @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_molecule_id")

  // container_molecule_cart_organization_idTocontainer container       @relation("molecule_cart_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_org_id")
  organization container @relation("molecule_cart_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_org_id")

  // container_molecule_cart_project_idTocontainer      container       @relation("molecule_cart_project_idTocontainer", fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_project_id")
  project container @relation("molecule_cart_project_idTocontainer", fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_project_id")

  // users_molecule_cart_updated_byTousers              users?          @relation("molecule_cart_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_updated_by")
  userWhoUpdated users? @relation("molecule_cart_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_cart_updated_by")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_chem_data {
  id               BigInt        @id(map: "con_pk_molecule_chem_data_id") @default(autoincrement())
  lab_job_order_id BigInt
  molecule_id      BigInt
  reaction_step_no Int
  value            Json?
  status           Int
  last_synced_at   DateTime      @db.Timestamptz(6)
  lab_job_order    lab_job_order @relation(fields: [lab_job_order_id, molecule_id], references: [lab_job_order_id, molecule_id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_chem_data_lab_job_order_mol_id")
  molecule         molecule      @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_chem_data_mol_id")

  @@index([status], map: "idx_molecule_chem_data_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model molecule_order {
  id                         Int             @id(map: "con_pk_molecule_order_id") @default(autoincrement())
  order_id                   String          @unique(map: "con_uk_molecule_order_order_id") @db.VarChar(100)
  order_name                 String          @db.VarChar(100)
  organization_id            BigInt
  ordered_molecules          Int[]
  synthesis_batch_submission Json?
  status                     Int             @db.SmallInt
  created_at                 DateTime        @db.Timestamptz(6)
  created_by                 Int
  updated_at                 DateTime?       @db.Timestamptz(6)
  updated_by                 Int?
  molecule_cart              molecule_cart[]

  // users_molecule_order_created_byTousers              users           @relation("molecule_order_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_created_by")
  userWhoCreated users @relation("molecule_order_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_created_by")

  // container_molecule_order_organization_idTocontainer container       @relation("molecule_order_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_org_id")
  organization container @relation("molecule_order_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_org_id")

  // users_molecule_order_updated_byTousers              users?          @relation("molecule_order_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_updated_by")
  userWhoUpdated users? @relation("molecule_order_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_molecule_order_updated_by")

  @@index([status], map: "idx_molecule_order_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model org_product_module {
  organization_id                            BigInt
  product_module_id                          Int
  is_active                                  Boolean        @default(true)
  created_at                                 DateTime       @db.Timestamptz(6)
  created_by                                 Int
  updated_at                                 DateTime?      @db.Timestamptz(6)
  updated_by                                 Int?
  users_org_product_module_created_byTousers users          @relation("org_product_module_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_created_by")
  container                                  container      @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_org_id")
  product_module                             product_module @relation(fields: [product_module_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_prod_module_id")
  users_org_product_module_updated_byTousers users?         @relation("org_product_module_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_org_product_module_updated_by")

  @@id([organization_id, product_module_id], map: "con_pk_org_product_module_org_n_module")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model pathway {
  id                              BigInt            @id(map: "con_pk_pathway_id") @default(autoincrement())
  parent_id                       BigInt?
  pathway_instance_id             Int               @default(0) @db.SmallInt
  pathway_index                   Int?              @db.SmallInt
  pathway_score                   Decimal?          @db.Decimal
  step_count                      Int?              @db.SmallInt
  molecule_id                     BigInt
  description                     String?
  selected                        Boolean           @default(false)
  created_at                      DateTime          @db.Timestamptz(6)
  created_by                      Int
  updated_at                      DateTime?         @db.Timestamptz(6)
  updated_by                      Int?
  users_pathway_created_byTousers users             @relation("pathway_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_created_by")
  molecule                        molecule          @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_molecule_id")
  pathway                         pathway?          @relation("pathwayTopathway", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_parent_id")
  other_pathway_instance          pathway[]         @relation("pathwayTopathway")
  users_pathway_updated_byTousers users?            @relation("pathway_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_pathway_updated_by")
  reaction_detail                 reaction_detail[]
  lab_job_order                   lab_job_order[]   @relation(map: "con_fk_lab_job_order_pathway_id")

  @@unique([id, parent_id, pathway_instance_id], map: "con_uk_pathway_id_n_parent_id_n_instance_id")
  @@index([selected], map: "idx_pathway_selected")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module {
  id                                     Int                     @id(map: "con_pk_product_module_id") @default(autoincrement())
  name                                   String                  @unique(map: "con_uk_product_module_name") @db.VarChar(255)
  description                            String?
  is_active                              Boolean                 @default(true)
  created_at                             DateTime                @db.Timestamptz(6)
  created_by                             Int
  updated_at                             DateTime?               @db.Timestamptz(6)
  updated_by                             Int?
  org_product_module                     org_product_module[]
  users_product_module_created_byTousers users                   @relation("product_module_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_created_by")
  users_product_module_updated_byTousers users?                  @relation("product_module_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_updated_by")
  product_module_action                  product_module_action[]

  @@index([is_active], map: "idx_product_module_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module_action {
  id                                    Int                                     @id(map: "con_pk_product_module_action_id") @default(autoincrement())
  name                                  String                                  @db.VarChar(255)
  type                                  String                                  @db.VarChar(255)
  product_module_id                     Int
  route                                 String
  created_at                            DateTime                                @db.Timestamptz(6)
  created_by                            Int
  updated_at                            DateTime?                               @db.Timestamptz(6)
  updated_by                            Int?
  users                                 users?                                  @relation(fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_created_by")
  product_module                        product_module                          @relation(fields: [product_module_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_module_id")
  product_module_action_role_permission product_module_action_role_permission[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_module_action_role_permission {
  id                       Int                   @id(map: "con_pk_prod_module_actn_role_perm_id") @default(autoincrement())
  product_module_action_id Int
  role_id                  Int
  product_module_action    product_module_action @relation(fields: [product_module_action_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_id")
  role                     role                  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_product_module_actn_role_id")

  @@unique([product_module_action_id, role_id], map: "con_uk_prod_module_actn_role_perm")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_compound {
  id                                        BigInt              @id(map: "con_pk_reaction_compound_id") @default(autoincrement())
  reaction_id                               BigInt
  compound_id                               String?             @db.VarChar(30)
  compound_label                            String?             @db.VarChar(30)
  compound_name                             String?             @db.VarChar(100)
  smiles_string                             String
  compound_type                             String?             @db.Char(1)
  role                                      String?             @db.VarChar(50)
  molar_ratio                               Decimal?            @db.Decimal
  dispense_time                             Int?                @db.SmallInt
  source                                    String?             @db.Char(2)
  inventory_id                              Int?
  inventory_url                             String?
  created_at                                DateTime            @db.Timestamptz(6)
  created_by                                Int
  updated_at                                DateTime?           @db.Timestamptz(6)
  updated_by                                Int?
  users_reaction_compound_created_byTousers users               @relation("reaction_compound_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_created_by")
  inventory_metadata                        inventory_metadata? @relation(fields: [inventory_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_inv_id")
  reaction_detail                           reaction_detail     @relation(fields: [reaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_rxn_id")
  users_reaction_compound_updated_byTousers users?              @relation("reaction_compound_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_compound_updated_by")

  @@index([compound_type], map: "idx_reaction_compound_compound_type")
  @@index([smiles_string], map: "idx_reaction_compound_smiles", type: Gist)
  @@index([source], map: "idx_reaction_compound_source")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_detail {
  id                                      BigInt                   @id(map: "con_pk_reaction_detail_id") @default(autoincrement())
  reaction_name                           String                   @db.VarChar(100)
  reaction_template_id                    Int
  reaction_code                           String?                  @db.VarChar(10)
  pathway_id                              BigInt
  reaction_sequence_no                    Int?                     @db.SmallInt
  confidence                              Decimal?                 @db.Decimal
  reaction_smiles_string                  String?
  temperature                             Float?
  solvent                                 String?                  @db.VarChar(50)
  product_smiles_string                   String?
  product_molecular_weight                Decimal?                 @db.Decimal
  product_type                            String?                  @db.Char(1)
  status                                  Int                      @db.SmallInt
  created_at                              DateTime                 @db.Timestamptz(6)
  created_by                              Int
  updated_at                              DateTime?                @db.Timestamptz(6)
  updated_by                              Int?
  reaction_compound                       reaction_compound[]
  users_reaction_detail_created_byTousers users                    @relation("reaction_detail_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_created_by")
  reaction_template_master                reaction_template_master @relation(fields: [reaction_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_rxn_template_id")
  users_reaction_detail_updated_byTousers users?                   @relation("reaction_detail_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_updated_by")
  pathway                                 pathway                  @relation(fields: [pathway_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_reaction_detail_pathway_id")

  @@index([product_smiles_string], map: "idx_reaction_product_smiles", type: Gist)
  @@index([product_type], map: "idx_reaction_product_type")
  @@index([status], map: "idx_reaction_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reaction_template_master {
  id               Int               @id(map: "con_pk_reaction_template_master_id") @default(autoincrement())
  name             String            @unique(map: "con_uk_reaction_template_name") @db.VarChar(255)
  template_group   String            @db.VarChar(255)
  version          BigInt
  chemical_1       String?           @db.VarChar(100)
  chemical_2       String?           @db.VarChar(100)
  chemical_3       String?           @db.VarChar(100)
  chemical_4       String?           @db.VarChar(100)
  chemical_5       String?           @db.VarChar(100)
  chemical_6       String?           @db.VarChar(100)
  no_of_components Int?
  solvent          String?           @db.VarChar(255)
  temperature      String?           @db.VarChar(100)
  is_active        Boolean           @default(true)
  last_synced_at   DateTime          @db.Timestamptz(6)
  reaction_detail  reaction_detail[]

  @@index([is_active], map: "idx_reaction_template_master_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model role {
  id                                    Int                                     @id(map: "con_pk_role_id") @default(autoincrement())
  name                                  String                                  @unique(map: "con_uk_role_name") @db.VarChar(255)
  definition                            String?
  type                                  String                                  @db.VarChar(30)
  priority                              Int
  is_active                             Boolean                                 @default(true)
  created_at                            DateTime                                @db.Timestamptz(6)
  created_by                            Int?
  updated_at                            DateTime?                               @db.Timestamptz(6)
  updated_by                            Int?
  product_module_action_role_permission product_module_action_role_permission[]
  users_role_created_byTousers          users?                                  @relation("role_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_role_created_by")
  users_role_updated_byTousers          users?                                  @relation("role_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_role_updated_by")
  user_role                             user_role[]

  @@index([is_active], map: "idx_role_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model status_code {
  id                                  Int       @id(map: "con_pk_status_code_id") @default(autoincrement())
  table_name                          String    @db.VarChar(100)
  column_name                         String    @db.VarChar(100)
  status_code                         String    @db.VarChar(10)
  status_name                         String    @db.VarChar(100)
  status_description                  String
  is_active                           Boolean   @default(true)
  created_at                          DateTime  @db.Timestamptz(6)
  created_by                          Int
  updated_at                          DateTime? @db.Timestamptz(6)
  updated_by                          Int?
  users_status_code_created_byTousers users     @relation("status_code_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_status_code_created_by")
  users_status_code_updated_byTousers users?    @relation("status_code_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_status_code_updated_by")

  @@unique([table_name, column_name, status_code, status_name], map: "con_uk_status_code_tbl_n_col_status_cd_name")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model timezone {
  id                                Int                     @id(map: "con_pk_timezone_id") @default(autoincrement())
  name                              String                  @unique(map: "con_uk_timezone_name") @db.VarChar(100)
  description                       String                  @db.VarChar(255)
  utc_offset                        Unsupported("interval")
  is_active                         Boolean                 @default(true)
  created_at                        DateTime                @db.Timestamptz(6)
  created_by                        Int
  updated_at                        DateTime?               @db.Timestamptz(6)
  updated_by                        Int?
  users_timezone_created_byTousers  users                   @relation("timezone_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_timezone_created_by")
  users_timezone_updated_byTousers  users?                  @relation("timezone_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_timezone_updated_by")
  users_users_timezone_idTotimezone users[]                 @relation("users_timezone_idTotimezone")

  @@index([is_active], map: "idx_timezone_is_active")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_favourite_molecule {
  id          Int      @id(map: "con_pk_user_fav_molecule_id") @default(autoincrement())
  user_id     Int
  molecule_id BigInt
  molecule    molecule @relation(fields: [molecule_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_fav_molecule")
  users       users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_fav_molecule_user")

  @@unique([user_id, molecule_id], map: "con_uk_user_favourite_molecule")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_role {
  id                                Int       @id(map: "con_pk_user_role_id") @default(autoincrement())
  user_id                           Int
  role_id                           Int
  created_at                        DateTime  @db.Timestamptz(6)
  created_by                        Int?
  updated_at                        DateTime? @db.Timestamptz(6)
  updated_by                        Int?
  users_user_role_created_byTousers users?    @relation("user_role_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_role_created_by")
  role                              role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_role_id")
  users_user_role_updated_byTousers users?    @relation("user_role_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_role_updated_by")
  users_user_role_user_idTousers    users     @relation("user_role_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_role_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model has constraints using non-default deferring rules and requires additional setup for migrations. Visit https://pris.ly/d/constraint-deferring for more info.
model users {
  id                                                      Int                       @id(map: "con_pk_user_id") @default(autoincrement())
  title                                                   String?                   @db.VarChar(25)
  first_name                                              String                    @db.VarChar(100)
  last_name                                               String?                   @db.VarChar(100)
  email_id                                                String                    @unique(map: "con_uk_user_email_id") @db.VarChar(100)
  password_hash                                           String                    @db.VarChar(256)
  timezone_id                                             Int?
  number_datetime_format_id                               Int?
  image_url                                               String?                   @db.VarChar(255)
  organization_id                                         BigInt?
  is_active                                               Boolean                   @default(true)
  created_at                                              DateTime                  @db.Timestamptz(6)
  created_by                                              Int?
  updated_at                                              DateTime?                 @db.Timestamptz(6)
  updated_by                                              Int?
  container_container_created_byTousers                   container[]               @relation("container_created_byTousers")
  // container_container_owner_idTousers                            container[]               @relation("container_owner_idTousers")
  owner                                                   container[]               @relation("container_owner_idTousers")
  container_container_updated_byTousers                   container[]               @relation("container_updated_byTousers")
  display_format_display_format_created_byTousers         display_format[]          @relation("display_format_created_byTousers")
  display_format_display_format_updated_byTousers         display_format[]          @relation("display_format_updated_byTousers")
  lab_job_order_lab_job_order_created_byTousers           lab_job_order[]           @relation("lab_job_order_created_byTousers")
  lab_job_order_lab_job_order_submitted_byTousers         lab_job_order[]           @relation("lab_job_order_submitted_byTousers")
  lab_job_order_lab_job_order_updated_byTousers           lab_job_order[]           @relation("lab_job_order_updated_byTousers")
  molecule_molecule_created_byTousers                     molecule[]                @relation("molecule_created_byTousers")
  molecule_molecule_updated_byTousers                     molecule[]                @relation("molecule_updated_byTousers")
  molecule_cart_molecule_cart_created_byTousers           molecule_cart[]           @relation("molecule_cart_created_byTousers")
  molecule_cart_molecule_cart_updated_byTousers           molecule_cart[]           @relation("molecule_cart_updated_byTousers")
  molecule_order_molecule_order_created_byTousers         molecule_order[]          @relation("molecule_order_created_byTousers")
  molecule_order_molecule_order_updated_byTousers         molecule_order[]          @relation("molecule_order_updated_byTousers")
  org_product_module_org_product_module_created_byTousers org_product_module[]      @relation("org_product_module_created_byTousers")
  org_product_module_org_product_module_updated_byTousers org_product_module[]      @relation("org_product_module_updated_byTousers")
  pathway_pathway_created_byTousers                       pathway[]                 @relation("pathway_created_byTousers")
  pathway_pathway_updated_byTousers                       pathway[]                 @relation("pathway_updated_byTousers")
  product_module_product_module_created_byTousers         product_module[]          @relation("product_module_created_byTousers")
  product_module_product_module_updated_byTousers         product_module[]          @relation("product_module_updated_byTousers")
  product_module_action                                   product_module_action[]
  reaction_compound_reaction_compound_created_byTousers   reaction_compound[]       @relation("reaction_compound_created_byTousers")
  reaction_compound_reaction_compound_updated_byTousers   reaction_compound[]       @relation("reaction_compound_updated_byTousers")
  reaction_detail_reaction_detail_created_byTousers       reaction_detail[]         @relation("reaction_detail_created_byTousers")
  reaction_detail_reaction_detail_updated_byTousers       reaction_detail[]         @relation("reaction_detail_updated_byTousers")
  role_role_created_byTousers                             role[]                    @relation("role_created_byTousers")
  role_role_updated_byTousers                             role[]                    @relation("role_updated_byTousers")
  status_code_status_code_created_byTousers               status_code[]             @relation("status_code_created_byTousers")
  status_code_status_code_updated_byTousers               status_code[]             @relation("status_code_updated_byTousers")
  timezone_timezone_created_byTousers                     timezone[]                @relation("timezone_created_byTousers")
  timezone_timezone_updated_byTousers                     timezone[]                @relation("timezone_updated_byTousers")
  user_favourite_molecule                                 user_favourite_molecule[]
  user_role_user_role_created_byTousers                   user_role[]               @relation("user_role_created_byTousers")
  user_role_user_role_updated_byTousers                   user_role[]               @relation("user_role_updated_byTousers")

  // user_role_user_role_user_idTousers                             user_role[]               @relation("user_role_user_idTousers")
  user_role user_role[] @relation("user_role_user_idTousers")

  display_format_users_number_datetime_format_idTodisplay_format display_format? @relation("users_number_datetime_format_idTodisplay_format", fields: [number_datetime_format_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_display_format_id")
  timezone_users_timezone_idTotimezone                           timezone?       @relation("users_timezone_idTotimezone", fields: [timezone_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_user_timezone_id")

  // container_users_organization_idTocontainer                     container?                @relation("users_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_users_org_id")
  orgUser container? @relation("users_organization_idTocontainer", fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "con_fk_users_org_id")

  @@index([is_active], map: "idx_user_is_active")
}

enum permission {
  View  @map("0")
  Edit  @map("1")
  Admin @map("2")
}
