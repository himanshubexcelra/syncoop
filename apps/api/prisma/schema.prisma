generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int                  @id @default(autoincrement())
  first_name          String?              @db.VarChar
  email_id            String?              @unique @db.VarChar
  password_hash       String?              @db.VarChar
  status              status_type?
  created_at          DateTime             @default(now()) @db.Timestamp(6)
  updated_at          DateTime?            @default(now()) @db.Timestamp(6)
  last_name           String?              @db.VarChar
  organization_id     Int?
  created_by          Int?
  updated_by          Int?
  projectPermissions  ProjectPermission[]
  ownedLibraries      library[]            @relation("LibraryOwner")
  createModule        module[]             @relation("userWhoCreated")
  updateModule        module[]             @relation("userWhoUpdated")
  createMolecule      molecule[]           @relation("userWhoCreated")
  updateMolecule      molecule[]           @relation("userWhoUpdated")
  createMoleculeCart  molecule_cart[]      @relation("userWhoCreated")
  updateMoleculeCart  molecule_cart[]      @relation("userWhoUpdated")
  molecule_favorites  molecule_favorites[]
  createMoleculeOrder molecule_order[]     @relation("userWhoCreated")
  updateMoleculeOrder molecule_order[]     @relation("userWhoUpdated")
  createOrganization  organization[]       @relation("userWhoCreated")
  orgAdmin            organization?        @relation("organizationAdmin")
  updateOrganization  organization[]       @relation("userWhoUpdated")
  ownedProjects       project[]            @relation("ProjectOwner")
  createRole          role[]               @relation("userWhoCreated")
  updateRole          role[]               @relation("userWhoUpdated")
  userWhoCreated      user?                @relation("userWhoCreated", fields: [created_by], references: [id])
  createUser          user[]               @relation("userWhoCreated")
  orgUser             organization?        @relation("organizationUser", fields: [organization_id], references: [id])
  userWhoUpdated      user?                @relation("userWhoUpdated", fields: [updated_by], references: [id])
  updateUser          user[]               @relation("userWhoUpdated")
  createProject       project[]            @relation("userWhoCreated")
  updateProject       project[]            @relation("userWhoUpdated")
  createLibrary       library[]            @relation("userWhoCreated")
  updateLibrary       library[]            @relation("userWhoUpdated")
  user_role           user_role[]
}

model user_role {
  id     Int  @id @default(autoincrement())
  userId Int
  roleId Int
  role   role @relation(fields: [roleId], references: [id])
  user   user @relation(fields: [userId], references: [id])
}

model role {
  id                            Int                             @id @default(autoincrement())
  type                          String
  name                          String
  status                        status_type
  priority                      Int
  created_at                    DateTime                        @default(now()) @db.Timestamp(6)
  updated_at                    DateTime?                       @default(now()) @db.Timestamp(6)
  created_by                    Int?
  definition                    String
  orgType                       organization_type?
  updated_by                    Int?
  module_action_role_permission module_action_role_permission[]
  userWhoCreated                user?                           @relation("userWhoCreated", fields: [created_by], references: [id])
  userWhoUpdated                user?                           @relation("userWhoUpdated", fields: [updated_by], references: [id])
  user_role                     user_role[]
}

model organization {
  id             Int                @id @default(autoincrement())
  name           String
  orgAdminId     Int                @unique
  status         status_type?
  created_at     DateTime           @default(now()) @db.Timestamp(6)
  updated_at     DateTime?          @default(now()) @db.Timestamp(6)
  metadata       Json?              @db.Json
  type           organization_type?
  created_by     Int
  updated_by     Int?
  molecule       molecule[]
  molecule_cart  molecule_cart[]
  molecule_order molecule_order[]
  org_module     org_module[]       @relation("organizationPurchasedModule")
  userWhoCreated user               @relation("userWhoCreated", fields: [created_by], references: [id])
  user           user               @relation("organizationAdmin", fields: [orgAdminId], references: [id])
  userWhoUpdated user?              @relation("userWhoUpdated", fields: [updated_by], references: [id])
  projects       project[]          @relation("OrganizationProjects")
  orgUser        user[]             @relation("organizationUser")
}

model module {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  created_at     DateTime        @default(now()) @db.Timestamp(6)
  created_by     Int
  userWhoCreated user            @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at     DateTime?       @default(now()) @db.Timestamp(6)
  updated_by     Int?
  userWhoUpdated user?           @relation("userWhoUpdated", fields: [updated_by], references: [id])
  module_action  module_action[]
  org_module     org_module[]
}

model molecule {
  id                   Int                  @id @default(autoincrement())
  source_molecule_name String
  library_id           Int
  library              library              @relation(fields: [library_id], references: [id])
  project_id           Int
  project              project              @relation(fields: [project_id], references: [id])
  organization_id      Int
  organization         organization         @relation(fields: [organization_id], references: [id])
  smiles_string        String
  inchi_key            String
  molecular_weight     Decimal
  finger_print         Bytes
  status               molecule_status
  is_added_to_cart     Boolean              @default(false)
  created_at           DateTime             @default(now()) @db.Timestamp(6)
  created_by           Int
  userWhoCreated       user                 @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at           DateTime?            @default(now()) @db.Timestamp(6)
  updated_by           Int?
  userWhoUpdated       user?                @relation("userWhoUpdated", fields: [updated_by], references: [id])
  molecule_cart        molecule_cart[]
  molecule_order       molecule_order[]
  molecule_favorites   molecule_favorites[]
}

model molecule_favorites {
  id          Int      @id @default(autoincrement())
  molecule_id Int
  user_id     Int
  molecule    molecule @relation(fields: [molecule_id], references: [id])
  user        user     @relation(fields: [user_id], references: [id])
}

model molecule_cart {
  id              Int          @id @default(autoincrement())
  molecule_id     Int
  library_id      Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_by      Int?
  organization_id Int
  project_id      Int
  userWhoCreated  user         @relation("userWhoCreated", fields: [created_by], references: [id])
  library         library      @relation(fields: [library_id], references: [id])
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  organization    organization @relation(fields: [organization_id], references: [id])
  project         project      @relation(fields: [project_id], references: [id])
  userWhoUpdated  user?        @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

model molecule_order {
  id              Int          @id @default(autoincrement())
  orderId         Int
  orderName       String
  molecule_id     Int
  molecule        molecule     @relation(fields: [molecule_id], references: [id])
  library_id      Int
  library         library      @relation(fields: [library_id], references: [id])
  batch_detail    Json
  organization_id Int
  organization    organization @relation(fields: [organization_id], references: [id])
  project_id      Int
  project         project      @relation(fields: [project_id], references: [id])
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  user         @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?    @default(now()) @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  user?        @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

model org_module {
  id              Int          @id @default(autoincrement())
  organization_id Int
  moduleId        Int
  module          module       @relation(fields: [moduleId], references: [id])
  organization    organization @relation("organizationPurchasedModule", fields: [organization_id], references: [id])
}

model module_action {
  id                            Int                             @id @default(autoincrement())
  name                          String
  type                          String
  moduleId                      Int
  route                         String
  module                        module                          @relation(fields: [moduleId], references: [id])
  module_action_role_permission module_action_role_permission[]
}

model module_action_role_permission {
  id            Int           @id @default(autoincrement())
  actionId      Int
  roleId        Int
  module_action module_action @relation(fields: [actionId], references: [id])
  role          role          @relation(fields: [roleId], references: [id])
}

model project {
  id              Int                 @id @default(autoincrement())
  name            String              @db.VarChar
  target          String?
  type            project_type
  description     String?
  organization_id Int
  ownerId         Int
  sharedUsers     ProjectPermission[] @relation("SharedProjectPermissions")
  libraries       library[]           @relation("ProjectLibraries")
  molecule        molecule[]
  molecule_cart   molecule_cart[]
  molecule_order  molecule_order[]
  organization    organization        @relation("OrganizationProjects", fields: [organization_id], references: [id])
  owner           user                @relation("ProjectOwner", fields: [ownerId], references: [id])
  created_at      DateTime            @default(now()) @db.Timestamp(6)
  created_by      Int
  userWhoCreated  user                @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at      DateTime?           @default(now()) @db.Timestamp(6)
  updated_by      Int?
  userWhoUpdated  user?               @relation("userWhoUpdated", fields: [updated_by], references: [id])
}

model library {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar
  description    String?
  target         String?
  project_id     Int
  ownerId        Int
  owner          user             @relation("LibraryOwner", fields: [ownerId], references: [id])
  project        project          @relation("ProjectLibraries", fields: [project_id], references: [id])
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  created_by     Int
  userWhoCreated user             @relation("userWhoCreated", fields: [created_by], references: [id])
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_by     Int?
  userWhoUpdated user?            @relation("userWhoUpdated", fields: [updated_by], references: [id])
  molecule       molecule[]
  moleculeCart   molecule_cart[]
  moleculeOrder  molecule_order[]
}

model ProjectPermission {
  id         Int        @id @default(autoincrement())
  userId     Int
  project_id Int
  role       permission
  first_name String?
  project    project    @relation("SharedProjectPermissions", fields: [project_id], references: [id])
  user       user       @relation(fields: [userId], references: [id])

  @@unique([userId, project_id])
}

model inventory {
  id                  Int                @id @default(autoincrement())
  version             Int
  smiles_string       String             @db.VarChar
  price_per_unit      Decimal?           @db.Decimal(10, 2)
  unit_size           Decimal?           @db.Decimal(10, 2)
  unit_of_measurement String?            @db.VarChar(50)
  stock_keeping_unit  String?            @db.VarChar(25)
  vendor              String?            @db.VarChar(25)
  in_stock            Boolean
  last_synced_at      DateTime           @default(now()) @db.Timestamptz(6)
  metadata_id         Int
  inventory_metadata  inventory_metadata @relation(fields: [metadata_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id, version], map: "con_uk_inventory_id_n_version")
  @@index([id], map: "ix_inventory_id")
}

model inventory_metadata {
  id             Int         @id @default(autoincrement())
  smiles_string  String      @unique(map: "con_uk_inventory_metadata_smiles_string") @db.VarChar
  cas_number     String?     @db.VarChar(100)
  link           String?
  source         String      @db.Char(3)
  last_synced_at DateTime    @default(now()) @db.Timestamptz(6)
  inventory      inventory[]

  @@index([id], map: "ix_inventory_metadata_id")
}

model lab_job_order {
  lab_job_order_id        Int       @id @default(autoincrement())
  pathway_id              Decimal   @db.Decimal(10, 0)
  pathway_instance_id     Int
  product_smiles_string   String
  product_molecule_weight Decimal?  @db.Decimal(10, 2)
  no_of_steps             Int?
  functional_bioassays    Json?
  reactions               Json?
  created_at              DateTime? @db.Timestamp(6)
  created_by              Int
  updated_at              DateTime? @db.Timestamp(6)
  updated_by              Int?
}

model pathway {
  id                  Int               @id @default(autoincrement())
  pathway_instance_id Int
  pathway_score       Decimal?          @db.Decimal
  molecule_id         String?           @db.VarChar
  description         String?
  selected            Boolean?
  created_at          DateTime?         @default(now()) @db.Timestamp(6)
  created_by          Int
  updated_at          DateTime?         @db.Timestamp(6)
  updated_by          Int?
  reaction_detail     reaction_detail[]

  @@index([id], map: "ix_pathway_id")
}

model reaction_compound {
  id                   Int             @id @default(autoincrement())
  reaction_id          Int
  smiles_string        String          @db.VarChar
  compound_id          String          @db.VarChar
  compound_type        String?         @db.VarChar
  compound_sequence_no Int?
  role                 String?         @db.VarChar
  stoichiometry        Float?
  source               String?         @db.VarChar
  inventory_id         Int?
  created_at           DateTime        @default(now()) @db.Timestamp(6)
  created_by           Int
  updated_at           DateTime?       @db.Timestamp(6)
  updated_by           Int?
  reaction_detail      reaction_detail @relation(fields: [reaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_reaction_compound_id")
}

model reaction_detail {
  id                                                                     Int                 @id @default(autoincrement())
  reaction_template                                                      String              @db.VarChar
  reaction_name                                                          String              @db.VarChar
  pathway_id                                                             Int
  pathway_instance_id                                                    Int
  reaction_sequence_no                                                   Int
  confidence                                                             Float?
  temperature                                                            String?             @db.VarChar
  solvent                                                                String?             @db.VarChar
  product_smiles_string                                                  String?
  product_type                                                           String?             @db.VarChar
  status                                                                 Int?
  created_at                                                             DateTime            @default(now()) @db.Timestamp(6)
  created_by                                                             Int?
  updated_at                                                             DateTime?           @db.Timestamp(6)
  updated_by                                                             Int?
  reaction_compound                                                      reaction_compound[]
  pathway                                                                pathway             @relation(fields: [pathway_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reaction_template_reaction_detail_reaction_templateToreaction_template reaction_template   @relation("reaction_detail_reaction_templateToreaction_template", fields: [reaction_template], references: [name], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_reaction_detail_id")
}

model reaction_template {
  id                                                                   Int               @id @default(autoincrement())
  name                                                                 String?           @unique(map: "ix_reaction_template_name") @db.VarChar
  reaction_detail_reaction_detail_reaction_templateToreaction_template reaction_detail[] @relation("reaction_detail_reaction_templateToreaction_template")

  @@index([id], map: "ix_reaction_template_id")
}

model reaction_template_master {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  type             String   @db.VarChar(100)
  version          Int?
  chemical_1       String?  @db.VarChar(50)
  chemical_2       String?  @db.VarChar(50)
  chemical_3       String?  @db.VarChar(50)
  chemical_4       String?  @db.VarChar(50)
  chemical_5       String?  @db.VarChar(50)
  chemical_6       String?  @db.VarChar(50)
  no_of_components Int?
  solvent          String?  @db.VarChar(100)
  temperature      String?  @db.VarChar(30)
  last_synced_at   DateTime @db.Timestamp(6)

  @@index([id], map: "ix_reaction_template_master_id")
}

enum status_type {
  Disabled @map("0")
  Enabled  @map("1")
}

enum project_type {
  Retrosynthesis @map("0")
  Optimization   @map("1")
  Combinatorial  @map("2")
}

enum permission {
  View  @map("0")
  Edit  @map("1")
  Admin @map("2")
}

enum organization_type {
  Internal @map("0")
  External @map("1")
}

enum molecule_status {
  New          @map("1")
  Ordered      @map("2")
  InRetroQueue @map("3")
  Ready        @map("4")
  FailedRetro  @map("5")
  InReview     @map("6")
  Validated    @map("7")
  Done         @map("8")
  Failed       @map("9")
}
