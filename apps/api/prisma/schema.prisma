generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                 @id @default(autoincrement())
  firstName          String?             @db.VarChar
  email              String?             @unique @db.VarChar
  password           String?             @db.VarChar
  status             status_type?
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @db.Timestamp(6)
  lastName           String?             @db.VarChar
  user_role          user_role[]
  organizationId     Int?
  orgUser            organization?       @relation("organizationUser", fields: [organizationId], references: [id])
  orgAdmin           organization?       @relation("organizationAdmin")
  ownedProjects      project[]           @relation("ProjectOwner") // Projects owned by the user
  updatedProjects    project[]           @relation("ProjectUpdater") // Projects updated by the user
  ownedLibraries     library[]           @relation("LibraryOwner") // Libraries owned by the user
  updatedLibraries   library[]           @relation("LibraryUpdater") // Libraries updated by the user
  projectPermissions ProjectPermission[] // Permissions for projects
  createRole         role[]              @relation("userWhoCreated")
  updateRole         role[]              @relation("userWhoUpdated")
}

model user_role {
  id     Int  @id @default(autoincrement())
  userId Int
  user   user @relation(fields: [userId], references: [id])
  roleId Int
  role   role @relation(fields: [roleId], references: [id])
}

model role {
  id                            Int                             @id @default(autoincrement())
  name                          String
  type                          String
  orgType                       organization_type?
  priority                      Int
  status                        status_type
  createdAt                     DateTime                        @default(now()) @db.Timestamp(6)
  createdBy                     Int?
  userWhoCreated                user?                           @relation("userWhoCreated", fields: [createdBy], references: [id])
  updatedAt                     DateTime?                       @default(now()) @db.Timestamp(6)
  updatedBy                     Int?
  userWhoUpdated                user?                           @relation("userWhoUpdated", fields: [updatedBy], references: [id])
  user_role                     user_role[]
  module_action_role_permission module_action_role_permission[]
  module_permission             module_permission[]
}

model organization {
  id         Int                @id @default(autoincrement())
  name       String
  orgAdminId Int                @unique
  user       user               @relation("organizationAdmin", fields: [orgAdminId], references: [id])
  status     status_type?
  type       organization_type?
  createdAt  DateTime           @default(now()) @db.Timestamp(6)
  updatedAt  DateTime           @default(now()) @db.Timestamp(6)
  metadata   Json?              @db.Json
  orgUser    user[]             @relation("organizationUser")
  projects   project[]          @relation("OrganizationProjects") // Multiple projects
}

model module {
  id                Int                 @id @default(autoincrement())
  name              String
  route             String
  status            status_type?
  module_action     module_action[]
  module_permission module_permission[]
}

model module_permission {
  id       Int    @id @default(autoincrement())
  moduleId Int
  module   module @relation(fields: [moduleId], references: [id])
  roleId   Int
  role     role   @relation(fields: [roleId], references: [id])
}

model module_action {
  id                            Int                             @id @default(autoincrement())
  name                          String
  type                          String
  moduleId                      Int
  module                        module                          @relation(fields: [moduleId], references: [id])
  module_action_role_permission module_action_role_permission[]
}

model module_action_role_permission {
  id            Int           @id @default(autoincrement())
  actionId      Int
  module_action module_action @relation(fields: [actionId], references: [id])
  roleId        Int
  role          role          @relation(fields: [roleId], references: [id])
}

model project {
  id             Int                 @id @default(autoincrement())
  name           String              @db.VarChar
  target         String?
  type           project_type
  description    String?
  organizationId Int
  organization   organization        @relation("OrganizationProjects", fields: [organizationId], references: [id]) // Organization of the project
  createdAt      DateTime            @default(now()) @db.Timestamp(6)
  updatedAt      DateTime            @default(now()) @db.Timestamp(6)
  ownerId        Int // Foreign key to the user who owns the project
  owner          user                @relation("ProjectOwner", fields: [ownerId], references: [id]) // User who owns the project
  updatedById    Int // Foreign key to the user who last updated the project
  updatedBy      user                @relation("ProjectUpdater", fields: [updatedById], references: [id]) // User who last updated the project
  sharedUsers    ProjectPermission[] @relation("SharedProjectPermissions") // Users with admin or editor access for the project
  libraries      library[]           @relation("ProjectLibraries") // Relationship to libraries
}

model library {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar
  description String?
  target      String?
  projectId   Int
  project     project   @relation("ProjectLibraries", fields: [projectId], references: [id])
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @db.Timestamp(6)
  ownerId     Int // Foreign key to the user who owns the project
  owner       user      @relation("LibraryOwner", fields: [ownerId], references: [id]) // User who owns the project
  updatedById Int? // Foreign key to the user who last updated the project
  updatedBy   user?     @relation("LibraryUpdater", fields: [updatedById], references: [id]) // User who last updated the project
}

enum status_type {
  Disabled @map("0")
  Enabled  @map("1")
}

enum project_type {
  Retrosynthesis @map("0")
  Optimization   @map("1")
  Combinatorial  @map("2")
}

enum permission {
  View  @map("0")
  Edit  @map("1")
  Admin @map("2")
}

model ProjectPermission {
  id        Int        @id @default(autoincrement())
  userId    Int // ID of the user
  projectId Int // ID of the project
  role      permission // Role or permission type (e.g., "admin", "editor")
  firstName String? // Optional field for user's first name

  user    user    @relation(fields: [userId], references: [id]) // Reference to the user
  project project @relation(fields: [projectId], references: [id], name: "SharedProjectPermissions") // Reference to the project with the same name as in Project

  @@unique([userId, projectId]) // Composite unique constraint
}

enum organization_type {
  Internal @map("0")
  External @map("1")
}
