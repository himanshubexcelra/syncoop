'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0c320a98.js');

function count(node) {
  var sum = 0,
      children = node.children,
      i = children && children.length;
  if (!i) sum = 1;
  else while (--i >= 0) sum += children[i].value;
  node.value = sum;
}

function node_count() {
  return this.eachAfter(count);
}

function node_each(callback, that) {
  let index = -1;
  for (const node of this) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

function node_eachBefore(callback, that) {
  var node = this, nodes = [node], children, i, index = -1;
  while (node = nodes.pop()) {
    callback.call(that, node, ++index, this);
    if (children = node.children) {
      for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
      }
    }
  }
  return this;
}

function node_eachAfter(callback, that) {
  var node = this, nodes = [node], next = [], children, i, n, index = -1;
  while (node = nodes.pop()) {
    next.push(node);
    if (children = node.children) {
      for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
      }
    }
  }
  while (node = next.pop()) {
    callback.call(that, node, ++index, this);
  }
  return this;
}

function node_find(callback, that) {
  let index = -1;
  for (const node of this) {
    if (callback.call(that, node, ++index, this)) {
      return node;
    }
  }
}

function node_sum(value) {
  return this.eachAfter(function(node) {
    var sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length;
    while (--i >= 0) sum += children[i].value;
    node.value = sum;
  });
}

function node_sort(compare) {
  return this.eachBefore(function(node) {
    if (node.children) {
      node.children.sort(compare);
    }
  });
}

function node_path(end) {
  var start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start];
  while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
  }
  var k = nodes.length;
  while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
  }
  return nodes;
}

function leastCommonAncestor(a, b) {
  if (a === b) return a;
  var aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null;
  a = aNodes.pop();
  b = bNodes.pop();
  while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
  }
  return c;
}

function node_ancestors() {
  var node = this, nodes = [node];
  while (node = node.parent) {
    nodes.push(node);
  }
  return nodes;
}

function node_descendants() {
  return Array.from(this);
}

function node_leaves() {
  var leaves = [];
  this.eachBefore(function(node) {
    if (!node.children) {
      leaves.push(node);
    }
  });
  return leaves;
}

function node_links() {
  var root = this, links = [];
  root.each(function(node) {
    if (node !== root) { // Don’t include the root’s parent, if any.
      links.push({source: node.parent, target: node});
    }
  });
  return links;
}

function* node_iterator() {
  var node = this, current, next = [node], children, i, n;
  do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
      yield node;
      if (children = node.children) {
        for (i = 0, n = children.length; i < n; ++i) {
          next.push(children[i]);
        }
      }
    }
  } while (next.length);
}

function hierarchy(data, children) {
  if (data instanceof Map) {
    data = [undefined, data];
    if (children === undefined) children = mapChildren;
  } else if (children === undefined) {
    children = objectChildren;
  }

  var root = new Node$1(data),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n;

  while (node = nodes.pop()) {
    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
      node.children = childs;
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = childs[i] = new Node$1(childs[i]));
        child.parent = node;
        child.depth = node.depth + 1;
      }
    }
  }

  return root.eachBefore(computeHeight);
}

function node_copy() {
  return hierarchy(this).eachBefore(copyData);
}

function objectChildren(d) {
  return d.children;
}

function mapChildren(d) {
  return Array.isArray(d) ? d[1] : null;
}

function copyData(node) {
  if (node.data.value !== undefined) node.value = node.data.value;
  node.data = node.data.data;
}

function computeHeight(node) {
  var height = 0;
  do node.height = height;
  while ((node = node.parent) && (node.height < ++height));
}

function Node$1(data) {
  this.data = data;
  this.depth =
  this.height = 0;
  this.parent = null;
}

Node$1.prototype = hierarchy.prototype = {
  constructor: Node$1,
  count: node_count,
  each: node_each,
  eachAfter: node_eachAfter,
  eachBefore: node_eachBefore,
  find: node_find,
  sum: node_sum,
  sort: node_sort,
  path: node_path,
  ancestors: node_ancestors,
  descendants: node_descendants,
  leaves: node_leaves,
  links: node_links,
  copy: node_copy,
  [Symbol.iterator]: node_iterator
};

function optional(f) {
  return f == null ? null : required(f);
}

function required(f) {
  if (typeof f !== "function") throw new Error;
  return f;
}

var preroot = {depth: -1},
    ambiguous = {},
    imputed = {};

function defaultId(d) {
  return d.id;
}

function defaultParentId(d) {
  return d.parentId;
}

function stratify() {
  var id = defaultId,
      parentId = defaultParentId,
      path;

  function stratify(data) {
    var nodes = Array.from(data),
        currentId = id,
        currentParentId = parentId,
        n,
        d,
        i,
        root,
        parent,
        node,
        nodeId,
        nodeKey,
        nodeByKey = new Map;

    if (path != null) {
      const I = nodes.map((d, i) => normalize$1(path(d, i, data)));
      const P = I.map(parentof);
      const S = new Set(I).add("");
      for (const i of P) {
        if (!S.has(i)) {
          S.add(i);
          I.push(i);
          P.push(parentof(i));
          nodes.push(imputed);
        }
      }
      currentId = (_, i) => I[i];
      currentParentId = (_, i) => P[i];
    }

    for (i = 0, n = nodes.length; i < n; ++i) {
      d = nodes[i], node = nodes[i] = new Node$1(d);
      if ((nodeId = currentId(d, i, data)) != null && (nodeId += "")) {
        nodeKey = node.id = nodeId;
        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
      }
      if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += "")) {
        node.parent = nodeId;
      }
    }

    for (i = 0; i < n; ++i) {
      node = nodes[i];
      if (nodeId = node.parent) {
        parent = nodeByKey.get(nodeId);
        if (!parent) throw new Error("missing: " + nodeId);
        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
        if (parent.children) parent.children.push(node);
        else parent.children = [node];
        node.parent = parent;
      } else {
        if (root) throw new Error("multiple roots");
        root = node;
      }
    }

    if (!root) throw new Error("no root");

    // When imputing internal nodes, only introduce roots if needed.
    // Then replace the imputed marker data with null.
    if (path != null) {
      while (root.data === imputed && root.children.length === 1) {
        root = root.children[0], --n;
      }
      for (let i = nodes.length - 1; i >= 0; --i) {
        node = nodes[i];
        if (node.data !== imputed) break;
        node.data = null;
      }
    }

    root.parent = preroot;
    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0) throw new Error("cycle");

    return root;
  }

  stratify.id = function(x) {
    return arguments.length ? (id = optional(x), stratify) : id;
  };

  stratify.parentId = function(x) {
    return arguments.length ? (parentId = optional(x), stratify) : parentId;
  };

  stratify.path = function(x) {
    return arguments.length ? (path = optional(x), stratify) : path;
  };

  return stratify;
}

// To normalize a path, we coerce to a string, strip the trailing slash if any
// (as long as the trailing slash is not immediately preceded by another slash),
// and add leading slash if missing.
function normalize$1(path) {
  path = `${path}`;
  let i = path.length;
  if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);
  return path[0] === "/" ? path : `/${path}`;
}

// Walk backwards to find the first slash that is not the leading slash, e.g.:
// "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
// because the id of the root must be a truthy value.)
function parentof(path) {
  let i = path.length;
  if (i < 2) return "";
  while (--i > 1) if (slash(path, i)) break;
  return path.slice(0, i);
}

// Slashes can be escaped; to determine whether a slash is a path delimiter, we
// count the number of preceding backslashes escaping the forward slash: an odd
// number indicates an escaped forward slash.
function slash(path, i) {
  if (path[i] === "/") {
    let k = 0;
    while (i > 0 && path[--i] === "\\") ++k;
    if ((k & 1) === 0) return true;
  }
  return false;
}

function defaultSeparation(a, b) {
  return a.parent === b.parent ? 1 : 2;
}

// function radialSeparation(a, b) {
//   return (a.parent === b.parent ? 1 : 2) / a.depth;
// }

// This function is used to traverse the left contour of a subtree (or
// subforest). It returns the successor of v on this contour. This successor is
// either given by the leftmost child of v or by the thread of v. The function
// returns null if and only if v is on the highest level of its subtree.
function nextLeft(v) {
  var children = v.children;
  return children ? children[0] : v.t;
}

// This function works analogously to nextLeft.
function nextRight(v) {
  var children = v.children;
  return children ? children[children.length - 1] : v.t;
}

// Shifts the current subtree rooted at w+. This is done by increasing
// prelim(w+) and mod(w+) by shift.
function moveSubtree(wm, wp, shift) {
  var change = shift / (wp.i - wm.i);
  wp.c -= change;
  wp.s += shift;
  wm.c += change;
  wp.z += shift;
  wp.m += shift;
}

// All other shifts, applied to the smaller subtrees between w- and w+, are
// performed by this function. To prepare the shifts, we have to adjust
// change(w+), shift(w+), and change(w-).
function executeShifts(v) {
  var shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w;
  while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
  }
}

// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
// returns the specified (default) ancestor.
function nextAncestor(vim, v, ancestor) {
  return vim.a.parent === v.parent ? vim.a : ancestor;
}

function TreeNode(node, i) {
  this._ = node;
  this.parent = null;
  this.children = null;
  this.A = null; // default ancestor
  this.a = this; // ancestor
  this.z = 0; // prelim
  this.m = 0; // mod
  this.c = 0; // change
  this.s = 0; // shift
  this.t = null; // thread
  this.i = i; // number
}

TreeNode.prototype = Object.create(Node$1.prototype);

function treeRoot(root) {
  var tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n;

  while (node = nodes.pop()) {
    if (children = node._.children) {
      node.children = new Array(n = children.length);
      for (i = n - 1; i >= 0; --i) {
        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
        child.parent = node;
      }
    }
  }

  (tree.parent = new TreeNode(null, 0)).children = [tree];
  return tree;
}

// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
function tree() {
  var separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = null;

  function tree(root) {
    var t = treeRoot(root);

    // Compute the layout using Buchheim et al.’s algorithm.
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);

    // If a fixed node size is specified, scale x and y.
    if (nodeSize) root.eachBefore(sizeNode);

    // If a fixed tree size is specified, scale x and y based on the extent.
    // Compute the left-most, right-most, and depth-most nodes for extents.
    else {
      var left = root,
          right = root,
          bottom = root;
      root.eachBefore(function(node) {
        if (node.x < left.x) left = node;
        if (node.x > right.x) right = node;
        if (node.depth > bottom.depth) bottom = node;
      });
      var s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1);
      root.eachBefore(function(node) {
        node.x = (node.x + tx) * kx;
        node.y = node.depth * ky;
      });
    }

    return root;
  }

  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
  // applied recursively to the children of v, as well as the function
  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
  // node v is placed to the midpoint of its outermost children.
  function firstWalk(v) {
    var children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null;
    if (children) {
      executeShifts(v);
      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
      if (w) {
        v.z = w.z + separation(v._, w._);
        v.m = v.z - midpoint;
      } else {
        v.z = midpoint;
      }
    } else if (w) {
      v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
  }

  // Computes all real x-coordinates by summing up the modifiers recursively.
  function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
  }

  // The core of the algorithm. Here, a new subtree is combined with the
  // previous subtrees. Threads are used to traverse the inside and outside
  // contours of the left and right subtree up to the highest common level. The
  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
  // superscript o means outside and i means inside, the subscript - means left
  // subtree and + means right subtree. For summing up the modifiers along the
  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
  // nodes of the inside contours conflict, we compute the left one of the
  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
  // Finally, we add a new thread (if necessary).
  function apportion(v, w, ancestor) {
    if (w) {
      var vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift;
      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
        vom = nextLeft(vom);
        vop = nextRight(vop);
        vop.a = v;
        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
        if (shift > 0) {
          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
          sip += shift;
          sop += shift;
        }
        sim += vim.m;
        sip += vip.m;
        som += vom.m;
        sop += vop.m;
      }
      if (vim && !nextRight(vop)) {
        vop.t = vim;
        vop.m += sim - sop;
      }
      if (vip && !nextLeft(vom)) {
        vom.t = vip;
        vom.m += sip - som;
        ancestor = v;
      }
    }
    return ancestor;
  }

  function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
  }

  tree.separation = function(x) {
    return arguments.length ? (separation = x, tree) : separation;
  };

  tree.size = function(x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
  };

  tree.nodeSize = function(x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
  };

  return tree;
}

/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION = '156';

const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
const CullFaceNone = 0;
const CullFaceBack = 1;
const CullFaceFront = 2;
const PCFShadowMap = 1;
const PCFSoftShadowMap = 2;
const VSMShadowMap = 3;
const FrontSide = 0;
const BackSide = 1;
const DoubleSide = 2;
const NoBlending = 0;
const NormalBlending = 1;
const AdditiveBlending = 2;
const SubtractiveBlending = 3;
const MultiplyBlending = 4;
const CustomBlending = 5;
const AddEquation = 100;
const SubtractEquation = 101;
const ReverseSubtractEquation = 102;
const MinEquation = 103;
const MaxEquation = 104;
const ZeroFactor = 200;
const OneFactor = 201;
const SrcColorFactor = 202;
const OneMinusSrcColorFactor = 203;
const SrcAlphaFactor = 204;
const OneMinusSrcAlphaFactor = 205;
const DstAlphaFactor = 206;
const OneMinusDstAlphaFactor = 207;
const DstColorFactor = 208;
const OneMinusDstColorFactor = 209;
const SrcAlphaSaturateFactor = 210;
const NeverDepth = 0;
const AlwaysDepth = 1;
const LessDepth = 2;
const LessEqualDepth = 3;
const EqualDepth = 4;
const GreaterEqualDepth = 5;
const GreaterDepth = 6;
const NotEqualDepth = 7;
const MultiplyOperation = 0;
const MixOperation = 1;
const AddOperation = 2;
const NoToneMapping = 0;
const LinearToneMapping = 1;
const ReinhardToneMapping = 2;
const CineonToneMapping = 3;
const ACESFilmicToneMapping = 4;
const CustomToneMapping = 5;

const UVMapping = 300;
const CubeReflectionMapping = 301;
const CubeRefractionMapping = 302;
const EquirectangularReflectionMapping = 303;
const EquirectangularRefractionMapping = 304;
const CubeUVReflectionMapping = 306;
const RepeatWrapping = 1000;
const ClampToEdgeWrapping = 1001;
const MirroredRepeatWrapping = 1002;
const NearestFilter = 1003;
const NearestMipmapNearestFilter = 1004;
const NearestMipmapLinearFilter = 1005;
const LinearFilter = 1006;
const LinearMipmapNearestFilter = 1007;
const LinearMipmapLinearFilter = 1008;
const UnsignedByteType = 1009;
const ByteType = 1010;
const ShortType = 1011;
const UnsignedShortType = 1012;
const IntType = 1013;
const UnsignedIntType = 1014;
const FloatType = 1015;
const HalfFloatType = 1016;
const UnsignedShort4444Type = 1017;
const UnsignedShort5551Type = 1018;
const UnsignedInt248Type = 1020;
const AlphaFormat = 1021;
const RGBAFormat = 1023;
const LuminanceFormat = 1024;
const LuminanceAlphaFormat = 1025;
const DepthFormat = 1026;
const DepthStencilFormat = 1027;
const RedFormat = 1028;
const RedIntegerFormat = 1029;
const RGFormat = 1030;
const RGIntegerFormat = 1031;
const RGBAIntegerFormat = 1033;

const RGB_S3TC_DXT1_Format = 33776;
const RGBA_S3TC_DXT1_Format = 33777;
const RGBA_S3TC_DXT3_Format = 33778;
const RGBA_S3TC_DXT5_Format = 33779;
const RGB_PVRTC_4BPPV1_Format = 35840;
const RGB_PVRTC_2BPPV1_Format = 35841;
const RGBA_PVRTC_4BPPV1_Format = 35842;
const RGBA_PVRTC_2BPPV1_Format = 35843;
const RGB_ETC1_Format = 36196;
const RGB_ETC2_Format = 37492;
const RGBA_ETC2_EAC_Format = 37496;
const RGBA_ASTC_4x4_Format = 37808;
const RGBA_ASTC_5x4_Format = 37809;
const RGBA_ASTC_5x5_Format = 37810;
const RGBA_ASTC_6x5_Format = 37811;
const RGBA_ASTC_6x6_Format = 37812;
const RGBA_ASTC_8x5_Format = 37813;
const RGBA_ASTC_8x6_Format = 37814;
const RGBA_ASTC_8x8_Format = 37815;
const RGBA_ASTC_10x5_Format = 37816;
const RGBA_ASTC_10x6_Format = 37817;
const RGBA_ASTC_10x8_Format = 37818;
const RGBA_ASTC_10x10_Format = 37819;
const RGBA_ASTC_12x10_Format = 37820;
const RGBA_ASTC_12x12_Format = 37821;
const RGBA_BPTC_Format = 36492;
const RGB_BPTC_SIGNED_Format = 36494;
const RGB_BPTC_UNSIGNED_Format = 36495;
const RED_RGTC1_Format = 36283;
const SIGNED_RED_RGTC1_Format = 36284;
const RED_GREEN_RGTC2_Format = 36285;
const SIGNED_RED_GREEN_RGTC2_Format = 36286;
/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */
const LinearEncoding = 3000;
/** @deprecated Use SRGBColorSpace in three.js r152+. */
const sRGBEncoding = 3001;
const BasicDepthPacking = 3200;
const RGBADepthPacking = 3201;
const TangentSpaceNormalMap = 0;
const ObjectSpaceNormalMap = 1;

// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
const NoColorSpace = '';
const SRGBColorSpace = 'srgb';
const LinearSRGBColorSpace = 'srgb-linear';
const DisplayP3ColorSpace = 'display-p3';
const KeepStencilOp = 7680;
const AlwaysStencilFunc = 519;

const NeverCompare = 512;
const LessCompare = 513;
const EqualCompare = 514;
const LessEqualCompare = 515;
const GreaterCompare = 516;
const NotEqualCompare = 517;
const GreaterEqualCompare = 518;
const AlwaysCompare = 519;

const StaticDrawUsage = 35044;
const GLSL3 = '300 es';

const _SRGBAFormat = 1035; // fallback for WebGL 1

const WebGLCoordinateSystem = 2000;
const WebGPUCoordinateSystem = 2001;

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

class EventDispatcher {

	addEventListener( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		const listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	}

	hasEventListener( type, listener ) {

		if ( this._listeners === undefined ) return false;

		const listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	}

	removeEventListener( type, listener ) {

		if ( this._listeners === undefined ) return;

		const listeners = this._listeners;
		const listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			const index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	}

	dispatchEvent( event ) {

		if ( this._listeners === undefined ) return;

		const listeners = this._listeners;
		const listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			// Make a copy, in case listeners are removed while iterating.
			const array = listenerArray.slice( 0 );

			for ( let i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

			event.target = null;

		}

	}

}

const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

let _seed = 1234567;


const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s;

	// Mulberry32 generator

	let t = _seed += 0x6D2B79F5;

	t = Math.imul( t ^ t >>> 15, t | 1 );

	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

function denormalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return value / 4294967295.0;

		case Uint16Array:

			return value / 65535.0;

		case Uint8Array:

			return value / 255.0;

		case Int32Array:

			return Math.max( value / 2147483647.0, - 1.0 );

		case Int16Array:

			return Math.max( value / 32767.0, - 1.0 );

		case Int8Array:

			return Math.max( value / 127.0, - 1.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

function normalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return Math.round( value * 4294967295.0 );

		case Uint16Array:

			return Math.round( value * 65535.0 );

		case Uint8Array:

			return Math.round( value * 255.0 );

		case Int32Array:

			return Math.round( value * 2147483647.0 );

		case Int16Array:

			return Math.round( value * 32767.0 );

		case Int8Array:

			return Math.round( value * 127.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

const MathUtils = {
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
	normalize: normalize,
	denormalize: denormalize
};

class Vector2 {

	constructor( x = 0, y = 0 ) {

		Vector2.prototype.isVector2 = true;

		this.x = x;
		this.y = y;

	}

	get width() {

		return this.x;

	}

	set width( value ) {

		this.x = value;

	}

	get height() {

		return this.y;

	}

	set height( value ) {

		this.y = value;

	}

	set( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;

		return this;

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y;

	}

	cross( v ) {

		return this.x * v.y - this.y * v.x;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	angle() {

		// computes the angle in radians with respect to the positive x-axis

		const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

		return angle;

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );

		return this;

	}

	rotateAround( center, angle ) {

		const c = Math.cos( angle ), s = Math.sin( angle );

		const x = this.x - center.x;
		const y = this.y - center.y;

		this.x = x * c - y * s + center.x;
		this.y = x * s + y * c + center.y;

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;

	}

}

class Matrix3 {

	constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		Matrix3.prototype.isMatrix3 = true;

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( n11 !== undefined ) {

			this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

		}

	}

	set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrix3Column( this, 0 );
		yAxis.setFromMatrix3Column( this, 1 );
		zAxis.setFromMatrix3Column( this, 2 );

		return this;

	}

	setFromMatrix4( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[ 8 ],
			me[ 1 ], me[ 5 ], me[ 9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	}

	invert() {

		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
			n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
			n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	}

	transpose() {

		let tmp;
		const m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	}

	getNormalMatrix( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).invert().transpose();

	}

	transposeIntoArray( r ) {

		const m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	}

	setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

		const c = Math.cos( rotation );
		const s = Math.sin( rotation );

		this.set(
			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
			0, 0, 1
		);

		return this;

	}

	//

	scale( sx, sy ) {

		this.premultiply( _m3.makeScale( sx, sy ) );

		return this;

	}

	rotate( theta ) {

		this.premultiply( _m3.makeRotation( - theta ) );

		return this;

	}

	translate( tx, ty ) {

		this.premultiply( _m3.makeTranslation( tx, ty ) );

		return this;

	}

	// for 2D Transforms

	makeTranslation( x, y ) {

		if ( x.isVector2 ) {

			this.set(

				1, 0, x.x,
				0, 1, x.y,
				0, 0, 1

			);

		} else {

			this.set(

				1, 0, x,
				0, 1, y,
				0, 0, 1

			);

		}

		return this;

	}

	makeRotation( theta ) {

		// counterclockwise

		const c = Math.cos( theta );
		const s = Math.sin( theta );

		this.set(

			c, - s, 0,
			s, c, 0,
			0, 0, 1

		);

		return this;

	}

	makeScale( x, y ) {

		this.set(

			x, 0, 0,
			0, y, 0,
			0, 0, 1

		);

		return this;

	}

	//

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

	clone() {

		return new this.constructor().fromArray( this.elements );

	}

}

const _m3 = /*@__PURE__*/ new Matrix3();

function arrayNeedsUint32( array ) {

	// assumes larger values usually on last

	for ( let i = array.length - 1; i >= 0; -- i ) {

		if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

	}

	return false;

}

function createElementNS( name ) {

	return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

}

function createCanvasElement() {

	const canvas = createElementNS( 'canvas' );
	canvas.style.display = 'block';
	return canvas;

}

const _cache = {};

function warnOnce( message ) {

	if ( message in _cache ) return;

	_cache[ message ] = true;

	console.warn( message );

}

function SRGBToLinear( c ) {

	return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

}

function LinearToSRGB( c ) {

	return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

}

/**
 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
 * or clipping. Based on W3C specifications for sRGB and Display P3,
 * and ICC specifications for the D50 connection space. Values in/out
 * are _linear_ sRGB and _linear_ Display P3.
 *
 * Note that both sRGB and Display P3 use the sRGB transfer functions.
 *
 * Reference:
 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
 */

const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().fromArray( [
	0.8224621, 0.0331941, 0.0170827,
	0.1775380, 0.9668058, 0.0723974,
	- 0.0000001, 0.0000001, 0.9105199
] );

const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().fromArray( [
	1.2249401, - 0.0420569, - 0.0196376,
	- 0.2249404, 1.0420571, - 0.0786361,
	0.0000001, 0.0000000, 1.0982735
] );

function DisplayP3ToLinearSRGB( color ) {

	// Display P3 uses the sRGB transfer functions
	return color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB );

}

function LinearSRGBToDisplayP3( color ) {

	// Display P3 uses the sRGB transfer functions
	return color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB();

}

// Conversions from <source> to Linear-sRGB reference space.
const TO_LINEAR = {
	[ LinearSRGBColorSpace ]: ( color ) => color,
	[ SRGBColorSpace ]: ( color ) => color.convertSRGBToLinear(),
	[ DisplayP3ColorSpace ]: DisplayP3ToLinearSRGB,
};

// Conversions to <target> from Linear-sRGB reference space.
const FROM_LINEAR = {
	[ LinearSRGBColorSpace ]: ( color ) => color,
	[ SRGBColorSpace ]: ( color ) => color.convertLinearToSRGB(),
	[ DisplayP3ColorSpace ]: LinearSRGBToDisplayP3,
};

const ColorManagement = {

	enabled: true,

	get legacyMode() {

		console.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );

		return ! this.enabled;

	},

	set legacyMode( legacyMode ) {

		console.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );

		this.enabled = ! legacyMode;

	},

	get workingColorSpace() {

		return LinearSRGBColorSpace;

	},

	set workingColorSpace( colorSpace ) {

		console.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );

	},

	convert: function ( color, sourceColorSpace, targetColorSpace ) {

		if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

			return color;

		}

		const sourceToLinear = TO_LINEAR[ sourceColorSpace ];
		const targetFromLinear = FROM_LINEAR[ targetColorSpace ];

		if ( sourceToLinear === undefined || targetFromLinear === undefined ) {

			throw new Error( `Unsupported color space conversion, "${ sourceColorSpace }" to "${ targetColorSpace }".` );

		}

		return targetFromLinear( sourceToLinear( color ) );

	},

	fromWorkingColorSpace: function ( color, targetColorSpace ) {

		return this.convert( color, this.workingColorSpace, targetColorSpace );

	},

	toWorkingColorSpace: function ( color, sourceColorSpace ) {

		return this.convert( color, sourceColorSpace, this.workingColorSpace );

	},

};

let _canvas;

class ImageUtils {

	static getDataURL( image ) {

		if ( /^data:/i.test( image.src ) ) {

			return image.src;

		}

		if ( typeof HTMLCanvasElement === 'undefined' ) {

			return image.src;

		}

		let canvas;

		if ( image instanceof HTMLCanvasElement ) {

			canvas = image;

		} else {

			if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

			_canvas.width = image.width;
			_canvas.height = image.height;

			const context = _canvas.getContext( '2d' );

			if ( image instanceof ImageData ) {

				context.putImageData( image, 0, 0 );

			} else {

				context.drawImage( image, 0, 0, image.width, image.height );

			}

			canvas = _canvas;

		}

		if ( canvas.width > 2048 || canvas.height > 2048 ) {

			console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

			return canvas.toDataURL( 'image/jpeg', 0.6 );

		} else {

			return canvas.toDataURL( 'image/png' );

		}

	}

	static sRGBToLinear( image ) {

		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

			const canvas = createElementNS( 'canvas' );

			canvas.width = image.width;
			canvas.height = image.height;

			const context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height );

			const imageData = context.getImageData( 0, 0, image.width, image.height );
			const data = imageData.data;

			for ( let i = 0; i < data.length; i ++ ) {

				data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

			}

			context.putImageData( imageData, 0, 0 );

			return canvas;

		} else if ( image.data ) {

			const data = image.data.slice( 0 );

			for ( let i = 0; i < data.length; i ++ ) {

				if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

					data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

				} else {

					// assuming float

					data[ i ] = SRGBToLinear( data[ i ] );

				}

			}

			return {
				data: data,
				width: image.width,
				height: image.height
			};

		} else {

			console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
			return image;

		}

	}

}

let sourceId = 0;

class Source {

	constructor( data = null ) {

		this.isSource = true;

		Object.defineProperty( this, 'id', { value: sourceId ++ } );

		this.uuid = generateUUID();

		this.data = data;

		this.version = 0;

	}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	toJSON( meta ) {

		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

			return meta.images[ this.uuid ];

		}

		const output = {
			uuid: this.uuid,
			url: ''
		};

		const data = this.data;

		if ( data !== null ) {

			let url;

			if ( Array.isArray( data ) ) {

				// cube texture

				url = [];

				for ( let i = 0, l = data.length; i < l; i ++ ) {

					if ( data[ i ].isDataTexture ) {

						url.push( serializeImage( data[ i ].image ) );

					} else {

						url.push( serializeImage( data[ i ] ) );

					}

				}

			} else {

				// texture

				url = serializeImage( data );

			}

			output.url = url;

		}

		if ( ! isRootObject ) {

			meta.images[ this.uuid ] = output;

		}

		return output;

	}

}

function serializeImage( image ) {

	if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
		( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
		( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

		// default images

		return ImageUtils.getDataURL( image );

	} else {

		if ( image.data ) {

			// images of DataTexture

			return {
				data: Array.from( image.data ),
				width: image.width,
				height: image.height,
				type: image.data.constructor.name
			};

		} else {

			console.warn( 'THREE.Texture: Unable to serialize Texture.' );
			return {};

		}

	}

}

let _textureId = 0;

class Texture extends EventDispatcher {

	constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {

		super();

		this.isTexture = true;

		Object.defineProperty( this, 'id', { value: _textureId ++ } );

		this.uuid = generateUUID();

		this.name = '';

		this.source = new Source( image );
		this.mipmaps = [];

		this.mapping = mapping;
		this.channel = 0;

		this.wrapS = wrapS;
		this.wrapT = wrapT;

		this.magFilter = magFilter;
		this.minFilter = minFilter;

		this.anisotropy = anisotropy;

		this.format = format;
		this.internalFormat = null;
		this.type = type;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		if ( typeof colorSpace === 'string' ) {

			this.colorSpace = colorSpace;

		} else { // @deprecated, r152

			warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
			this.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

		}


		this.userData = {};

		this.version = 0;
		this.onUpdate = null;

		this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
		this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

	}

	get image() {

		return this.source.data;

	}

	set image( value = null ) {

		this.source.data = value;

	}

	updateMatrix() {

		this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.name = source.name;

		this.source = source.source;
		this.mipmaps = source.mipmaps.slice( 0 );

		this.mapping = source.mapping;
		this.channel = source.channel;

		this.wrapS = source.wrapS;
		this.wrapT = source.wrapT;

		this.magFilter = source.magFilter;
		this.minFilter = source.minFilter;

		this.anisotropy = source.anisotropy;

		this.format = source.format;
		this.internalFormat = source.internalFormat;
		this.type = source.type;

		this.offset.copy( source.offset );
		this.repeat.copy( source.repeat );
		this.center.copy( source.center );
		this.rotation = source.rotation;

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrix.copy( source.matrix );

		this.generateMipmaps = source.generateMipmaps;
		this.premultiplyAlpha = source.premultiplyAlpha;
		this.flipY = source.flipY;
		this.unpackAlignment = source.unpackAlignment;
		this.colorSpace = source.colorSpace;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		this.needsUpdate = true;

		return this;

	}

	toJSON( meta ) {

		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

			return meta.textures[ this.uuid ];

		}

		const output = {

			metadata: {
				version: 4.6,
				type: 'Texture',
				generator: 'Texture.toJSON'
			},

			uuid: this.uuid,
			name: this.name,

			image: this.source.toJSON( meta ).uuid,

			mapping: this.mapping,
			channel: this.channel,

			repeat: [ this.repeat.x, this.repeat.y ],
			offset: [ this.offset.x, this.offset.y ],
			center: [ this.center.x, this.center.y ],
			rotation: this.rotation,

			wrap: [ this.wrapS, this.wrapT ],

			format: this.format,
			internalFormat: this.internalFormat,
			type: this.type,
			colorSpace: this.colorSpace,

			minFilter: this.minFilter,
			magFilter: this.magFilter,
			anisotropy: this.anisotropy,

			flipY: this.flipY,

			generateMipmaps: this.generateMipmaps,
			premultiplyAlpha: this.premultiplyAlpha,
			unpackAlignment: this.unpackAlignment

		};

		if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

		if ( ! isRootObject ) {

			meta.textures[ this.uuid ] = output;

		}

		return output;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

	transformUv( uv ) {

		if ( this.mapping !== UVMapping ) return uv;

		uv.applyMatrix3( this.matrix );

		if ( uv.x < 0 || uv.x > 1 ) {

			switch ( this.wrapS ) {

				case RepeatWrapping:

					uv.x = uv.x - Math.floor( uv.x );
					break;

				case ClampToEdgeWrapping:

					uv.x = uv.x < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

						uv.x = Math.ceil( uv.x ) - uv.x;

					} else {

						uv.x = uv.x - Math.floor( uv.x );

					}

					break;

			}

		}

		if ( uv.y < 0 || uv.y > 1 ) {

			switch ( this.wrapT ) {

				case RepeatWrapping:

					uv.y = uv.y - Math.floor( uv.y );
					break;

				case ClampToEdgeWrapping:

					uv.y = uv.y < 0 ? 0 : 1;
					break;

				case MirroredRepeatWrapping:

					if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

						uv.y = Math.ceil( uv.y ) - uv.y;

					} else {

						uv.y = uv.y - Math.floor( uv.y );

					}

					break;

			}

		}

		if ( this.flipY ) {

			uv.y = 1 - uv.y;

		}

		return uv;

	}

	set needsUpdate( value ) {

		if ( value === true ) {

			this.version ++;
			this.source.needsUpdate = true;

		}

	}

	get encoding() { // @deprecated, r152

		warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
		return this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;

	}

	set encoding( encoding ) { // @deprecated, r152

		warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
		this.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

	}

}

Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.DEFAULT_ANISOTROPY = 1;

class Vector4 {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		Vector4.prototype.isVector4 = true;

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

	}

	get width() {

		return this.z;

	}

	set width( value ) {

		this.z = value;

	}

	get height() {

		return this.w;

	}

	set height( value ) {

		this.w = value;

	}

	set( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;
		this.w = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setW( w ) {

		this.w = w;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z, this.w );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;
		this.w += v.w * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;
		this.w -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;
		this.w *= v.w;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z, w = this.w;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	setAxisAngleFromQuaternion( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		const s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			this.x = 1;
			this.y = 0;
			this.z = 0;

		} else {

			this.x = q.x / s;
			this.y = q.y / s;
			this.z = q.z / s;

		}

		return this;

	}

	setAxisAngleFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		let angle, x, y, z; // variables for result
		const epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
		     ( Math.abs( m13 - m31 ) < epsilon ) &&
		     ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
			     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
			     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
			     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			const xx = ( m11 + 1 ) / 2;
			const yy = ( m22 + 1 ) / 2;
			const zz = ( m33 + 1 ) / 2;
			const xy = ( m12 + m21 ) / 4;
			const xz = ( m13 + m31 ) / 4;
			const yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) {

				// m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) {

				// m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else {

				// m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			( m13 - m31 ) * ( m13 - m31 ) +
			( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );
		this.w = Math.min( this.w, v.w );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );
		this.w = Math.max( this.w, v.w );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );
		this.w = Math.max( min.w, Math.min( max.w, this.w ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
		this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );
		this.w = Math.floor( this.w );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );
		this.w = Math.ceil( this.w );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );
		this.w = Math.round( this.w );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );
		this.z = Math.trunc( this.z );
		this.w = Math.trunc( this.w );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	}

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;
		this.w = v1.w + ( v2.w - v1.w ) * alpha;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );
		this.w = attribute.getW( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();
		this.w = Math.random();

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;
		yield this.w;

	}

}

/*
 In options, we can specify:
 * Texture parameters for an auto-generated target texture
 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
*/
class RenderTarget extends EventDispatcher {

	constructor( width = 1, height = 1, options = {} ) {

		super();

		this.isRenderTarget = true;

		this.width = width;
		this.height = height;
		this.depth = 1;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		const image = { width: width, height: height, depth: 1 };

		if ( options.encoding !== undefined ) {

			// @deprecated, r152
			warnOnce( 'THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.' );
			options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

		}

		this.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );
		this.texture.isRenderTargetTexture = true;

		this.texture.flipY = false;
		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;

		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

		this.samples = options.samples !== undefined ? options.samples : 0;

	}

	setSize( width, height, depth = 1 ) {

		if ( this.width !== width || this.height !== height || this.depth !== depth ) {

			this.width = width;
			this.height = height;
			this.depth = depth;

			this.texture.image.width = width;
			this.texture.image.height = height;
			this.texture.image.depth = depth;

			this.dispose();

		}

		this.viewport.set( 0, 0, width, height );
		this.scissor.set( 0, 0, width, height );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.width = source.width;
		this.height = source.height;
		this.depth = source.depth;

		this.scissor.copy( source.scissor );
		this.scissorTest = source.scissorTest;

		this.viewport.copy( source.viewport );

		this.texture = source.texture.clone();
		this.texture.isRenderTargetTexture = true;

		// ensure image object is not shared, see #20328

		const image = Object.assign( {}, source.texture.image );
		this.texture.source = new Source( image );

		this.depthBuffer = source.depthBuffer;
		this.stencilBuffer = source.stencilBuffer;

		if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

		this.samples = source.samples;

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

}

class WebGLRenderTarget extends RenderTarget {

	constructor( width = 1, height = 1, options = {} ) {

		super( width, height, options );

		this.isWebGLRenderTarget = true;

	}

}

class DataArrayTexture extends Texture {

	constructor( data = null, width = 1, height = 1, depth = 1 ) {

		super( null );

		this.isDataArrayTexture = true;

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

}

class Data3DTexture extends Texture {

	constructor( data = null, width = 1, height = 1, depth = 1 ) {

		// We're going to add .setXXX() methods for setting properties later.
		// Users can still set in DataTexture3D directly.
		//
		//	const texture = new THREE.DataTexture3D( data, width, height, depth );
		// 	texture.anisotropy = 16;
		//
		// See #14839

		super( null );

		this.isData3DTexture = true;

		this.image = { data, width, height, depth };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

	}

}

class Quaternion {

	constructor( x = 0, y = 0, z = 0, w = 1 ) {

		this.isQuaternion = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

	}

	static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		let x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( t === 0 ) {

			dst[ dstOffset + 0 ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;
			return;

		}

		if ( t === 1 ) {

			dst[ dstOffset + 0 ] = x1;
			dst[ dstOffset + 1 ] = y1;
			dst[ dstOffset + 2 ] = z1;
			dst[ dstOffset + 3 ] = w1;
			return;

		}

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			let s = 1 - t;
			const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				const sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			const tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

	static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

		const x0 = src0[ srcOffset0 ];
		const y0 = src0[ srcOffset0 + 1 ];
		const z0 = src0[ srcOffset0 + 2 ];
		const w0 = src0[ srcOffset0 + 3 ];

		const x1 = src1[ srcOffset1 ];
		const y1 = src1[ srcOffset1 + 1 ];
		const z1 = src1[ srcOffset1 + 2 ];
		const w1 = src1[ srcOffset1 + 3 ];

		dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
		dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
		dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
		dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

		return dst;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get w() {

		return this._w;

	}

	set w( value ) {

		this._w = value;
		this._onChangeCallback();

	}

	set( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._w );

	}

	copy( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	}

	setFromEuler( euler, update ) {

		const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		const cos = Math.cos;
		const sin = Math.sin;

		const c1 = cos( x / 2 );
		const c2 = cos( y / 2 );
		const c3 = cos( z / 2 );

		const s1 = sin( x / 2 );
		const s2 = sin( y / 2 );
		const s3 = sin( z / 2 );

		switch ( order ) {

			case 'XYZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'YXZ':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'ZXY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'ZYX':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			case 'YZX':
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
				break;

			case 'XZY':
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
				break;

			default:
				console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	}

	setFromAxisAngle( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		const halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33;

		if ( trace > 0 ) {

			const s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	}

	setFromUnitVectors( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		let r = vFrom.dot( vTo ) + 1;

		if ( r < Number.EPSILON ) {

			// vFrom and vTo point in opposite directions

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	}

	angleTo( q ) {

		return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );

	}

	rotateTowards( q, step ) {

		const angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		const t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	}

	identity() {

		return this.set( 0, 0, 0, 1 );

	}

	invert() {

		// quaternion is assumed to have unit length

		return this.conjugate();

	}

	conjugate() {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	}

	dot( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	}

	lengthSq() {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	}

	length() {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	}

	normalize() {

		let l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	}

	multiply( q ) {

		return this.multiplyQuaternions( this, q );

	}

	premultiply( q ) {

		return this.multiplyQuaternions( q, this );

	}

	multiplyQuaternions( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	}

	slerp( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		const x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			const s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	}

	slerpQuaternions( qa, qb, t ) {

		return this.copy( qa ).slerp( qb, t );

	}

	random() {

		// Derived from http://planning.cs.uiuc.edu/node198.html
		// Note, this source uses w, x, y, z ordering,
		// so we swap the order below.

		const u1 = Math.random();
		const sqrt1u1 = Math.sqrt( 1 - u1 );
		const sqrtu1 = Math.sqrt( u1 );

		const u2 = 2 * Math.PI * Math.random();

		const u3 = 2 * Math.PI * Math.random();

		return this.set(
			sqrt1u1 * Math.cos( u2 ),
			sqrtu1 * Math.sin( u3 ),
			sqrtu1 * Math.cos( u3 ),
			sqrt1u1 * Math.sin( u2 ),
		);

	}

	equals( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	}

	fromArray( array, offset = 0 ) {

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this._x = attribute.getX( index );
		this._y = attribute.getY( index );
		this._z = attribute.getZ( index );
		this._w = attribute.getW( index );

		return this;

	}

	toJSON() {

		return this.toArray();

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

	*[ Symbol.iterator ]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._w;

	}

}

class Vector3 {

	constructor( x = 0, y = 0, z = 0 ) {

		Vector3.prototype.isVector3 = true;

		this.x = x;
		this.y = y;
		this.z = z;

	}

	set( x, y, z ) {

		if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	}

	setScalar( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	}

	setX( x ) {

		this.x = x;

		return this;

	}

	setY( y ) {

		this.y = y;

		return this;

	}

	setZ( z ) {

		this.z = z;

		return this;

	}

	setComponent( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	}

	getComponent( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	}

	clone() {

		return new this.constructor( this.x, this.y, this.z );

	}

	copy( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	}

	add( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	}

	addScalar( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	}

	addVectors( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	}

	addScaledVector( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	}

	sub( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	}

	subScalar( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	}

	subVectors( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	}

	multiply( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	}

	multiplyScalar( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	}

	multiplyVectors( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	}

	applyEuler( euler ) {

		return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

	}

	applyAxisAngle( axis, angle ) {

		return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

	}

	applyMatrix3( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	}

	applyNormalMatrix( m ) {

		return this.applyMatrix3( m ).normalize();

	}

	applyMatrix4( m ) {

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	}

	applyQuaternion( q ) {

		const x = this.x, y = this.y, z = this.z;
		const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		const ix = qw * x + qy * z - qz * y;
		const iy = qw * y + qz * x - qx * z;
		const iz = qw * z + qx * y - qy * x;
		const iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	}

	project( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	}

	unproject( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	}

	transformDirection( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		const x = this.x, y = this.y, z = this.z;
		const e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	}

	divide( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	}

	divideScalar( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	}

	min( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	}

	max( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	}

	clamp( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	}

	clampScalar( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	}

	clampLength( min, max ) {

		const length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	}

	floor() {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	}

	ceil() {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	}

	round() {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	}

	roundToZero() {

		this.x = Math.trunc( this.x );
		this.y = Math.trunc( this.y );
		this.z = Math.trunc( this.z );

		return this;

	}

	negate() {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	}

	dot( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	}

	// TODO lengthSquared?

	lengthSq() {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	}

	length() {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	}

	manhattanLength() {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	}

	normalize() {

		return this.divideScalar( this.length() || 1 );

	}

	setLength( length ) {

		return this.normalize().multiplyScalar( length );

	}

	lerp( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	}

	lerpVectors( v1, v2, alpha ) {

		this.x = v1.x + ( v2.x - v1.x ) * alpha;
		this.y = v1.y + ( v2.y - v1.y ) * alpha;
		this.z = v1.z + ( v2.z - v1.z ) * alpha;

		return this;

	}

	cross( v ) {

		return this.crossVectors( this, v );

	}

	crossVectors( a, b ) {

		const ax = a.x, ay = a.y, az = a.z;
		const bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	}

	projectOnVector( v ) {

		const denominator = v.lengthSq();

		if ( denominator === 0 ) return this.set( 0, 0, 0 );

		const scalar = v.dot( this ) / denominator;

		return this.copy( v ).multiplyScalar( scalar );

	}

	projectOnPlane( planeNormal ) {

		_vector$b.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector$b );

	}

	reflect( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector$b.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	}

	angleTo( v ) {

		const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) return Math.PI / 2;

		const theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( clamp( theta, - 1, 1 ) );

	}

	distanceTo( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	}

	distanceToSquared( v ) {

		const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	}

	manhattanDistanceTo( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	}

	setFromSpherical( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	}

	setFromSphericalCoords( radius, phi, theta ) {

		const sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	}

	setFromCylindrical( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	}

	setFromCylindricalCoords( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	}

	setFromMatrixPosition( m ) {

		const e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	}

	setFromMatrixScale( m ) {

		const sx = this.setFromMatrixColumn( m, 0 ).length();
		const sy = this.setFromMatrixColumn( m, 1 ).length();
		const sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	}

	setFromMatrixColumn( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	}

	setFromMatrix3Column( m, index ) {

		return this.fromArray( m.elements, index * 3 );

	}

	setFromEuler( e ) {

		this.x = e._x;
		this.y = e._y;
		this.z = e._z;

		return this;

	}

	setFromColor( c ) {

		this.x = c.r;
		this.y = c.g;
		this.z = c.b;

		return this;

	}

	equals( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	}

	fromArray( array, offset = 0 ) {

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

	random() {

		this.x = Math.random();
		this.y = Math.random();
		this.z = Math.random();

		return this;

	}

	randomDirection() {

		// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

		const u = ( Math.random() - 0.5 ) * 2;
		const t = Math.random() * Math.PI * 2;
		const f = Math.sqrt( 1 - u ** 2 );

		this.x = f * Math.cos( t );
		this.y = f * Math.sin( t );
		this.z = u;

		return this;

	}

	*[ Symbol.iterator ]() {

		yield this.x;
		yield this.y;
		yield this.z;

	}

}

const _vector$b = /*@__PURE__*/ new Vector3();
const _quaternion$4 = /*@__PURE__*/ new Quaternion();

class Box3 {

	constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

		this.isBox3 = true;

		this.min = min;
		this.max = max;

	}

	set( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	}

	setFromArray( array ) {

		this.makeEmpty();

		for ( let i = 0, il = array.length; i < il; i += 3 ) {

			this.expandByPoint( _vector$a.fromArray( array, i ) );

		}

		return this;

	}

	setFromBufferAttribute( attribute ) {

		this.makeEmpty();

		for ( let i = 0, il = attribute.count; i < il; i ++ ) {

			this.expandByPoint( _vector$a.fromBufferAttribute( attribute, i ) );

		}

		return this;

	}

	setFromPoints( points ) {

		this.makeEmpty();

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	}

	setFromCenterAndSize( center, size ) {

		const halfSize = _vector$a.copy( size ).multiplyScalar( 0.5 );

		this.min.copy( center ).sub( halfSize );
		this.max.copy( center ).add( halfSize );

		return this;

	}

	setFromObject( object, precise = false ) {

		this.makeEmpty();

		return this.expandByObject( object, precise );

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	}

	makeEmpty() {

		this.min.x = this.min.y = this.min.z = + Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	}

	isEmpty() {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	}

	getCenter( target ) {

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	}

	getSize( target ) {

		return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

	}

	expandByPoint( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	}

	expandByVector( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	}

	expandByScalar( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	}

	expandByObject( object, precise = false ) {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and children's, world transforms

		object.updateWorldMatrix( false, false );

		if ( object.boundingBox !== undefined ) {

			if ( object.boundingBox === null ) {

				object.computeBoundingBox();

			}

			_box$3.copy( object.boundingBox );
			_box$3.applyMatrix4( object.matrixWorld );

			this.union( _box$3 );

		} else {

			const geometry = object.geometry;

			if ( geometry !== undefined ) {

				if ( precise && geometry.attributes !== undefined && geometry.attributes.position !== undefined ) {

					const position = geometry.attributes.position;
					for ( let i = 0, l = position.count; i < l; i ++ ) {

						_vector$a.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );
						this.expandByPoint( _vector$a );

					}

				} else {

					if ( geometry.boundingBox === null ) {

						geometry.computeBoundingBox();

					}

					_box$3.copy( geometry.boundingBox );
					_box$3.applyMatrix4( object.matrixWorld );

					this.union( _box$3 );

				}

			}

		}

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			this.expandByObject( children[ i ], precise );

		}

		return this;

	}

	containsPoint( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ||
			point.z < this.min.z || point.z > this.max.z ? false : true;

	}

	containsBox( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y &&
			this.min.z <= box.min.z && box.max.z <= this.max.z;

	}

	getParameter( point, target ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return target.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	}

	intersectsBox( box ) {

		// using 6 splitting planes to rule out intersections.
		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ||
			box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

	}

	intersectsSphere( sphere ) {

		// Find the point on the AABB closest to the sphere center.
		this.clampPoint( sphere.center, _vector$a );

		// If that point is inside the sphere, the AABB and sphere intersect.
		return _vector$a.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

	}

	intersectsPlane( plane ) {

		// We compute the minimum and maximum dot product values. If those values
		// are on the same side (back or front) of the plane, then there is no intersection.

		let min, max;

		if ( plane.normal.x > 0 ) {

			min = plane.normal.x * this.min.x;
			max = plane.normal.x * this.max.x;

		} else {

			min = plane.normal.x * this.max.x;
			max = plane.normal.x * this.min.x;

		}

		if ( plane.normal.y > 0 ) {

			min += plane.normal.y * this.min.y;
			max += plane.normal.y * this.max.y;

		} else {

			min += plane.normal.y * this.max.y;
			max += plane.normal.y * this.min.y;

		}

		if ( plane.normal.z > 0 ) {

			min += plane.normal.z * this.min.z;
			max += plane.normal.z * this.max.z;

		} else {

			min += plane.normal.z * this.max.z;
			max += plane.normal.z * this.min.z;

		}

		return ( min <= - plane.constant && max >= - plane.constant );

	}

	intersectsTriangle( triangle ) {

		if ( this.isEmpty() ) {

			return false;

		}

		// compute box center and extents
		this.getCenter( _center );
		_extents.subVectors( this.max, _center );

		// translate triangle to aabb origin
		_v0$2.subVectors( triangle.a, _center );
		_v1$7.subVectors( triangle.b, _center );
		_v2$4.subVectors( triangle.c, _center );

		// compute edge vectors for triangle
		_f0.subVectors( _v1$7, _v0$2 );
		_f1.subVectors( _v2$4, _v1$7 );
		_f2.subVectors( _v0$2, _v2$4 );

		// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
		// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
		// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
		let axes = [
			0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
			_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
			- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
		];
		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

			return false;

		}

		// test 3 face normals from the aabb
		axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
		if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

			return false;

		}

		// finally testing the face normal of the triangle
		// use already existing triangle edge vectors here
		_triangleNormal.crossVectors( _f0, _f1 );
		axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

		return satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );

	}

	clampPoint( point, target ) {

		return target.copy( point ).clamp( this.min, this.max );

	}

	distanceToPoint( point ) {

		return this.clampPoint( point, _vector$a ).distanceTo( point );

	}

	getBoundingSphere( target ) {

		if ( this.isEmpty() ) {

			target.makeEmpty();

		} else {

			this.getCenter( target.center );

			target.radius = this.getSize( _vector$a ).length() * 0.5;

		}

		return target;

	}

	intersect( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	}

	union( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	}

	applyMatrix4( matrix ) {

		// transform of empty box is an empty box.
		if ( this.isEmpty() ) return this;

		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
		_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
		_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
		_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
		_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
		_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
		_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
		_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
		_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

		this.setFromPoints( _points );

		return this;

	}

	translate( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	}

	equals( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

}

const _points = [
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3(),
	/*@__PURE__*/ new Vector3()
];

const _vector$a = /*@__PURE__*/ new Vector3();

const _box$3 = /*@__PURE__*/ new Box3();

// triangle centered vertices

const _v0$2 = /*@__PURE__*/ new Vector3();
const _v1$7 = /*@__PURE__*/ new Vector3();
const _v2$4 = /*@__PURE__*/ new Vector3();

// triangle edge vectors

const _f0 = /*@__PURE__*/ new Vector3();
const _f1 = /*@__PURE__*/ new Vector3();
const _f2 = /*@__PURE__*/ new Vector3();

const _center = /*@__PURE__*/ new Vector3();
const _extents = /*@__PURE__*/ new Vector3();
const _triangleNormal = /*@__PURE__*/ new Vector3();
const _testAxis = /*@__PURE__*/ new Vector3();

function satForAxes( axes, v0, v1, v2, extents ) {

	for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

		_testAxis.fromArray( axes, i );
		// project the aabb onto the separating axis
		const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
		// project all 3 vertices of the triangle onto the separating axis
		const p0 = v0.dot( _testAxis );
		const p1 = v1.dot( _testAxis );
		const p2 = v2.dot( _testAxis );
		// actual test, basically see if either of the most extreme of the triangle points intersects r
		if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

			// points of the projected triangle are outside the projected half-length of the aabb
			// the axis is separating and we can exit
			return false;

		}

	}

	return true;

}

const _box$2 = /*@__PURE__*/ new Box3();
const _v1$6 = /*@__PURE__*/ new Vector3();
const _v2$3 = /*@__PURE__*/ new Vector3();

class Sphere {

	constructor( center = new Vector3(), radius = - 1 ) {

		this.center = center;
		this.radius = radius;

	}

	set( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;

	}

	setFromPoints( points, optionalCenter ) {

		const center = this.center;

		if ( optionalCenter !== undefined ) {

			center.copy( optionalCenter );

		} else {

			_box$2.setFromPoints( points ).getCenter( center );

		}

		let maxRadiusSq = 0;

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

		}

		this.radius = Math.sqrt( maxRadiusSq );

		return this;

	}

	copy( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	}

	isEmpty() {

		return ( this.radius < 0 );

	}

	makeEmpty() {

		this.center.set( 0, 0, 0 );
		this.radius = - 1;

		return this;

	}

	containsPoint( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	}

	distanceToPoint( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	}

	intersectsSphere( sphere ) {

		const radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	}

	intersectsBox( box ) {

		return box.intersectsSphere( this );

	}

	intersectsPlane( plane ) {

		return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

	}

	clampPoint( point, target ) {

		const deltaLengthSq = this.center.distanceToSquared( point );

		target.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			target.sub( this.center ).normalize();
			target.multiplyScalar( this.radius ).add( this.center );

		}

		return target;

	}

	getBoundingBox( target ) {

		if ( this.isEmpty() ) {

			// Empty sphere produces empty bounding box
			target.makeEmpty();
			return target;

		}

		target.set( this.center, this.center );
		target.expandByScalar( this.radius );

		return target;

	}

	applyMatrix4( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	}

	translate( offset ) {

		this.center.add( offset );

		return this;

	}

	expandByPoint( point ) {

		if ( this.isEmpty() ) {

			this.center.copy( point );

			this.radius = 0;

			return this;

		}

		_v1$6.subVectors( point, this.center );

		const lengthSq = _v1$6.lengthSq();

		if ( lengthSq > ( this.radius * this.radius ) ) {

			// calculate the minimal sphere

			const length = Math.sqrt( lengthSq );

			const delta = ( length - this.radius ) * 0.5;

			this.center.addScaledVector( _v1$6, delta / length );

			this.radius += delta;

		}

		return this;

	}

	union( sphere ) {

		if ( sphere.isEmpty() ) {

			return this;

		}

		if ( this.isEmpty() ) {

			this.copy( sphere );

			return this;

		}

		if ( this.center.equals( sphere.center ) === true ) {

			 this.radius = Math.max( this.radius, sphere.radius );

		} else {

			_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );

			this.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );

			this.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );

		}

		return this;

	}

	equals( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _vector$9 = /*@__PURE__*/ new Vector3();
const _segCenter = /*@__PURE__*/ new Vector3();
const _segDir = /*@__PURE__*/ new Vector3();
const _diff = /*@__PURE__*/ new Vector3();

const _edge1 = /*@__PURE__*/ new Vector3();
const _edge2 = /*@__PURE__*/ new Vector3();
const _normal$1 = /*@__PURE__*/ new Vector3();

class Ray {

	constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

		this.origin = origin;
		this.direction = direction;

	}

	set( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	}

	copy( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	}

	at( t, target ) {

		return target.copy( this.origin ).addScaledVector( this.direction, t );

	}

	lookAt( v ) {

		this.direction.copy( v ).sub( this.origin ).normalize();

		return this;

	}

	recast( t ) {

		this.origin.copy( this.at( t, _vector$9 ) );

		return this;

	}

	closestPointToPoint( point, target ) {

		target.subVectors( point, this.origin );

		const directionDistance = target.dot( this.direction );

		if ( directionDistance < 0 ) {

			return target.copy( this.origin );

		}

		return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

	}

	distanceToPoint( point ) {

		return Math.sqrt( this.distanceSqToPoint( point ) );

	}

	distanceSqToPoint( point ) {

		const directionDistance = _vector$9.subVectors( point, this.origin ).dot( this.direction );

		// point behind the ray

		if ( directionDistance < 0 ) {

			return this.origin.distanceToSquared( point );

		}

		_vector$9.copy( this.origin ).addScaledVector( this.direction, directionDistance );

		return _vector$9.distanceToSquared( point );

	}

	distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
		// It returns the min distance between the ray and the segment
		// defined by v0 and v1
		// It can also set two optional targets :
		// - The closest point on the ray
		// - The closest point on the segment

		_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
		_segDir.copy( v1 ).sub( v0 ).normalize();
		_diff.copy( this.origin ).sub( _segCenter );

		const segExtent = v0.distanceTo( v1 ) * 0.5;
		const a01 = - this.direction.dot( _segDir );
		const b0 = _diff.dot( this.direction );
		const b1 = - _diff.dot( _segDir );
		const c = _diff.lengthSq();
		const det = Math.abs( 1 - a01 * a01 );
		let s0, s1, sqrDist, extDet;

		if ( det > 0 ) {

			// The ray and segment are not parallel.

			s0 = a01 * b1 - b0;
			s1 = a01 * b0 - b1;
			extDet = segExtent * det;

			if ( s0 >= 0 ) {

				if ( s1 >= - extDet ) {

					if ( s1 <= extDet ) {

						// region 0
						// Minimum at interior points of ray and segment.

						const invDet = 1 / det;
						s0 *= invDet;
						s1 *= invDet;
						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

					} else {

						// region 1

						s1 = segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					// region 5

					s1 = - segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			} else {

				if ( s1 <= - extDet ) {

					// region 4

					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				} else if ( s1 <= extDet ) {

					// region 3

					s0 = 0;
					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

				} else {

					// region 2

					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			}

		} else {

			// Ray and segment are parallel.

			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

		}

		if ( optionalPointOnRay ) {

			optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

		}

		if ( optionalPointOnSegment ) {

			optionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );

		}

		return sqrDist;

	}

	intersectSphere( sphere, target ) {

		_vector$9.subVectors( sphere.center, this.origin );
		const tca = _vector$9.dot( this.direction );
		const d2 = _vector$9.dot( _vector$9 ) - tca * tca;
		const radius2 = sphere.radius * sphere.radius;

		if ( d2 > radius2 ) return null;

		const thc = Math.sqrt( radius2 - d2 );

		// t0 = first intersect point - entrance on front of sphere
		const t0 = tca - thc;

		// t1 = second intersect point - exit point on back of sphere
		const t1 = tca + thc;

		// test to see if t1 is behind the ray - if so, return null
		if ( t1 < 0 ) return null;

		// test to see if t0 is behind the ray:
		// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
		// in order to always return an intersect point that is in front of the ray.
		if ( t0 < 0 ) return this.at( t1, target );

		// else t0 is in front of the ray, so return the first collision point scaled by t0
		return this.at( t0, target );

	}

	intersectsSphere( sphere ) {

		return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

	}

	distanceToPlane( plane ) {

		const denominator = plane.normal.dot( this.direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) === 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t : null;

	}

	intersectPlane( plane, target ) {

		const t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;

		}

		return this.at( t, target );

	}

	intersectsPlane( plane ) {

		// check if the ray lies on the plane first

		const distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		const denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	}

	intersectBox( box, target ) {

		let tmin, tmax, tymin, tymax, tzmin, tzmax;

		const invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		const origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;

		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;

		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

		if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;

		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, target );

	}

	intersectsBox( box ) {

		return this.intersectBox( box, _vector$9 ) !== null;

	}

	intersectTriangle( a, b, c, backfaceCulling, target ) {

		// Compute the offset origin, edges, and normal.

		// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

		_edge1.subVectors( b, a );
		_edge2.subVectors( c, a );
		_normal$1.crossVectors( _edge1, _edge2 );

		// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
		// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
		//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
		//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
		//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
		let DdN = this.direction.dot( _normal$1 );
		let sign;

		if ( DdN > 0 ) {

			if ( backfaceCulling ) return null;
			sign = 1;

		} else if ( DdN < 0 ) {

			sign = - 1;
			DdN = - DdN;

		} else {

			return null;

		}

		_diff.subVectors( this.origin, a );
		const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

		// b1 < 0, no intersection
		if ( DdQxE2 < 0 ) {

			return null;

		}

		const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

		// b2 < 0, no intersection
		if ( DdE1xQ < 0 ) {

			return null;

		}

		// b1+b2 > 1, no intersection
		if ( DdQxE2 + DdE1xQ > DdN ) {

			return null;

		}

		// Line intersects triangle, check if ray does.
		const QdN = - sign * _diff.dot( _normal$1 );

		// t < 0, no intersection
		if ( QdN < 0 ) {

			return null;

		}

		// Ray intersects triangle.
		return this.at( QdN / DdN, target );

	}

	applyMatrix4( matrix4 ) {

		this.origin.applyMatrix4( matrix4 );
		this.direction.transformDirection( matrix4 );

		return this;

	}

	equals( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

class Matrix4 {

	constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		Matrix4.prototype.isMatrix4 = true;

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( n11 !== undefined ) {

			this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

		}

	}

	set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		const te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	}

	identity() {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	clone() {

		return new Matrix4().fromArray( this.elements );

	}

	copy( m ) {

		const te = this.elements;
		const me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	}

	copyPosition( m ) {

		const te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	}

	setFromMatrix3( m ) {

		const me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ], 0,
			me[ 1 ], me[ 4 ], me[ 7 ], 0,
			me[ 2 ], me[ 5 ], me[ 8 ], 0,
			0, 0, 0, 1

		);

		return this;

	}

	extractBasis( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	}

	makeBasis( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	}

	extractRotation( m ) {

		// this method does not support reflection matrices

		const te = this.elements;
		const me = m.elements;

		const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
		const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
		const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromEuler( euler ) {

		const te = this.elements;

		const x = euler.x, y = euler.y, z = euler.z;
		const a = Math.cos( x ), b = Math.sin( x );
		const c = Math.cos( y ), d = Math.sin( y );
		const e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			const ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			const ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	}

	makeRotationFromQuaternion( q ) {

		return this.compose( _zero, q, _one );

	}

	lookAt( eye, target, up ) {

		const te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	}

	multiply( m ) {

		return this.multiplyMatrices( this, m );

	}

	premultiply( m ) {

		return this.multiplyMatrices( m, this );

	}

	multiplyMatrices( a, b ) {

		const ae = a.elements;
		const be = b.elements;
		const te = this.elements;

		const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	}

	multiplyScalar( s ) {

		const te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	}

	determinant() {

		const te = this.elements;

		const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	}

	transpose() {

		const te = this.elements;
		let tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	}

	setPosition( x, y, z ) {

		const te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	}

	invert() {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		const te = this.elements,

			n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
			n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
			n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
			n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

		const detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	}

	scale( v ) {

		const te = this.elements;
		const x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	}

	getMaxScaleOnAxis() {

		const te = this.elements;

		const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	}

	makeTranslation( x, y, z ) {

		if ( x.isVector3 ) {

			this.set(

				1, 0, 0, x.x,
				0, 1, 0, x.y,
				0, 0, 1, x.z,
				0, 0, 0, 1

			);

		} else {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

		}

		return this;

	}

	makeRotationX( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationY( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	}

	makeRotationZ( theta ) {

		const c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeRotationAxis( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		const c = Math.cos( angle );
		const s = Math.sin( angle );
		const t = 1 - c;
		const x = axis.x, y = axis.y, z = axis.z;
		const tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeScale( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	}

	makeShear( xy, xz, yx, yz, zx, zy ) {

		this.set(

			1, yx, zx, 0,
			xy, 1, zy, 0,
			xz, yz, 1, 0,
			0, 0, 0, 1

		);

		return this;

	}

	compose( position, quaternion, scale ) {

		const te = this.elements;

		const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		const x2 = x + x,	y2 = y + y, z2 = z + z;
		const xx = x * x2, xy = x * y2, xz = x * z2;
		const yy = y * y2, yz = y * z2, zz = z * z2;
		const wx = w * x2, wy = w * y2, wz = w * z2;

		const sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	}

	decompose( position, quaternion, scale ) {

		const te = this.elements;

		let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		const det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1$2.copy( this );

		const invSX = 1 / sx;
		const invSY = 1 / sy;
		const invSZ = 1 / sz;

		_m1$2.elements[ 0 ] *= invSX;
		_m1$2.elements[ 1 ] *= invSX;
		_m1$2.elements[ 2 ] *= invSX;

		_m1$2.elements[ 4 ] *= invSY;
		_m1$2.elements[ 5 ] *= invSY;
		_m1$2.elements[ 6 ] *= invSY;

		_m1$2.elements[ 8 ] *= invSZ;
		_m1$2.elements[ 9 ] *= invSZ;
		_m1$2.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1$2 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	}

	makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

		const te = this.elements;
		const x = 2 * near / ( right - left );
		const y = 2 * near / ( top - bottom );

		const a = ( right + left ) / ( right - left );
		const b = ( top + bottom ) / ( top - bottom );

		let c, d;

		if ( coordinateSystem === WebGLCoordinateSystem ) {

			c = - ( far + near ) / ( far - near );
			d = ( - 2 * far * near ) / ( far - near );

		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

			c = - far / ( far - near );
			d = ( - far * near ) / ( far - near );

		} else {

			throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	}

	makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

		const te = this.elements;
		const w = 1.0 / ( right - left );
		const h = 1.0 / ( top - bottom );
		const p = 1.0 / ( far - near );

		const x = ( right + left ) * w;
		const y = ( top + bottom ) * h;

		let z, zInv;

		if ( coordinateSystem === WebGLCoordinateSystem ) {

			z = ( far + near ) * p;
			zInv = - 2 * p;

		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

			z = near * p;
			zInv = - 1 * p;

		} else {

			throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

		}

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
		te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
		te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
		te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

		return this;

	}

	equals( matrix ) {

		const te = this.elements;
		const me = matrix.elements;

		for ( let i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	}

	fromArray( array, offset = 0 ) {

		for ( let i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	}

	toArray( array = [], offset = 0 ) {

		const te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

}

const _v1$5 = /*@__PURE__*/ new Vector3();
const _m1$2 = /*@__PURE__*/ new Matrix4();
const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
const _x = /*@__PURE__*/ new Vector3();
const _y = /*@__PURE__*/ new Vector3();
const _z = /*@__PURE__*/ new Vector3();

const _matrix = /*@__PURE__*/ new Matrix4();
const _quaternion$3 = /*@__PURE__*/ new Quaternion();

class Euler {

	constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

		this.isEuler = true;

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

	}

	get x() {

		return this._x;

	}

	set x( value ) {

		this._x = value;
		this._onChangeCallback();

	}

	get y() {

		return this._y;

	}

	set y( value ) {

		this._y = value;
		this._onChangeCallback();

	}

	get z() {

		return this._z;

	}

	set z( value ) {

		this._z = value;
		this._onChangeCallback();

	}

	get order() {

		return this._order;

	}

	set order( value ) {

		this._order = value;
		this._onChangeCallback();

	}

	set( x, y, z, order = this._order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order;

		this._onChangeCallback();

		return this;

	}

	clone() {

		return new this.constructor( this._x, this._y, this._z, this._order );

	}

	copy( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this._onChangeCallback();

		return this;

	}

	setFromRotationMatrix( m, order = this._order, update = true ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		const te = m.elements;
		const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		switch ( order ) {

			case 'XYZ':

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

				break;

			case 'YXZ':

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.9999999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

				break;

			case 'ZXY':

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.9999999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

				break;

			case 'ZYX':

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

				break;

			case 'YZX':

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

				break;

			case 'XZY':

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

				break;

			default:

				console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

		}

		this._order = order;

		if ( update === true ) this._onChangeCallback();

		return this;

	}

	setFromQuaternion( q, order, update ) {

		_matrix.makeRotationFromQuaternion( q );

		return this.setFromRotationMatrix( _matrix, order, update );

	}

	setFromVector3( v, order = this._order ) {

		return this.set( v.x, v.y, v.z, order );

	}

	reorder( newOrder ) {

		// WARNING: this discards revolution information -bhouston

		_quaternion$3.setFromEuler( this );

		return this.setFromQuaternion( _quaternion$3, newOrder );

	}

	equals( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	}

	fromArray( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this._onChangeCallback();

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	}

	_onChange( callback ) {

		this._onChangeCallback = callback;

		return this;

	}

	_onChangeCallback() {}

	*[ Symbol.iterator ]() {

		yield this._x;
		yield this._y;
		yield this._z;
		yield this._order;

	}

}

Euler.DEFAULT_ORDER = 'XYZ';

class Layers {

	constructor() {

		this.mask = 1 | 0;

	}

	set( channel ) {

		this.mask = ( 1 << channel | 0 ) >>> 0;

	}

	enable( channel ) {

		this.mask |= 1 << channel | 0;

	}

	enableAll() {

		this.mask = 0xffffffff | 0;

	}

	toggle( channel ) {

		this.mask ^= 1 << channel | 0;

	}

	disable( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	}

	disableAll() {

		this.mask = 0;

	}

	test( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

	isEnabled( channel ) {

		return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

	}

}

let _object3DId = 0;

const _v1$4 = /*@__PURE__*/ new Vector3();
const _q1 = /*@__PURE__*/ new Quaternion();
const _m1$1 = /*@__PURE__*/ new Matrix4();
const _target = /*@__PURE__*/ new Vector3();

const _position$3 = /*@__PURE__*/ new Vector3();
const _scale$2 = /*@__PURE__*/ new Vector3();
const _quaternion$2 = /*@__PURE__*/ new Quaternion();

const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

const _addedEvent = { type: 'added' };
const _removedEvent = { type: 'removed' };

class Object3D extends EventDispatcher {

	constructor() {

		super();

		this.isObject3D = true;

		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DEFAULT_UP.clone();

		const position = new Vector3();
		const rotation = new Euler();
		const quaternion = new Quaternion();
		const scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation._onChange( onRotationChange );
		quaternion._onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
		this.matrixWorldNeedsUpdate = false;

		this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.animations = [];

		this.userData = {};

	}

	onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

	onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

	applyMatrix4( matrix ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		this.matrix.premultiply( matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	}

	applyQuaternion( q ) {

		this.quaternion.premultiply( q );

		return this;

	}

	setRotationFromAxisAngle( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	}

	setRotationFromEuler( euler ) {

		this.quaternion.setFromEuler( euler, true );

	}

	setRotationFromMatrix( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	}

	setRotationFromQuaternion( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	}

	rotateOnAxis( axis, angle ) {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.multiply( _q1 );

		return this;

	}

	rotateOnWorldAxis( axis, angle ) {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.premultiply( _q1 );

		return this;

	}

	rotateX( angle ) {

		return this.rotateOnAxis( _xAxis, angle );

	}

	rotateY( angle ) {

		return this.rotateOnAxis( _yAxis, angle );

	}

	rotateZ( angle ) {

		return this.rotateOnAxis( _zAxis, angle );

	}

	translateOnAxis( axis, distance ) {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		_v1$4.copy( axis ).applyQuaternion( this.quaternion );

		this.position.add( _v1$4.multiplyScalar( distance ) );

		return this;

	}

	translateX( distance ) {

		return this.translateOnAxis( _xAxis, distance );

	}

	translateY( distance ) {

		return this.translateOnAxis( _yAxis, distance );

	}

	translateZ( distance ) {

		return this.translateOnAxis( _zAxis, distance );

	}

	localToWorld( vector ) {

		this.updateWorldMatrix( true, false );

		return vector.applyMatrix4( this.matrixWorld );

	}

	worldToLocal( vector ) {

		this.updateWorldMatrix( true, false );

		return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );

	}

	lookAt( x, y, z ) {

		// This method does not support objects having non-uniformly-scaled parent(s)

		if ( x.isVector3 ) {

			_target.copy( x );

		} else {

			_target.set( x, y, z );

		}

		const parent = this.parent;

		this.updateWorldMatrix( true, false );

		_position$3.setFromMatrixPosition( this.matrixWorld );

		if ( this.isCamera || this.isLight ) {

			_m1$1.lookAt( _position$3, _target, this.up );

		} else {

			_m1$1.lookAt( _target, _position$3, this.up );

		}

		this.quaternion.setFromRotationMatrix( _m1$1 );

		if ( parent ) {

			_m1$1.extractRotation( parent.matrixWorld );
			_q1.setFromRotationMatrix( _m1$1 );
			this.quaternion.premultiply( _q1.invert() );

		}

	}

	add( object ) {

		if ( arguments.length > 1 ) {

			for ( let i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
			return this;

		}

		if ( object && object.isObject3D ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			this.children.push( object );

			object.dispatchEvent( _addedEvent );

		} else {

			console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

		}

		return this;

	}

	remove( object ) {

		if ( arguments.length > 1 ) {

			for ( let i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		const index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;
			this.children.splice( index, 1 );

			object.dispatchEvent( _removedEvent );

		}

		return this;

	}

	removeFromParent() {

		const parent = this.parent;

		if ( parent !== null ) {

			parent.remove( this );

		}

		return this;

	}

	clear() {

		return this.remove( ... this.children );

	}

	attach( object ) {

		// adds object as a child of this, while maintaining the object's world transform

		// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

		this.updateWorldMatrix( true, false );

		_m1$1.copy( this.matrixWorld ).invert();

		if ( object.parent !== null ) {

			object.parent.updateWorldMatrix( true, false );

			_m1$1.multiply( object.parent.matrixWorld );

		}

		object.applyMatrix4( _m1$1 );

		this.add( object );

		object.updateWorldMatrix( false, true );

		return this;

	}

	getObjectById( id ) {

		return this.getObjectByProperty( 'id', id );

	}

	getObjectByName( name ) {

		return this.getObjectByProperty( 'name', name );

	}

	getObjectByProperty( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

			const child = this.children[ i ];
			const object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	}

	getObjectsByProperty( name, value ) {

		let result = [];

		if ( this[ name ] === value ) result.push( this );

		for ( let i = 0, l = this.children.length; i < l; i ++ ) {

			const childResult = this.children[ i ].getObjectsByProperty( name, value );

			if ( childResult.length > 0 ) {

				result = result.concat( childResult );

			}

		}

		return result;

	}

	getWorldPosition( target ) {

		this.updateWorldMatrix( true, false );

		return target.setFromMatrixPosition( this.matrixWorld );

	}

	getWorldQuaternion( target ) {

		this.updateWorldMatrix( true, false );

		this.matrixWorld.decompose( _position$3, target, _scale$2 );

		return target;

	}

	getWorldScale( target ) {

		this.updateWorldMatrix( true, false );

		this.matrixWorld.decompose( _position$3, _quaternion$2, target );

		return target;

	}

	getWorldDirection( target ) {

		this.updateWorldMatrix( true, false );

		const e = this.matrixWorld.elements;

		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

	}

	raycast( /* raycaster, intersects */ ) {}

	traverse( callback ) {

		callback( this );

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	}

	traverseVisible( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	}

	traverseAncestors( callback ) {

		const parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	}

	updateMatrix() {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	}

	updateMatrixWorld( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		const children = this.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			const child = children[ i ];

			if ( child.matrixWorldAutoUpdate === true || force === true ) {

				child.updateMatrixWorld( force );

			}

		}

	}

	updateWorldMatrix( updateParents, updateChildren ) {

		const parent = this.parent;

		if ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {

			parent.updateWorldMatrix( true, false );

		}

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.parent === null ) {

			this.matrixWorld.copy( this.matrix );

		} else {

			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

		}

		// update children

		if ( updateChildren === true ) {

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				const child = children[ i ];

				if ( child.matrixWorldAutoUpdate === true ) {

					child.updateWorldMatrix( false, true );

				}

			}

		}

	}

	toJSON( meta ) {

		// meta is a string when called from JSON.stringify
		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		const output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {},
				skeletons: {},
				animations: {},
				nodes: {}
			};

			output.metadata = {
				version: 4.6,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		const object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( this.frustumCulled === false ) object.frustumCulled = false;
		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
		if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

		object.layers = this.layers.mask;
		object.matrix = this.matrix.toArray();
		object.up = this.up.toArray();

		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

		// object specific properties

		if ( this.isInstancedMesh ) {

			object.type = 'InstancedMesh';
			object.count = this.count;
			object.instanceMatrix = this.instanceMatrix.toJSON();
			if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

		}

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.isScene ) {

			if ( this.background ) {

				if ( this.background.isColor ) {

					object.background = this.background.toJSON();

				} else if ( this.background.isTexture ) {

					object.background = this.background.toJSON( meta ).uuid;

				}

			}

			if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

				object.environment = this.environment.toJSON( meta ).uuid;

			}

		} else if ( this.isMesh || this.isLine || this.isPoints ) {

			object.geometry = serialize( meta.geometries, this.geometry );

			const parameters = this.geometry.parameters;

			if ( parameters !== undefined && parameters.shapes !== undefined ) {

				const shapes = parameters.shapes;

				if ( Array.isArray( shapes ) ) {

					for ( let i = 0, l = shapes.length; i < l; i ++ ) {

						const shape = shapes[ i ];

						serialize( meta.shapes, shape );

					}

				} else {

					serialize( meta.shapes, shapes );

				}

			}

		}

		if ( this.isSkinnedMesh ) {

			object.bindMode = this.bindMode;
			object.bindMatrix = this.bindMatrix.toArray();

			if ( this.skeleton !== undefined ) {

				serialize( meta.skeletons, this.skeleton );

				object.skeleton = this.skeleton.uuid;

			}

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				const uuids = [];

				for ( let i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( let i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		//

		if ( this.animations.length > 0 ) {

			object.animations = [];

			for ( let i = 0; i < this.animations.length; i ++ ) {

				const animation = this.animations[ i ];

				object.animations.push( serialize( meta.animations, animation ) );

			}

		}

		if ( isRootObject ) {

			const geometries = extractFromCache( meta.geometries );
			const materials = extractFromCache( meta.materials );
			const textures = extractFromCache( meta.textures );
			const images = extractFromCache( meta.images );
			const shapes = extractFromCache( meta.shapes );
			const skeletons = extractFromCache( meta.skeletons );
			const animations = extractFromCache( meta.animations );
			const nodes = extractFromCache( meta.nodes );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;
			if ( shapes.length > 0 ) output.shapes = shapes;
			if ( skeletons.length > 0 ) output.skeletons = skeletons;
			if ( animations.length > 0 ) output.animations = animations;
			if ( nodes.length > 0 ) output.nodes = nodes;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			const values = [];
			for ( const key in cache ) {

				const data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

	}

	clone( recursive ) {

		return new this.constructor().copy( this, recursive );

	}

	copy( source, recursive = true ) {

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.rotation.order = source.rotation.order;
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.animations = source.animations.slice();

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( let i = 0; i < source.children.length; i ++ ) {

				const child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

}

Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );
Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

const _v0$1 = /*@__PURE__*/ new Vector3();
const _v1$3 = /*@__PURE__*/ new Vector3();
const _v2$2 = /*@__PURE__*/ new Vector3();
const _v3$1 = /*@__PURE__*/ new Vector3();

const _vab = /*@__PURE__*/ new Vector3();
const _vac = /*@__PURE__*/ new Vector3();
const _vbc = /*@__PURE__*/ new Vector3();
const _vap = /*@__PURE__*/ new Vector3();
const _vbp = /*@__PURE__*/ new Vector3();
const _vcp = /*@__PURE__*/ new Vector3();

let warnedGetUV = false;

class Triangle {

	constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

		this.a = a;
		this.b = b;
		this.c = c;

	}

	static getNormal( a, b, c, target ) {

		target.subVectors( c, b );
		_v0$1.subVectors( a, b );
		target.cross( _v0$1 );

		const targetLengthSq = target.lengthSq();
		if ( targetLengthSq > 0 ) {

			return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

		}

		return target.set( 0, 0, 0 );

	}

	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	static getBarycoord( point, a, b, c, target ) {

		_v0$1.subVectors( c, a );
		_v1$3.subVectors( b, a );
		_v2$2.subVectors( point, a );

		const dot00 = _v0$1.dot( _v0$1 );
		const dot01 = _v0$1.dot( _v1$3 );
		const dot02 = _v0$1.dot( _v2$2 );
		const dot11 = _v1$3.dot( _v1$3 );
		const dot12 = _v1$3.dot( _v2$2 );

		const denom = ( dot00 * dot11 - dot01 * dot01 );

		// collinear or singular triangle
		if ( denom === 0 ) {

			// arbitrary location outside of triangle?
			// not sure if this is the best idea, maybe should be returning undefined
			return target.set( - 2, - 1, - 1 );

		}

		const invDenom = 1 / denom;
		const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
		const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

		// barycentric coordinates must always sum to 1
		return target.set( 1 - u - v, v, u );

	}

	static containsPoint( point, a, b, c ) {

		this.getBarycoord( point, a, b, c, _v3$1 );

		return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );

	}

	static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) { // @deprecated, r151

		if ( warnedGetUV === false ) {

			console.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );

			warnedGetUV = true;

		}

		return this.getInterpolation( point, p1, p2, p3, uv1, uv2, uv3, target );

	}

	static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

		this.getBarycoord( point, p1, p2, p3, _v3$1 );

		target.setScalar( 0 );
		target.addScaledVector( v1, _v3$1.x );
		target.addScaledVector( v2, _v3$1.y );
		target.addScaledVector( v3, _v3$1.z );

		return target;

	}

	static isFrontFacing( a, b, c, direction ) {

		_v0$1.subVectors( c, b );
		_v1$3.subVectors( a, b );

		// strictly front facing
		return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

	}

	set( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	}

	setFromPointsAndIndices( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	}

	setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

		this.a.fromBufferAttribute( attribute, i0 );
		this.b.fromBufferAttribute( attribute, i1 );
		this.c.fromBufferAttribute( attribute, i2 );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	}

	getArea() {

		_v0$1.subVectors( this.c, this.b );
		_v1$3.subVectors( this.a, this.b );

		return _v0$1.cross( _v1$3 ).length() * 0.5;

	}

	getMidpoint( target ) {

		return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	}

	getNormal( target ) {

		return Triangle.getNormal( this.a, this.b, this.c, target );

	}

	getPlane( target ) {

		return target.setFromCoplanarPoints( this.a, this.b, this.c );

	}

	getBarycoord( point, target ) {

		return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

	}

	getUV( point, uv1, uv2, uv3, target ) { // @deprecated, r151

		if ( warnedGetUV === false ) {

			console.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );

			warnedGetUV = true;

		}

		return Triangle.getInterpolation( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

	}

	getInterpolation( point, v1, v2, v3, target ) {

		return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

	}

	containsPoint( point ) {

		return Triangle.containsPoint( point, this.a, this.b, this.c );

	}

	isFrontFacing( direction ) {

		return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

	}

	intersectsBox( box ) {

		return box.intersectsTriangle( this );

	}

	closestPointToPoint( p, target ) {

		const a = this.a, b = this.b, c = this.c;
		let v, w;

		// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
		// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
		// under the accompanying license; see chapter 5.1.5 for detailed explanation.
		// basically, we're distinguishing which of the voronoi regions of the triangle
		// the point lies in with the minimum amount of redundant computation.

		_vab.subVectors( b, a );
		_vac.subVectors( c, a );
		_vap.subVectors( p, a );
		const d1 = _vab.dot( _vap );
		const d2 = _vac.dot( _vap );
		if ( d1 <= 0 && d2 <= 0 ) {

			// vertex region of A; barycentric coords (1, 0, 0)
			return target.copy( a );

		}

		_vbp.subVectors( p, b );
		const d3 = _vab.dot( _vbp );
		const d4 = _vac.dot( _vbp );
		if ( d3 >= 0 && d4 <= d3 ) {

			// vertex region of B; barycentric coords (0, 1, 0)
			return target.copy( b );

		}

		const vc = d1 * d4 - d3 * d2;
		if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

			v = d1 / ( d1 - d3 );
			// edge region of AB; barycentric coords (1-v, v, 0)
			return target.copy( a ).addScaledVector( _vab, v );

		}

		_vcp.subVectors( p, c );
		const d5 = _vab.dot( _vcp );
		const d6 = _vac.dot( _vcp );
		if ( d6 >= 0 && d5 <= d6 ) {

			// vertex region of C; barycentric coords (0, 0, 1)
			return target.copy( c );

		}

		const vb = d5 * d2 - d1 * d6;
		if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

			w = d2 / ( d2 - d6 );
			// edge region of AC; barycentric coords (1-w, 0, w)
			return target.copy( a ).addScaledVector( _vac, w );

		}

		const va = d3 * d6 - d5 * d4;
		if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

			_vbc.subVectors( c, b );
			w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
			// edge region of BC; barycentric coords (0, 1-w, w)
			return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

		}

		// face region
		const denom = 1 / ( va + vb + vc );
		// u = va * denom
		v = vb * denom;
		w = vc * denom;

		return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

	}

	equals( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	}

}

let _materialId = 0;

class Material extends EventDispatcher {

	constructor() {

		super();

		this.isMaterial = true;

		Object.defineProperty( this, 'id', { value: _materialId ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'Material';

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.vertexColors = false;

		this.opacity = 1;
		this.transparent = false;
		this.alphaHash = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaToCoverage = false;
		this.premultipliedAlpha = false;
		this.forceSinglePass = false;

		this.visible = true;

		this.toneMapped = true;

		this.userData = {};

		this.version = 0;

		this._alphaTest = 0;

	}

	get alphaTest() {

		return this._alphaTest;

	}

	set alphaTest( value ) {

		if ( this._alphaTest > 0 !== value > 0 ) {

			this.version ++;

		}

		this._alphaTest = value;

	}

	onBuild( /* shaderobject, renderer */ ) {}

	onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

	onBeforeCompile( /* shaderobject, renderer */ ) {}

	customProgramCacheKey() {

		return this.onBeforeCompile.toString();

	}

	setValues( values ) {

		if ( values === undefined ) return;

		for ( const key in values ) {

			const newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
				continue;

			}

			const currentValue = this[ key ];

			if ( currentValue === undefined ) {

				console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
				continue;

			}

			if ( currentValue && currentValue.isColor ) {

				currentValue.set( newValue );

			} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

				currentValue.copy( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	}

	toJSON( meta ) {

		const isRootObject = ( meta === undefined || typeof meta === 'string' );

		if ( isRootObject ) {

			meta = {
				textures: {},
				images: {}
			};

		}

		const data = {
			metadata: {
				version: 4.6,
				type: 'Material',
				generator: 'Material.toJSON'
			}
		};

		// standard Material serialization
		data.uuid = this.uuid;
		data.type = this.type;

		if ( this.name !== '' ) data.name = this.name;

		if ( this.color && this.color.isColor ) data.color = this.color.getHex();

		if ( this.roughness !== undefined ) data.roughness = this.roughness;
		if ( this.metalness !== undefined ) data.metalness = this.metalness;

		if ( this.sheen !== undefined ) data.sheen = this.sheen;
		if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
		if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
		if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
		if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

		if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
		if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
		if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
		if ( this.shininess !== undefined ) data.shininess = this.shininess;
		if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
		if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

		if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

			data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

		}

		if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

			data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

		}

		if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

			data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
			data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

		}

		if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
		if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
		if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

		if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

			data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

		}

		if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

			data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

		}

		if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
		if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

		if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

			data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

		}

		if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
		if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
		if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

		if ( this.lightMap && this.lightMap.isTexture ) {

			data.lightMap = this.lightMap.toJSON( meta ).uuid;
			data.lightMapIntensity = this.lightMapIntensity;

		}

		if ( this.aoMap && this.aoMap.isTexture ) {

			data.aoMap = this.aoMap.toJSON( meta ).uuid;
			data.aoMapIntensity = this.aoMapIntensity;

		}

		if ( this.bumpMap && this.bumpMap.isTexture ) {

			data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
			data.bumpScale = this.bumpScale;

		}

		if ( this.normalMap && this.normalMap.isTexture ) {

			data.normalMap = this.normalMap.toJSON( meta ).uuid;
			data.normalMapType = this.normalMapType;
			data.normalScale = this.normalScale.toArray();

		}

		if ( this.displacementMap && this.displacementMap.isTexture ) {

			data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
			data.displacementScale = this.displacementScale;
			data.displacementBias = this.displacementBias;

		}

		if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
		if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

		if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
		if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
		if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
		if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

		if ( this.envMap && this.envMap.isTexture ) {

			data.envMap = this.envMap.toJSON( meta ).uuid;

			if ( this.combine !== undefined ) data.combine = this.combine;

		}

		if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
		if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
		if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

		if ( this.gradientMap && this.gradientMap.isTexture ) {

			data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

		}

		if ( this.transmission !== undefined ) data.transmission = this.transmission;
		if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
		if ( this.thickness !== undefined ) data.thickness = this.thickness;
		if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
		if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
		if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

		if ( this.size !== undefined ) data.size = this.size;
		if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
		if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

		if ( this.blending !== NormalBlending ) data.blending = this.blending;
		if ( this.side !== FrontSide ) data.side = this.side;
		if ( this.vertexColors ) data.vertexColors = true;

		if ( this.opacity < 1 ) data.opacity = this.opacity;
		if ( this.transparent === true ) data.transparent = this.transparent;

		data.depthFunc = this.depthFunc;
		data.depthTest = this.depthTest;
		data.depthWrite = this.depthWrite;
		data.colorWrite = this.colorWrite;

		data.stencilWrite = this.stencilWrite;
		data.stencilWriteMask = this.stencilWriteMask;
		data.stencilFunc = this.stencilFunc;
		data.stencilRef = this.stencilRef;
		data.stencilFuncMask = this.stencilFuncMask;
		data.stencilFail = this.stencilFail;
		data.stencilZFail = this.stencilZFail;
		data.stencilZPass = this.stencilZPass;

		// rotation (SpriteMaterial)
		if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

		if ( this.polygonOffset === true ) data.polygonOffset = true;
		if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
		if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

		if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
		if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
		if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
		if ( this.scale !== undefined ) data.scale = this.scale;

		if ( this.dithering === true ) data.dithering = true;

		if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
		if ( this.alphaHash === true ) data.alphaHash = this.alphaHash;
		if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
		if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
		if ( this.forceSinglePass === true ) data.forceSinglePass = this.forceSinglePass;

		if ( this.wireframe === true ) data.wireframe = this.wireframe;
		if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
		if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
		if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

		if ( this.flatShading === true ) data.flatShading = this.flatShading;

		if ( this.visible === false ) data.visible = false;

		if ( this.toneMapped === false ) data.toneMapped = false;

		if ( this.fog === false ) data.fog = false;

		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

		// TODO: Copied from Object3D.toJSON

		function extractFromCache( cache ) {

			const values = [];

			for ( const key in cache ) {

				const data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}

			return values;

		}

		if ( isRootObject ) {

			const textures = extractFromCache( meta.textures );
			const images = extractFromCache( meta.images );

			if ( textures.length > 0 ) data.textures = textures;
			if ( images.length > 0 ) data.images = images;

		}

		return data;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.name = source.name;

		this.blending = source.blending;
		this.side = source.side;
		this.vertexColors = source.vertexColors;

		this.opacity = source.opacity;
		this.transparent = source.transparent;

		this.blendSrc = source.blendSrc;
		this.blendDst = source.blendDst;
		this.blendEquation = source.blendEquation;
		this.blendSrcAlpha = source.blendSrcAlpha;
		this.blendDstAlpha = source.blendDstAlpha;
		this.blendEquationAlpha = source.blendEquationAlpha;

		this.depthFunc = source.depthFunc;
		this.depthTest = source.depthTest;
		this.depthWrite = source.depthWrite;

		this.stencilWriteMask = source.stencilWriteMask;
		this.stencilFunc = source.stencilFunc;
		this.stencilRef = source.stencilRef;
		this.stencilFuncMask = source.stencilFuncMask;
		this.stencilFail = source.stencilFail;
		this.stencilZFail = source.stencilZFail;
		this.stencilZPass = source.stencilZPass;
		this.stencilWrite = source.stencilWrite;

		const srcPlanes = source.clippingPlanes;
		let dstPlanes = null;

		if ( srcPlanes !== null ) {

			const n = srcPlanes.length;
			dstPlanes = new Array( n );

			for ( let i = 0; i !== n; ++ i ) {

				dstPlanes[ i ] = srcPlanes[ i ].clone();

			}

		}

		this.clippingPlanes = dstPlanes;
		this.clipIntersection = source.clipIntersection;
		this.clipShadows = source.clipShadows;

		this.shadowSide = source.shadowSide;

		this.colorWrite = source.colorWrite;

		this.precision = source.precision;

		this.polygonOffset = source.polygonOffset;
		this.polygonOffsetFactor = source.polygonOffsetFactor;
		this.polygonOffsetUnits = source.polygonOffsetUnits;

		this.dithering = source.dithering;

		this.alphaTest = source.alphaTest;
		this.alphaHash = source.alphaHash;
		this.alphaToCoverage = source.alphaToCoverage;
		this.premultipliedAlpha = source.premultipliedAlpha;
		this.forceSinglePass = source.forceSinglePass;

		this.visible = source.visible;

		this.toneMapped = source.toneMapped;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

}

const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

const _hslA = { h: 0, s: 0, l: 0 };
const _hslB = { h: 0, s: 0, l: 0 };

function hue2rgb( p, q, t ) {

	if ( t < 0 ) t += 1;
	if ( t > 1 ) t -= 1;
	if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
	if ( t < 1 / 2 ) return q;
	if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
	return p;

}

class Color {

	constructor( r, g, b ) {

		this.isColor = true;

		this.r = 1;
		this.g = 1;
		this.b = 1;

		return this.set( r, g, b );

	}

	set( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string

			const value = r;

			if ( value && value.isColor ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

		} else {

			this.setRGB( r, g, b );

		}

		return this;

	}

	setScalar( scalar ) {

		this.r = scalar;
		this.g = scalar;
		this.b = scalar;

		return this;

	}

	setHex( hex, colorSpace = SRGBColorSpace ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		ColorManagement.toWorkingColorSpace( this, colorSpace );

		return this;

	}

	setRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {

		this.r = r;
		this.g = g;
		this.b = b;

		ColorManagement.toWorkingColorSpace( this, colorSpace );

		return this;

	}

	setHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {

		// h,s,l ranges are in 0.0 - 1.0
		h = euclideanModulo( h, 1 );
		s = clamp( s, 0, 1 );
		l = clamp( l, 0, 1 );

		if ( s === 0 ) {

			this.r = this.g = this.b = l;

		} else {

			const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
			const q = ( 2 * l ) - p;

			this.r = hue2rgb( q, p, h + 1 / 3 );
			this.g = hue2rgb( q, p, h );
			this.b = hue2rgb( q, p, h - 1 / 3 );

		}

		ColorManagement.toWorkingColorSpace( this, colorSpace );

		return this;

	}

	setStyle( style, colorSpace = SRGBColorSpace ) {

		function handleAlpha( string ) {

			if ( string === undefined ) return;

			if ( parseFloat( string ) < 1 ) {

				console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

			}

		}


		let m;

		if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

			// rgb / hsl

			let color;
			const name = m[ 1 ];
			const components = m[ 2 ];

			switch ( name ) {

				case 'rgb':
				case 'rgba':

					if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// rgb(255,0,0) rgba(255,0,0,0.5)

						handleAlpha( color[ 4 ] );

						return this.setRGB(
							Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
							Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
							Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
							colorSpace
						);

					}

					if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

						handleAlpha( color[ 4 ] );

						return this.setRGB(
							Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
							Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
							Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
							colorSpace
						);

					}

					break;

				case 'hsl':
				case 'hsla':

					if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

						// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

						handleAlpha( color[ 4 ] );

						return this.setHSL(
							parseFloat( color[ 1 ] ) / 360,
							parseFloat( color[ 2 ] ) / 100,
							parseFloat( color[ 3 ] ) / 100,
							colorSpace
						);

					}

					break;

				default:

					console.warn( 'THREE.Color: Unknown color model ' + style );

			}

		} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

			// hex color

			const hex = m[ 1 ];
			const size = hex.length;

			if ( size === 3 ) {

				// #ff0
				return this.setRGB(
					parseInt( hex.charAt( 0 ), 16 ) / 15,
					parseInt( hex.charAt( 1 ), 16 ) / 15,
					parseInt( hex.charAt( 2 ), 16 ) / 15,
					colorSpace
				);

			} else if ( size === 6 ) {

				// #ff0000
				return this.setHex( parseInt( hex, 16 ), colorSpace );

			} else {

				console.warn( 'THREE.Color: Invalid hex color ' + style );

			}

		} else if ( style && style.length > 0 ) {

			return this.setColorName( style, colorSpace );

		}

		return this;

	}

	setColorName( style, colorSpace = SRGBColorSpace ) {

		// color keywords
		const hex = _colorKeywords[ style.toLowerCase() ];

		if ( hex !== undefined ) {

			// red
			this.setHex( hex, colorSpace );

		} else {

			// unknown color
			console.warn( 'THREE.Color: Unknown color ' + style );

		}

		return this;

	}

	clone() {

		return new this.constructor( this.r, this.g, this.b );

	}

	copy( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	}

	copySRGBToLinear( color ) {

		this.r = SRGBToLinear( color.r );
		this.g = SRGBToLinear( color.g );
		this.b = SRGBToLinear( color.b );

		return this;

	}

	copyLinearToSRGB( color ) {

		this.r = LinearToSRGB( color.r );
		this.g = LinearToSRGB( color.g );
		this.b = LinearToSRGB( color.b );

		return this;

	}

	convertSRGBToLinear() {

		this.copySRGBToLinear( this );

		return this;

	}

	convertLinearToSRGB() {

		this.copyLinearToSRGB( this );

		return this;

	}

	getHex( colorSpace = SRGBColorSpace ) {

		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

		return Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );

	}

	getHexString( colorSpace = SRGBColorSpace ) {

		return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

	}

	getHSL( target, colorSpace = ColorManagement.workingColorSpace ) {

		// h,s,l ranges are in 0.0 - 1.0

		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

		const r = _color.r, g = _color.g, b = _color.b;

		const max = Math.max( r, g, b );
		const min = Math.min( r, g, b );

		let hue, saturation;
		const lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			const delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		target.h = hue;
		target.s = saturation;
		target.l = lightness;

		return target;

	}

	getRGB( target, colorSpace = ColorManagement.workingColorSpace ) {

		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

		target.r = _color.r;
		target.g = _color.g;
		target.b = _color.b;

		return target;

	}

	getStyle( colorSpace = SRGBColorSpace ) {

		ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

		const r = _color.r, g = _color.g, b = _color.b;

		if ( colorSpace !== SRGBColorSpace ) {

			// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
			return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

		}

		return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

	}

	offsetHSL( h, s, l ) {

		this.getHSL( _hslA );

		_hslA.h += h; _hslA.s += s; _hslA.l += l;

		this.setHSL( _hslA.h, _hslA.s, _hslA.l );

		return this;

	}

	add( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	}

	addColors( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	}

	addScalar( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	}

	sub( color ) {

		this.r = Math.max( 0, this.r - color.r );
		this.g = Math.max( 0, this.g - color.g );
		this.b = Math.max( 0, this.b - color.b );

		return this;

	}

	multiply( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	}

	multiplyScalar( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	}

	lerp( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	}

	lerpColors( color1, color2, alpha ) {

		this.r = color1.r + ( color2.r - color1.r ) * alpha;
		this.g = color1.g + ( color2.g - color1.g ) * alpha;
		this.b = color1.b + ( color2.b - color1.b ) * alpha;

		return this;

	}

	lerpHSL( color, alpha ) {

		this.getHSL( _hslA );
		color.getHSL( _hslB );

		const h = lerp( _hslA.h, _hslB.h, alpha );
		const s = lerp( _hslA.s, _hslB.s, alpha );
		const l = lerp( _hslA.l, _hslB.l, alpha );

		this.setHSL( h, s, l );

		return this;

	}

	setFromVector3( v ) {

		this.r = v.x;
		this.g = v.y;
		this.b = v.z;

		return this;

	}

	applyMatrix3( m ) {

		const r = this.r, g = this.g, b = this.b;
		const e = m.elements;

		this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
		this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
		this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

		return this;

	}

	equals( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	}

	fromArray( array, offset = 0 ) {

		this.r = array[ offset ];
		this.g = array[ offset + 1 ];
		this.b = array[ offset + 2 ];

		return this;

	}

	toArray( array = [], offset = 0 ) {

		array[ offset ] = this.r;
		array[ offset + 1 ] = this.g;
		array[ offset + 2 ] = this.b;

		return array;

	}

	fromBufferAttribute( attribute, index ) {

		this.r = attribute.getX( index );
		this.g = attribute.getY( index );
		this.b = attribute.getZ( index );

		return this;

	}

	toJSON() {

		return this.getHex();

	}

	*[ Symbol.iterator ]() {

		yield this.r;
		yield this.g;
		yield this.b;

	}

}

const _color = /*@__PURE__*/ new Color();

Color.NAMES = _colorKeywords;

class MeshBasicMaterial extends Material {

	constructor( parameters ) {

		super();

		this.isMeshBasicMaterial = true;

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.fog = true;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.fog = source.fog;

		return this;

	}

}

const _vector$8 = /*@__PURE__*/ new Vector3();
const _vector2$1 = /*@__PURE__*/ new Vector2();

class BufferAttribute {

	constructor( array, itemSize, normalized = false ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.isBufferAttribute = true;

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };
		this.gpuType = FloatType;

		this.version = 0;

	}

	onUploadCallback() {}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	setUsage( value ) {

		this.usage = value;

		return this;

	}

	copy( source ) {

		this.name = source.name;
		this.array = new source.array.constructor( source.array );
		this.itemSize = source.itemSize;
		this.count = source.count;
		this.normalized = source.normalized;

		this.usage = source.usage;
		this.gpuType = source.gpuType;

		return this;

	}

	copyAt( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	}

	copyArray( array ) {

		this.array.set( array );

		return this;

	}

	applyMatrix3( m ) {

		if ( this.itemSize === 2 ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector2$1.fromBufferAttribute( this, i );
				_vector2$1.applyMatrix3( m );

				this.setXY( i, _vector2$1.x, _vector2$1.y );

			}

		} else if ( this.itemSize === 3 ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$8.fromBufferAttribute( this, i );
				_vector$8.applyMatrix3( m );

				this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

			}

		}

		return this;

	}

	applyMatrix4( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$8.fromBufferAttribute( this, i );

			_vector$8.applyMatrix4( m );

			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

		}

		return this;

	}

	applyNormalMatrix( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$8.fromBufferAttribute( this, i );

			_vector$8.applyNormalMatrix( m );

			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

		}

		return this;

	}

	transformDirection( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$8.fromBufferAttribute( this, i );

			_vector$8.transformDirection( m );

			this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

		}

		return this;

	}

	set( value, offset = 0 ) {

		// Matching BufferAttribute constructor, do not normalize the array.
		this.array.set( value, offset );

		return this;

	}

	getComponent( index, component ) {

		let value = this.array[ index * this.itemSize + component ];

		if ( this.normalized ) value = denormalize( value, this.array );

		return value;

	}

	setComponent( index, component, value ) {

		if ( this.normalized ) value = normalize( value, this.array );

		this.array[ index * this.itemSize + component ] = value;

		return this;

	}

	getX( index ) {

		let x = this.array[ index * this.itemSize ];

		if ( this.normalized ) x = denormalize( x, this.array );

		return x;

	}

	setX( index, x ) {

		if ( this.normalized ) x = normalize( x, this.array );

		this.array[ index * this.itemSize ] = x;

		return this;

	}

	getY( index ) {

		let y = this.array[ index * this.itemSize + 1 ];

		if ( this.normalized ) y = denormalize( y, this.array );

		return y;

	}

	setY( index, y ) {

		if ( this.normalized ) y = normalize( y, this.array );

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	}

	getZ( index ) {

		let z = this.array[ index * this.itemSize + 2 ];

		if ( this.normalized ) z = denormalize( z, this.array );

		return z;

	}

	setZ( index, z ) {

		if ( this.normalized ) z = normalize( z, this.array );

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	}

	getW( index ) {

		let w = this.array[ index * this.itemSize + 3 ];

		if ( this.normalized ) w = denormalize( w, this.array );

		return w;

	}

	setW( index, w ) {

		if ( this.normalized ) w = normalize( w, this.array );

		this.array[ index * this.itemSize + 3 ] = w;

		return this;

	}

	setXY( index, x, y ) {

		index *= this.itemSize;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );

		}

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;

		return this;

	}

	setXYZ( index, x, y, z ) {

		index *= this.itemSize;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );
			z = normalize( z, this.array );

		}

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	}

	setXYZW( index, x, y, z, w ) {

		index *= this.itemSize;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );
			z = normalize( z, this.array );
			w = normalize( w, this.array );

		}

		this.array[ index + 0 ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	}

	onUpload( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

	clone() {

		return new this.constructor( this.array, this.itemSize ).copy( this );

	}

	toJSON() {

		const data = {
			itemSize: this.itemSize,
			type: this.array.constructor.name,
			array: Array.from( this.array ),
			normalized: this.normalized
		};

		if ( this.name !== '' ) data.name = this.name;
		if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
		if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;

		return data;

	}

}

class Uint16BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint16Array( array ), itemSize, normalized );

	}

}

class Uint32BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Uint32Array( array ), itemSize, normalized );

	}

}


class Float32BufferAttribute extends BufferAttribute {

	constructor( array, itemSize, normalized ) {

		super( new Float32Array( array ), itemSize, normalized );

	}

}

let _id$2 = 0;

const _m1 = /*@__PURE__*/ new Matrix4();
const _obj = /*@__PURE__*/ new Object3D();
const _offset = /*@__PURE__*/ new Vector3();
const _box$1$1 = /*@__PURE__*/ new Box3();
const _boxMorphTargets = /*@__PURE__*/ new Box3();
const _vector$7 = /*@__PURE__*/ new Vector3();

class BufferGeometry extends EventDispatcher {

	constructor() {

		super();

		this.isBufferGeometry = true;

		Object.defineProperty( this, 'id', { value: _id$2 ++ } );

		this.uuid = generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};
		this.morphTargetsRelative = false;

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	getIndex() {

		return this.index;

	}

	setIndex( index ) {

		if ( Array.isArray( index ) ) {

			this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

		} else {

			this.index = index;

		}

		return this;

	}

	getAttribute( name ) {

		return this.attributes[ name ];

	}

	setAttribute( name, attribute ) {

		this.attributes[ name ] = attribute;

		return this;

	}

	deleteAttribute( name ) {

		delete this.attributes[ name ];

		return this;

	}

	hasAttribute( name ) {

		return this.attributes[ name ] !== undefined;

	}

	addGroup( start, count, materialIndex = 0 ) {

		this.groups.push( {

			start: start,
			count: count,
			materialIndex: materialIndex

		} );

	}

	clearGroups() {

		this.groups = [];

	}

	setDrawRange( start, count ) {

		this.drawRange.start = start;
		this.drawRange.count = count;

	}

	applyMatrix4( matrix ) {

		const position = this.attributes.position;

		if ( position !== undefined ) {

			position.applyMatrix4( matrix );

			position.needsUpdate = true;

		}

		const normal = this.attributes.normal;

		if ( normal !== undefined ) {

			const normalMatrix = new Matrix3().getNormalMatrix( matrix );

			normal.applyNormalMatrix( normalMatrix );

			normal.needsUpdate = true;

		}

		const tangent = this.attributes.tangent;

		if ( tangent !== undefined ) {

			tangent.transformDirection( matrix );

			tangent.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	}

	applyQuaternion( q ) {

		_m1.makeRotationFromQuaternion( q );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateX( angle ) {

		// rotate geometry around world x-axis

		_m1.makeRotationX( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateY( angle ) {

		// rotate geometry around world y-axis

		_m1.makeRotationY( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	rotateZ( angle ) {

		// rotate geometry around world z-axis

		_m1.makeRotationZ( angle );

		this.applyMatrix4( _m1 );

		return this;

	}

	translate( x, y, z ) {

		// translate geometry

		_m1.makeTranslation( x, y, z );

		this.applyMatrix4( _m1 );

		return this;

	}

	scale( x, y, z ) {

		// scale geometry

		_m1.makeScale( x, y, z );

		this.applyMatrix4( _m1 );

		return this;

	}

	lookAt( vector ) {

		_obj.lookAt( vector );

		_obj.updateMatrix();

		this.applyMatrix4( _obj.matrix );

		return this;

	}

	center() {

		this.computeBoundingBox();

		this.boundingBox.getCenter( _offset ).negate();

		this.translate( _offset.x, _offset.y, _offset.z );

		return this;

	}

	setFromPoints( points ) {

		const position = [];

		for ( let i = 0, l = points.length; i < l; i ++ ) {

			const point = points[ i ];
			position.push( point.x, point.y, point.z || 0 );

		}

		this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

		return this;

	}

	computeBoundingBox() {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if ( position && position.isGLBufferAttribute ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );

			this.boundingBox.set(
				new Vector3( - Infinity, - Infinity, - Infinity ),
				new Vector3( + Infinity, + Infinity, + Infinity )
			);

			return;

		}

		if ( position !== undefined ) {

			this.boundingBox.setFromBufferAttribute( position );

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					_box$1$1.setFromBufferAttribute( morphAttribute );

					if ( this.morphTargetsRelative ) {

						_vector$7.addVectors( this.boundingBox.min, _box$1$1.min );
						this.boundingBox.expandByPoint( _vector$7 );

						_vector$7.addVectors( this.boundingBox.max, _box$1$1.max );
						this.boundingBox.expandByPoint( _vector$7 );

					} else {

						this.boundingBox.expandByPoint( _box$1$1.min );
						this.boundingBox.expandByPoint( _box$1$1.max );

					}

				}

			}

		} else {

			this.boundingBox.makeEmpty();

		}

		if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

			console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

		}

	}

	computeBoundingSphere() {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		const position = this.attributes.position;
		const morphAttributesPosition = this.morphAttributes.position;

		if ( position && position.isGLBufferAttribute ) {

			console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );

			this.boundingSphere.set( new Vector3(), Infinity );

			return;

		}

		if ( position ) {

			// first, find the center of the bounding sphere

			const center = this.boundingSphere.center;

			_box$1$1.setFromBufferAttribute( position );

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					_boxMorphTargets.setFromBufferAttribute( morphAttribute );

					if ( this.morphTargetsRelative ) {

						_vector$7.addVectors( _box$1$1.min, _boxMorphTargets.min );
						_box$1$1.expandByPoint( _vector$7 );

						_vector$7.addVectors( _box$1$1.max, _boxMorphTargets.max );
						_box$1$1.expandByPoint( _vector$7 );

					} else {

						_box$1$1.expandByPoint( _boxMorphTargets.min );
						_box$1$1.expandByPoint( _boxMorphTargets.max );

					}

				}

			}

			_box$1$1.getCenter( center );

			// second, try to find a boundingSphere with a radius smaller than the
			// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

			let maxRadiusSq = 0;

			for ( let i = 0, il = position.count; i < il; i ++ ) {

				_vector$7.fromBufferAttribute( position, i );

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

			}

			// process morph attributes if present

			if ( morphAttributesPosition ) {

				for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

					const morphAttribute = morphAttributesPosition[ i ];
					const morphTargetsRelative = this.morphTargetsRelative;

					for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

						_vector$7.fromBufferAttribute( morphAttribute, j );

						if ( morphTargetsRelative ) {

							_offset.fromBufferAttribute( position, j );
							_vector$7.add( _offset );

						}

						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

					}

				}

			}

			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

			if ( isNaN( this.boundingSphere.radius ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

			}

		}

	}

	computeTangents() {

		const index = this.index;
		const attributes = this.attributes;

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if ( index === null ||
			 attributes.position === undefined ||
			 attributes.normal === undefined ||
			 attributes.uv === undefined ) {

			console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
			return;

		}

		const indices = index.array;
		const positions = attributes.position.array;
		const normals = attributes.normal.array;
		const uvs = attributes.uv.array;

		const nVertices = positions.length / 3;

		if ( this.hasAttribute( 'tangent' ) === false ) {

			this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );

		}

		const tangents = this.getAttribute( 'tangent' ).array;

		const tan1 = [], tan2 = [];

		for ( let i = 0; i < nVertices; i ++ ) {

			tan1[ i ] = new Vector3();
			tan2[ i ] = new Vector3();

		}

		const vA = new Vector3(),
			vB = new Vector3(),
			vC = new Vector3(),

			uvA = new Vector2(),
			uvB = new Vector2(),
			uvC = new Vector2(),

			sdir = new Vector3(),
			tdir = new Vector3();

		function handleTriangle( a, b, c ) {

			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );

			uvA.fromArray( uvs, a * 2 );
			uvB.fromArray( uvs, b * 2 );
			uvC.fromArray( uvs, c * 2 );

			vB.sub( vA );
			vC.sub( vA );

			uvB.sub( uvA );
			uvC.sub( uvA );

			const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

			// silently ignore degenerate uv triangles having coincident or colinear vertices

			if ( ! isFinite( r ) ) return;

			sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
			tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		let groups = this.groups;

		if ( groups.length === 0 ) {

			groups = [ {
				start: 0,
				count: indices.length
			} ];

		}

		for ( let i = 0, il = groups.length; i < il; ++ i ) {

			const group = groups[ i ];

			const start = group.start;
			const count = group.count;

			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

				handleTriangle(
					indices[ j + 0 ],
					indices[ j + 1 ],
					indices[ j + 2 ]
				);

			}

		}

		const tmp = new Vector3(), tmp2 = new Vector3();
		const n = new Vector3(), n2 = new Vector3();

		function handleVertex( v ) {

			n.fromArray( normals, v * 3 );
			n2.copy( n );

			const t = tan1[ v ];

			// Gram-Schmidt orthogonalize

			tmp.copy( t );
			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

			// Calculate handedness

			tmp2.crossVectors( n2, t );
			const test = tmp2.dot( tan2[ v ] );
			const w = ( test < 0.0 ) ? - 1.0 : 1.0;

			tangents[ v * 4 ] = tmp.x;
			tangents[ v * 4 + 1 ] = tmp.y;
			tangents[ v * 4 + 2 ] = tmp.z;
			tangents[ v * 4 + 3 ] = w;

		}

		for ( let i = 0, il = groups.length; i < il; ++ i ) {

			const group = groups[ i ];

			const start = group.start;
			const count = group.count;

			for ( let j = start, jl = start + count; j < jl; j += 3 ) {

				handleVertex( indices[ j + 0 ] );
				handleVertex( indices[ j + 1 ] );
				handleVertex( indices[ j + 2 ] );

			}

		}

	}

	computeVertexNormals() {

		const index = this.index;
		const positionAttribute = this.getAttribute( 'position' );

		if ( positionAttribute !== undefined ) {

			let normalAttribute = this.getAttribute( 'normal' );

			if ( normalAttribute === undefined ) {

				normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
				this.setAttribute( 'normal', normalAttribute );

			} else {

				// reset existing normals to zero

				for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

					normalAttribute.setXYZ( i, 0, 0, 0 );

				}

			}

			const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
			const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
			const cb = new Vector3(), ab = new Vector3();

			// indexed elements

			if ( index ) {

				for ( let i = 0, il = index.count; i < il; i += 3 ) {

					const vA = index.getX( i + 0 );
					const vB = index.getX( i + 1 );
					const vC = index.getX( i + 2 );

					pA.fromBufferAttribute( positionAttribute, vA );
					pB.fromBufferAttribute( positionAttribute, vB );
					pC.fromBufferAttribute( positionAttribute, vC );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					nA.fromBufferAttribute( normalAttribute, vA );
					nB.fromBufferAttribute( normalAttribute, vB );
					nC.fromBufferAttribute( normalAttribute, vC );

					nA.add( cb );
					nB.add( cb );
					nC.add( cb );

					normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
					normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
					normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

					pA.fromBufferAttribute( positionAttribute, i + 0 );
					pB.fromBufferAttribute( positionAttribute, i + 1 );
					pC.fromBufferAttribute( positionAttribute, i + 2 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
					normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
					normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

				}

			}

			this.normalizeNormals();

			normalAttribute.needsUpdate = true;

		}

	}

	normalizeNormals() {

		const normals = this.attributes.normal;

		for ( let i = 0, il = normals.count; i < il; i ++ ) {

			_vector$7.fromBufferAttribute( normals, i );

			_vector$7.normalize();

			normals.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

		}

	}

	toNonIndexed() {

		function convertBufferAttribute( attribute, indices ) {

			const array = attribute.array;
			const itemSize = attribute.itemSize;
			const normalized = attribute.normalized;

			const array2 = new array.constructor( indices.length * itemSize );

			let index = 0, index2 = 0;

			for ( let i = 0, l = indices.length; i < l; i ++ ) {

				if ( attribute.isInterleavedBufferAttribute ) {

					index = indices[ i ] * attribute.data.stride + attribute.offset;

				} else {

					index = indices[ i ] * itemSize;

				}

				for ( let j = 0; j < itemSize; j ++ ) {

					array2[ index2 ++ ] = array[ index ++ ];

				}

			}

			return new BufferAttribute( array2, itemSize, normalized );

		}

		//

		if ( this.index === null ) {

			console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
			return this;

		}

		const geometry2 = new BufferGeometry();

		const indices = this.index.array;
		const attributes = this.attributes;

		// attributes

		for ( const name in attributes ) {

			const attribute = attributes[ name ];

			const newAttribute = convertBufferAttribute( attribute, indices );

			geometry2.setAttribute( name, newAttribute );

		}

		// morph attributes

		const morphAttributes = this.morphAttributes;

		for ( const name in morphAttributes ) {

			const morphArray = [];
			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

				const attribute = morphAttribute[ i ];

				const newAttribute = convertBufferAttribute( attribute, indices );

				morphArray.push( newAttribute );

			}

			geometry2.morphAttributes[ name ] = morphArray;

		}

		geometry2.morphTargetsRelative = this.morphTargetsRelative;

		// groups

		const groups = this.groups;

		for ( let i = 0, l = groups.length; i < l; i ++ ) {

			const group = groups[ i ];
			geometry2.addGroup( group.start, group.count, group.materialIndex );

		}

		return geometry2;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.6,
				type: 'BufferGeometry',
				generator: 'BufferGeometry.toJSON'
			}
		};

		// standard BufferGeometry serialization

		data.uuid = this.uuid;
		data.type = this.type;
		if ( this.name !== '' ) data.name = this.name;
		if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

		if ( this.parameters !== undefined ) {

			const parameters = this.parameters;

			for ( const key in parameters ) {

				if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

			}

			return data;

		}

		// for simplicity the code assumes attributes are not shared across geometries, see #15811

		data.data = { attributes: {} };

		const index = this.index;

		if ( index !== null ) {

			data.data.index = {
				type: index.array.constructor.name,
				array: Array.prototype.slice.call( index.array )
			};

		}

		const attributes = this.attributes;

		for ( const key in attributes ) {

			const attribute = attributes[ key ];

			data.data.attributes[ key ] = attribute.toJSON( data.data );

		}

		const morphAttributes = {};
		let hasMorphAttributes = false;

		for ( const key in this.morphAttributes ) {

			const attributeArray = this.morphAttributes[ key ];

			const array = [];

			for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

				const attribute = attributeArray[ i ];

				array.push( attribute.toJSON( data.data ) );

			}

			if ( array.length > 0 ) {

				morphAttributes[ key ] = array;

				hasMorphAttributes = true;

			}

		}

		if ( hasMorphAttributes ) {

			data.data.morphAttributes = morphAttributes;
			data.data.morphTargetsRelative = this.morphTargetsRelative;

		}

		const groups = this.groups;

		if ( groups.length > 0 ) {

			data.data.groups = JSON.parse( JSON.stringify( groups ) );

		}

		const boundingSphere = this.boundingSphere;

		if ( boundingSphere !== null ) {

			data.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			};

		}

		return data;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		// reset

		this.index = null;
		this.attributes = {};
		this.morphAttributes = {};
		this.groups = [];
		this.boundingBox = null;
		this.boundingSphere = null;

		// used for storing cloned, shared data

		const data = {};

		// name

		this.name = source.name;

		// index

		const index = source.index;

		if ( index !== null ) {

			this.setIndex( index.clone( data ) );

		}

		// attributes

		const attributes = source.attributes;

		for ( const name in attributes ) {

			const attribute = attributes[ name ];
			this.setAttribute( name, attribute.clone( data ) );

		}

		// morph attributes

		const morphAttributes = source.morphAttributes;

		for ( const name in morphAttributes ) {

			const array = [];
			const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

			for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

				array.push( morphAttribute[ i ].clone( data ) );

			}

			this.morphAttributes[ name ] = array;

		}

		this.morphTargetsRelative = source.morphTargetsRelative;

		// groups

		const groups = source.groups;

		for ( let i = 0, l = groups.length; i < l; i ++ ) {

			const group = groups[ i ];
			this.addGroup( group.start, group.count, group.materialIndex );

		}

		// bounding box

		const boundingBox = source.boundingBox;

		if ( boundingBox !== null ) {

			this.boundingBox = boundingBox.clone();

		}

		// bounding sphere

		const boundingSphere = source.boundingSphere;

		if ( boundingSphere !== null ) {

			this.boundingSphere = boundingSphere.clone();

		}

		// draw range

		this.drawRange.start = source.drawRange.start;
		this.drawRange.count = source.drawRange.count;

		// user data

		this.userData = source.userData;

		return this;

	}

	dispose() {

		this.dispatchEvent( { type: 'dispose' } );

	}

}

const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
const _ray$3 = /*@__PURE__*/ new Ray();
const _sphere$5 = /*@__PURE__*/ new Sphere();
const _sphereHitAt = /*@__PURE__*/ new Vector3();

const _vA$1 = /*@__PURE__*/ new Vector3();
const _vB$1 = /*@__PURE__*/ new Vector3();
const _vC$1 = /*@__PURE__*/ new Vector3();

const _tempA = /*@__PURE__*/ new Vector3();
const _morphA = /*@__PURE__*/ new Vector3();

const _uvA$1 = /*@__PURE__*/ new Vector2();
const _uvB$1 = /*@__PURE__*/ new Vector2();
const _uvC$1 = /*@__PURE__*/ new Vector2();

const _normalA = /*@__PURE__*/ new Vector3();
const _normalB = /*@__PURE__*/ new Vector3();
const _normalC = /*@__PURE__*/ new Vector3();

const _intersectionPoint = /*@__PURE__*/ new Vector3();
const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

class Mesh extends Object3D {

	constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

		super();

		this.isMesh = true;

		this.type = 'Mesh';

		this.geometry = geometry;
		this.material = material;

		this.updateMorphTargets();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		if ( source.morphTargetInfluences !== undefined ) {

			this.morphTargetInfluences = source.morphTargetInfluences.slice();

		}

		if ( source.morphTargetDictionary !== undefined ) {

			this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

		}

		this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
		this.geometry = source.geometry;

		return this;

	}

	updateMorphTargets() {

		const geometry = this.geometry;

		const morphAttributes = geometry.morphAttributes;
		const keys = Object.keys( morphAttributes );

		if ( keys.length > 0 ) {

			const morphAttribute = morphAttributes[ keys[ 0 ] ];

			if ( morphAttribute !== undefined ) {

				this.morphTargetInfluences = [];
				this.morphTargetDictionary = {};

				for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

					const name = morphAttribute[ m ].name || String( m );

					this.morphTargetInfluences.push( 0 );
					this.morphTargetDictionary[ name ] = m;

				}

			}

		}

	}

	getVertexPosition( index, target ) {

		const geometry = this.geometry;
		const position = geometry.attributes.position;
		const morphPosition = geometry.morphAttributes.position;
		const morphTargetsRelative = geometry.morphTargetsRelative;

		target.fromBufferAttribute( position, index );

		const morphInfluences = this.morphTargetInfluences;

		if ( morphPosition && morphInfluences ) {

			_morphA.set( 0, 0, 0 );

			for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

				const influence = morphInfluences[ i ];
				const morphAttribute = morphPosition[ i ];

				if ( influence === 0 ) continue;

				_tempA.fromBufferAttribute( morphAttribute, index );

				if ( morphTargetsRelative ) {

					_morphA.addScaledVector( _tempA, influence );

				} else {

					_morphA.addScaledVector( _tempA.sub( target ), influence );

				}

			}

			target.add( _morphA );

		}

		return target;

	}

	raycast( raycaster, intersects ) {

		const geometry = this.geometry;
		const material = this.material;
		const matrixWorld = this.matrixWorld;

		if ( material === undefined ) return;

		// test with bounding sphere in world space

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		_sphere$5.copy( geometry.boundingSphere );
		_sphere$5.applyMatrix4( matrixWorld );

		// check distance from ray origin to bounding sphere

		_ray$3.copy( raycaster.ray ).recast( raycaster.near );

		if ( _sphere$5.containsPoint( _ray$3.origin ) === false ) {

			if ( _ray$3.intersectSphere( _sphere$5, _sphereHitAt ) === null ) return;

			if ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

		}

		// convert ray to local space of mesh

		_inverseMatrix$3.copy( matrixWorld ).invert();
		_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );

		// test with bounding box in local space

		if ( geometry.boundingBox !== null ) {

			if ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;

		}

		// test for intersections with geometry

		this._computeIntersections( raycaster, intersects, _ray$3 );

	}

	_computeIntersections( raycaster, intersects, rayLocalSpace ) {

		let intersection;

		const geometry = this.geometry;
		const material = this.material;

		const index = geometry.index;
		const position = geometry.attributes.position;
		const uv = geometry.attributes.uv;
		const uv1 = geometry.attributes.uv1;
		const normal = geometry.attributes.normal;
		const groups = geometry.groups;
		const drawRange = geometry.drawRange;

		if ( index !== null ) {

			// indexed buffer geometry

			if ( Array.isArray( material ) ) {

				for ( let i = 0, il = groups.length; i < il; i ++ ) {

					const group = groups[ i ];
					const groupMaterial = material[ group.materialIndex ];

					const start = Math.max( group.start, drawRange.start );
					const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

					for ( let j = start, jl = end; j < jl; j += 3 ) {

						const a = index.getX( j );
						const b = index.getX( j + 1 );
						const c = index.getX( j + 2 );

						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
							intersection.face.materialIndex = group.materialIndex;
							intersects.push( intersection );

						}

					}

				}

			} else {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, il = end; i < il; i += 3 ) {

					const a = index.getX( i );
					const b = index.getX( i + 1 );
					const c = index.getX( i + 2 );

					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

					if ( intersection ) {

						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
						intersects.push( intersection );

					}

				}

			}

		} else if ( position !== undefined ) {

			// non-indexed buffer geometry

			if ( Array.isArray( material ) ) {

				for ( let i = 0, il = groups.length; i < il; i ++ ) {

					const group = groups[ i ];
					const groupMaterial = material[ group.materialIndex ];

					const start = Math.max( group.start, drawRange.start );
					const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

					for ( let j = start, jl = end; j < jl; j += 3 ) {

						const a = j;
						const b = j + 1;
						const c = j + 2;

						intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
							intersection.face.materialIndex = group.materialIndex;
							intersects.push( intersection );

						}

					}

				}

			} else {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, il = end; i < il; i += 3 ) {

					const a = i;
					const b = i + 1;
					const c = i + 2;

					intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

					if ( intersection ) {

						intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
						intersects.push( intersection );

					}

				}

			}

		}

	}

}

function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

	let intersect;

	if ( material.side === BackSide ) {

		intersect = ray.intersectTriangle( pC, pB, pA, true, point );

	} else {

		intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );

	}

	if ( intersect === null ) return null;

	_intersectionPointWorld.copy( point );
	_intersectionPointWorld.applyMatrix4( object.matrixWorld );

	const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

	if ( distance < raycaster.near || distance > raycaster.far ) return null;

	return {
		distance: distance,
		point: _intersectionPointWorld.clone(),
		object: object
	};

}

function checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

	object.getVertexPosition( a, _vA$1 );
	object.getVertexPosition( b, _vB$1 );
	object.getVertexPosition( c, _vC$1 );

	const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

	if ( intersection ) {

		if ( uv ) {

			_uvA$1.fromBufferAttribute( uv, a );
			_uvB$1.fromBufferAttribute( uv, b );
			_uvC$1.fromBufferAttribute( uv, c );

			intersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

		}

		if ( uv1 ) {

			_uvA$1.fromBufferAttribute( uv1, a );
			_uvB$1.fromBufferAttribute( uv1, b );
			_uvC$1.fromBufferAttribute( uv1, c );

			intersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
			intersection.uv2 = intersection.uv1; // @deprecated, r152

		}

		if ( normal ) {

			_normalA.fromBufferAttribute( normal, a );
			_normalB.fromBufferAttribute( normal, b );
			_normalC.fromBufferAttribute( normal, c );

			intersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3() );

			if ( intersection.normal.dot( ray.direction ) > 0 ) {

				intersection.normal.multiplyScalar( - 1 );

			}

		}

		const face = {
			a: a,
			b: b,
			c: c,
			normal: new Vector3(),
			materialIndex: 0
		};

		Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

		intersection.face = face;

	}

	return intersection;

}

class BoxGeometry extends BufferGeometry {

	constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

		super();

		this.type = 'BoxGeometry';

		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};

		const scope = this;

		// segments

		widthSegments = Math.floor( widthSegments );
		heightSegments = Math.floor( heightSegments );
		depthSegments = Math.floor( depthSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let numberOfVertices = 0;
		let groupStart = 0;

		// build each side of the box geometry

		buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
		buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
		buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
		buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
		buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
		buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

			const segmentWidth = width / gridX;
			const segmentHeight = height / gridY;

			const widthHalf = width / 2;
			const heightHalf = height / 2;
			const depthHalf = depth / 2;

			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;

			let vertexCounter = 0;
			let groupCount = 0;

			const vector = new Vector3();

			// generate vertices, normals and uvs

			for ( let iy = 0; iy < gridY1; iy ++ ) {

				const y = iy * segmentHeight - heightHalf;

				for ( let ix = 0; ix < gridX1; ix ++ ) {

					const x = ix * segmentWidth - widthHalf;

					// set values to correct vector component

					vector[ u ] = x * udir;
					vector[ v ] = y * vdir;
					vector[ w ] = depthHalf;

					// now apply vector to vertex buffer

					vertices.push( vector.x, vector.y, vector.z );

					// set values to correct vector component

					vector[ u ] = 0;
					vector[ v ] = 0;
					vector[ w ] = depth > 0 ? 1 : - 1;

					// now apply vector to normal buffer

					normals.push( vector.x, vector.y, vector.z );

					// uvs

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

					// counters

					vertexCounter += 1;

				}

			}

			// indices

			// 1. you need three indices to draw a single face
			// 2. a single segment consists of two faces
			// 3. so we need to generate six (2*3) indices per segment

			for ( let iy = 0; iy < gridY; iy ++ ) {

				for ( let ix = 0; ix < gridX; ix ++ ) {

					const a = numberOfVertices + ix + gridX1 * iy;
					const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
					const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
					const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// increase counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, materialIndex );

			// calculate new start value for groups

			groupStart += groupCount;

			// update total number of vertices

			numberOfVertices += vertexCounter;

		}

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	static fromJSON( data ) {

		return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

	}

}

/**
 * Uniform Utilities
 */

function cloneUniforms( src ) {

	const dst = {};

	for ( const u in src ) {

		dst[ u ] = {};

		for ( const p in src[ u ] ) {

			const property = src[ u ][ p ];

			if ( property && ( property.isColor ||
				property.isMatrix3 || property.isMatrix4 ||
				property.isVector2 || property.isVector3 || property.isVector4 ||
				property.isTexture || property.isQuaternion ) ) {

				if ( property.isRenderTargetTexture ) {

					console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
					dst[ u ][ p ] = null;

				} else {

					dst[ u ][ p ] = property.clone();

				}

			} else if ( Array.isArray( property ) ) {

				dst[ u ][ p ] = property.slice();

			} else {

				dst[ u ][ p ] = property;

			}

		}

	}

	return dst;

}

function mergeUniforms( uniforms ) {

	const merged = {};

	for ( let u = 0; u < uniforms.length; u ++ ) {

		const tmp = cloneUniforms( uniforms[ u ] );

		for ( const p in tmp ) {

			merged[ p ] = tmp[ p ];

		}

	}

	return merged;

}

function cloneUniformsGroups( src ) {

	const dst = [];

	for ( let u = 0; u < src.length; u ++ ) {

		dst.push( src[ u ].clone() );

	}

	return dst;

}

function getUnlitUniformColorSpace( renderer ) {

	if ( renderer.getRenderTarget() === null ) {

		// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
		return renderer.outputColorSpace;

	}

	return LinearSRGBColorSpace;

}

// Legacy

const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

class ShaderMaterial extends Material {

	constructor( parameters ) {

		super();

		this.isShaderMaterial = true;

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};
		this.uniformsGroups = [];

		this.vertexShader = default_vertex;
		this.fragmentShader = default_fragment;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.forceSinglePass = true;

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv1': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		this.glslVersion = null;

		if ( parameters !== undefined ) {

			this.setValues( parameters );

		}

	}

	copy( source ) {

		super.copy( source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = cloneUniforms( source.uniforms );
		this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );

		this.defines = Object.assign( {}, source.defines );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.fog = source.fog;
		this.lights = source.lights;
		this.clipping = source.clipping;

		this.extensions = Object.assign( {}, source.extensions );

		this.glslVersion = source.glslVersion;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.glslVersion = this.glslVersion;
		data.uniforms = {};

		for ( const name in this.uniforms ) {

			const uniform = this.uniforms[ name ];
			const value = uniform.value;

			if ( value && value.isTexture ) {

				data.uniforms[ name ] = {
					type: 't',
					value: value.toJSON( meta ).uuid
				};

			} else if ( value && value.isColor ) {

				data.uniforms[ name ] = {
					type: 'c',
					value: value.getHex()
				};

			} else if ( value && value.isVector2 ) {

				data.uniforms[ name ] = {
					type: 'v2',
					value: value.toArray()
				};

			} else if ( value && value.isVector3 ) {

				data.uniforms[ name ] = {
					type: 'v3',
					value: value.toArray()
				};

			} else if ( value && value.isVector4 ) {

				data.uniforms[ name ] = {
					type: 'v4',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix3 ) {

				data.uniforms[ name ] = {
					type: 'm3',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix4 ) {

				data.uniforms[ name ] = {
					type: 'm4',
					value: value.toArray()
				};

			} else {

				data.uniforms[ name ] = {
					value: value
				};

				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

			}

		}

		if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		data.lights = this.lights;
		data.clipping = this.clipping;

		const extensions = {};

		for ( const key in this.extensions ) {

			if ( this.extensions[ key ] === true ) extensions[ key ] = true;

		}

		if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

		return data;

	}

}

class Camera extends Object3D {

	constructor() {

		super();

		this.isCamera = true;

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();

		this.projectionMatrix = new Matrix4();
		this.projectionMatrixInverse = new Matrix4();

		this.coordinateSystem = WebGLCoordinateSystem;

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.matrixWorldInverse.copy( source.matrixWorldInverse );

		this.projectionMatrix.copy( source.projectionMatrix );
		this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

		this.coordinateSystem = source.coordinateSystem;

		return this;

	}

	getWorldDirection( target ) {

		this.updateWorldMatrix( true, false );

		const e = this.matrixWorld.elements;

		return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

	}

	updateMatrixWorld( force ) {

		super.updateMatrixWorld( force );

		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

	}

	updateWorldMatrix( updateParents, updateChildren ) {

		super.updateWorldMatrix( updateParents, updateChildren );

		this.matrixWorldInverse.copy( this.matrixWorld ).invert();

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

class PerspectiveCamera extends Camera {

	constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

		super();

		this.isPerspectiveCamera = true;

		this.type = 'PerspectiveCamera';

		this.fov = fov;
		this.zoom = 1;

		this.near = near;
		this.far = far;
		this.focus = 10;

		this.aspect = aspect;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.fov = source.fov;
		this.zoom = source.zoom;

		this.near = source.near;
		this.far = source.far;
		this.focus = source.focus;

		this.aspect = source.aspect;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		this.filmGauge = source.filmGauge;
		this.filmOffset = source.filmOffset;

		return this;

	}

	/**
	 * Sets the FOV by focal length in respect to the current .filmGauge.
	 *
	 * The default film gauge is 35, so that the focal length can be specified for
	 * a 35mm (full frame) camera.
	 *
	 * Values for focal length and film gauge must have the same unit.
	 */
	setFocalLength( focalLength ) {

		/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
		const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

		this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
		this.updateProjectionMatrix();

	}

	/**
	 * Calculates the focal length from the current .fov and .filmGauge.
	 */
	getFocalLength() {

		const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

		return 0.5 * this.getFilmHeight() / vExtentSlope;

	}

	getEffectiveFOV() {

		return RAD2DEG * 2 * Math.atan(
			Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

	}

	getFilmWidth() {

		// film not completely covered in portrait format (aspect < 1)
		return this.filmGauge * Math.min( this.aspect, 1 );

	}

	getFilmHeight() {

		// film not completely covered in landscape format (aspect > 1)
		return this.filmGauge / Math.max( this.aspect, 1 );

	}

	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   const w = 1920;
	 *   const h = 1080;
	 *   const fullWidth = w * 3;
	 *   const fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

		this.aspect = fullWidth / fullHeight;

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const near = this.near;
		let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
		let height = 2 * top;
		let width = this.aspect * height;
		let left = - 0.5 * width;
		const view = this.view;

		if ( this.view !== null && this.view.enabled ) {

			const fullWidth = view.fullWidth,
				fullHeight = view.fullHeight;

			left += view.offsetX * width / fullWidth;
			top -= view.offsetY * height / fullHeight;
			width *= view.width / fullWidth;
			height *= view.height / fullHeight;

		}

		const skew = this.filmOffset;
		if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

		this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.fov = this.fov;
		data.object.zoom = this.zoom;

		data.object.near = this.near;
		data.object.far = this.far;
		data.object.focus = this.focus;

		data.object.aspect = this.aspect;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		data.object.filmGauge = this.filmGauge;
		data.object.filmOffset = this.filmOffset;

		return data;

	}

}

const fov = - 90; // negative fov is not an error
const aspect = 1;

class CubeCamera extends Object3D {

	constructor( near, far, renderTarget ) {

		super();

		this.type = 'CubeCamera';

		this.renderTarget = renderTarget;
		this.coordinateSystem = null;

		const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.layers = this.layers;
		this.add( cameraPX );

		const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.layers = this.layers;
		this.add( cameraNX );

		const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.layers = this.layers;
		this.add( cameraPY );

		const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.layers = this.layers;
		this.add( cameraNY );

		const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.layers = this.layers;
		this.add( cameraPZ );

		const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.layers = this.layers;
		this.add( cameraNZ );

	}

	updateCoordinateSystem() {

		const coordinateSystem = this.coordinateSystem;

		const cameras = this.children.concat();

		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

		for ( const camera of cameras ) this.remove( camera );

		if ( coordinateSystem === WebGLCoordinateSystem ) {

			cameraPX.up.set( 0, 1, 0 );
			cameraPX.lookAt( 1, 0, 0 );

			cameraNX.up.set( 0, 1, 0 );
			cameraNX.lookAt( - 1, 0, 0 );

			cameraPY.up.set( 0, 0, - 1 );
			cameraPY.lookAt( 0, 1, 0 );

			cameraNY.up.set( 0, 0, 1 );
			cameraNY.lookAt( 0, - 1, 0 );

			cameraPZ.up.set( 0, 1, 0 );
			cameraPZ.lookAt( 0, 0, 1 );

			cameraNZ.up.set( 0, 1, 0 );
			cameraNZ.lookAt( 0, 0, - 1 );

		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( - 1, 0, 0 );

			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( 1, 0, 0 );

			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( 0, 1, 0 );

			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( 0, - 1, 0 );

			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( 0, 0, 1 );

			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( 0, 0, - 1 );

		} else {

			throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

		}

		for ( const camera of cameras ) {

			this.add( camera );

			camera.updateMatrixWorld();

		}

	}

	update( renderer, scene ) {

		if ( this.parent === null ) this.updateMatrixWorld();

		const renderTarget = this.renderTarget;

		if ( this.coordinateSystem !== renderer.coordinateSystem ) {

			this.coordinateSystem = renderer.coordinateSystem;

			this.updateCoordinateSystem();

		}

		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

		const currentRenderTarget = renderer.getRenderTarget();

		const currentXrEnabled = renderer.xr.enabled;

		renderer.xr.enabled = false;

		const generateMipmaps = renderTarget.texture.generateMipmaps;

		renderTarget.texture.generateMipmaps = false;

		renderer.setRenderTarget( renderTarget, 0 );
		renderer.render( scene, cameraPX );

		renderer.setRenderTarget( renderTarget, 1 );
		renderer.render( scene, cameraNX );

		renderer.setRenderTarget( renderTarget, 2 );
		renderer.render( scene, cameraPY );

		renderer.setRenderTarget( renderTarget, 3 );
		renderer.render( scene, cameraNY );

		renderer.setRenderTarget( renderTarget, 4 );
		renderer.render( scene, cameraPZ );

		renderTarget.texture.generateMipmaps = generateMipmaps;

		renderer.setRenderTarget( renderTarget, 5 );
		renderer.render( scene, cameraNZ );

		renderer.setRenderTarget( currentRenderTarget );

		renderer.xr.enabled = currentXrEnabled;

		renderTarget.texture.needsPMREMUpdate = true;

	}

}

class CubeTexture extends Texture {

	constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

		super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

		this.isCubeTexture = true;

		this.flipY = false;

	}

	get images() {

		return this.image;

	}

	set images( value ) {

		this.image = value;

	}

}

class WebGLCubeRenderTarget extends WebGLRenderTarget {

	constructor( size = 1, options = {} ) {

		super( size, size, options );

		this.isWebGLCubeRenderTarget = true;

		const image = { width: size, height: size, depth: 1 };
		const images = [ image, image, image, image, image, image ];

		if ( options.encoding !== undefined ) {

			// @deprecated, r152
			warnOnce( 'THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.' );
			options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

		}

		this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

		// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
		// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
		// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

		// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
		// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
		// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

		this.texture.isRenderTargetTexture = true;

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

	}

	fromEquirectangularTexture( renderer, texture ) {

		this.texture.type = texture.type;
		this.texture.colorSpace = texture.colorSpace;

		this.texture.generateMipmaps = texture.generateMipmaps;
		this.texture.minFilter = texture.minFilter;
		this.texture.magFilter = texture.magFilter;

		const shader = {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

			fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
		};

		const geometry = new BoxGeometry( 5, 5, 5 );

		const material = new ShaderMaterial( {

			name: 'CubemapFromEquirect',

			uniforms: cloneUniforms( shader.uniforms ),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide,
			blending: NoBlending

		} );

		material.uniforms.tEquirect.value = texture;

		const mesh = new Mesh( geometry, material );

		const currentMinFilter = texture.minFilter;

		// Avoid blurred poles
		if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

		const camera = new CubeCamera( 1, 10, this );
		camera.update( renderer, mesh );

		texture.minFilter = currentMinFilter;

		mesh.geometry.dispose();
		mesh.material.dispose();

		return this;

	}

	clear( renderer, color, depth, stencil ) {

		const currentRenderTarget = renderer.getRenderTarget();

		for ( let i = 0; i < 6; i ++ ) {

			renderer.setRenderTarget( this, i );

			renderer.clear( color, depth, stencil );

		}

		renderer.setRenderTarget( currentRenderTarget );

	}

}

const _vector1 = /*@__PURE__*/ new Vector3();
const _vector2 = /*@__PURE__*/ new Vector3();
const _normalMatrix = /*@__PURE__*/ new Matrix3();

class Plane {

	constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

		this.isPlane = true;

		// normal is assumed to be normalized

		this.normal = normal;
		this.constant = constant;

	}

	set( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	}

	setComponents( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	}

	setFromNormalAndCoplanarPoint( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );

		return this;

	}

	setFromCoplanarPoints( a, b, c ) {

		const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

		this.setFromNormalAndCoplanarPoint( normal, a );

		return this;

	}

	copy( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	}

	normalize() {

		// Note: will lead to a divide by zero if the plane is invalid.

		const inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	}

	negate() {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	}

	distanceToPoint( point ) {

		return this.normal.dot( point ) + this.constant;

	}

	distanceToSphere( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	}

	projectPoint( point, target ) {

		return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

	}

	intersectLine( line, target ) {

		const direction = line.delta( _vector1 );

		const denominator = this.normal.dot( direction );

		if ( denominator === 0 ) {

			// line is coplanar, return origin
			if ( this.distanceToPoint( line.start ) === 0 ) {

				return target.copy( line.start );

			}

			// Unsure if this is the correct method to handle this case.
			return null;

		}

		const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

		if ( t < 0 || t > 1 ) {

			return null;

		}

		return target.copy( line.start ).addScaledVector( direction, t );

	}

	intersectsLine( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		const startSign = this.distanceToPoint( line.start );
		const endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	}

	intersectsBox( box ) {

		return box.intersectsPlane( this );

	}

	intersectsSphere( sphere ) {

		return sphere.intersectsPlane( this );

	}

	coplanarPoint( target ) {

		return target.copy( this.normal ).multiplyScalar( - this.constant );

	}

	applyMatrix4( matrix, optionalNormalMatrix ) {

		const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

		const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

		const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

		this.constant = - referencePoint.dot( normal );

		return this;

	}

	translate( offset ) {

		this.constant -= offset.dot( this.normal );

		return this;

	}

	equals( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _sphere$4 = /*@__PURE__*/ new Sphere();
const _vector$6 = /*@__PURE__*/ new Vector3();

class Frustum {

	constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

		this.planes = [ p0, p1, p2, p3, p4, p5 ];

	}

	set( p0, p1, p2, p3, p4, p5 ) {

		const planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	}

	copy( frustum ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	}

	setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {

		const planes = this.planes;
		const me = m.elements;
		const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

		if ( coordinateSystem === WebGLCoordinateSystem ) {

			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

			planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

		} else {

			throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

		}

		return this;

	}

	intersectsObject( object ) {

		if ( object.boundingSphere !== undefined ) {

			if ( object.boundingSphere === null ) object.computeBoundingSphere();

			_sphere$4.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

		} else {

			const geometry = object.geometry;

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

		}

		return this.intersectsSphere( _sphere$4 );

	}

	intersectsSprite( sprite ) {

		_sphere$4.center.set( 0, 0, 0 );
		_sphere$4.radius = 0.7071067811865476;
		_sphere$4.applyMatrix4( sprite.matrixWorld );

		return this.intersectsSphere( _sphere$4 );

	}

	intersectsSphere( sphere ) {

		const planes = this.planes;
		const center = sphere.center;
		const negRadius = - sphere.radius;

		for ( let i = 0; i < 6; i ++ ) {

			const distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	}

	intersectsBox( box ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			const plane = planes[ i ];

			// corner at max distance

			_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
			_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
			_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;

			if ( plane.distanceToPoint( _vector$6 ) < 0 ) {

				return false;

			}

		}

		return true;

	}

	containsPoint( point ) {

		const planes = this.planes;

		for ( let i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

function WebGLAnimation() {

	let context = null;
	let isAnimating = false;
	let animationLoop = null;
	let requestId = null;

	function onAnimationFrame( time, frame ) {

		animationLoop( time, frame );

		requestId = context.requestAnimationFrame( onAnimationFrame );

	}

	return {

		start: function () {

			if ( isAnimating === true ) return;
			if ( animationLoop === null ) return;

			requestId = context.requestAnimationFrame( onAnimationFrame );

			isAnimating = true;

		},

		stop: function () {

			context.cancelAnimationFrame( requestId );

			isAnimating = false;

		},

		setAnimationLoop: function ( callback ) {

			animationLoop = callback;

		},

		setContext: function ( value ) {

			context = value;

		}

	};

}

function WebGLAttributes( gl, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	const buffers = new WeakMap();

	function createBuffer( attribute, bufferType ) {

		const array = attribute.array;
		const usage = attribute.usage;

		const buffer = gl.createBuffer();

		gl.bindBuffer( bufferType, buffer );
		gl.bufferData( bufferType, array, usage );

		attribute.onUploadCallback();

		let type;

		if ( array instanceof Float32Array ) {

			type = gl.FLOAT;

		} else if ( array instanceof Uint16Array ) {

			if ( attribute.isFloat16BufferAttribute ) {

				if ( isWebGL2 ) {

					type = gl.HALF_FLOAT;

				} else {

					throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );

				}

			} else {

				type = gl.UNSIGNED_SHORT;

			}

		} else if ( array instanceof Int16Array ) {

			type = gl.SHORT;

		} else if ( array instanceof Uint32Array ) {

			type = gl.UNSIGNED_INT;

		} else if ( array instanceof Int32Array ) {

			type = gl.INT;

		} else if ( array instanceof Int8Array ) {

			type = gl.BYTE;

		} else if ( array instanceof Uint8Array ) {

			type = gl.UNSIGNED_BYTE;

		} else if ( array instanceof Uint8ClampedArray ) {

			type = gl.UNSIGNED_BYTE;

		} else {

			throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

		}

		return {
			buffer: buffer,
			type: type,
			bytesPerElement: array.BYTES_PER_ELEMENT,
			version: attribute.version
		};

	}

	function updateBuffer( buffer, attribute, bufferType ) {

		const array = attribute.array;
		const updateRange = attribute.updateRange;

		gl.bindBuffer( bufferType, buffer );

		if ( updateRange.count === - 1 ) {

			// Not using update ranges

			gl.bufferSubData( bufferType, 0, array );

		} else {

			if ( isWebGL2 ) {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array, updateRange.offset, updateRange.count );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

			}

			updateRange.count = - 1; // reset range

		}

		attribute.onUploadCallback();

	}

	//

	function get( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		return buffers.get( attribute );

	}

	function remove( attribute ) {

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		const data = buffers.get( attribute );

		if ( data ) {

			gl.deleteBuffer( data.buffer );

			buffers.delete( attribute );

		}

	}

	function update( attribute, bufferType ) {

		if ( attribute.isGLBufferAttribute ) {

			const cached = buffers.get( attribute );

			if ( ! cached || cached.version < attribute.version ) {

				buffers.set( attribute, {
					buffer: attribute.buffer,
					type: attribute.type,
					bytesPerElement: attribute.elementSize,
					version: attribute.version
				} );

			}

			return;

		}

		if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

		const data = buffers.get( attribute );

		if ( data === undefined ) {

			buffers.set( attribute, createBuffer( attribute, bufferType ) );

		} else if ( data.version < attribute.version ) {

			updateBuffer( data.buffer, attribute, bufferType );

			data.version = attribute.version;

		}

	}

	return {

		get: get,
		remove: remove,
		update: update

	};

}

class PlaneGeometry extends BufferGeometry {

	constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

		super();

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		const width_half = width / 2;
		const height_half = height / 2;

		const gridX = Math.floor( widthSegments );
		const gridY = Math.floor( heightSegments );

		const gridX1 = gridX + 1;
		const gridY1 = gridY + 1;

		const segment_width = width / gridX;
		const segment_height = height / gridY;

		//

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		for ( let iy = 0; iy < gridY1; iy ++ ) {

			const y = iy * segment_height - height_half;

			for ( let ix = 0; ix < gridX1; ix ++ ) {

				const x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		for ( let iy = 0; iy < gridY; iy ++ ) {

			for ( let ix = 0; ix < gridX; ix ++ ) {

				const a = ix + gridX1 * iy;
				const b = ix + gridX1 * ( iy + 1 );
				const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				const d = ( ix + 1 ) + gridX1 * iy;

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	static fromJSON( data ) {

		return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

	}

}

var alphahash_fragment = "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";

var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";

var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";

var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";

var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

var bsdfs = "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";

var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";

var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";

var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";

var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

var colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";

var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";

var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";

var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";

var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";

var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";

var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tanisotropyV /= material.anisotropy;\n\tmaterial.anisotropy = saturate( material.anisotropy );\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";

var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";

var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";

var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";

var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";

var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";

var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";

var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";

var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";

var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";

var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

const ShaderChunk = {
	alphahash_fragment: alphahash_fragment,
	alphahash_pars_fragment: alphahash_pars_fragment,
	alphamap_fragment: alphamap_fragment,
	alphamap_pars_fragment: alphamap_pars_fragment,
	alphatest_fragment: alphatest_fragment,
	alphatest_pars_fragment: alphatest_pars_fragment,
	aomap_fragment: aomap_fragment,
	aomap_pars_fragment: aomap_pars_fragment,
	begin_vertex: begin_vertex,
	beginnormal_vertex: beginnormal_vertex,
	bsdfs: bsdfs,
	iridescence_fragment: iridescence_fragment,
	bumpmap_pars_fragment: bumpmap_pars_fragment,
	clipping_planes_fragment: clipping_planes_fragment,
	clipping_planes_pars_fragment: clipping_planes_pars_fragment,
	clipping_planes_pars_vertex: clipping_planes_pars_vertex,
	clipping_planes_vertex: clipping_planes_vertex,
	color_fragment: color_fragment,
	color_pars_fragment: color_pars_fragment,
	color_pars_vertex: color_pars_vertex,
	color_vertex: color_vertex,
	common: common,
	cube_uv_reflection_fragment: cube_uv_reflection_fragment,
	defaultnormal_vertex: defaultnormal_vertex,
	displacementmap_pars_vertex: displacementmap_pars_vertex,
	displacementmap_vertex: displacementmap_vertex,
	emissivemap_fragment: emissivemap_fragment,
	emissivemap_pars_fragment: emissivemap_pars_fragment,
	colorspace_fragment: colorspace_fragment,
	colorspace_pars_fragment: colorspace_pars_fragment,
	envmap_fragment: envmap_fragment,
	envmap_common_pars_fragment: envmap_common_pars_fragment,
	envmap_pars_fragment: envmap_pars_fragment,
	envmap_pars_vertex: envmap_pars_vertex,
	envmap_physical_pars_fragment: envmap_physical_pars_fragment,
	envmap_vertex: envmap_vertex,
	fog_vertex: fog_vertex,
	fog_pars_vertex: fog_pars_vertex,
	fog_fragment: fog_fragment,
	fog_pars_fragment: fog_pars_fragment,
	gradientmap_pars_fragment: gradientmap_pars_fragment,
	lightmap_fragment: lightmap_fragment,
	lightmap_pars_fragment: lightmap_pars_fragment,
	lights_lambert_fragment: lights_lambert_fragment,
	lights_lambert_pars_fragment: lights_lambert_pars_fragment,
	lights_pars_begin: lights_pars_begin,
	lights_toon_fragment: lights_toon_fragment,
	lights_toon_pars_fragment: lights_toon_pars_fragment,
	lights_phong_fragment: lights_phong_fragment,
	lights_phong_pars_fragment: lights_phong_pars_fragment,
	lights_physical_fragment: lights_physical_fragment,
	lights_physical_pars_fragment: lights_physical_pars_fragment,
	lights_fragment_begin: lights_fragment_begin,
	lights_fragment_maps: lights_fragment_maps,
	lights_fragment_end: lights_fragment_end,
	logdepthbuf_fragment: logdepthbuf_fragment,
	logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
	logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
	logdepthbuf_vertex: logdepthbuf_vertex,
	map_fragment: map_fragment,
	map_pars_fragment: map_pars_fragment,
	map_particle_fragment: map_particle_fragment,
	map_particle_pars_fragment: map_particle_pars_fragment,
	metalnessmap_fragment: metalnessmap_fragment,
	metalnessmap_pars_fragment: metalnessmap_pars_fragment,
	morphcolor_vertex: morphcolor_vertex,
	morphnormal_vertex: morphnormal_vertex,
	morphtarget_pars_vertex: morphtarget_pars_vertex,
	morphtarget_vertex: morphtarget_vertex,
	normal_fragment_begin: normal_fragment_begin,
	normal_fragment_maps: normal_fragment_maps,
	normal_pars_fragment: normal_pars_fragment,
	normal_pars_vertex: normal_pars_vertex,
	normal_vertex: normal_vertex,
	normalmap_pars_fragment: normalmap_pars_fragment,
	clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
	clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
	clearcoat_pars_fragment: clearcoat_pars_fragment,
	iridescence_pars_fragment: iridescence_pars_fragment,
	opaque_fragment: opaque_fragment,
	packing: packing,
	premultiplied_alpha_fragment: premultiplied_alpha_fragment,
	project_vertex: project_vertex,
	dithering_fragment: dithering_fragment,
	dithering_pars_fragment: dithering_pars_fragment,
	roughnessmap_fragment: roughnessmap_fragment,
	roughnessmap_pars_fragment: roughnessmap_pars_fragment,
	shadowmap_pars_fragment: shadowmap_pars_fragment,
	shadowmap_pars_vertex: shadowmap_pars_vertex,
	shadowmap_vertex: shadowmap_vertex,
	shadowmask_pars_fragment: shadowmask_pars_fragment,
	skinbase_vertex: skinbase_vertex,
	skinning_pars_vertex: skinning_pars_vertex,
	skinning_vertex: skinning_vertex,
	skinnormal_vertex: skinnormal_vertex,
	specularmap_fragment: specularmap_fragment,
	specularmap_pars_fragment: specularmap_pars_fragment,
	tonemapping_fragment: tonemapping_fragment,
	tonemapping_pars_fragment: tonemapping_pars_fragment,
	transmission_fragment: transmission_fragment,
	transmission_pars_fragment: transmission_pars_fragment,
	uv_pars_fragment: uv_pars_fragment,
	uv_pars_vertex: uv_pars_vertex,
	uv_vertex: uv_vertex,
	worldpos_vertex: worldpos_vertex,

	background_vert: vertex$h,
	background_frag: fragment$h,
	backgroundCube_vert: vertex$g,
	backgroundCube_frag: fragment$g,
	cube_vert: vertex$f,
	cube_frag: fragment$f,
	depth_vert: vertex$e,
	depth_frag: fragment$e,
	distanceRGBA_vert: vertex$d,
	distanceRGBA_frag: fragment$d,
	equirect_vert: vertex$c,
	equirect_frag: fragment$c,
	linedashed_vert: vertex$b,
	linedashed_frag: fragment$b,
	meshbasic_vert: vertex$a,
	meshbasic_frag: fragment$a,
	meshlambert_vert: vertex$9,
	meshlambert_frag: fragment$9,
	meshmatcap_vert: vertex$8,
	meshmatcap_frag: fragment$8,
	meshnormal_vert: vertex$7,
	meshnormal_frag: fragment$7,
	meshphong_vert: vertex$6,
	meshphong_frag: fragment$6,
	meshphysical_vert: vertex$5,
	meshphysical_frag: fragment$5,
	meshtoon_vert: vertex$4,
	meshtoon_frag: fragment$4,
	points_vert: vertex$3,
	points_frag: fragment$3,
	shadow_vert: vertex$2,
	shadow_frag: fragment$2,
	sprite_vert: vertex$1,
	sprite_frag: fragment$1
};

/**
 * Uniforms library for shared webgl shaders
 */

const UniformsLib = {

	common: {

		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
		opacity: { value: 1.0 },

		map: { value: null },
		mapTransform: { value: /*@__PURE__*/ new Matrix3() },

		alphaMap: { value: null },
		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },

		alphaTest: { value: 0 }

	},

	specularmap: {

		specularMap: { value: null },
		specularMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	envmap: {

		envMap: { value: null },
		flipEnvMap: { value: - 1 },
		reflectivity: { value: 1.0 }, // basic, lambert, phong
		ior: { value: 1.5 }, // physical
		refractionRatio: { value: 0.98 }, // basic, lambert, phong

	},

	aomap: {

		aoMap: { value: null },
		aoMapIntensity: { value: 1 },
		aoMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	lightmap: {

		lightMap: { value: null },
		lightMapIntensity: { value: 1 },
		lightMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	bumpmap: {

		bumpMap: { value: null },
		bumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		bumpScale: { value: 1 }

	},

	normalmap: {

		normalMap: { value: null },
		normalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		normalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }

	},

	displacementmap: {

		displacementMap: { value: null },
		displacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		displacementScale: { value: 1 },
		displacementBias: { value: 0 }

	},

	emissivemap: {

		emissiveMap: { value: null },
		emissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	metalnessmap: {

		metalnessMap: { value: null },
		metalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	roughnessmap: {

		roughnessMap: { value: null },
		roughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	gradientmap: {

		gradientMap: { value: null }

	},

	fog: {

		fogDensity: { value: 0.00025 },
		fogNear: { value: 1 },
		fogFar: { value: 2000 },
		fogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }

	},

	lights: {

		ambientLightColor: { value: [] },

		lightProbe: { value: [] },

		directionalLights: { value: [], properties: {
			direction: {},
			color: {}
		} },

		directionalLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		directionalShadowMap: { value: [] },
		directionalShadowMatrix: { value: [] },

		spotLights: { value: [], properties: {
			color: {},
			position: {},
			direction: {},
			distance: {},
			coneCos: {},
			penumbraCos: {},
			decay: {}
		} },

		spotLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {}
		} },

		spotLightMap: { value: [] },
		spotShadowMap: { value: [] },
		spotLightMatrix: { value: [] },

		pointLights: { value: [], properties: {
			color: {},
			position: {},
			decay: {},
			distance: {}
		} },

		pointLightShadows: { value: [], properties: {
			shadowBias: {},
			shadowNormalBias: {},
			shadowRadius: {},
			shadowMapSize: {},
			shadowCameraNear: {},
			shadowCameraFar: {}
		} },

		pointShadowMap: { value: [] },
		pointShadowMatrix: { value: [] },

		hemisphereLights: { value: [], properties: {
			direction: {},
			skyColor: {},
			groundColor: {}
		} },

		// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
		rectAreaLights: { value: [], properties: {
			color: {},
			position: {},
			width: {},
			height: {}
		} },

		ltc_1: { value: null },
		ltc_2: { value: null }

	},

	points: {

		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
		opacity: { value: 1.0 },
		size: { value: 1.0 },
		scale: { value: 1.0 },
		map: { value: null },
		alphaMap: { value: null },
		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		alphaTest: { value: 0 },
		uvTransform: { value: /*@__PURE__*/ new Matrix3() }

	},

	sprite: {

		diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
		opacity: { value: 1.0 },
		center: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },
		rotation: { value: 0.0 },
		map: { value: null },
		mapTransform: { value: /*@__PURE__*/ new Matrix3() },
		alphaMap: { value: null },
		alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		alphaTest: { value: 0 }

	}

};

const ShaderLib = {

	basic: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.meshbasic_vert,
		fragmentShader: ShaderChunk.meshbasic_frag

	},

	lambert: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshlambert_vert,
		fragmentShader: ShaderChunk.meshlambert_frag

	},

	phong: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.specularmap,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
				specular: { value: /*@__PURE__*/ new Color( 0x111111 ) },
				shininess: { value: 30 }
			}
		] ),

		vertexShader: ShaderChunk.meshphong_vert,
		fragmentShader: ShaderChunk.meshphong_frag

	},

	standard: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.envmap,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.roughnessmap,
			UniformsLib.metalnessmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
				roughness: { value: 1.0 },
				metalness: { value: 0.0 },
				envMapIntensity: { value: 1 } // temporary
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	},

	toon: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.aomap,
			UniformsLib.lightmap,
			UniformsLib.emissivemap,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.gradientmap,
			UniformsLib.fog,
			UniformsLib.lights,
			{
				emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
			}
		] ),

		vertexShader: ShaderChunk.meshtoon_vert,
		fragmentShader: ShaderChunk.meshtoon_frag

	},

	matcap: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			UniformsLib.fog,
			{
				matcap: { value: null }
			}
		] ),

		vertexShader: ShaderChunk.meshmatcap_vert,
		fragmentShader: ShaderChunk.meshmatcap_frag

	},

	points: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.points,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.points_vert,
		fragmentShader: ShaderChunk.points_frag

	},

	dashed: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.fog,
			{
				scale: { value: 1 },
				dashSize: { value: 1 },
				totalSize: { value: 2 }
			}
		] ),

		vertexShader: ShaderChunk.linedashed_vert,
		fragmentShader: ShaderChunk.linedashed_frag

	},

	depth: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.displacementmap
		] ),

		vertexShader: ShaderChunk.depth_vert,
		fragmentShader: ShaderChunk.depth_frag

	},

	normal: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.bumpmap,
			UniformsLib.normalmap,
			UniformsLib.displacementmap,
			{
				opacity: { value: 1.0 }
			}
		] ),

		vertexShader: ShaderChunk.meshnormal_vert,
		fragmentShader: ShaderChunk.meshnormal_frag

	},

	sprite: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.sprite,
			UniformsLib.fog
		] ),

		vertexShader: ShaderChunk.sprite_vert,
		fragmentShader: ShaderChunk.sprite_frag

	},

	background: {

		uniforms: {
			uvTransform: { value: /*@__PURE__*/ new Matrix3() },
			t2D: { value: null },
			backgroundIntensity: { value: 1 }
		},

		vertexShader: ShaderChunk.background_vert,
		fragmentShader: ShaderChunk.background_frag

	},

	backgroundCube: {

		uniforms: {
			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			backgroundBlurriness: { value: 0 },
			backgroundIntensity: { value: 1 }
		},

		vertexShader: ShaderChunk.backgroundCube_vert,
		fragmentShader: ShaderChunk.backgroundCube_frag

	},

	cube: {

		uniforms: {
			tCube: { value: null },
			tFlip: { value: - 1 },
			opacity: { value: 1.0 }
		},

		vertexShader: ShaderChunk.cube_vert,
		fragmentShader: ShaderChunk.cube_frag

	},

	equirect: {

		uniforms: {
			tEquirect: { value: null },
		},

		vertexShader: ShaderChunk.equirect_vert,
		fragmentShader: ShaderChunk.equirect_frag

	},

	distanceRGBA: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.common,
			UniformsLib.displacementmap,
			{
				referencePosition: { value: /*@__PURE__*/ new Vector3() },
				nearDistance: { value: 1 },
				farDistance: { value: 1000 }
			}
		] ),

		vertexShader: ShaderChunk.distanceRGBA_vert,
		fragmentShader: ShaderChunk.distanceRGBA_frag

	},

	shadow: {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			UniformsLib.lights,
			UniformsLib.fog,
			{
				color: { value: /*@__PURE__*/ new Color( 0x00000 ) },
				opacity: { value: 1.0 }
			},
		] ),

		vertexShader: ShaderChunk.shadow_vert,
		fragmentShader: ShaderChunk.shadow_frag

	}

};

ShaderLib.physical = {

	uniforms: /*@__PURE__*/ mergeUniforms( [
		ShaderLib.standard.uniforms,
		{
			clearcoat: { value: 0 },
			clearcoatMap: { value: null },
			clearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			clearcoatNormalMap: { value: null },
			clearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },
			clearcoatRoughness: { value: 0 },
			clearcoatRoughnessMap: { value: null },
			clearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			iridescence: { value: 0 },
			iridescenceMap: { value: null },
			iridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			iridescenceIOR: { value: 1.3 },
			iridescenceThicknessMinimum: { value: 100 },
			iridescenceThicknessMaximum: { value: 400 },
			iridescenceThicknessMap: { value: null },
			iridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			sheen: { value: 0 },
			sheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
			sheenColorMap: { value: null },
			sheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			sheenRoughness: { value: 1 },
			sheenRoughnessMap: { value: null },
			sheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			transmission: { value: 0 },
			transmissionMap: { value: null },
			transmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },
			transmissionSamplerMap: { value: null },
			thickness: { value: 0 },
			thicknessMap: { value: null },
			thicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			attenuationDistance: { value: 0 },
			attenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
			specularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },
			specularColorMap: { value: null },
			specularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			specularIntensity: { value: 1 },
			specularIntensityMap: { value: null },
			specularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			anisotropyVector: { value: /*@__PURE__*/ new Vector2() },
			anisotropyMap: { value: null },
			anisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },
		}
	] ),

	vertexShader: ShaderChunk.meshphysical_vert,
	fragmentShader: ShaderChunk.meshphysical_frag

};

const _rgb = { r: 0, b: 0, g: 0 };

function WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {

	const clearColor = new Color( 0x000000 );
	let clearAlpha = alpha === true ? 0 : 1;

	let planeMesh;
	let boxMesh;

	let currentBackground = null;
	let currentBackgroundVersion = 0;
	let currentTonemapping = null;

	function render( renderList, scene ) {

		let forceClear = false;
		let background = scene.isScene === true ? scene.background : null;

		if ( background && background.isTexture ) {

			const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
			background = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );

		}

		if ( background === null ) {

			setClear( clearColor, clearAlpha );

		} else if ( background && background.isColor ) {

			setClear( background, 1 );
			forceClear = true;

		}

		const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();

		if ( environmentBlendMode === 'additive' ) {

			state.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );

		} else if ( environmentBlendMode === 'alpha-blend' ) {

			state.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );

		}

		if ( renderer.autoClear || forceClear ) {

			renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

		}

		if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

			if ( boxMesh === undefined ) {

				boxMesh = new Mesh(
					new BoxGeometry( 1, 1, 1 ),
					new ShaderMaterial( {
						name: 'BackgroundCubeMaterial',
						uniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),
						vertexShader: ShaderLib.backgroundCube.vertexShader,
						fragmentShader: ShaderLib.backgroundCube.fragmentShader,
						side: BackSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					} )
				);

				boxMesh.geometry.deleteAttribute( 'normal' );
				boxMesh.geometry.deleteAttribute( 'uv' );

				boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

					this.matrixWorld.copyPosition( camera.matrixWorld );

				};

				// add "envMap" material property so the renderer can evaluate it like for built-in materials
				Object.defineProperty( boxMesh.material, 'envMap', {

					get: function () {

						return this.uniforms.envMap.value;

					}

				} );

				objects.update( boxMesh );

			}

			boxMesh.material.uniforms.envMap.value = background;
			boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
			boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
			boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
			boxMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;

			if ( currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping ) {

				boxMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}

			boxMesh.layers.enableAll();

			// push to the pre-sorted opaque render list
			renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

		} else if ( background && background.isTexture ) {

			if ( planeMesh === undefined ) {

				planeMesh = new Mesh(
					new PlaneGeometry( 2, 2 ),
					new ShaderMaterial( {
						name: 'BackgroundMaterial',
						uniforms: cloneUniforms( ShaderLib.background.uniforms ),
						vertexShader: ShaderLib.background.vertexShader,
						fragmentShader: ShaderLib.background.fragmentShader,
						side: FrontSide,
						depthTest: false,
						depthWrite: false,
						fog: false
					} )
				);

				planeMesh.geometry.deleteAttribute( 'normal' );

				// add "map" material property so the renderer can evaluate it like for built-in materials
				Object.defineProperty( planeMesh.material, 'map', {

					get: function () {

						return this.uniforms.t2D.value;

					}

				} );

				objects.update( planeMesh );

			}

			planeMesh.material.uniforms.t2D.value = background;
			planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
			planeMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;

			if ( background.matrixAutoUpdate === true ) {

				background.updateMatrix();

			}

			planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

			if ( currentBackground !== background ||
				currentBackgroundVersion !== background.version ||
				currentTonemapping !== renderer.toneMapping ) {

				planeMesh.material.needsUpdate = true;

				currentBackground = background;
				currentBackgroundVersion = background.version;
				currentTonemapping = renderer.toneMapping;

			}

			planeMesh.layers.enableAll();

			// push to the pre-sorted opaque render list
			renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

		}

	}

	function setClear( color, alpha ) {

		color.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );

		state.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );

	}

	return {

		getClearColor: function () {

			return clearColor;

		},
		setClearColor: function ( color, alpha = 1 ) {

			clearColor.set( color );
			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		getClearAlpha: function () {

			return clearAlpha;

		},
		setClearAlpha: function ( alpha ) {

			clearAlpha = alpha;
			setClear( clearColor, clearAlpha );

		},
		render: render

	};

}

function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

	const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

	const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
	const vaoAvailable = capabilities.isWebGL2 || extension !== null;

	const bindingStates = {};

	const defaultState = createBindingState( null );
	let currentState = defaultState;
	let forceUpdate = false;

	function setup( object, material, program, geometry, index ) {

		let updateBuffers = false;

		if ( vaoAvailable ) {

			const state = getBindingState( geometry, program, material );

			if ( currentState !== state ) {

				currentState = state;
				bindVertexArrayObject( currentState.object );

			}

			updateBuffers = needsUpdate( object, geometry, program, index );

			if ( updateBuffers ) saveCache( object, geometry, program, index );

		} else {

			const wireframe = ( material.wireframe === true );

			if ( currentState.geometry !== geometry.id ||
				currentState.program !== program.id ||
				currentState.wireframe !== wireframe ) {

				currentState.geometry = geometry.id;
				currentState.program = program.id;
				currentState.wireframe = wireframe;

				updateBuffers = true;

			}

		}

		if ( index !== null ) {

			attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

		}

		if ( updateBuffers || forceUpdate ) {

			forceUpdate = false;

			setupVertexAttributes( object, material, program, geometry );

			if ( index !== null ) {

				gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

			}

		}

	}

	function createVertexArrayObject() {

		if ( capabilities.isWebGL2 ) return gl.createVertexArray();

		return extension.createVertexArrayOES();

	}

	function bindVertexArrayObject( vao ) {

		if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

		return extension.bindVertexArrayOES( vao );

	}

	function deleteVertexArrayObject( vao ) {

		if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

		return extension.deleteVertexArrayOES( vao );

	}

	function getBindingState( geometry, program, material ) {

		const wireframe = ( material.wireframe === true );

		let programMap = bindingStates[ geometry.id ];

		if ( programMap === undefined ) {

			programMap = {};
			bindingStates[ geometry.id ] = programMap;

		}

		let stateMap = programMap[ program.id ];

		if ( stateMap === undefined ) {

			stateMap = {};
			programMap[ program.id ] = stateMap;

		}

		let state = stateMap[ wireframe ];

		if ( state === undefined ) {

			state = createBindingState( createVertexArrayObject() );
			stateMap[ wireframe ] = state;

		}

		return state;

	}

	function createBindingState( vao ) {

		const newAttributes = [];
		const enabledAttributes = [];
		const attributeDivisors = [];

		for ( let i = 0; i < maxVertexAttributes; i ++ ) {

			newAttributes[ i ] = 0;
			enabledAttributes[ i ] = 0;
			attributeDivisors[ i ] = 0;

		}

		return {

			// for backward compatibility on non-VAO support browser
			geometry: null,
			program: null,
			wireframe: false,

			newAttributes: newAttributes,
			enabledAttributes: enabledAttributes,
			attributeDivisors: attributeDivisors,
			object: vao,
			attributes: {},
			index: null

		};

	}

	function needsUpdate( object, geometry, program, index ) {

		const cachedAttributes = currentState.attributes;
		const geometryAttributes = geometry.attributes;

		let attributesNum = 0;

		const programAttributes = program.getAttributes();

		for ( const name in programAttributes ) {

			const programAttribute = programAttributes[ name ];

			if ( programAttribute.location >= 0 ) {

				const cachedAttribute = cachedAttributes[ name ];
				let geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute === undefined ) {

					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

				}

				if ( cachedAttribute === undefined ) return true;

				if ( cachedAttribute.attribute !== geometryAttribute ) return true;

				if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

				attributesNum ++;

			}

		}

		if ( currentState.attributesNum !== attributesNum ) return true;

		if ( currentState.index !== index ) return true;

		return false;

	}

	function saveCache( object, geometry, program, index ) {

		const cache = {};
		const attributes = geometry.attributes;
		let attributesNum = 0;

		const programAttributes = program.getAttributes();

		for ( const name in programAttributes ) {

			const programAttribute = programAttributes[ name ];

			if ( programAttribute.location >= 0 ) {

				let attribute = attributes[ name ];

				if ( attribute === undefined ) {

					if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
					if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

				}

				const data = {};
				data.attribute = attribute;

				if ( attribute && attribute.data ) {

					data.data = attribute.data;

				}

				cache[ name ] = data;

				attributesNum ++;

			}

		}

		currentState.attributes = cache;
		currentState.attributesNum = attributesNum;

		currentState.index = index;

	}

	function initAttributes() {

		const newAttributes = currentState.newAttributes;

		for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

			newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		enableAttributeAndDivisor( attribute, 0 );

	}

	function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;
		const attributeDivisors = currentState.attributeDivisors;

		newAttributes[ attribute ] = 1;

		if ( enabledAttributes[ attribute ] === 0 ) {

			gl.enableVertexAttribArray( attribute );
			enabledAttributes[ attribute ] = 1;

		}

		if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

			const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

			extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
			attributeDivisors[ attribute ] = meshPerAttribute;

		}

	}

	function disableUnusedAttributes() {

		const newAttributes = currentState.newAttributes;
		const enabledAttributes = currentState.enabledAttributes;

		for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

			if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

				gl.disableVertexAttribArray( i );
				enabledAttributes[ i ] = 0;

			}

		}

	}

	function vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {

		if ( integer === true ) {

			gl.vertexAttribIPointer( index, size, type, stride, offset );

		} else {

			gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

		}

	}

	function setupVertexAttributes( object, material, program, geometry ) {

		if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

			if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

		}

		initAttributes();

		const geometryAttributes = geometry.attributes;

		const programAttributes = program.getAttributes();

		const materialDefaultAttributeValues = material.defaultAttributeValues;

		for ( const name in programAttributes ) {

			const programAttribute = programAttributes[ name ];

			if ( programAttribute.location >= 0 ) {

				let geometryAttribute = geometryAttributes[ name ];

				if ( geometryAttribute === undefined ) {

					if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
					if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

				}

				if ( geometryAttribute !== undefined ) {

					const normalized = geometryAttribute.normalized;
					const size = geometryAttribute.itemSize;

					const attribute = attributes.get( geometryAttribute );

					// TODO Attribute may not be available on context restore

					if ( attribute === undefined ) continue;

					const buffer = attribute.buffer;
					const type = attribute.type;
					const bytesPerElement = attribute.bytesPerElement;

					// check for integer attributes (WebGL 2 only)

					const integer = ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType ) );

					if ( geometryAttribute.isInterleavedBufferAttribute ) {

						const data = geometryAttribute.data;
						const stride = data.stride;
						const offset = geometryAttribute.offset;

						if ( data.isInstancedInterleavedBuffer ) {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

							}

							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

								geometry._maxInstanceCount = data.meshPerAttribute * data.count;

							}

						} else {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttribute( programAttribute.location + i );

							}

						}

						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								stride * bytesPerElement,
								( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,
								integer
							);

						}

					} else {

						if ( geometryAttribute.isInstancedBufferAttribute ) {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

							}

							if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

								geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

							}

						} else {

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								enableAttribute( programAttribute.location + i );

							}

						}

						gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

						for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

							vertexAttribPointer(
								programAttribute.location + i,
								size / programAttribute.locationSize,
								type,
								normalized,
								size * bytesPerElement,
								( size / programAttribute.locationSize ) * i * bytesPerElement,
								integer
							);

						}

					}

				} else if ( materialDefaultAttributeValues !== undefined ) {

					const value = materialDefaultAttributeValues[ name ];

					if ( value !== undefined ) {

						switch ( value.length ) {

							case 2:
								gl.vertexAttrib2fv( programAttribute.location, value );
								break;

							case 3:
								gl.vertexAttrib3fv( programAttribute.location, value );
								break;

							case 4:
								gl.vertexAttrib4fv( programAttribute.location, value );
								break;

							default:
								gl.vertexAttrib1fv( programAttribute.location, value );

						}

					}

				}

			}

		}

		disableUnusedAttributes();

	}

	function dispose() {

		reset();

		for ( const geometryId in bindingStates ) {

			const programMap = bindingStates[ geometryId ];

			for ( const programId in programMap ) {

				const stateMap = programMap[ programId ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ programId ];

			}

			delete bindingStates[ geometryId ];

		}

	}

	function releaseStatesOfGeometry( geometry ) {

		if ( bindingStates[ geometry.id ] === undefined ) return;

		const programMap = bindingStates[ geometry.id ];

		for ( const programId in programMap ) {

			const stateMap = programMap[ programId ];

			for ( const wireframe in stateMap ) {

				deleteVertexArrayObject( stateMap[ wireframe ].object );

				delete stateMap[ wireframe ];

			}

			delete programMap[ programId ];

		}

		delete bindingStates[ geometry.id ];

	}

	function releaseStatesOfProgram( program ) {

		for ( const geometryId in bindingStates ) {

			const programMap = bindingStates[ geometryId ];

			if ( programMap[ program.id ] === undefined ) continue;

			const stateMap = programMap[ program.id ];

			for ( const wireframe in stateMap ) {

				deleteVertexArrayObject( stateMap[ wireframe ].object );

				delete stateMap[ wireframe ];

			}

			delete programMap[ program.id ];

		}

	}

	function reset() {

		resetDefaultState();
		forceUpdate = true;

		if ( currentState === defaultState ) return;

		currentState = defaultState;
		bindVertexArrayObject( currentState.object );

	}

	// for backward-compatibility

	function resetDefaultState() {

		defaultState.geometry = null;
		defaultState.program = null;
		defaultState.wireframe = false;

	}

	return {

		setup: setup,
		reset: reset,
		resetDefaultState: resetDefaultState,
		dispose: dispose,
		releaseStatesOfGeometry: releaseStatesOfGeometry,
		releaseStatesOfProgram: releaseStatesOfProgram,

		initAttributes: initAttributes,
		enableAttribute: enableAttribute,
		disableUnusedAttributes: disableUnusedAttributes

	};

}

function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode( value ) {

		mode = value;

	}

	function render( start, count ) {

		gl.drawArrays( mode, start, count );

		info.update( count, mode, 1 );

	}

	function renderInstances( start, count, primcount ) {

		if ( primcount === 0 ) return;

		let extension, methodName;

		if ( isWebGL2 ) {

			extension = gl;
			methodName = 'drawArraysInstanced';

		} else {

			extension = extensions.get( 'ANGLE_instanced_arrays' );
			methodName = 'drawArraysInstancedANGLE';

			if ( extension === null ) {

				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		extension[ methodName ]( mode, start, count, primcount );

		info.update( count, mode, primcount );

	}

	//

	this.setMode = setMode;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLCapabilities( gl, extensions, parameters ) {

	let maxAnisotropy;

	function getMaxAnisotropy() {

		if ( maxAnisotropy !== undefined ) return maxAnisotropy;

		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

		} else {

			maxAnisotropy = 0;

		}

		return maxAnisotropy;

	}

	function getMaxPrecision( precision ) {

		if ( precision === 'highp' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

				return 'highp';

			}

			precision = 'mediump';

		}

		if ( precision === 'mediump' ) {

			if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

				return 'mediump';

			}

		}

		return 'lowp';

	}

	const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';

	let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
	const maxPrecision = getMaxPrecision( precision );

	if ( maxPrecision !== precision ) {

		console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
		precision = maxPrecision;

	}

	const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );

	const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

	const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
	const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
	const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
	const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
	const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

	const vertexTextures = maxVertexTextures > 0;
	const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
	const floatVertexTextures = vertexTextures && floatFragmentTextures;

	const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;

	return {

		isWebGL2: isWebGL2,

		drawBuffers: drawBuffers,

		getMaxAnisotropy: getMaxAnisotropy,
		getMaxPrecision: getMaxPrecision,

		precision: precision,
		logarithmicDepthBuffer: logarithmicDepthBuffer,

		maxTextures: maxTextures,
		maxVertexTextures: maxVertexTextures,
		maxTextureSize: maxTextureSize,
		maxCubemapSize: maxCubemapSize,

		maxAttributes: maxAttributes,
		maxVertexUniforms: maxVertexUniforms,
		maxVaryings: maxVaryings,
		maxFragmentUniforms: maxFragmentUniforms,

		vertexTextures: vertexTextures,
		floatFragmentTextures: floatFragmentTextures,
		floatVertexTextures: floatVertexTextures,

		maxSamples: maxSamples

	};

}

function WebGLClipping( properties ) {

	const scope = this;

	let globalState = null,
		numGlobalPlanes = 0,
		localClippingEnabled = false,
		renderingShadows = false;

	const plane = new Plane(),
		viewNormalMatrix = new Matrix3(),

		uniform = { value: null, needsUpdate: false };

	this.uniform = uniform;
	this.numPlanes = 0;
	this.numIntersection = 0;

	this.init = function ( planes, enableLocalClipping ) {

		const enabled =
			planes.length !== 0 ||
			enableLocalClipping ||
			// enable state of previous frame - the clipping code has to
			// run another frame in order to reset the state:
			numGlobalPlanes !== 0 ||
			localClippingEnabled;

		localClippingEnabled = enableLocalClipping;

		numGlobalPlanes = planes.length;

		return enabled;

	};

	this.beginShadows = function () {

		renderingShadows = true;
		projectPlanes( null );

	};

	this.endShadows = function () {

		renderingShadows = false;

	};

	this.setGlobalState = function ( planes, camera ) {

		globalState = projectPlanes( planes, camera, 0 );

	};

	this.setState = function ( material, camera, useCache ) {

		const planes = material.clippingPlanes,
			clipIntersection = material.clipIntersection,
			clipShadows = material.clipShadows;

		const materialProperties = properties.get( material );

		if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

			// there's no local clipping

			if ( renderingShadows ) {

				// there's no global clipping

				projectPlanes( null );

			} else {

				resetGlobalState();

			}

		} else {

			const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
				lGlobal = nGlobal * 4;

			let dstArray = materialProperties.clippingState || null;

			uniform.value = dstArray; // ensure unique state

			dstArray = projectPlanes( planes, camera, lGlobal, useCache );

			for ( let i = 0; i !== lGlobal; ++ i ) {

				dstArray[ i ] = globalState[ i ];

			}

			materialProperties.clippingState = dstArray;
			this.numIntersection = clipIntersection ? this.numPlanes : 0;
			this.numPlanes += nGlobal;

		}


	};

	function resetGlobalState() {

		if ( uniform.value !== globalState ) {

			uniform.value = globalState;
			uniform.needsUpdate = numGlobalPlanes > 0;

		}

		scope.numPlanes = numGlobalPlanes;
		scope.numIntersection = 0;

	}

	function projectPlanes( planes, camera, dstOffset, skipTransform ) {

		const nPlanes = planes !== null ? planes.length : 0;
		let dstArray = null;

		if ( nPlanes !== 0 ) {

			dstArray = uniform.value;

			if ( skipTransform !== true || dstArray === null ) {

				const flatSize = dstOffset + nPlanes * 4,
					viewMatrix = camera.matrixWorldInverse;

				viewNormalMatrix.getNormalMatrix( viewMatrix );

				if ( dstArray === null || dstArray.length < flatSize ) {

					dstArray = new Float32Array( flatSize );

				}

				for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

					plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

					plane.normal.toArray( dstArray, i4 );
					dstArray[ i4 + 3 ] = plane.constant;

				}

			}

			uniform.value = dstArray;
			uniform.needsUpdate = true;

		}

		scope.numPlanes = nPlanes;
		scope.numIntersection = 0;

		return dstArray;

	}

}

function WebGLCubeMaps( renderer ) {

	let cubemaps = new WeakMap();

	function mapTextureMapping( texture, mapping ) {

		if ( mapping === EquirectangularReflectionMapping ) {

			texture.mapping = CubeReflectionMapping;

		} else if ( mapping === EquirectangularRefractionMapping ) {

			texture.mapping = CubeRefractionMapping;

		}

		return texture;

	}

	function get( texture ) {

		if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {

			const mapping = texture.mapping;

			if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

				if ( cubemaps.has( texture ) ) {

					const cubemap = cubemaps.get( texture ).texture;
					return mapTextureMapping( cubemap, texture.mapping );

				} else {

					const image = texture.image;

					if ( image && image.height > 0 ) {

						const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
						renderTarget.fromEquirectangularTexture( renderer, texture );
						cubemaps.set( texture, renderTarget );

						texture.addEventListener( 'dispose', onTextureDispose );

						return mapTextureMapping( renderTarget.texture, texture.mapping );

					} else {

						// image not yet ready. try the conversion next frame

						return null;

					}

				}

			}

		}

		return texture;

	}

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		const cubemap = cubemaps.get( texture );

		if ( cubemap !== undefined ) {

			cubemaps.delete( texture );
			cubemap.dispose();

		}

	}

	function dispose() {

		cubemaps = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

class OrthographicCamera extends Camera {

	constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

		super();

		this.isOrthographicCamera = true;

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;

		this.near = near;
		this.far = far;

		this.updateProjectionMatrix();

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;

		this.zoom = source.zoom;
		this.view = source.view === null ? null : Object.assign( {}, source.view );

		return this;

	}

	setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

		if ( this.view === null ) {

			this.view = {
				enabled: true,
				fullWidth: 1,
				fullHeight: 1,
				offsetX: 0,
				offsetY: 0,
				width: 1,
				height: 1
			};

		}

		this.view.enabled = true;
		this.view.fullWidth = fullWidth;
		this.view.fullHeight = fullHeight;
		this.view.offsetX = x;
		this.view.offsetY = y;
		this.view.width = width;
		this.view.height = height;

		this.updateProjectionMatrix();

	}

	clearViewOffset() {

		if ( this.view !== null ) {

			this.view.enabled = false;

		}

		this.updateProjectionMatrix();

	}

	updateProjectionMatrix() {

		const dx = ( this.right - this.left ) / ( 2 * this.zoom );
		const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		const cx = ( this.right + this.left ) / 2;
		const cy = ( this.top + this.bottom ) / 2;

		let left = cx - dx;
		let right = cx + dx;
		let top = cy + dy;
		let bottom = cy - dy;

		if ( this.view !== null && this.view.enabled ) {

			const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
			const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

			left += scaleW * this.view.offsetX;
			right = left + scaleW * this.view.width;
			top -= scaleH * this.view.offsetY;
			bottom = top - scaleH * this.view.height;

		}

		this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

		this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;

		if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

		return data;

	}

}

const LOD_MIN = 4;

// The standard deviations (radians) associated with the extra mips. These are
// chosen to approximate a Trowbridge-Reitz distribution function times the
// geometric shadowing function. These sigma values squared must match the
// variance #defines in cube_uv_reflection_fragment.glsl.js.
const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

// The maximum length of the blur for loop. Smaller sigmas will use fewer
// samples and exit early, but not recompile the shader.
const MAX_SAMPLES = 20;

const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
const _clearColor = /*@__PURE__*/ new Color();
let _oldTarget = null;

// Golden Ratio
const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
const INV_PHI = 1 / PHI;

// Vertices of a dodecahedron (except the opposites, which represent the
// same axis), used as axis directions evenly spread on a sphere.
const _axisDirections = [
	/*@__PURE__*/ new Vector3( 1, 1, 1 ),
	/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
	/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
	/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
	/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
	/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
	/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
	/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
	/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
	/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];

/**
 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
 * (PMREM) from a cubeMap environment texture. This allows different levels of
 * blur to be quickly accessed based on material roughness. It is packed into a
 * special CubeUV format that allows us to perform custom interpolation so that
 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
 * higher roughness levels. In this way we maintain resolution to smoothly
 * interpolate diffuse lighting while limiting sampling computation.
 *
 * Paper: Fast, Accurate Image-Based Lighting
 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
*/

class PMREMGenerator {

	constructor( renderer ) {

		this._renderer = renderer;
		this._pingPongRenderTarget = null;

		this._lodMax = 0;
		this._cubeSize = 0;
		this._lodPlanes = [];
		this._sizeLods = [];
		this._sigmas = [];

		this._blurMaterial = null;
		this._cubemapMaterial = null;
		this._equirectMaterial = null;

		this._compileMaterial( this._blurMaterial );

	}

	/**
	 * Generates a PMREM from a supplied Scene, which can be faster than using an
	 * image if networking bandwidth is low. Optional sigma specifies a blur radius
	 * in radians to be applied to the scene before PMREM generation. Optional near
	 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
	 * is placed at the origin).
	 */
	fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

		_oldTarget = this._renderer.getRenderTarget();

		this._setSize( 256 );

		const cubeUVRenderTarget = this._allocateTargets();
		cubeUVRenderTarget.depthBuffer = true;

		this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

		if ( sigma > 0 ) {

			this._blur( cubeUVRenderTarget, 0, 0, sigma );

		}

		this._applyPMREM( cubeUVRenderTarget );
		this._cleanup( cubeUVRenderTarget );

		return cubeUVRenderTarget;

	}

	/**
	 * Generates a PMREM from an equirectangular texture, which can be either LDR
	 * or HDR. The ideal input image size is 1k (1024 x 512),
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromEquirectangular( equirectangular, renderTarget = null ) {

		return this._fromTexture( equirectangular, renderTarget );

	}

	/**
	 * Generates a PMREM from an cubemap texture, which can be either LDR
	 * or HDR. The ideal input cube size is 256 x 256,
	 * as this matches best with the 256 x 256 cubemap output.
	 */
	fromCubemap( cubemap, renderTarget = null ) {

		return this._fromTexture( cubemap, renderTarget );

	}

	/**
	 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileCubemapShader() {

		if ( this._cubemapMaterial === null ) {

			this._cubemapMaterial = _getCubemapMaterial();
			this._compileMaterial( this._cubemapMaterial );

		}

	}

	/**
	 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
	 * your texture's network fetch for increased concurrency.
	 */
	compileEquirectangularShader() {

		if ( this._equirectMaterial === null ) {

			this._equirectMaterial = _getEquirectMaterial();
			this._compileMaterial( this._equirectMaterial );

		}

	}

	/**
	 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
	 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
	 * one of them will cause any others to also become unusable.
	 */
	dispose() {

		this._dispose();

		if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
		if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

	}

	// private interface

	_setSize( cubeSize ) {

		this._lodMax = Math.floor( Math.log2( cubeSize ) );
		this._cubeSize = Math.pow( 2, this._lodMax );

	}

	_dispose() {

		if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

		if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

		for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

			this._lodPlanes[ i ].dispose();

		}

	}

	_cleanup( outputTarget ) {

		this._renderer.setRenderTarget( _oldTarget );
		outputTarget.scissorTest = false;
		_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

	}

	_fromTexture( texture, renderTarget ) {

		if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

			this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

		} else { // Equirectangular

			this._setSize( texture.image.width / 4 );

		}

		_oldTarget = this._renderer.getRenderTarget();

		const cubeUVRenderTarget = renderTarget || this._allocateTargets();
		this._textureToCubeUV( texture, cubeUVRenderTarget );
		this._applyPMREM( cubeUVRenderTarget );
		this._cleanup( cubeUVRenderTarget );

		return cubeUVRenderTarget;

	}

	_allocateTargets() {

		const width = 3 * Math.max( this._cubeSize, 16 * 7 );
		const height = 4 * this._cubeSize;

		const params = {
			magFilter: LinearFilter,
			minFilter: LinearFilter,
			generateMipmaps: false,
			type: HalfFloatType,
			format: RGBAFormat,
			colorSpace: LinearSRGBColorSpace,
			depthBuffer: false
		};

		const cubeUVRenderTarget = _createRenderTarget( width, height, params );

		if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

			if ( this._pingPongRenderTarget !== null ) {

				this._dispose();

			}

			this._pingPongRenderTarget = _createRenderTarget( width, height, params );

			const { _lodMax } = this;
			( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );

			this._blurMaterial = _getBlurShader( _lodMax, width, height );

		}

		return cubeUVRenderTarget;

	}

	_compileMaterial( material ) {

		const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
		this._renderer.compile( tmpMesh, _flatCamera );

	}

	_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

		const fov = 90;
		const aspect = 1;
		const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
		const upSign = [ 1, - 1, 1, 1, 1, 1 ];
		const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
		const renderer = this._renderer;

		const originalAutoClear = renderer.autoClear;
		const toneMapping = renderer.toneMapping;
		renderer.getClearColor( _clearColor );

		renderer.toneMapping = NoToneMapping;
		renderer.autoClear = false;

		const backgroundMaterial = new MeshBasicMaterial( {
			name: 'PMREM.Background',
			side: BackSide,
			depthWrite: false,
			depthTest: false,
		} );

		const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

		let useSolidColor = false;
		const background = scene.background;

		if ( background ) {

			if ( background.isColor ) {

				backgroundMaterial.color.copy( background );
				scene.background = null;
				useSolidColor = true;

			}

		} else {

			backgroundMaterial.color.copy( _clearColor );
			useSolidColor = true;

		}

		for ( let i = 0; i < 6; i ++ ) {

			const col = i % 3;

			if ( col === 0 ) {

				cubeCamera.up.set( 0, upSign[ i ], 0 );
				cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

			} else if ( col === 1 ) {

				cubeCamera.up.set( 0, 0, upSign[ i ] );
				cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

			} else {

				cubeCamera.up.set( 0, upSign[ i ], 0 );
				cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

			}

			const size = this._cubeSize;

			_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

			renderer.setRenderTarget( cubeUVRenderTarget );

			if ( useSolidColor ) {

				renderer.render( backgroundBox, cubeCamera );

			}

			renderer.render( scene, cubeCamera );

		}

		backgroundBox.geometry.dispose();
		backgroundBox.material.dispose();

		renderer.toneMapping = toneMapping;
		renderer.autoClear = originalAutoClear;
		scene.background = background;

	}

	_textureToCubeUV( texture, cubeUVRenderTarget ) {

		const renderer = this._renderer;

		const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

		if ( isCubeTexture ) {

			if ( this._cubemapMaterial === null ) {

				this._cubemapMaterial = _getCubemapMaterial();

			}

			this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;

		} else {

			if ( this._equirectMaterial === null ) {

				this._equirectMaterial = _getEquirectMaterial();

			}

		}

		const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
		const mesh = new Mesh( this._lodPlanes[ 0 ], material );

		const uniforms = material.uniforms;

		uniforms[ 'envMap' ].value = texture;

		const size = this._cubeSize;

		_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

		renderer.setRenderTarget( cubeUVRenderTarget );
		renderer.render( mesh, _flatCamera );

	}

	_applyPMREM( cubeUVRenderTarget ) {

		const renderer = this._renderer;
		const autoClear = renderer.autoClear;
		renderer.autoClear = false;

		for ( let i = 1; i < this._lodPlanes.length; i ++ ) {

			const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

			const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];

			this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

		}

		renderer.autoClear = autoClear;

	}

	/**
	 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
	 * vertically and horizontally, but this breaks down on a cube. Here we apply
	 * the blur latitudinally (around the poles), and then longitudinally (towards
	 * the poles) to approximate the orthogonally-separable blur. It is least
	 * accurate at the poles, but still does a decent job.
	 */
	_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

		const pingPongRenderTarget = this._pingPongRenderTarget;

		this._halfBlur(
			cubeUVRenderTarget,
			pingPongRenderTarget,
			lodIn,
			lodOut,
			sigma,
			'latitudinal',
			poleAxis );

		this._halfBlur(
			pingPongRenderTarget,
			cubeUVRenderTarget,
			lodOut,
			lodOut,
			sigma,
			'longitudinal',
			poleAxis );

	}

	_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

		const renderer = this._renderer;
		const blurMaterial = this._blurMaterial;

		if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

			console.error(
				'blur direction must be either latitudinal or longitudinal!' );

		}

		// Number of standard deviations at which to cut off the discrete approximation.
		const STANDARD_DEVIATIONS = 3;

		const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
		const blurUniforms = blurMaterial.uniforms;

		const pixels = this._sizeLods[ lodIn ] - 1;
		const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
		const sigmaPixels = sigmaRadians / radiansPerPixel;
		const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

		if ( samples > MAX_SAMPLES ) {

			console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

		}

		const weights = [];
		let sum = 0;

		for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

			const x = i / sigmaPixels;
			const weight = Math.exp( - x * x / 2 );
			weights.push( weight );

			if ( i === 0 ) {

				sum += weight;

			} else if ( i < samples ) {

				sum += 2 * weight;

			}

		}

		for ( let i = 0; i < weights.length; i ++ ) {

			weights[ i ] = weights[ i ] / sum;

		}

		blurUniforms[ 'envMap' ].value = targetIn.texture;
		blurUniforms[ 'samples' ].value = samples;
		blurUniforms[ 'weights' ].value = weights;
		blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

		if ( poleAxis ) {

			blurUniforms[ 'poleAxis' ].value = poleAxis;

		}

		const { _lodMax } = this;
		blurUniforms[ 'dTheta' ].value = radiansPerPixel;
		blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

		const outputSize = this._sizeLods[ lodOut ];
		const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
		const y = 4 * ( this._cubeSize - outputSize );

		_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
		renderer.setRenderTarget( targetOut );
		renderer.render( blurMesh, _flatCamera );

	}

}



function _createPlanes( lodMax ) {

	const lodPlanes = [];
	const sizeLods = [];
	const sigmas = [];

	let lod = lodMax;

	const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

	for ( let i = 0; i < totalLods; i ++ ) {

		const sizeLod = Math.pow( 2, lod );
		sizeLods.push( sizeLod );
		let sigma = 1.0 / sizeLod;

		if ( i > lodMax - LOD_MIN ) {

			sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

		} else if ( i === 0 ) {

			sigma = 0;

		}

		sigmas.push( sigma );

		const texelSize = 1.0 / ( sizeLod - 2 );
		const min = - texelSize;
		const max = 1 + texelSize;
		const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

		const cubeFaces = 6;
		const vertices = 6;
		const positionSize = 3;
		const uvSize = 2;
		const faceIndexSize = 1;

		const position = new Float32Array( positionSize * vertices * cubeFaces );
		const uv = new Float32Array( uvSize * vertices * cubeFaces );
		const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

		for ( let face = 0; face < cubeFaces; face ++ ) {

			const x = ( face % 3 ) * 2 / 3 - 1;
			const y = face > 2 ? 0 : - 1;
			const coordinates = [
				x, y, 0,
				x + 2 / 3, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y, 0,
				x + 2 / 3, y + 1, 0,
				x, y + 1, 0
			];
			position.set( coordinates, positionSize * vertices * face );
			uv.set( uv1, uvSize * vertices * face );
			const fill = [ face, face, face, face, face, face ];
			faceIndex.set( fill, faceIndexSize * vertices * face );

		}

		const planes = new BufferGeometry();
		planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
		planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
		planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
		lodPlanes.push( planes );

		if ( lod > LOD_MIN ) {

			lod --;

		}

	}

	return { lodPlanes, sizeLods, sigmas };

}

function _createRenderTarget( width, height, params ) {

	const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
	cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
	cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
	cubeUVRenderTarget.scissorTest = true;
	return cubeUVRenderTarget;

}

function _setViewport( target, x, y, width, height ) {

	target.viewport.set( x, y, width, height );
	target.scissor.set( x, y, width, height );

}

function _getBlurShader( lodMax, width, height ) {

	const weights = new Float32Array( MAX_SAMPLES );
	const poleAxis = new Vector3( 0, 1, 0 );
	const shaderMaterial = new ShaderMaterial( {

		name: 'SphericalGaussianBlur',

		defines: {
			'n': MAX_SAMPLES,
			'CUBEUV_TEXEL_WIDTH': 1.0 / width,
			'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
			'CUBEUV_MAX_MIP': `${lodMax}.0`,
		},

		uniforms: {
			'envMap': { value: null },
			'samples': { value: 1 },
			'weights': { value: weights },
			'latitudinal': { value: false },
			'dTheta': { value: 0 },
			'mipInt': { value: 0 },
			'poleAxis': { value: poleAxis }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

	return shaderMaterial;

}

function _getEquirectMaterial() {

	return new ShaderMaterial( {

		name: 'EquirectangularToCubeUV',

		uniforms: {
			'envMap': { value: null }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

}

function _getCubemapMaterial() {

	return new ShaderMaterial( {

		name: 'CubemapToCubeUV',

		uniforms: {
			'envMap': { value: null },
			'flipEnvMap': { value: - 1 }
		},

		vertexShader: _getCommonVertexShader(),

		fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

		blending: NoBlending,
		depthTest: false,
		depthWrite: false

	} );

}

function _getCommonVertexShader() {

	return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

}

function WebGLCubeUVMaps( renderer ) {

	let cubeUVmaps = new WeakMap();

	let pmremGenerator = null;

	function get( texture ) {

		if ( texture && texture.isTexture ) {

			const mapping = texture.mapping;

			const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
			const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

			// equirect/cube map to cubeUV conversion

			if ( isEquirectMap || isCubeMap ) {

				if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {

					texture.needsPMREMUpdate = false;

					let renderTarget = cubeUVmaps.get( texture );

					if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

					renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
					cubeUVmaps.set( texture, renderTarget );

					return renderTarget.texture;

				} else {

					if ( cubeUVmaps.has( texture ) ) {

						return cubeUVmaps.get( texture ).texture;

					} else {

						const image = texture.image;

						if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

							if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

							const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
							cubeUVmaps.set( texture, renderTarget );

							texture.addEventListener( 'dispose', onTextureDispose );

							return renderTarget.texture;

						} else {

							// image not yet ready. try the conversion next frame

							return null;

						}

					}

				}

			}

		}

		return texture;

	}

	function isCubeTextureComplete( image ) {

		let count = 0;
		const length = 6;

		for ( let i = 0; i < length; i ++ ) {

			if ( image[ i ] !== undefined ) count ++;

		}

		return count === length;


	}

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		const cubemapUV = cubeUVmaps.get( texture );

		if ( cubemapUV !== undefined ) {

			cubeUVmaps.delete( texture );
			cubemapUV.dispose();

		}

	}

	function dispose() {

		cubeUVmaps = new WeakMap();

		if ( pmremGenerator !== null ) {

			pmremGenerator.dispose();
			pmremGenerator = null;

		}

	}

	return {
		get: get,
		dispose: dispose
	};

}

function WebGLExtensions( gl ) {

	const extensions = {};

	function getExtension( name ) {

		if ( extensions[ name ] !== undefined ) {

			return extensions[ name ];

		}

		let extension;

		switch ( name ) {

			case 'WEBGL_depth_texture':
				extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
				break;

			case 'EXT_texture_filter_anisotropic':
				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
				break;

			case 'WEBGL_compressed_texture_s3tc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
				break;

			case 'WEBGL_compressed_texture_pvrtc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
				break;

			default:
				extension = gl.getExtension( name );

		}

		extensions[ name ] = extension;

		return extension;

	}

	return {

		has: function ( name ) {

			return getExtension( name ) !== null;

		},

		init: function ( capabilities ) {

			if ( capabilities.isWebGL2 ) {

				getExtension( 'EXT_color_buffer_float' );

			} else {

				getExtension( 'WEBGL_depth_texture' );
				getExtension( 'OES_texture_float' );
				getExtension( 'OES_texture_half_float' );
				getExtension( 'OES_texture_half_float_linear' );
				getExtension( 'OES_standard_derivatives' );
				getExtension( 'OES_element_index_uint' );
				getExtension( 'OES_vertex_array_object' );
				getExtension( 'ANGLE_instanced_arrays' );

			}

			getExtension( 'OES_texture_float_linear' );
			getExtension( 'EXT_color_buffer_half_float' );
			getExtension( 'WEBGL_multisampled_render_to_texture' );

		},

		get: function ( name ) {

			const extension = getExtension( name );

			if ( extension === null ) {

				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

			}

			return extension;

		}

	};

}

function WebGLGeometries( gl, attributes, info, bindingStates ) {

	const geometries = {};
	const wireframeAttributes = new WeakMap();

	function onGeometryDispose( event ) {

		const geometry = event.target;

		if ( geometry.index !== null ) {

			attributes.remove( geometry.index );

		}

		for ( const name in geometry.attributes ) {

			attributes.remove( geometry.attributes[ name ] );

		}

		for ( const name in geometry.morphAttributes ) {

			const array = geometry.morphAttributes[ name ];

			for ( let i = 0, l = array.length; i < l; i ++ ) {

				attributes.remove( array[ i ] );

			}

		}

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		delete geometries[ geometry.id ];

		const attribute = wireframeAttributes.get( geometry );

		if ( attribute ) {

			attributes.remove( attribute );
			wireframeAttributes.delete( geometry );

		}

		bindingStates.releaseStatesOfGeometry( geometry );

		if ( geometry.isInstancedBufferGeometry === true ) {

			delete geometry._maxInstanceCount;

		}

		//

		info.memory.geometries --;

	}

	function get( object, geometry ) {

		if ( geometries[ geometry.id ] === true ) return geometry;

		geometry.addEventListener( 'dispose', onGeometryDispose );

		geometries[ geometry.id ] = true;

		info.memory.geometries ++;

		return geometry;

	}

	function update( geometry ) {

		const geometryAttributes = geometry.attributes;

		// Updating index buffer in VAO now. See WebGLBindingStates.

		for ( const name in geometryAttributes ) {

			attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

		}

		// morph targets

		const morphAttributes = geometry.morphAttributes;

		for ( const name in morphAttributes ) {

			const array = morphAttributes[ name ];

			for ( let i = 0, l = array.length; i < l; i ++ ) {

				attributes.update( array[ i ], gl.ARRAY_BUFFER );

			}

		}

	}

	function updateWireframeAttribute( geometry ) {

		const indices = [];

		const geometryIndex = geometry.index;
		const geometryPosition = geometry.attributes.position;
		let version = 0;

		if ( geometryIndex !== null ) {

			const array = geometryIndex.array;
			version = geometryIndex.version;

			for ( let i = 0, l = array.length; i < l; i += 3 ) {

				const a = array[ i + 0 ];
				const b = array[ i + 1 ];
				const c = array[ i + 2 ];

				indices.push( a, b, b, c, c, a );

			}

		} else if ( geometryPosition !== undefined ) {

			const array = geometryPosition.array;
			version = geometryPosition.version;

			for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

				const a = i + 0;
				const b = i + 1;
				const c = i + 2;

				indices.push( a, b, b, c, c, a );

			}

		} else {

			return;

		}

		const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
		attribute.version = version;

		// Updating index buffer in VAO now. See WebGLBindingStates

		//

		const previousAttribute = wireframeAttributes.get( geometry );

		if ( previousAttribute ) attributes.remove( previousAttribute );

		//

		wireframeAttributes.set( geometry, attribute );

	}

	function getWireframeAttribute( geometry ) {

		const currentAttribute = wireframeAttributes.get( geometry );

		if ( currentAttribute ) {

			const geometryIndex = geometry.index;

			if ( geometryIndex !== null ) {

				// if the attribute is obsolete, create a new one

				if ( currentAttribute.version < geometryIndex.version ) {

					updateWireframeAttribute( geometry );

				}

			}

		} else {

			updateWireframeAttribute( geometry );

		}

		return wireframeAttributes.get( geometry );

	}

	return {

		get: get,
		update: update,

		getWireframeAttribute: getWireframeAttribute

	};

}

function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	let mode;

	function setMode( value ) {

		mode = value;

	}

	let type, bytesPerElement;

	function setIndex( value ) {

		type = value.type;
		bytesPerElement = value.bytesPerElement;

	}

	function render( start, count ) {

		gl.drawElements( mode, count, type, start * bytesPerElement );

		info.update( count, mode, 1 );

	}

	function renderInstances( start, count, primcount ) {

		if ( primcount === 0 ) return;

		let extension, methodName;

		if ( isWebGL2 ) {

			extension = gl;
			methodName = 'drawElementsInstanced';

		} else {

			extension = extensions.get( 'ANGLE_instanced_arrays' );
			methodName = 'drawElementsInstancedANGLE';

			if ( extension === null ) {

				console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;

			}

		}

		extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

		info.update( count, mode, primcount );

	}

	//

	this.setMode = setMode;
	this.setIndex = setIndex;
	this.render = render;
	this.renderInstances = renderInstances;

}

function WebGLInfo( gl ) {

	const memory = {
		geometries: 0,
		textures: 0
	};

	const render = {
		frame: 0,
		calls: 0,
		triangles: 0,
		points: 0,
		lines: 0
	};

	function update( count, mode, instanceCount ) {

		render.calls ++;

		switch ( mode ) {

			case gl.TRIANGLES:
				render.triangles += instanceCount * ( count / 3 );
				break;

			case gl.LINES:
				render.lines += instanceCount * ( count / 2 );
				break;

			case gl.LINE_STRIP:
				render.lines += instanceCount * ( count - 1 );
				break;

			case gl.LINE_LOOP:
				render.lines += instanceCount * count;
				break;

			case gl.POINTS:
				render.points += instanceCount * count;
				break;

			default:
				console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
				break;

		}

	}

	function reset() {

		render.calls = 0;
		render.triangles = 0;
		render.points = 0;
		render.lines = 0;

	}

	return {
		memory: memory,
		render: render,
		programs: null,
		autoReset: true,
		reset: reset,
		update: update
	};

}

function numericalSort( a, b ) {

	return a[ 0 ] - b[ 0 ];

}

function absNumericalSort( a, b ) {

	return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

}

function WebGLMorphtargets( gl, capabilities, textures ) {

	const influencesList = {};
	const morphInfluences = new Float32Array( 8 );
	const morphTextures = new WeakMap();
	const morph = new Vector4();

	const workInfluences = [];

	for ( let i = 0; i < 8; i ++ ) {

		workInfluences[ i ] = [ i, 0 ];

	}

	function update( object, geometry, program ) {

		const objectInfluences = object.morphTargetInfluences;

		if ( capabilities.isWebGL2 === true ) {

			// instead of using attributes, the WebGL 2 code path encodes morph targets
			// into an array of data textures. Each layer represents a single morph target.

			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

			let entry = morphTextures.get( geometry );

			if ( entry === undefined || entry.count !== morphTargetsCount ) {

				if ( entry !== undefined ) entry.texture.dispose();

				const hasMorphPosition = geometry.morphAttributes.position !== undefined;
				const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
				const hasMorphColors = geometry.morphAttributes.color !== undefined;

				const morphTargets = geometry.morphAttributes.position || [];
				const morphNormals = geometry.morphAttributes.normal || [];
				const morphColors = geometry.morphAttributes.color || [];

				let vertexDataCount = 0;

				if ( hasMorphPosition === true ) vertexDataCount = 1;
				if ( hasMorphNormals === true ) vertexDataCount = 2;
				if ( hasMorphColors === true ) vertexDataCount = 3;

				let width = geometry.attributes.position.count * vertexDataCount;
				let height = 1;

				if ( width > capabilities.maxTextureSize ) {

					height = Math.ceil( width / capabilities.maxTextureSize );
					width = capabilities.maxTextureSize;

				}

				const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

				const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
				texture.type = FloatType;
				texture.needsUpdate = true;

				// fill buffer

				const vertexDataStride = vertexDataCount * 4;

				for ( let i = 0; i < morphTargetsCount; i ++ ) {

					const morphTarget = morphTargets[ i ];
					const morphNormal = morphNormals[ i ];
					const morphColor = morphColors[ i ];

					const offset = width * height * 4 * i;

					for ( let j = 0; j < morphTarget.count; j ++ ) {

						const stride = j * vertexDataStride;

						if ( hasMorphPosition === true ) {

							morph.fromBufferAttribute( morphTarget, j );

							buffer[ offset + stride + 0 ] = morph.x;
							buffer[ offset + stride + 1 ] = morph.y;
							buffer[ offset + stride + 2 ] = morph.z;
							buffer[ offset + stride + 3 ] = 0;

						}

						if ( hasMorphNormals === true ) {

							morph.fromBufferAttribute( morphNormal, j );

							buffer[ offset + stride + 4 ] = morph.x;
							buffer[ offset + stride + 5 ] = morph.y;
							buffer[ offset + stride + 6 ] = morph.z;
							buffer[ offset + stride + 7 ] = 0;

						}

						if ( hasMorphColors === true ) {

							morph.fromBufferAttribute( morphColor, j );

							buffer[ offset + stride + 8 ] = morph.x;
							buffer[ offset + stride + 9 ] = morph.y;
							buffer[ offset + stride + 10 ] = morph.z;
							buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

						}

					}

				}

				entry = {
					count: morphTargetsCount,
					texture: texture,
					size: new Vector2( width, height )
				};

				morphTextures.set( geometry, entry );

				function disposeTexture() {

					texture.dispose();

					morphTextures.delete( geometry );

					geometry.removeEventListener( 'dispose', disposeTexture );

				}

				geometry.addEventListener( 'dispose', disposeTexture );

			}

			//

			let morphInfluencesSum = 0;

			for ( let i = 0; i < objectInfluences.length; i ++ ) {

				morphInfluencesSum += objectInfluences[ i ];

			}

			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

			program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
			program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );


		} else {

			// When object doesn't have morph target influences defined, we treat it as a 0-length array
			// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

			const length = objectInfluences === undefined ? 0 : objectInfluences.length;

			let influences = influencesList[ geometry.id ];

			if ( influences === undefined || influences.length !== length ) {

				// initialise list

				influences = [];

				for ( let i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			// Collect influences

			for ( let i = 0; i < length; i ++ ) {

				const influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			for ( let i = 0; i < 8; i ++ ) {

				if ( i < length && influences[ i ][ 1 ] ) {

					workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
					workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

				} else {

					workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
					workInfluences[ i ][ 1 ] = 0;

				}

			}

			workInfluences.sort( numericalSort );

			const morphTargets = geometry.morphAttributes.position;
			const morphNormals = geometry.morphAttributes.normal;

			let morphInfluencesSum = 0;

			for ( let i = 0; i < 8; i ++ ) {

				const influence = workInfluences[ i ];
				const index = influence[ 0 ];
				const value = influence[ 1 ];

				if ( index !== Number.MAX_SAFE_INTEGER && value ) {

					if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

						geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

					}

					if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

						geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

					}

					morphInfluences[ i ] = value;
					morphInfluencesSum += value;

				} else {

					if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {

						geometry.deleteAttribute( 'morphTarget' + i );

					}

					if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {

						geometry.deleteAttribute( 'morphNormal' + i );

					}

					morphInfluences[ i ] = 0;

				}

			}

			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
			const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

	}

	return {

		update: update

	};

}

function WebGLObjects( gl, geometries, attributes, info ) {

	let updateMap = new WeakMap();

	function update( object ) {

		const frame = info.render.frame;

		const geometry = object.geometry;
		const buffergeometry = geometries.get( object, geometry );

		// Update once per frame

		if ( updateMap.get( buffergeometry ) !== frame ) {

			geometries.update( buffergeometry );

			updateMap.set( buffergeometry, frame );

		}

		if ( object.isInstancedMesh ) {

			if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

				object.addEventListener( 'dispose', onInstancedMeshDispose );

			}

			if ( updateMap.get( object ) !== frame ) {

				attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

				if ( object.instanceColor !== null ) {

					attributes.update( object.instanceColor, gl.ARRAY_BUFFER );

				}

				updateMap.set( object, frame );

			}

		}

		if ( object.isSkinnedMesh ) {

			const skeleton = object.skeleton;

			if ( updateMap.get( skeleton ) !== frame ) {

				skeleton.update();

				updateMap.set( skeleton, frame );

			}

		}

		return buffergeometry;

	}

	function dispose() {

		updateMap = new WeakMap();

	}

	function onInstancedMeshDispose( event ) {

		const instancedMesh = event.target;

		instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

		attributes.remove( instancedMesh.instanceMatrix );

		if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

	}

	return {

		update: update,
		dispose: dispose

	};

}

/**
 * Uniforms of a program.
 * Those form a tree structure with a special top-level container for the root,
 * which you get by calling 'new WebGLUniforms( gl, program )'.
 *
 *
 * Properties of inner nodes including the top-level container:
 *
 * .seq - array of nested uniforms
 * .map - nested uniforms by name
 *
 *
 * Methods of all nodes except the top-level container:
 *
 * .setValue( gl, value, [textures] )
 *
 * 		uploads a uniform value(s)
 *  	the 'textures' parameter is needed for sampler uniforms
 *
 *
 * Static methods of the top-level container (textures factorizations):
 *
 * .upload( gl, seq, values, textures )
 *
 * 		sets uniforms in 'seq' to 'values[id].value'
 *
 * .seqWithValue( seq, values ) : filteredSeq
 *
 * 		filters 'seq' entries with corresponding entry in values
 *
 *
 * Methods of the top-level container (textures factorizations):
 *
 * .setValue( gl, name, value, textures )
 *
 * 		sets uniform with  name 'name' to 'value'
 *
 * .setOptional( gl, obj, prop )
 *
 * 		like .set for an optional property of the object
 *
 */


const emptyTexture = /*@__PURE__*/ new Texture();
const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();

// --- Utilities ---

// Array Caches (provide typed arrays for temporary by size)

const arrayCacheF32 = [];
const arrayCacheI32 = [];

// Float32Array caches used for uploading Matrix uniforms

const mat4array = new Float32Array( 16 );
const mat3array = new Float32Array( 9 );
const mat2array = new Float32Array( 4 );

// Flattening for arrays of vectors and matrices

function flatten( array, nBlocks, blockSize ) {

	const firstElem = array[ 0 ];

	if ( firstElem <= 0 || firstElem > 0 ) return array;
	// unoptimized: ! isNaN( firstElem )
	// see http://jacksondunstan.com/articles/983

	const n = nBlocks * blockSize;
	let r = arrayCacheF32[ n ];

	if ( r === undefined ) {

		r = new Float32Array( n );
		arrayCacheF32[ n ] = r;

	}

	if ( nBlocks !== 0 ) {

		firstElem.toArray( r, 0 );

		for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

			offset += blockSize;
			array[ i ].toArray( r, offset );

		}

	}

	return r;

}

function arraysEqual( a, b ) {

	if ( a.length !== b.length ) return false;

	for ( let i = 0, l = a.length; i < l; i ++ ) {

		if ( a[ i ] !== b[ i ] ) return false;

	}

	return true;

}

function copyArray( a, b ) {

	for ( let i = 0, l = b.length; i < l; i ++ ) {

		a[ i ] = b[ i ];

	}

}

// Texture unit allocation

function allocTexUnits( textures, n ) {

	let r = arrayCacheI32[ n ];

	if ( r === undefined ) {

		r = new Int32Array( n );
		arrayCacheI32[ n ] = r;

	}

	for ( let i = 0; i !== n; ++ i ) {

		r[ i ] = textures.allocateTextureUnit();

	}

	return r;

}

// --- Setters ---

// Note: Defining these methods externally, because they come in a bunch
// and this way their names minify.

// Single scalar

function setValueV1f( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1f( this.addr, v );

	cache[ 0 ] = v;

}

// Single float vector (from flat array or THREE.VectorN)

function setValueV2f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

			gl.uniform2f( this.addr, v.x, v.y );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform2fv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV3f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

			gl.uniform3f( this.addr, v.x, v.y, v.z );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;

		}

	} else if ( v.r !== undefined ) {

		if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

			gl.uniform3f( this.addr, v.r, v.g, v.b );

			cache[ 0 ] = v.r;
			cache[ 1 ] = v.g;
			cache[ 2 ] = v.b;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform3fv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV4f( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

			gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;
			cache[ 3 ] = v.w;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform4fv( this.addr, v );

		copyArray( cache, v );

	}

}

// Single matrix (from flat array or THREE.MatrixN)

function setValueM2( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix2fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat2array.set( elements );

		gl.uniformMatrix2fv( this.addr, false, mat2array );

		copyArray( cache, elements );

	}

}

function setValueM3( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix3fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat3array.set( elements );

		gl.uniformMatrix3fv( this.addr, false, mat3array );

		copyArray( cache, elements );

	}

}

function setValueM4( gl, v ) {

	const cache = this.cache;
	const elements = v.elements;

	if ( elements === undefined ) {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniformMatrix4fv( this.addr, false, v );

		copyArray( cache, v );

	} else {

		if ( arraysEqual( cache, elements ) ) return;

		mat4array.set( elements );

		gl.uniformMatrix4fv( this.addr, false, mat4array );

		copyArray( cache, elements );

	}

}

// Single integer / boolean

function setValueV1i( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1i( this.addr, v );

	cache[ 0 ] = v;

}

// Single integer / boolean vector (from flat array or THREE.VectorN)

function setValueV2i( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

			gl.uniform2i( this.addr, v.x, v.y );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform2iv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV3i( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

			gl.uniform3i( this.addr, v.x, v.y, v.z );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform3iv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV4i( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

			gl.uniform4i( this.addr, v.x, v.y, v.z, v.w );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;
			cache[ 3 ] = v.w;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform4iv( this.addr, v );

		copyArray( cache, v );

	}

}

// Single unsigned integer

function setValueV1ui( gl, v ) {

	const cache = this.cache;

	if ( cache[ 0 ] === v ) return;

	gl.uniform1ui( this.addr, v );

	cache[ 0 ] = v;

}

// Single unsigned integer vector (from flat array or THREE.VectorN)

function setValueV2ui( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

			gl.uniform2ui( this.addr, v.x, v.y );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform2uiv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV3ui( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

			gl.uniform3ui( this.addr, v.x, v.y, v.z );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform3uiv( this.addr, v );

		copyArray( cache, v );

	}

}

function setValueV4ui( gl, v ) {

	const cache = this.cache;

	if ( v.x !== undefined ) {

		if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

			gl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );

			cache[ 0 ] = v.x;
			cache[ 1 ] = v.y;
			cache[ 2 ] = v.z;
			cache[ 3 ] = v.w;

		}

	} else {

		if ( arraysEqual( cache, v ) ) return;

		gl.uniform4uiv( this.addr, v );

		copyArray( cache, v );

	}

}


// Single texture (2D / Cube)

function setValueT1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTexture2D( v || emptyTexture, unit );

}

function setValueT3D1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTexture3D( v || empty3dTexture, unit );

}

function setValueT6( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTextureCube( v || emptyCubeTexture, unit );

}

function setValueT2DArray1( gl, v, textures ) {

	const cache = this.cache;
	const unit = textures.allocateTextureUnit();

	if ( cache[ 0 ] !== unit ) {

		gl.uniform1i( this.addr, unit );
		cache[ 0 ] = unit;

	}

	textures.setTexture2DArray( v || emptyArrayTexture, unit );

}

// Helper to pick the right setter for the singular case

function getSingularSetter( type ) {

	switch ( type ) {

		case 0x1406: return setValueV1f; // FLOAT
		case 0x8b50: return setValueV2f; // _VEC2
		case 0x8b51: return setValueV3f; // _VEC3
		case 0x8b52: return setValueV4f; // _VEC4

		case 0x8b5a: return setValueM2; // _MAT2
		case 0x8b5b: return setValueM3; // _MAT3
		case 0x8b5c: return setValueM4; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

		case 0x1405: return setValueV1ui; // UINT
		case 0x8dc6: return setValueV2ui; // _VEC2
		case 0x8dc7: return setValueV3ui; // _VEC3
		case 0x8dc8: return setValueV4ui; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1;

		case 0x8b5f: // SAMPLER_3D
		case 0x8dcb: // INT_SAMPLER_3D
		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
			return setValueT3D1;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6;

		case 0x8dc1: // SAMPLER_2D_ARRAY
		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
			return setValueT2DArray1;

	}

}


// Array of scalars

function setValueV1fArray( gl, v ) {

	gl.uniform1fv( this.addr, v );

}

// Array of vectors (from flat array or array of THREE.VectorN)

function setValueV2fArray( gl, v ) {

	const data = flatten( v, this.size, 2 );

	gl.uniform2fv( this.addr, data );

}

function setValueV3fArray( gl, v ) {

	const data = flatten( v, this.size, 3 );

	gl.uniform3fv( this.addr, data );

}

function setValueV4fArray( gl, v ) {

	const data = flatten( v, this.size, 4 );

	gl.uniform4fv( this.addr, data );

}

// Array of matrices (from flat array or array of THREE.MatrixN)

function setValueM2Array( gl, v ) {

	const data = flatten( v, this.size, 4 );

	gl.uniformMatrix2fv( this.addr, false, data );

}

function setValueM3Array( gl, v ) {

	const data = flatten( v, this.size, 9 );

	gl.uniformMatrix3fv( this.addr, false, data );

}

function setValueM4Array( gl, v ) {

	const data = flatten( v, this.size, 16 );

	gl.uniformMatrix4fv( this.addr, false, data );

}

// Array of integer / boolean

function setValueV1iArray( gl, v ) {

	gl.uniform1iv( this.addr, v );

}

// Array of integer / boolean vectors (from flat array)

function setValueV2iArray( gl, v ) {

	gl.uniform2iv( this.addr, v );

}

function setValueV3iArray( gl, v ) {

	gl.uniform3iv( this.addr, v );

}

function setValueV4iArray( gl, v ) {

	gl.uniform4iv( this.addr, v );

}

// Array of unsigned integer

function setValueV1uiArray( gl, v ) {

	gl.uniform1uiv( this.addr, v );

}

// Array of unsigned integer vectors (from flat array)

function setValueV2uiArray( gl, v ) {

	gl.uniform2uiv( this.addr, v );

}

function setValueV3uiArray( gl, v ) {

	gl.uniform3uiv( this.addr, v );

}

function setValueV4uiArray( gl, v ) {

	gl.uniform4uiv( this.addr, v );

}


// Array of textures (2D / 3D / Cube / 2DArray)

function setValueT1Array( gl, v, textures ) {

	const cache = this.cache;

	const n = v.length;

	const units = allocTexUnits( textures, n );

	if ( ! arraysEqual( cache, units ) ) {

		gl.uniform1iv( this.addr, units );

		copyArray( cache, units );

	}

	for ( let i = 0; i !== n; ++ i ) {

		textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

	}

}

function setValueT3DArray( gl, v, textures ) {

	const cache = this.cache;

	const n = v.length;

	const units = allocTexUnits( textures, n );

	if ( ! arraysEqual( cache, units ) ) {

		gl.uniform1iv( this.addr, units );

		copyArray( cache, units );

	}

	for ( let i = 0; i !== n; ++ i ) {

		textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

	}

}

function setValueT6Array( gl, v, textures ) {

	const cache = this.cache;

	const n = v.length;

	const units = allocTexUnits( textures, n );

	if ( ! arraysEqual( cache, units ) ) {

		gl.uniform1iv( this.addr, units );

		copyArray( cache, units );

	}

	for ( let i = 0; i !== n; ++ i ) {

		textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

	}

}

function setValueT2DArrayArray( gl, v, textures ) {

	const cache = this.cache;

	const n = v.length;

	const units = allocTexUnits( textures, n );

	if ( ! arraysEqual( cache, units ) ) {

		gl.uniform1iv( this.addr, units );

		copyArray( cache, units );

	}

	for ( let i = 0; i !== n; ++ i ) {

		textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

	}

}


// Helper to pick the right setter for a pure (bottom-level) array

function getPureArraySetter( type ) {

	switch ( type ) {

		case 0x1406: return setValueV1fArray; // FLOAT
		case 0x8b50: return setValueV2fArray; // _VEC2
		case 0x8b51: return setValueV3fArray; // _VEC3
		case 0x8b52: return setValueV4fArray; // _VEC4

		case 0x8b5a: return setValueM2Array; // _MAT2
		case 0x8b5b: return setValueM3Array; // _MAT3
		case 0x8b5c: return setValueM4Array; // _MAT4

		case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
		case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
		case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
		case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

		case 0x1405: return setValueV1uiArray; // UINT
		case 0x8dc6: return setValueV2uiArray; // _VEC2
		case 0x8dc7: return setValueV3uiArray; // _VEC3
		case 0x8dc8: return setValueV4uiArray; // _VEC4

		case 0x8b5e: // SAMPLER_2D
		case 0x8d66: // SAMPLER_EXTERNAL_OES
		case 0x8dca: // INT_SAMPLER_2D
		case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
		case 0x8b62: // SAMPLER_2D_SHADOW
			return setValueT1Array;

		case 0x8b5f: // SAMPLER_3D
		case 0x8dcb: // INT_SAMPLER_3D
		case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
			return setValueT3DArray;

		case 0x8b60: // SAMPLER_CUBE
		case 0x8dcc: // INT_SAMPLER_CUBE
		case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
		case 0x8dc5: // SAMPLER_CUBE_SHADOW
			return setValueT6Array;

		case 0x8dc1: // SAMPLER_2D_ARRAY
		case 0x8dcf: // INT_SAMPLER_2D_ARRAY
		case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
		case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
			return setValueT2DArrayArray;

	}

}

// --- Uniform Classes ---

class SingleUniform {

	constructor( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

}

class PureArrayUniform {

	constructor( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

}

class StructuredUniform {

	constructor( id ) {

		this.id = id;

		this.seq = [];
		this.map = {};

	}

	setValue( gl, value, textures ) {

		const seq = this.seq;

		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

			const u = seq[ i ];
			u.setValue( gl, value[ u.id ], textures );

		}

	}

}

// --- Top-level ---

// Parser - builds up the property tree from the path strings

const RePathPart = /(\w+)(\])?(\[|\.)?/g;

// extracts
// 	- the identifier (member name or array index)
//  - followed by an optional right bracket (found when array index)
//  - followed by an optional left bracket or dot (type of subscript)
//
// Note: These portions can be read in a non-overlapping fashion and
// allow straightforward parsing of the hierarchy that WebGL encodes
// in the uniform names.

function addUniform( container, uniformObject ) {

	container.seq.push( uniformObject );
	container.map[ uniformObject.id ] = uniformObject;

}

function parseUniform( activeInfo, addr, container ) {

	const path = activeInfo.name,
		pathLength = path.length;

	// reset RegExp object, because of the early exit of a previous run
	RePathPart.lastIndex = 0;

	while ( true ) {

		const match = RePathPart.exec( path ),
			matchEnd = RePathPart.lastIndex;

		let id = match[ 1 ];
		const idIsIndex = match[ 2 ] === ']',
			subscript = match[ 3 ];

		if ( idIsIndex ) id = id | 0; // convert to integer

		if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

			// bare name or "pure" bottom-level array "[0]" suffix

			addUniform( container, subscript === undefined ?
				new SingleUniform( id, activeInfo, addr ) :
				new PureArrayUniform( id, activeInfo, addr ) );

			break;

		} else {

			// step into inner node / create it in case it doesn't exist

			const map = container.map;
			let next = map[ id ];

			if ( next === undefined ) {

				next = new StructuredUniform( id );
				addUniform( container, next );

			}

			container = next;

		}

	}

}

// Root Container

class WebGLUniforms {

	constructor( gl, program ) {

		this.seq = [];
		this.map = {};

		const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

		for ( let i = 0; i < n; ++ i ) {

			const info = gl.getActiveUniform( program, i ),
				addr = gl.getUniformLocation( program, info.name );

			parseUniform( info, addr, this );

		}

	}

	setValue( gl, name, value, textures ) {

		const u = this.map[ name ];

		if ( u !== undefined ) u.setValue( gl, value, textures );

	}

	setOptional( gl, object, name ) {

		const v = object[ name ];

		if ( v !== undefined ) this.setValue( gl, name, v );

	}

	static upload( gl, seq, values, textures ) {

		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

			const u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {

				// note: always updating when .needsUpdate is undefined
				u.setValue( gl, v.value, textures );

			}

		}

	}

	static seqWithValue( seq, values ) {

		const r = [];

		for ( let i = 0, n = seq.length; i !== n; ++ i ) {

			const u = seq[ i ];
			if ( u.id in values ) r.push( u );

		}

		return r;

	}

}

function WebGLShader( gl, type, string ) {

	const shader = gl.createShader( type );

	gl.shaderSource( shader, string );
	gl.compileShader( shader );

	return shader;

}

let programIdCount = 0;

function handleSource( string, errorLine ) {

	const lines = string.split( '\n' );
	const lines2 = [];

	const from = Math.max( errorLine - 6, 0 );
	const to = Math.min( errorLine + 6, lines.length );

	for ( let i = from; i < to; i ++ ) {

		const line = i + 1;
		lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

	}

	return lines2.join( '\n' );

}

function getEncodingComponents( colorSpace ) {

	switch ( colorSpace ) {

		case LinearSRGBColorSpace:
			return [ 'Linear', '( value )' ];
		case SRGBColorSpace:
			return [ 'sRGB', '( value )' ];
		default:
			console.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );
			return [ 'Linear', '( value )' ];

	}

}

function getShaderErrors( gl, shader, type ) {

	const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
	const errors = gl.getShaderInfoLog( shader ).trim();

	if ( status && errors === '' ) return '';

	const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
	if ( errorMatches ) {

		// --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		const errorLine = parseInt( errorMatches[ 1 ] );
		return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

	} else {

		return errors;

	}

}

function getTexelEncodingFunction( functionName, colorSpace ) {

	const components = getEncodingComponents( colorSpace );
	return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

}

function getToneMappingFunction( functionName, toneMapping ) {

	let toneMappingName;

	switch ( toneMapping ) {

		case LinearToneMapping:
			toneMappingName = 'Linear';
			break;

		case ReinhardToneMapping:
			toneMappingName = 'Reinhard';
			break;

		case CineonToneMapping:
			toneMappingName = 'OptimizedCineon';
			break;

		case ACESFilmicToneMapping:
			toneMappingName = 'ACESFilmic';
			break;

		case CustomToneMapping:
			toneMappingName = 'Custom';
			break;

		default:
			console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
			toneMappingName = 'Linear';

	}

	return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

}

function generateExtensions( parameters ) {

	const chunks = [
		( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
		( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
		( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
		( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
	];

	return chunks.filter( filterEmptyLine ).join( '\n' );

}

function generateDefines( defines ) {

	const chunks = [];

	for ( const name in defines ) {

		const value = defines[ name ];

		if ( value === false ) continue;

		chunks.push( '#define ' + name + ' ' + value );

	}

	return chunks.join( '\n' );

}

function fetchAttributeLocations( gl, program ) {

	const attributes = {};

	const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

	for ( let i = 0; i < n; i ++ ) {

		const info = gl.getActiveAttrib( program, i );
		const name = info.name;

		let locationSize = 1;
		if ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;
		if ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;
		if ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;

		// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

		attributes[ name ] = {
			type: info.type,
			location: gl.getAttribLocation( program, name ),
			locationSize: locationSize
		};

	}

	return attributes;

}

function filterEmptyLine( string ) {

	return string !== '';

}

function replaceLightNums( string, parameters ) {

	const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;

	return string
		.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
		.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
		.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
		.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
		.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
		.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
		.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
		.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
		.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
		.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
		.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

}

function replaceClippingPlaneNums( string, parameters ) {

	return string
		.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
		.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

}

// Resolve Includes

const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

function resolveIncludes( string ) {

	return string.replace( includePattern, includeReplacer );

}

const shaderChunkMap = new Map( [
	[ 'encodings_fragment', 'colorspace_fragment' ], // @deprecated, r154
	[ 'encodings_pars_fragment', 'colorspace_pars_fragment' ], // @deprecated, r154
	[ 'output_fragment', 'opaque_fragment' ], // @deprecated, r154
] );

function includeReplacer( match, include ) {

	let string = ShaderChunk[ include ];

	if ( string === undefined ) {

		const newInclude = shaderChunkMap.get( include );

		if ( newInclude !== undefined ) {

			string = ShaderChunk[ newInclude ];
			console.warn( 'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude );

		} else {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

	}

	return resolveIncludes( string );

}

// Unroll Loops

const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

function unrollLoops( string ) {

	return string.replace( unrollLoopPattern, loopReplacer );

}

function loopReplacer( match, start, end, snippet ) {

	let string = '';

	for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

		string += snippet
			.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
			.replace( /UNROLLED_LOOP_INDEX/g, i );

	}

	return string;

}

//

function generatePrecision( parameters ) {

	let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

	if ( parameters.precision === 'highp' ) {

		precisionstring += '\n#define HIGH_PRECISION';

	} else if ( parameters.precision === 'mediump' ) {

		precisionstring += '\n#define MEDIUM_PRECISION';

	} else if ( parameters.precision === 'lowp' ) {

		precisionstring += '\n#define LOW_PRECISION';

	}

	return precisionstring;

}

function generateShadowMapTypeDefine( parameters ) {

	let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

	if ( parameters.shadowMapType === PCFShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

	} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

	} else if ( parameters.shadowMapType === VSMShadowMap ) {

		shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

	}

	return shadowMapTypeDefine;

}

function generateEnvMapTypeDefine( parameters ) {

	let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

	if ( parameters.envMap ) {

		switch ( parameters.envMapMode ) {

			case CubeReflectionMapping:
			case CubeRefractionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
				break;

			case CubeUVReflectionMapping:
				envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
				break;

		}

	}

	return envMapTypeDefine;

}

function generateEnvMapModeDefine( parameters ) {

	let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

	if ( parameters.envMap ) {

		switch ( parameters.envMapMode ) {

			case CubeRefractionMapping:

				envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
				break;

		}

	}

	return envMapModeDefine;

}

function generateEnvMapBlendingDefine( parameters ) {

	let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

	if ( parameters.envMap ) {

		switch ( parameters.combine ) {

			case MultiplyOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
				break;

			case MixOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
				break;

			case AddOperation:
				envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
				break;

		}

	}

	return envMapBlendingDefine;

}

function generateCubeUVSize( parameters ) {

	const imageHeight = parameters.envMapCubeUVHeight;

	if ( imageHeight === null ) return null;

	const maxMip = Math.log2( imageHeight ) - 2;

	const texelHeight = 1.0 / imageHeight;

	const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

	return { texelWidth, texelHeight, maxMip };

}

function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

	// TODO Send this event to Three.js DevTools
	// console.log( 'WebGLProgram', cacheKey );

	const gl = renderer.getContext();

	const defines = parameters.defines;

	let vertexShader = parameters.vertexShader;
	let fragmentShader = parameters.fragmentShader;

	const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
	const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
	const envMapModeDefine = generateEnvMapModeDefine( parameters );
	const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
	const envMapCubeUVSize = generateCubeUVSize( parameters );

	const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

	const customDefines = generateDefines( defines );

	const program = gl.createProgram();

	let prefixVertex, prefixFragment;
	let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

	if ( parameters.isRawShaderMaterial ) {

		prefixVertex = [

			'#define SHADER_TYPE ' + parameters.shaderType,
			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixVertex.length > 0 ) {

			prefixVertex += '\n';

		}

		prefixFragment = [

			customExtensions,

			'#define SHADER_TYPE ' + parameters.shaderType,
			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines

		].filter( filterEmptyLine ).join( '\n' );

		if ( prefixFragment.length > 0 ) {

			prefixFragment += '\n';

		}

	} else {

		prefixVertex = [

			generatePrecision( parameters ),

			'#define SHADER_TYPE ' + parameters.shaderType,
			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			parameters.instancing ? '#define USE_INSTANCING' : '',
			parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',

			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
			parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

			//

			parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',
			parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',
			parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',
			parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',
			parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',
			parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',
			parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',
			parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',

			parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',
			parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',

			parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',

			parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',
			parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',
			parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',

			parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',
			parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',

			parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',
			parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',

			parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',
			parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',
			parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',

			parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',
			parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',

			//

			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
			parameters.vertexColors ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUv1s ? '#define USE_UV1' : '',
			parameters.vertexUv2s ? '#define USE_UV2' : '',
			parameters.vertexUv3s ? '#define USE_UV3' : '',

			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.skinning ? '#define USE_SKINNING' : '',

			parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
			parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
			( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
			( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

			parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 modelMatrix;',
			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform mat4 viewMatrix;',
			'uniform mat3 normalMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			'#ifdef USE_INSTANCING',

			'	attribute mat4 instanceMatrix;',

			'#endif',

			'#ifdef USE_INSTANCING_COLOR',

			'	attribute vec3 instanceColor;',

			'#endif',

			'attribute vec3 position;',
			'attribute vec3 normal;',
			'attribute vec2 uv;',

			'#ifdef USE_UV1',

			'	attribute vec2 uv1;',

			'#endif',

			'#ifdef USE_UV2',

			'	attribute vec2 uv2;',

			'#endif',

			'#ifdef USE_UV3',

			'	attribute vec2 uv3;',

			'#endif',

			'#ifdef USE_TANGENT',

			'	attribute vec4 tangent;',

			'#endif',

			'#if defined( USE_COLOR_ALPHA )',

			'	attribute vec4 color;',

			'#elif defined( USE_COLOR )',

			'	attribute vec3 color;',

			'#endif',

			'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

			'	attribute vec3 morphTarget0;',
			'	attribute vec3 morphTarget1;',
			'	attribute vec3 morphTarget2;',
			'	attribute vec3 morphTarget3;',

			'	#ifdef USE_MORPHNORMALS',

			'		attribute vec3 morphNormal0;',
			'		attribute vec3 morphNormal1;',
			'		attribute vec3 morphNormal2;',
			'		attribute vec3 morphNormal3;',

			'	#else',

			'		attribute vec3 morphTarget4;',
			'		attribute vec3 morphTarget5;',
			'		attribute vec3 morphTarget6;',
			'		attribute vec3 morphTarget7;',

			'	#endif',

			'#endif',

			'#ifdef USE_SKINNING',

			'	attribute vec4 skinIndex;',
			'	attribute vec4 skinWeight;',

			'#endif',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

		prefixFragment = [

			customExtensions,

			generatePrecision( parameters ),

			'#define SHADER_TYPE ' + parameters.shaderType,
			'#define SHADER_NAME ' + parameters.shaderName,

			customDefines,

			parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
			parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

			parameters.map ? '#define USE_MAP' : '',
			parameters.matcap ? '#define USE_MATCAP' : '',
			parameters.envMap ? '#define USE_ENVMAP' : '',
			parameters.envMap ? '#define ' + envMapTypeDefine : '',
			parameters.envMap ? '#define ' + envMapModeDefine : '',
			parameters.envMap ? '#define ' + envMapBlendingDefine : '',
			envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
			envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
			envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
			parameters.lightMap ? '#define USE_LIGHTMAP' : '',
			parameters.aoMap ? '#define USE_AOMAP' : '',
			parameters.bumpMap ? '#define USE_BUMPMAP' : '',
			parameters.normalMap ? '#define USE_NORMALMAP' : '',
			parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
			parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
			parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

			parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
			parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

			parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
			parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
			parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
			parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

			parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
			parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
			parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

			parameters.specularMap ? '#define USE_SPECULARMAP' : '',
			parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
			parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

			parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
			parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

			parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
			parameters.alphaTest ? '#define USE_ALPHATEST' : '',
			parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

			parameters.sheen ? '#define USE_SHEEN' : '',
			parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
			parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

			parameters.transmission ? '#define USE_TRANSMISSION' : '',
			parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
			parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

			parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
			parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
			parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
			parameters.vertexUv1s ? '#define USE_UV1' : '',
			parameters.vertexUv2s ? '#define USE_UV2' : '',
			parameters.vertexUv3s ? '#define USE_UV3' : '',

			parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

			parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

			parameters.flatShading ? '#define FLAT_SHADED' : '',

			parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
			parameters.flipSided ? '#define FLIP_SIDED' : '',

			parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
			parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

			parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

			parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

			parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',

			parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
			( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

			'uniform mat4 viewMatrix;',
			'uniform vec3 cameraPosition;',
			'uniform bool isOrthographic;',

			( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
			( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
			( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

			parameters.dithering ? '#define DITHERING' : '',
			parameters.opaque ? '#define OPAQUE' : '',

			ShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
			getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),

			parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

			'\n'

		].filter( filterEmptyLine ).join( '\n' );

	}

	vertexShader = resolveIncludes( vertexShader );
	vertexShader = replaceLightNums( vertexShader, parameters );
	vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

	fragmentShader = resolveIncludes( fragmentShader );
	fragmentShader = replaceLightNums( fragmentShader, parameters );
	fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

	vertexShader = unrollLoops( vertexShader );
	fragmentShader = unrollLoops( fragmentShader );

	if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {

		// GLSL 3.0 conversion for built-in materials and ShaderMaterial

		versionString = '#version 300 es\n';

		prefixVertex = [
			'precision mediump sampler2DArray;',
			'#define attribute in',
			'#define varying out',
			'#define texture2D texture'
		].join( '\n' ) + '\n' + prefixVertex;

		prefixFragment = [
			'#define varying in',
			( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
			( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
			'#define gl_FragDepthEXT gl_FragDepth',
			'#define texture2D texture',
			'#define textureCube texture',
			'#define texture2DProj textureProj',
			'#define texture2DLodEXT textureLod',
			'#define texture2DProjLodEXT textureProjLod',
			'#define textureCubeLodEXT textureLod',
			'#define texture2DGradEXT textureGrad',
			'#define texture2DProjGradEXT textureProjGrad',
			'#define textureCubeGradEXT textureGrad'
		].join( '\n' ) + '\n' + prefixFragment;

	}

	const vertexGlsl = versionString + prefixVertex + vertexShader;
	const fragmentGlsl = versionString + prefixFragment + fragmentShader;

	// console.log( '*VERTEX*', vertexGlsl );
	// console.log( '*FRAGMENT*', fragmentGlsl );

	const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
	const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

	gl.attachShader( program, glVertexShader );
	gl.attachShader( program, glFragmentShader );

	// Force a particular attribute to index 0.

	if ( parameters.index0AttributeName !== undefined ) {

		gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

	} else if ( parameters.morphTargets === true ) {

		// programs with morphTargets displace position out of attribute 0
		gl.bindAttribLocation( program, 0, 'position' );

	}

	gl.linkProgram( program );

	// check for link errors
	if ( renderer.debug.checkShaderErrors ) {

		const programLog = gl.getProgramInfoLog( program ).trim();
		const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
		const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

		let runnable = true;
		let haveDiagnostics = true;

		if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

			runnable = false;

			if ( typeof renderer.debug.onShaderError === 'function' ) {

				renderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );

			} else {

				// default error reporting

				const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
				const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

				console.error(
					'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
					'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\n\n' +
					'Program Info Log: ' + programLog + '\n' +
					vertexErrors + '\n' +
					fragmentErrors
				);

			}

		} else if ( programLog !== '' ) {

			console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

		} else if ( vertexLog === '' || fragmentLog === '' ) {

			haveDiagnostics = false;

		}

		if ( haveDiagnostics ) {

			this.diagnostics = {

				runnable: runnable,

				programLog: programLog,

				vertexShader: {

					log: vertexLog,
					prefix: prefixVertex

				},

				fragmentShader: {

					log: fragmentLog,
					prefix: prefixFragment

				}

			};

		}

	}

	// Clean up

	// Crashes in iOS9 and iOS10. #18402
	// gl.detachShader( program, glVertexShader );
	// gl.detachShader( program, glFragmentShader );

	gl.deleteShader( glVertexShader );
	gl.deleteShader( glFragmentShader );

	// set up caching for uniform locations

	let cachedUniforms;

	this.getUniforms = function () {

		if ( cachedUniforms === undefined ) {

			cachedUniforms = new WebGLUniforms( gl, program );

		}

		return cachedUniforms;

	};

	// set up caching for attribute locations

	let cachedAttributes;

	this.getAttributes = function () {

		if ( cachedAttributes === undefined ) {

			cachedAttributes = fetchAttributeLocations( gl, program );

		}

		return cachedAttributes;

	};

	// free resource

	this.destroy = function () {

		bindingStates.releaseStatesOfProgram( this );

		gl.deleteProgram( program );
		this.program = undefined;

	};

	//

	this.type = parameters.shaderType;
	this.name = parameters.shaderName;
	this.id = programIdCount ++;
	this.cacheKey = cacheKey;
	this.usedTimes = 1;
	this.program = program;
	this.vertexShader = glVertexShader;
	this.fragmentShader = glFragmentShader;

	return this;

}

let _id$1 = 0;

class WebGLShaderCache {

	constructor() {

		this.shaderCache = new Map();
		this.materialCache = new Map();

	}

	update( material ) {

		const vertexShader = material.vertexShader;
		const fragmentShader = material.fragmentShader;

		const vertexShaderStage = this._getShaderStage( vertexShader );
		const fragmentShaderStage = this._getShaderStage( fragmentShader );

		const materialShaders = this._getShaderCacheForMaterial( material );

		if ( materialShaders.has( vertexShaderStage ) === false ) {

			materialShaders.add( vertexShaderStage );
			vertexShaderStage.usedTimes ++;

		}

		if ( materialShaders.has( fragmentShaderStage ) === false ) {

			materialShaders.add( fragmentShaderStage );
			fragmentShaderStage.usedTimes ++;

		}

		return this;

	}

	remove( material ) {

		const materialShaders = this.materialCache.get( material );

		for ( const shaderStage of materialShaders ) {

			shaderStage.usedTimes --;

			if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

		}

		this.materialCache.delete( material );

		return this;

	}

	getVertexShaderID( material ) {

		return this._getShaderStage( material.vertexShader ).id;

	}

	getFragmentShaderID( material ) {

		return this._getShaderStage( material.fragmentShader ).id;

	}

	dispose() {

		this.shaderCache.clear();
		this.materialCache.clear();

	}

	_getShaderCacheForMaterial( material ) {

		const cache = this.materialCache;
		let set = cache.get( material );

		if ( set === undefined ) {

			set = new Set();
			cache.set( material, set );

		}

		return set;

	}

	_getShaderStage( code ) {

		const cache = this.shaderCache;
		let stage = cache.get( code );

		if ( stage === undefined ) {

			stage = new WebGLShaderStage( code );
			cache.set( code, stage );

		}

		return stage;

	}

}

class WebGLShaderStage {

	constructor( code ) {

		this.id = _id$1 ++;

		this.code = code;
		this.usedTimes = 0;

	}

}

function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

	const _programLayers = new Layers();
	const _customShaders = new WebGLShaderCache();
	const programs = [];

	const IS_WEBGL2 = capabilities.isWebGL2;
	const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
	const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;

	let precision = capabilities.precision;

	const shaderIDs = {
		MeshDepthMaterial: 'depth',
		MeshDistanceMaterial: 'distanceRGBA',
		MeshNormalMaterial: 'normal',
		MeshBasicMaterial: 'basic',
		MeshLambertMaterial: 'lambert',
		MeshPhongMaterial: 'phong',
		MeshToonMaterial: 'toon',
		MeshStandardMaterial: 'physical',
		MeshPhysicalMaterial: 'physical',
		MeshMatcapMaterial: 'matcap',
		LineBasicMaterial: 'basic',
		LineDashedMaterial: 'dashed',
		PointsMaterial: 'points',
		ShadowMaterial: 'shadow',
		SpriteMaterial: 'sprite'
	};

	function getChannel( value ) {

		if ( value === 0 ) return 'uv';

		return `uv${ value }`;

	}

	function getParameters( material, lights, shadows, scene, object ) {

		const fog = scene.fog;
		const geometry = object.geometry;
		const environment = material.isMeshStandardMaterial ? scene.environment : null;

		const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
		const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;

		const shaderID = shaderIDs[ material.type ];

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		if ( material.precision !== null ) {

			precision = capabilities.getMaxPrecision( material.precision );

			if ( precision !== material.precision ) {

				console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

			}

		}

		//

		const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
		const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

		let morphTextureStride = 0;

		if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
		if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
		if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

		//

		let vertexShader, fragmentShader;
		let customVertexShaderID, customFragmentShaderID;

		if ( shaderID ) {

			const shader = ShaderLib[ shaderID ];

			vertexShader = shader.vertexShader;
			fragmentShader = shader.fragmentShader;

		} else {

			vertexShader = material.vertexShader;
			fragmentShader = material.fragmentShader;

			_customShaders.update( material );

			customVertexShaderID = _customShaders.getVertexShaderID( material );
			customFragmentShaderID = _customShaders.getFragmentShaderID( material );

		}

		const currentRenderTarget = renderer.getRenderTarget();

		const IS_INSTANCEDMESH = object.isInstancedMesh === true;

		const HAS_MAP = !! material.map;
		const HAS_MATCAP = !! material.matcap;
		const HAS_ENVMAP = !! envMap;
		const HAS_AOMAP = !! material.aoMap;
		const HAS_LIGHTMAP = !! material.lightMap;
		const HAS_BUMPMAP = !! material.bumpMap;
		const HAS_NORMALMAP = !! material.normalMap;
		const HAS_DISPLACEMENTMAP = !! material.displacementMap;
		const HAS_EMISSIVEMAP = !! material.emissiveMap;

		const HAS_METALNESSMAP = !! material.metalnessMap;
		const HAS_ROUGHNESSMAP = !! material.roughnessMap;

		const HAS_ANISOTROPY = material.anisotropy > 0;
		const HAS_CLEARCOAT = material.clearcoat > 0;
		const HAS_IRIDESCENCE = material.iridescence > 0;
		const HAS_SHEEN = material.sheen > 0;
		const HAS_TRANSMISSION = material.transmission > 0;

		const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;

		const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;
		const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;
		const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;

		const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;
		const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;

		const HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;
		const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;

		const HAS_SPECULARMAP = !! material.specularMap;
		const HAS_SPECULAR_COLORMAP = !! material.specularColorMap;
		const HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;

		const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;
		const HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;

		const HAS_GRADIENTMAP = !! material.gradientMap;

		const HAS_ALPHAMAP = !! material.alphaMap;

		const HAS_ALPHATEST = material.alphaTest > 0;

		const HAS_ALPHAHASH = !! material.alphaHash;

		const HAS_EXTENSIONS = !! material.extensions;

		const HAS_ATTRIBUTE_UV1 = !! geometry.attributes.uv1;
		const HAS_ATTRIBUTE_UV2 = !! geometry.attributes.uv2;
		const HAS_ATTRIBUTE_UV3 = !! geometry.attributes.uv3;

		let toneMapping = NoToneMapping;

		if ( material.toneMapped ) {

			if ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {

				toneMapping = renderer.toneMapping;

			}

		}

		const parameters = {

			isWebGL2: IS_WEBGL2,

			shaderID: shaderID,
			shaderType: material.type,
			shaderName: material.name,

			vertexShader: vertexShader,
			fragmentShader: fragmentShader,
			defines: material.defines,

			customVertexShaderID: customVertexShaderID,
			customFragmentShaderID: customFragmentShaderID,

			isRawShaderMaterial: material.isRawShaderMaterial === true,
			glslVersion: material.glslVersion,

			precision: precision,

			instancing: IS_INSTANCEDMESH,
			instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,

			supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
			outputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),

			map: HAS_MAP,
			matcap: HAS_MATCAP,
			envMap: HAS_ENVMAP,
			envMapMode: HAS_ENVMAP && envMap.mapping,
			envMapCubeUVHeight: envMapCubeUVHeight,
			aoMap: HAS_AOMAP,
			lightMap: HAS_LIGHTMAP,
			bumpMap: HAS_BUMPMAP,
			normalMap: HAS_NORMALMAP,
			displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
			emissiveMap: HAS_EMISSIVEMAP,

			normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
			normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,

			metalnessMap: HAS_METALNESSMAP,
			roughnessMap: HAS_ROUGHNESSMAP,

			anisotropy: HAS_ANISOTROPY,
			anisotropyMap: HAS_ANISOTROPYMAP,

			clearcoat: HAS_CLEARCOAT,
			clearcoatMap: HAS_CLEARCOATMAP,
			clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
			clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,

			iridescence: HAS_IRIDESCENCE,
			iridescenceMap: HAS_IRIDESCENCEMAP,
			iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,

			sheen: HAS_SHEEN,
			sheenColorMap: HAS_SHEEN_COLORMAP,
			sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,

			specularMap: HAS_SPECULARMAP,
			specularColorMap: HAS_SPECULAR_COLORMAP,
			specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,

			transmission: HAS_TRANSMISSION,
			transmissionMap: HAS_TRANSMISSIONMAP,
			thicknessMap: HAS_THICKNESSMAP,

			gradientMap: HAS_GRADIENTMAP,

			opaque: material.transparent === false && material.blending === NormalBlending,

			alphaMap: HAS_ALPHAMAP,
			alphaTest: HAS_ALPHATEST,
			alphaHash: HAS_ALPHAHASH,

			combine: material.combine,

			//

			mapUv: HAS_MAP && getChannel( material.map.channel ),
			aoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),
			lightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),
			bumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),
			normalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),
			displacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),
			emissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),

			metalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),
			roughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),

			anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),

			clearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),
			clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),
			clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),

			iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),
			iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),

			sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),
			sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),

			specularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),
			specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),
			specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),

			transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),
			thicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),

			alphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),

			//

			vertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),
			vertexColors: material.vertexColors,
			vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,
			vertexUv1s: HAS_ATTRIBUTE_UV1,
			vertexUv2s: HAS_ATTRIBUTE_UV2,
			vertexUv3s: HAS_ATTRIBUTE_UV3,

			pointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),

			fog: !! fog,
			useFog: material.fog === true,
			fogExp2: ( fog && fog.isFogExp2 ),

			flatShading: material.flatShading === true,

			sizeAttenuation: material.sizeAttenuation === true,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			skinning: object.isSkinnedMesh === true,

			morphTargets: geometry.morphAttributes.position !== undefined,
			morphNormals: geometry.morphAttributes.normal !== undefined,
			morphColors: geometry.morphAttributes.color !== undefined,
			morphTargetsCount: morphTargetsCount,
			morphTextureStride: morphTextureStride,

			numDirLights: lights.directional.length,
			numPointLights: lights.point.length,
			numSpotLights: lights.spot.length,
			numSpotLightMaps: lights.spotLightMap.length,
			numRectAreaLights: lights.rectArea.length,
			numHemiLights: lights.hemi.length,

			numDirLightShadows: lights.directionalShadowMap.length,
			numPointLightShadows: lights.pointShadowMap.length,
			numSpotLightShadows: lights.spotShadowMap.length,
			numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,

			numClippingPlanes: clipping.numPlanes,
			numClipIntersection: clipping.numIntersection,

			dithering: material.dithering,

			shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
			shadowMapType: renderer.shadowMap.type,

			toneMapping: toneMapping,
			useLegacyLights: renderer._useLegacyLights,

			decodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( material.map.colorSpace === SRGBColorSpace ),

			premultipliedAlpha: material.premultipliedAlpha,

			doubleSided: material.side === DoubleSide,
			flipSided: material.side === BackSide,

			useDepthPacking: material.depthPacking >= 0,
			depthPacking: material.depthPacking || 0,

			index0AttributeName: material.index0AttributeName,

			extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
			extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
			extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
			extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,

			rendererExtensionFragDepth: IS_WEBGL2 || extensions.has( 'EXT_frag_depth' ),
			rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has( 'WEBGL_draw_buffers' ),
			rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has( 'EXT_shader_texture_lod' ),

			customProgramCacheKey: material.customProgramCacheKey()

		};

		return parameters;

	}

	function getProgramCacheKey( parameters ) {

		const array = [];

		if ( parameters.shaderID ) {

			array.push( parameters.shaderID );

		} else {

			array.push( parameters.customVertexShaderID );
			array.push( parameters.customFragmentShaderID );

		}

		if ( parameters.defines !== undefined ) {

			for ( const name in parameters.defines ) {

				array.push( name );
				array.push( parameters.defines[ name ] );

			}

		}

		if ( parameters.isRawShaderMaterial === false ) {

			getProgramCacheKeyParameters( array, parameters );
			getProgramCacheKeyBooleans( array, parameters );
			array.push( renderer.outputColorSpace );

		}

		array.push( parameters.customProgramCacheKey );

		return array.join();

	}

	function getProgramCacheKeyParameters( array, parameters ) {

		array.push( parameters.precision );
		array.push( parameters.outputColorSpace );
		array.push( parameters.envMapMode );
		array.push( parameters.envMapCubeUVHeight );
		array.push( parameters.mapUv );
		array.push( parameters.alphaMapUv );
		array.push( parameters.lightMapUv );
		array.push( parameters.aoMapUv );
		array.push( parameters.bumpMapUv );
		array.push( parameters.normalMapUv );
		array.push( parameters.displacementMapUv );
		array.push( parameters.emissiveMapUv );
		array.push( parameters.metalnessMapUv );
		array.push( parameters.roughnessMapUv );
		array.push( parameters.anisotropyMapUv );
		array.push( parameters.clearcoatMapUv );
		array.push( parameters.clearcoatNormalMapUv );
		array.push( parameters.clearcoatRoughnessMapUv );
		array.push( parameters.iridescenceMapUv );
		array.push( parameters.iridescenceThicknessMapUv );
		array.push( parameters.sheenColorMapUv );
		array.push( parameters.sheenRoughnessMapUv );
		array.push( parameters.specularMapUv );
		array.push( parameters.specularColorMapUv );
		array.push( parameters.specularIntensityMapUv );
		array.push( parameters.transmissionMapUv );
		array.push( parameters.thicknessMapUv );
		array.push( parameters.combine );
		array.push( parameters.fogExp2 );
		array.push( parameters.sizeAttenuation );
		array.push( parameters.morphTargetsCount );
		array.push( parameters.morphAttributeCount );
		array.push( parameters.numDirLights );
		array.push( parameters.numPointLights );
		array.push( parameters.numSpotLights );
		array.push( parameters.numSpotLightMaps );
		array.push( parameters.numHemiLights );
		array.push( parameters.numRectAreaLights );
		array.push( parameters.numDirLightShadows );
		array.push( parameters.numPointLightShadows );
		array.push( parameters.numSpotLightShadows );
		array.push( parameters.numSpotLightShadowsWithMaps );
		array.push( parameters.shadowMapType );
		array.push( parameters.toneMapping );
		array.push( parameters.numClippingPlanes );
		array.push( parameters.numClipIntersection );
		array.push( parameters.depthPacking );

	}

	function getProgramCacheKeyBooleans( array, parameters ) {

		_programLayers.disableAll();

		if ( parameters.isWebGL2 )
			_programLayers.enable( 0 );
		if ( parameters.supportsVertexTextures )
			_programLayers.enable( 1 );
		if ( parameters.instancing )
			_programLayers.enable( 2 );
		if ( parameters.instancingColor )
			_programLayers.enable( 3 );
		if ( parameters.matcap )
			_programLayers.enable( 4 );
		if ( parameters.envMap )
			_programLayers.enable( 5 );
		if ( parameters.normalMapObjectSpace )
			_programLayers.enable( 6 );
		if ( parameters.normalMapTangentSpace )
			_programLayers.enable( 7 );
		if ( parameters.clearcoat )
			_programLayers.enable( 8 );
		if ( parameters.iridescence )
			_programLayers.enable( 9 );
		if ( parameters.alphaTest )
			_programLayers.enable( 10 );
		if ( parameters.vertexColors )
			_programLayers.enable( 11 );
		if ( parameters.vertexAlphas )
			_programLayers.enable( 12 );
		if ( parameters.vertexUv1s )
			_programLayers.enable( 13 );
		if ( parameters.vertexUv2s )
			_programLayers.enable( 14 );
		if ( parameters.vertexUv3s )
			_programLayers.enable( 15 );
		if ( parameters.vertexTangents )
			_programLayers.enable( 16 );
		if ( parameters.anisotropy )
			_programLayers.enable( 17 );

		array.push( _programLayers.mask );
		_programLayers.disableAll();

		if ( parameters.fog )
			_programLayers.enable( 0 );
		if ( parameters.useFog )
			_programLayers.enable( 1 );
		if ( parameters.flatShading )
			_programLayers.enable( 2 );
		if ( parameters.logarithmicDepthBuffer )
			_programLayers.enable( 3 );
		if ( parameters.skinning )
			_programLayers.enable( 4 );
		if ( parameters.morphTargets )
			_programLayers.enable( 5 );
		if ( parameters.morphNormals )
			_programLayers.enable( 6 );
		if ( parameters.morphColors )
			_programLayers.enable( 7 );
		if ( parameters.premultipliedAlpha )
			_programLayers.enable( 8 );
		if ( parameters.shadowMapEnabled )
			_programLayers.enable( 9 );
		if ( parameters.useLegacyLights )
			_programLayers.enable( 10 );
		if ( parameters.doubleSided )
			_programLayers.enable( 11 );
		if ( parameters.flipSided )
			_programLayers.enable( 12 );
		if ( parameters.useDepthPacking )
			_programLayers.enable( 13 );
		if ( parameters.dithering )
			_programLayers.enable( 14 );
		if ( parameters.transmission )
			_programLayers.enable( 15 );
		if ( parameters.sheen )
			_programLayers.enable( 16 );
		if ( parameters.opaque )
			_programLayers.enable( 17 );
		if ( parameters.pointsUvs )
			_programLayers.enable( 18 );
		if ( parameters.decodeVideoTexture )
			_programLayers.enable( 19 );

		array.push( _programLayers.mask );

	}

	function getUniforms( material ) {

		const shaderID = shaderIDs[ material.type ];
		let uniforms;

		if ( shaderID ) {

			const shader = ShaderLib[ shaderID ];
			uniforms = UniformsUtils.clone( shader.uniforms );

		} else {

			uniforms = material.uniforms;

		}

		return uniforms;

	}

	function acquireProgram( parameters, cacheKey ) {

		let program;

		// Check if code has been already compiled
		for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

			const preexistingProgram = programs[ p ];

			if ( preexistingProgram.cacheKey === cacheKey ) {

				program = preexistingProgram;
				++ program.usedTimes;

				break;

			}

		}

		if ( program === undefined ) {

			program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
			programs.push( program );

		}

		return program;

	}

	function releaseProgram( program ) {

		if ( -- program.usedTimes === 0 ) {

			// Remove from unordered set
			const i = programs.indexOf( program );
			programs[ i ] = programs[ programs.length - 1 ];
			programs.pop();

			// Free WebGL resources
			program.destroy();

		}

	}

	function releaseShaderCache( material ) {

		_customShaders.remove( material );

	}

	function dispose() {

		_customShaders.dispose();

	}

	return {
		getParameters: getParameters,
		getProgramCacheKey: getProgramCacheKey,
		getUniforms: getUniforms,
		acquireProgram: acquireProgram,
		releaseProgram: releaseProgram,
		releaseShaderCache: releaseShaderCache,
		// Exposed for resource monitoring & error feedback via renderer.info:
		programs: programs,
		dispose: dispose
	};

}

function WebGLProperties() {

	let properties = new WeakMap();

	function get( object ) {

		let map = properties.get( object );

		if ( map === undefined ) {

			map = {};
			properties.set( object, map );

		}

		return map;

	}

	function remove( object ) {

		properties.delete( object );

	}

	function update( object, key, value ) {

		properties.get( object )[ key ] = value;

	}

	function dispose() {

		properties = new WeakMap();

	}

	return {
		get: get,
		remove: remove,
		update: update,
		dispose: dispose
	};

}

function painterSortStable( a, b ) {

	if ( a.groupOrder !== b.groupOrder ) {

		return a.groupOrder - b.groupOrder;

	} else if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.material.id !== b.material.id ) {

		return a.material.id - b.material.id;

	} else if ( a.z !== b.z ) {

		return a.z - b.z;

	} else {

		return a.id - b.id;

	}

}

function reversePainterSortStable( a, b ) {

	if ( a.groupOrder !== b.groupOrder ) {

		return a.groupOrder - b.groupOrder;

	} else if ( a.renderOrder !== b.renderOrder ) {

		return a.renderOrder - b.renderOrder;

	} else if ( a.z !== b.z ) {

		return b.z - a.z;

	} else {

		return a.id - b.id;

	}

}


function WebGLRenderList() {

	const renderItems = [];
	let renderItemsIndex = 0;

	const opaque = [];
	const transmissive = [];
	const transparent = [];

	function init() {

		renderItemsIndex = 0;

		opaque.length = 0;
		transmissive.length = 0;
		transparent.length = 0;

	}

	function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

		let renderItem = renderItems[ renderItemsIndex ];

		if ( renderItem === undefined ) {

			renderItem = {
				id: object.id,
				object: object,
				geometry: geometry,
				material: material,
				groupOrder: groupOrder,
				renderOrder: object.renderOrder,
				z: z,
				group: group
			};

			renderItems[ renderItemsIndex ] = renderItem;

		} else {

			renderItem.id = object.id;
			renderItem.object = object;
			renderItem.geometry = geometry;
			renderItem.material = material;
			renderItem.groupOrder = groupOrder;
			renderItem.renderOrder = object.renderOrder;
			renderItem.z = z;
			renderItem.group = group;

		}

		renderItemsIndex ++;

		return renderItem;

	}

	function push( object, geometry, material, groupOrder, z, group ) {

		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

		if ( material.transmission > 0.0 ) {

			transmissive.push( renderItem );

		} else if ( material.transparent === true ) {

			transparent.push( renderItem );

		} else {

			opaque.push( renderItem );

		}

	}

	function unshift( object, geometry, material, groupOrder, z, group ) {

		const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

		if ( material.transmission > 0.0 ) {

			transmissive.unshift( renderItem );

		} else if ( material.transparent === true ) {

			transparent.unshift( renderItem );

		} else {

			opaque.unshift( renderItem );

		}

	}

	function sort( customOpaqueSort, customTransparentSort ) {

		if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
		if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
		if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

	}

	function finish() {

		// Clear references from inactive renderItems in the list

		for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

			const renderItem = renderItems[ i ];

			if ( renderItem.id === null ) break;

			renderItem.id = null;
			renderItem.object = null;
			renderItem.geometry = null;
			renderItem.material = null;
			renderItem.group = null;

		}

	}

	return {

		opaque: opaque,
		transmissive: transmissive,
		transparent: transparent,

		init: init,
		push: push,
		unshift: unshift,
		finish: finish,

		sort: sort
	};

}

function WebGLRenderLists() {

	let lists = new WeakMap();

	function get( scene, renderCallDepth ) {

		const listArray = lists.get( scene );
		let list;

		if ( listArray === undefined ) {

			list = new WebGLRenderList();
			lists.set( scene, [ list ] );

		} else {

			if ( renderCallDepth >= listArray.length ) {

				list = new WebGLRenderList();
				listArray.push( list );

			} else {

				list = listArray[ renderCallDepth ];

			}

		}

		return list;

	}

	function dispose() {

		lists = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

function UniformsCache() {

	const lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			let uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						direction: new Vector3(),
						color: new Color()
					};
					break;

				case 'SpotLight':
					uniforms = {
						position: new Vector3(),
						direction: new Vector3(),
						color: new Color(),
						distance: 0,
						coneCos: 0,
						penumbraCos: 0,
						decay: 0
					};
					break;

				case 'PointLight':
					uniforms = {
						position: new Vector3(),
						color: new Color(),
						distance: 0,
						decay: 0
					};
					break;

				case 'HemisphereLight':
					uniforms = {
						direction: new Vector3(),
						skyColor: new Color(),
						groundColor: new Color()
					};
					break;

				case 'RectAreaLight':
					uniforms = {
						color: new Color(),
						position: new Vector3(),
						halfWidth: new Vector3(),
						halfHeight: new Vector3()
					};
					break;

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}

function ShadowUniformsCache() {

	const lights = {};

	return {

		get: function ( light ) {

			if ( lights[ light.id ] !== undefined ) {

				return lights[ light.id ];

			}

			let uniforms;

			switch ( light.type ) {

				case 'DirectionalLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'SpotLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2()
					};
					break;

				case 'PointLight':
					uniforms = {
						shadowBias: 0,
						shadowNormalBias: 0,
						shadowRadius: 1,
						shadowMapSize: new Vector2(),
						shadowCameraNear: 1,
						shadowCameraFar: 1000
					};
					break;

				// TODO (abelnation): set RectAreaLight shadow uniforms

			}

			lights[ light.id ] = uniforms;

			return uniforms;

		}

	};

}



let nextVersion = 0;

function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {

	return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );

}

function WebGLLights( extensions, capabilities ) {

	const cache = new UniformsCache();

	const shadowCache = ShadowUniformsCache();

	const state = {

		version: 0,

		hash: {
			directionalLength: - 1,
			pointLength: - 1,
			spotLength: - 1,
			rectAreaLength: - 1,
			hemiLength: - 1,

			numDirectionalShadows: - 1,
			numPointShadows: - 1,
			numSpotShadows: - 1,
			numSpotMaps: - 1
		},

		ambient: [ 0, 0, 0 ],
		probe: [],
		directional: [],
		directionalShadow: [],
		directionalShadowMap: [],
		directionalShadowMatrix: [],
		spot: [],
		spotLightMap: [],
		spotShadow: [],
		spotShadowMap: [],
		spotLightMatrix: [],
		rectArea: [],
		rectAreaLTC1: null,
		rectAreaLTC2: null,
		point: [],
		pointShadow: [],
		pointShadowMap: [],
		pointShadowMatrix: [],
		hemi: [],
		numSpotLightShadowsWithMaps: 0

	};

	for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

	const vector3 = new Vector3();
	const matrix4 = new Matrix4();
	const matrix42 = new Matrix4();

	function setup( lights, useLegacyLights ) {

		let r = 0, g = 0, b = 0;

		for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		let numDirectionalShadows = 0;
		let numPointShadows = 0;
		let numSpotShadows = 0;
		let numSpotMaps = 0;
		let numSpotShadowsWithMaps = 0;

		// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
		lights.sort( shadowCastingAndTexturingLightsFirst );

		// artist-friendly light intensity scaling factor
		const scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;

		for ( let i = 0, l = lights.length; i < l; i ++ ) {

			const light = lights[ i ];

			const color = light.color;
			const intensity = light.intensity;
			const distance = light.distance;

			const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

			if ( light.isAmbientLight ) {

				r += color.r * intensity * scaleFactor;
				g += color.g * intensity * scaleFactor;
				b += color.b * intensity * scaleFactor;

			} else if ( light.isLightProbe ) {

				for ( let j = 0; j < 9; j ++ ) {

					state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

				}

			} else if ( light.isDirectionalLight ) {

				const uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );

				if ( light.castShadow ) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.directionalShadow[ directionalLength ] = shadowUniforms;
					state.directionalShadowMap[ directionalLength ] = shadowMap;
					state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

					numDirectionalShadows ++;

				}

				state.directional[ directionalLength ] = uniforms;

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				const uniforms = cache.get( light );

				uniforms.position.setFromMatrixPosition( light.matrixWorld );

				uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
				uniforms.distance = distance;

				uniforms.coneCos = Math.cos( light.angle );
				uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
				uniforms.decay = light.decay;

				state.spot[ spotLength ] = uniforms;

				const shadow = light.shadow;

				if ( light.map ) {

					state.spotLightMap[ numSpotMaps ] = light.map;
					numSpotMaps ++;

					// make sure the lightMatrix is up to date
					// TODO : do it if required only
					shadow.updateMatrices( light );

					if ( light.castShadow ) numSpotShadowsWithMaps ++;

				}

				state.spotLightMatrix[ spotLength ] = shadow.matrix;

				if ( light.castShadow ) {

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;

					state.spotShadow[ spotLength ] = shadowUniforms;
					state.spotShadowMap[ spotLength ] = shadowMap;

					numSpotShadows ++;

				}

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				const uniforms = cache.get( light );

				uniforms.color.copy( color ).multiplyScalar( intensity );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				state.rectArea[ rectAreaLength ] = uniforms;

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				const uniforms = cache.get( light );

				uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
				uniforms.distance = light.distance;
				uniforms.decay = light.decay;

				if ( light.castShadow ) {

					const shadow = light.shadow;

					const shadowUniforms = shadowCache.get( light );

					shadowUniforms.shadowBias = shadow.bias;
					shadowUniforms.shadowNormalBias = shadow.normalBias;
					shadowUniforms.shadowRadius = shadow.radius;
					shadowUniforms.shadowMapSize = shadow.mapSize;
					shadowUniforms.shadowCameraNear = shadow.camera.near;
					shadowUniforms.shadowCameraFar = shadow.camera.far;

					state.pointShadow[ pointLength ] = shadowUniforms;
					state.pointShadowMap[ pointLength ] = shadowMap;
					state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

					numPointShadows ++;

				}

				state.point[ pointLength ] = uniforms;

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				const uniforms = cache.get( light );

				uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
				uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );

				state.hemi[ hemiLength ] = uniforms;

				hemiLength ++;

			}

		}

		if ( rectAreaLength > 0 ) {

			if ( capabilities.isWebGL2 ) {

				// WebGL 2

				state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
				state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

			} else {

				// WebGL 1

				if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

				} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {

					state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
					state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

				} else {

					console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );

				}

			}

		}

		state.ambient[ 0 ] = r;
		state.ambient[ 1 ] = g;
		state.ambient[ 2 ] = b;

		const hash = state.hash;

		if ( hash.directionalLength !== directionalLength ||
			hash.pointLength !== pointLength ||
			hash.spotLength !== spotLength ||
			hash.rectAreaLength !== rectAreaLength ||
			hash.hemiLength !== hemiLength ||
			hash.numDirectionalShadows !== numDirectionalShadows ||
			hash.numPointShadows !== numPointShadows ||
			hash.numSpotShadows !== numSpotShadows ||
			hash.numSpotMaps !== numSpotMaps ) {

			state.directional.length = directionalLength;
			state.spot.length = spotLength;
			state.rectArea.length = rectAreaLength;
			state.point.length = pointLength;
			state.hemi.length = hemiLength;

			state.directionalShadow.length = numDirectionalShadows;
			state.directionalShadowMap.length = numDirectionalShadows;
			state.pointShadow.length = numPointShadows;
			state.pointShadowMap.length = numPointShadows;
			state.spotShadow.length = numSpotShadows;
			state.spotShadowMap.length = numSpotShadows;
			state.directionalShadowMatrix.length = numDirectionalShadows;
			state.pointShadowMatrix.length = numPointShadows;
			state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
			state.spotLightMap.length = numSpotMaps;
			state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;

			hash.directionalLength = directionalLength;
			hash.pointLength = pointLength;
			hash.spotLength = spotLength;
			hash.rectAreaLength = rectAreaLength;
			hash.hemiLength = hemiLength;

			hash.numDirectionalShadows = numDirectionalShadows;
			hash.numPointShadows = numPointShadows;
			hash.numSpotShadows = numSpotShadows;
			hash.numSpotMaps = numSpotMaps;

			state.version = nextVersion ++;

		}

	}

	function setupView( lights, camera ) {

		let directionalLength = 0;
		let pointLength = 0;
		let spotLength = 0;
		let rectAreaLength = 0;
		let hemiLength = 0;

		const viewMatrix = camera.matrixWorldInverse;

		for ( let i = 0, l = lights.length; i < l; i ++ ) {

			const light = lights[ i ];

			if ( light.isDirectionalLight ) {

				const uniforms = state.directional[ directionalLength ];

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				directionalLength ++;

			} else if ( light.isSpotLight ) {

				const uniforms = state.spot[ spotLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				vector3.setFromMatrixPosition( light.target.matrixWorld );
				uniforms.direction.sub( vector3 );
				uniforms.direction.transformDirection( viewMatrix );

				spotLength ++;

			} else if ( light.isRectAreaLight ) {

				const uniforms = state.rectArea[ rectAreaLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				// extract local rotation of light to derive width/height half vectors
				matrix42.identity();
				matrix4.copy( light.matrixWorld );
				matrix4.premultiply( viewMatrix );
				matrix42.extractRotation( matrix4 );

				uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
				uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

				uniforms.halfWidth.applyMatrix4( matrix42 );
				uniforms.halfHeight.applyMatrix4( matrix42 );

				rectAreaLength ++;

			} else if ( light.isPointLight ) {

				const uniforms = state.point[ pointLength ];

				uniforms.position.setFromMatrixPosition( light.matrixWorld );
				uniforms.position.applyMatrix4( viewMatrix );

				pointLength ++;

			} else if ( light.isHemisphereLight ) {

				const uniforms = state.hemi[ hemiLength ];

				uniforms.direction.setFromMatrixPosition( light.matrixWorld );
				uniforms.direction.transformDirection( viewMatrix );

				hemiLength ++;

			}

		}

	}

	return {
		setup: setup,
		setupView: setupView,
		state: state
	};

}

function WebGLRenderState( extensions, capabilities ) {

	const lights = new WebGLLights( extensions, capabilities );

	const lightsArray = [];
	const shadowsArray = [];

	function init() {

		lightsArray.length = 0;
		shadowsArray.length = 0;

	}

	function pushLight( light ) {

		lightsArray.push( light );

	}

	function pushShadow( shadowLight ) {

		shadowsArray.push( shadowLight );

	}

	function setupLights( useLegacyLights ) {

		lights.setup( lightsArray, useLegacyLights );

	}

	function setupLightsView( camera ) {

		lights.setupView( lightsArray, camera );

	}

	const state = {
		lightsArray: lightsArray,
		shadowsArray: shadowsArray,

		lights: lights
	};

	return {
		init: init,
		state: state,
		setupLights: setupLights,
		setupLightsView: setupLightsView,

		pushLight: pushLight,
		pushShadow: pushShadow
	};

}

function WebGLRenderStates( extensions, capabilities ) {

	let renderStates = new WeakMap();

	function get( scene, renderCallDepth = 0 ) {

		const renderStateArray = renderStates.get( scene );
		let renderState;

		if ( renderStateArray === undefined ) {

			renderState = new WebGLRenderState( extensions, capabilities );
			renderStates.set( scene, [ renderState ] );

		} else {

			if ( renderCallDepth >= renderStateArray.length ) {

				renderState = new WebGLRenderState( extensions, capabilities );
				renderStateArray.push( renderState );

			} else {

				renderState = renderStateArray[ renderCallDepth ];

			}

		}

		return renderState;

	}

	function dispose() {

		renderStates = new WeakMap();

	}

	return {
		get: get,
		dispose: dispose
	};

}

class MeshDepthMaterial extends Material {

	constructor( parameters ) {

		super();

		this.isMeshDepthMaterial = true;

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.depthPacking = source.depthPacking;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	}

}

class MeshDistanceMaterial extends Material {

	constructor( parameters ) {

		super();

		this.isMeshDistanceMaterial = true;

		this.type = 'MeshDistanceMaterial';

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.setValues( parameters );

	}

	copy( source ) {

		super.copy( source );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	}

}

const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

function WebGLShadowMap( _renderer, _objects, _capabilities ) {

	let _frustum = new Frustum();

	const _shadowMapSize = new Vector2(),
		_viewportSize = new Vector2(),

		_viewport = new Vector4(),

		_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
		_distanceMaterial = new MeshDistanceMaterial(),

		_materialCache = {},

		_maxTextureSize = _capabilities.maxTextureSize;

	const shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };

	const shadowMaterialVertical = new ShaderMaterial( {
		defines: {
			VSM_SAMPLES: 8
		},
		uniforms: {
			shadow_pass: { value: null },
			resolution: { value: new Vector2() },
			radius: { value: 4.0 }
		},

		vertexShader: vertex,
		fragmentShader: fragment

	} );

	const shadowMaterialHorizontal = shadowMaterialVertical.clone();
	shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

	const fullScreenTri = new BufferGeometry();
	fullScreenTri.setAttribute(
		'position',
		new BufferAttribute(
			new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
			3
		)
	);

	const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

	const scope = this;

	this.enabled = false;

	this.autoUpdate = true;
	this.needsUpdate = false;

	this.type = PCFShadowMap;
	let _previousType = this.type;

	this.render = function ( lights, scene, camera ) {

		if ( scope.enabled === false ) return;
		if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

		if ( lights.length === 0 ) return;

		const currentRenderTarget = _renderer.getRenderTarget();
		const activeCubeFace = _renderer.getActiveCubeFace();
		const activeMipmapLevel = _renderer.getActiveMipmapLevel();

		const _state = _renderer.state;

		// Set GL state for depth map.
		_state.setBlending( NoBlending );
		_state.buffers.color.setClear( 1, 1, 1, 1 );
		_state.buffers.depth.setTest( true );
		_state.setScissorTest( false );

		// check for shadow map type changes

		const toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );
		const fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );

		// render depth map

		for ( let i = 0, il = lights.length; i < il; i ++ ) {

			const light = lights[ i ];
			const shadow = light.shadow;

			if ( shadow === undefined ) {

				console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
				continue;

			}

			if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

			_shadowMapSize.copy( shadow.mapSize );

			const shadowFrameExtents = shadow.getFrameExtents();

			_shadowMapSize.multiply( shadowFrameExtents );

			_viewportSize.copy( shadow.mapSize );

			if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

				if ( _shadowMapSize.x > _maxTextureSize ) {

					_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
					_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
					shadow.mapSize.x = _viewportSize.x;

				}

				if ( _shadowMapSize.y > _maxTextureSize ) {

					_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
					_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
					shadow.mapSize.y = _viewportSize.y;

				}

			}

			if ( shadow.map === null || toVSM === true || fromVSM === true ) {

				const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};

				if ( shadow.map !== null ) {

					shadow.map.dispose();

				}

				shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
				shadow.map.texture.name = light.name + '.shadowMap';

				shadow.camera.updateProjectionMatrix();

			}

			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();

			const viewportCount = shadow.getViewportCount();

			for ( let vp = 0; vp < viewportCount; vp ++ ) {

				const viewport = shadow.getViewport( vp );

				_viewport.set(
					_viewportSize.x * viewport.x,
					_viewportSize.y * viewport.y,
					_viewportSize.x * viewport.z,
					_viewportSize.y * viewport.w
				);

				_state.viewport( _viewport );

				shadow.updateMatrices( light, vp );

				_frustum = shadow.getFrustum();

				renderObject( scene, camera, shadow.camera, light, this.type );

			}

			// do blur pass for VSM

			if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {

				VSMPass( shadow, camera );

			}

			shadow.needsUpdate = false;

		}

		_previousType = this.type;

		scope.needsUpdate = false;

		_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

	};

	function VSMPass( shadow, camera ) {

		const geometry = _objects.update( fullScreenMesh );

		if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

			shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
			shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

			shadowMaterialVertical.needsUpdate = true;
			shadowMaterialHorizontal.needsUpdate = true;

		}

		if ( shadow.mapPass === null ) {

			shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );

		}

		// vertical pass

		shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
		shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialVertical.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget( shadow.mapPass );
		_renderer.clear();
		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

		// horizontal pass

		shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
		shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
		shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
		_renderer.setRenderTarget( shadow.map );
		_renderer.clear();
		_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

	}

	function getDepthMaterial( object, material, light, type ) {

		let result = null;

		const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

		if ( customMaterial !== undefined ) {

			result = customMaterial;

		} else {

			result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

			if ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
				( material.displacementMap && material.displacementScale !== 0 ) ||
				( material.alphaMap && material.alphaTest > 0 ) ||
				( material.map && material.alphaTest > 0 ) ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				const keyA = result.uuid, keyB = material.uuid;

				let materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				let cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

		}

		result.visible = material.visible;
		result.wireframe = material.wireframe;

		if ( type === VSMShadowMap ) {

			result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

		} else {

			result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

		}

		result.alphaMap = material.alphaMap;
		result.alphaTest = material.alphaTest;
		result.map = material.map;

		result.clipShadows = material.clipShadows;
		result.clippingPlanes = material.clippingPlanes;
		result.clipIntersection = material.clipIntersection;

		result.displacementMap = material.displacementMap;
		result.displacementScale = material.displacementScale;
		result.displacementBias = material.displacementBias;

		result.wireframeLinewidth = material.wireframeLinewidth;
		result.linewidth = material.linewidth;

		if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

			const materialProperties = _renderer.properties.get( result );
			materialProperties.light = light;

		}

		return result;

	}

	function renderObject( object, camera, shadowCamera, light, type ) {

		if ( object.visible === false ) return;

		const visible = object.layers.test( camera.layers );

		if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

			if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

				object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

				const geometry = _objects.update( object );
				const material = object.material;

				if ( Array.isArray( material ) ) {

					const groups = geometry.groups;

					for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

						const group = groups[ k ];
						const groupMaterial = material[ group.materialIndex ];

						if ( groupMaterial && groupMaterial.visible ) {

							const depthMaterial = getDepthMaterial( object, groupMaterial, light, type );

							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

						}

					}

				} else if ( material.visible ) {

					const depthMaterial = getDepthMaterial( object, material, light, type );

					_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

				}

			}

		}

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			renderObject( children[ i ], camera, shadowCamera, light, type );

		}

	}

}

function WebGLState( gl, extensions, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	function ColorBuffer() {

		let locked = false;

		const color = new Vector4();
		let currentColorMask = null;
		const currentColorClear = new Vector4( 0, 0, 0, 0 );

		return {

			setMask: function ( colorMask ) {

				if ( currentColorMask !== colorMask && ! locked ) {

					gl.colorMask( colorMask, colorMask, colorMask, colorMask );
					currentColorMask = colorMask;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( r, g, b, a, premultipliedAlpha ) {

				if ( premultipliedAlpha === true ) {

					r *= a; g *= a; b *= a;

				}

				color.set( r, g, b, a );

				if ( currentColorClear.equals( color ) === false ) {

					gl.clearColor( r, g, b, a );
					currentColorClear.copy( color );

				}

			},

			reset: function () {

				locked = false;

				currentColorMask = null;
				currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

			}

		};

	}

	function DepthBuffer() {

		let locked = false;

		let currentDepthMask = null;
		let currentDepthFunc = null;
		let currentDepthClear = null;

		return {

			setTest: function ( depthTest ) {

				if ( depthTest ) {

					enable( gl.DEPTH_TEST );

				} else {

					disable( gl.DEPTH_TEST );

				}

			},

			setMask: function ( depthMask ) {

				if ( currentDepthMask !== depthMask && ! locked ) {

					gl.depthMask( depthMask );
					currentDepthMask = depthMask;

				}

			},

			setFunc: function ( depthFunc ) {

				if ( currentDepthFunc !== depthFunc ) {

					switch ( depthFunc ) {

						case NeverDepth:

							gl.depthFunc( gl.NEVER );
							break;

						case AlwaysDepth:

							gl.depthFunc( gl.ALWAYS );
							break;

						case LessDepth:

							gl.depthFunc( gl.LESS );
							break;

						case LessEqualDepth:

							gl.depthFunc( gl.LEQUAL );
							break;

						case EqualDepth:

							gl.depthFunc( gl.EQUAL );
							break;

						case GreaterEqualDepth:

							gl.depthFunc( gl.GEQUAL );
							break;

						case GreaterDepth:

							gl.depthFunc( gl.GREATER );
							break;

						case NotEqualDepth:

							gl.depthFunc( gl.NOTEQUAL );
							break;

						default:

							gl.depthFunc( gl.LEQUAL );

					}

					currentDepthFunc = depthFunc;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( depth ) {

				if ( currentDepthClear !== depth ) {

					gl.clearDepth( depth );
					currentDepthClear = depth;

				}

			},

			reset: function () {

				locked = false;

				currentDepthMask = null;
				currentDepthFunc = null;
				currentDepthClear = null;

			}

		};

	}

	function StencilBuffer() {

		let locked = false;

		let currentStencilMask = null;
		let currentStencilFunc = null;
		let currentStencilRef = null;
		let currentStencilFuncMask = null;
		let currentStencilFail = null;
		let currentStencilZFail = null;
		let currentStencilZPass = null;
		let currentStencilClear = null;

		return {

			setTest: function ( stencilTest ) {

				if ( ! locked ) {

					if ( stencilTest ) {

						enable( gl.STENCIL_TEST );

					} else {

						disable( gl.STENCIL_TEST );

					}

				}

			},

			setMask: function ( stencilMask ) {

				if ( currentStencilMask !== stencilMask && ! locked ) {

					gl.stencilMask( stencilMask );
					currentStencilMask = stencilMask;

				}

			},

			setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

				if ( currentStencilFunc !== stencilFunc ||
				     currentStencilRef !== stencilRef ||
				     currentStencilFuncMask !== stencilMask ) {

					gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

					currentStencilFunc = stencilFunc;
					currentStencilRef = stencilRef;
					currentStencilFuncMask = stencilMask;

				}

			},

			setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

				if ( currentStencilFail !== stencilFail ||
				     currentStencilZFail !== stencilZFail ||
				     currentStencilZPass !== stencilZPass ) {

					gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

					currentStencilFail = stencilFail;
					currentStencilZFail = stencilZFail;
					currentStencilZPass = stencilZPass;

				}

			},

			setLocked: function ( lock ) {

				locked = lock;

			},

			setClear: function ( stencil ) {

				if ( currentStencilClear !== stencil ) {

					gl.clearStencil( stencil );
					currentStencilClear = stencil;

				}

			},

			reset: function () {

				locked = false;

				currentStencilMask = null;
				currentStencilFunc = null;
				currentStencilRef = null;
				currentStencilFuncMask = null;
				currentStencilFail = null;
				currentStencilZFail = null;
				currentStencilZPass = null;
				currentStencilClear = null;

			}

		};

	}

	//

	const colorBuffer = new ColorBuffer();
	const depthBuffer = new DepthBuffer();
	const stencilBuffer = new StencilBuffer();

	const uboBindings = new WeakMap();
	const uboProgramMap = new WeakMap();

	let enabledCapabilities = {};

	let currentBoundFramebuffers = {};
	let currentDrawbuffers = new WeakMap();
	let defaultDrawbuffers = [];

	let currentProgram = null;

	let currentBlendingEnabled = false;
	let currentBlending = null;
	let currentBlendEquation = null;
	let currentBlendSrc = null;
	let currentBlendDst = null;
	let currentBlendEquationAlpha = null;
	let currentBlendSrcAlpha = null;
	let currentBlendDstAlpha = null;
	let currentPremultipledAlpha = false;

	let currentFlipSided = null;
	let currentCullFace = null;

	let currentLineWidth = null;

	let currentPolygonOffsetFactor = null;
	let currentPolygonOffsetUnits = null;

	const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

	let lineWidthAvailable = false;
	let version = 0;
	const glVersion = gl.getParameter( gl.VERSION );

	if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

		version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
		lineWidthAvailable = ( version >= 1.0 );

	} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

		version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
		lineWidthAvailable = ( version >= 2.0 );

	}

	let currentTextureSlot = null;
	let currentBoundTextures = {};

	const scissorParam = gl.getParameter( gl.SCISSOR_BOX );
	const viewportParam = gl.getParameter( gl.VIEWPORT );

	const currentScissor = new Vector4().fromArray( scissorParam );
	const currentViewport = new Vector4().fromArray( viewportParam );

	function createTexture( type, target, count, dimensions ) {

		const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
		const texture = gl.createTexture();

		gl.bindTexture( type, texture );
		gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
		gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

		for ( let i = 0; i < count; i ++ ) {

			if ( isWebGL2 && ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) ) {

				gl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			} else {

				gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

			}

		}

		return texture;

	}

	const emptyTextures = {};
	emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
	emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

	if ( isWebGL2 ) {

		emptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );
		emptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );

	}

	// init

	colorBuffer.setClear( 0, 0, 0, 1 );
	depthBuffer.setClear( 1 );
	stencilBuffer.setClear( 0 );

	enable( gl.DEPTH_TEST );
	depthBuffer.setFunc( LessEqualDepth );

	setFlipSided( false );
	setCullFace( CullFaceBack );
	enable( gl.CULL_FACE );

	setBlending( NoBlending );

	//

	function enable( id ) {

		if ( enabledCapabilities[ id ] !== true ) {

			gl.enable( id );
			enabledCapabilities[ id ] = true;

		}

	}

	function disable( id ) {

		if ( enabledCapabilities[ id ] !== false ) {

			gl.disable( id );
			enabledCapabilities[ id ] = false;

		}

	}

	function bindFramebuffer( target, framebuffer ) {

		if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

			gl.bindFramebuffer( target, framebuffer );

			currentBoundFramebuffers[ target ] = framebuffer;

			if ( isWebGL2 ) {

				// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

				if ( target === gl.DRAW_FRAMEBUFFER ) {

					currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

				}

				if ( target === gl.FRAMEBUFFER ) {

					currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

				}

			}

			return true;

		}

		return false;

	}

	function drawBuffers( renderTarget, framebuffer ) {

		let drawBuffers = defaultDrawbuffers;

		let needsUpdate = false;

		if ( renderTarget ) {

			drawBuffers = currentDrawbuffers.get( framebuffer );

			if ( drawBuffers === undefined ) {

				drawBuffers = [];
				currentDrawbuffers.set( framebuffer, drawBuffers );

			}

			if ( renderTarget.isWebGLMultipleRenderTargets ) {

				const textures = renderTarget.texture;

				if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

					for ( let i = 0, il = textures.length; i < il; i ++ ) {

						drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

					}

					drawBuffers.length = textures.length;

					needsUpdate = true;

				}

			} else {

				if ( drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

					drawBuffers[ 0 ] = gl.COLOR_ATTACHMENT0;

					needsUpdate = true;

				}

			}

		} else {

			if ( drawBuffers[ 0 ] !== gl.BACK ) {

				drawBuffers[ 0 ] = gl.BACK;

				needsUpdate = true;

			}

		}

		if ( needsUpdate ) {

			if ( capabilities.isWebGL2 ) {

				gl.drawBuffers( drawBuffers );

			} else {

				extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );

			}

		}


	}

	function useProgram( program ) {

		if ( currentProgram !== program ) {

			gl.useProgram( program );

			currentProgram = program;

			return true;

		}

		return false;

	}

	const equationToGL = {
		[ AddEquation ]: gl.FUNC_ADD,
		[ SubtractEquation ]: gl.FUNC_SUBTRACT,
		[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
	};

	if ( isWebGL2 ) {

		equationToGL[ MinEquation ] = gl.MIN;
		equationToGL[ MaxEquation ] = gl.MAX;

	} else {

		const extension = extensions.get( 'EXT_blend_minmax' );

		if ( extension !== null ) {

			equationToGL[ MinEquation ] = extension.MIN_EXT;
			equationToGL[ MaxEquation ] = extension.MAX_EXT;

		}

	}

	const factorToGL = {
		[ ZeroFactor ]: gl.ZERO,
		[ OneFactor ]: gl.ONE,
		[ SrcColorFactor ]: gl.SRC_COLOR,
		[ SrcAlphaFactor ]: gl.SRC_ALPHA,
		[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
		[ DstColorFactor ]: gl.DST_COLOR,
		[ DstAlphaFactor ]: gl.DST_ALPHA,
		[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
		[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
		[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
		[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA
	};

	function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

		if ( blending === NoBlending ) {

			if ( currentBlendingEnabled === true ) {

				disable( gl.BLEND );
				currentBlendingEnabled = false;

			}

			return;

		}

		if ( currentBlendingEnabled === false ) {

			enable( gl.BLEND );
			currentBlendingEnabled = true;

		}

		if ( blending !== CustomBlending ) {

			if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

				if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

					gl.blendEquation( gl.FUNC_ADD );

					currentBlendEquation = AddEquation;
					currentBlendEquationAlpha = AddEquation;

				}

				if ( premultipliedAlpha ) {

					switch ( blending ) {

						case NormalBlending:
							gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
							break;

						case AdditiveBlending:
							gl.blendFunc( gl.ONE, gl.ONE );
							break;

						case SubtractiveBlending:
							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
							break;

						case MultiplyBlending:
							gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
							break;

						default:
							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
							break;

					}

				} else {

					switch ( blending ) {

						case NormalBlending:
							gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
							break;

						case AdditiveBlending:
							gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
							break;

						case SubtractiveBlending:
							gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
							break;

						case MultiplyBlending:
							gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
							break;

						default:
							console.error( 'THREE.WebGLState: Invalid blending: ', blending );
							break;

					}

				}

				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;

				currentBlending = blending;
				currentPremultipledAlpha = premultipliedAlpha;

			}

			return;

		}

		// custom blending

		blendEquationAlpha = blendEquationAlpha || blendEquation;
		blendSrcAlpha = blendSrcAlpha || blendSrc;
		blendDstAlpha = blendDstAlpha || blendDst;

		if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

			gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

			currentBlendEquation = blendEquation;
			currentBlendEquationAlpha = blendEquationAlpha;

		}

		if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

			gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

			currentBlendSrc = blendSrc;
			currentBlendDst = blendDst;
			currentBlendSrcAlpha = blendSrcAlpha;
			currentBlendDstAlpha = blendDstAlpha;

		}

		currentBlending = blending;
		currentPremultipledAlpha = false;

	}

	function setMaterial( material, frontFaceCW ) {

		material.side === DoubleSide
			? disable( gl.CULL_FACE )
			: enable( gl.CULL_FACE );

		let flipSided = ( material.side === BackSide );
		if ( frontFaceCW ) flipSided = ! flipSided;

		setFlipSided( flipSided );

		( material.blending === NormalBlending && material.transparent === false )
			? setBlending( NoBlending )
			: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

		depthBuffer.setFunc( material.depthFunc );
		depthBuffer.setTest( material.depthTest );
		depthBuffer.setMask( material.depthWrite );
		colorBuffer.setMask( material.colorWrite );

		const stencilWrite = material.stencilWrite;
		stencilBuffer.setTest( stencilWrite );
		if ( stencilWrite ) {

			stencilBuffer.setMask( material.stencilWriteMask );
			stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
			stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

		}

		setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		material.alphaToCoverage === true
			? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
			: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

	}

	//

	function setFlipSided( flipSided ) {

		if ( currentFlipSided !== flipSided ) {

			if ( flipSided ) {

				gl.frontFace( gl.CW );

			} else {

				gl.frontFace( gl.CCW );

			}

			currentFlipSided = flipSided;

		}

	}

	function setCullFace( cullFace ) {

		if ( cullFace !== CullFaceNone ) {

			enable( gl.CULL_FACE );

			if ( cullFace !== currentCullFace ) {

				if ( cullFace === CullFaceBack ) {

					gl.cullFace( gl.BACK );

				} else if ( cullFace === CullFaceFront ) {

					gl.cullFace( gl.FRONT );

				} else {

					gl.cullFace( gl.FRONT_AND_BACK );

				}

			}

		} else {

			disable( gl.CULL_FACE );

		}

		currentCullFace = cullFace;

	}

	function setLineWidth( width ) {

		if ( width !== currentLineWidth ) {

			if ( lineWidthAvailable ) gl.lineWidth( width );

			currentLineWidth = width;

		}

	}

	function setPolygonOffset( polygonOffset, factor, units ) {

		if ( polygonOffset ) {

			enable( gl.POLYGON_OFFSET_FILL );

			if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

				gl.polygonOffset( factor, units );

				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;

			}

		} else {

			disable( gl.POLYGON_OFFSET_FILL );

		}

	}

	function setScissorTest( scissorTest ) {

		if ( scissorTest ) {

			enable( gl.SCISSOR_TEST );

		} else {

			disable( gl.SCISSOR_TEST );

		}

	}

	// texture

	function activeTexture( webglSlot ) {

		if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

		if ( currentTextureSlot !== webglSlot ) {

			gl.activeTexture( webglSlot );
			currentTextureSlot = webglSlot;

		}

	}

	function bindTexture( webglType, webglTexture, webglSlot ) {

		if ( webglSlot === undefined ) {

			if ( currentTextureSlot === null ) {

				webglSlot = gl.TEXTURE0 + maxTextures - 1;

			} else {

				webglSlot = currentTextureSlot;

			}

		}

		let boundTexture = currentBoundTextures[ webglSlot ];

		if ( boundTexture === undefined ) {

			boundTexture = { type: undefined, texture: undefined };
			currentBoundTextures[ webglSlot ] = boundTexture;

		}

		if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

			gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

			boundTexture.type = webglType;
			boundTexture.texture = webglTexture;

		}

	}

	function unbindTexture() {

		const boundTexture = currentBoundTextures[ currentTextureSlot ];

		if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

			gl.bindTexture( boundTexture.type, null );

			boundTexture.type = undefined;
			boundTexture.texture = undefined;

		}

	}

	function compressedTexImage2D() {

		try {

			gl.compressedTexImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function compressedTexImage3D() {

		try {

			gl.compressedTexImage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texSubImage2D() {

		try {

			gl.texSubImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texSubImage3D() {

		try {

			gl.texSubImage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function compressedTexSubImage2D() {

		try {

			gl.compressedTexSubImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function compressedTexSubImage3D() {

		try {

			gl.compressedTexSubImage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texStorage2D() {

		try {

			gl.texStorage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texStorage3D() {

		try {

			gl.texStorage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage2D() {

		try {

			gl.texImage2D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	function texImage3D() {

		try {

			gl.texImage3D.apply( gl, arguments );

		} catch ( error ) {

			console.error( 'THREE.WebGLState:', error );

		}

	}

	//

	function scissor( scissor ) {

		if ( currentScissor.equals( scissor ) === false ) {

			gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
			currentScissor.copy( scissor );

		}

	}

	function viewport( viewport ) {

		if ( currentViewport.equals( viewport ) === false ) {

			gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
			currentViewport.copy( viewport );

		}

	}

	function updateUBOMapping( uniformsGroup, program ) {

		let mapping = uboProgramMap.get( program );

		if ( mapping === undefined ) {

			mapping = new WeakMap();

			uboProgramMap.set( program, mapping );

		}

		let blockIndex = mapping.get( uniformsGroup );

		if ( blockIndex === undefined ) {

			blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );

			mapping.set( uniformsGroup, blockIndex );

		}

	}

	function uniformBlockBinding( uniformsGroup, program ) {

		const mapping = uboProgramMap.get( program );
		const blockIndex = mapping.get( uniformsGroup );

		if ( uboBindings.get( program ) !== blockIndex ) {

			// bind shader specific block index to global block point
			gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );

			uboBindings.set( program, blockIndex );

		}

	}

	//

	function reset() {

		// reset state

		gl.disable( gl.BLEND );
		gl.disable( gl.CULL_FACE );
		gl.disable( gl.DEPTH_TEST );
		gl.disable( gl.POLYGON_OFFSET_FILL );
		gl.disable( gl.SCISSOR_TEST );
		gl.disable( gl.STENCIL_TEST );
		gl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

		gl.blendEquation( gl.FUNC_ADD );
		gl.blendFunc( gl.ONE, gl.ZERO );
		gl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );

		gl.colorMask( true, true, true, true );
		gl.clearColor( 0, 0, 0, 0 );

		gl.depthMask( true );
		gl.depthFunc( gl.LESS );
		gl.clearDepth( 1 );

		gl.stencilMask( 0xffffffff );
		gl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );
		gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );
		gl.clearStencil( 0 );

		gl.cullFace( gl.BACK );
		gl.frontFace( gl.CCW );

		gl.polygonOffset( 0, 0 );

		gl.activeTexture( gl.TEXTURE0 );

		gl.bindFramebuffer( gl.FRAMEBUFFER, null );

		if ( isWebGL2 === true ) {

			gl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );
			gl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );

		}

		gl.useProgram( null );

		gl.lineWidth( 1 );

		gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
		gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

		// reset internals

		enabledCapabilities = {};

		currentTextureSlot = null;
		currentBoundTextures = {};

		currentBoundFramebuffers = {};
		currentDrawbuffers = new WeakMap();
		defaultDrawbuffers = [];

		currentProgram = null;

		currentBlendingEnabled = false;
		currentBlending = null;
		currentBlendEquation = null;
		currentBlendSrc = null;
		currentBlendDst = null;
		currentBlendEquationAlpha = null;
		currentBlendSrcAlpha = null;
		currentBlendDstAlpha = null;
		currentPremultipledAlpha = false;

		currentFlipSided = null;
		currentCullFace = null;

		currentLineWidth = null;

		currentPolygonOffsetFactor = null;
		currentPolygonOffsetUnits = null;

		currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
		currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

		colorBuffer.reset();
		depthBuffer.reset();
		stencilBuffer.reset();

	}

	return {

		buffers: {
			color: colorBuffer,
			depth: depthBuffer,
			stencil: stencilBuffer
		},

		enable: enable,
		disable: disable,

		bindFramebuffer: bindFramebuffer,
		drawBuffers: drawBuffers,

		useProgram: useProgram,

		setBlending: setBlending,
		setMaterial: setMaterial,

		setFlipSided: setFlipSided,
		setCullFace: setCullFace,

		setLineWidth: setLineWidth,
		setPolygonOffset: setPolygonOffset,

		setScissorTest: setScissorTest,

		activeTexture: activeTexture,
		bindTexture: bindTexture,
		unbindTexture: unbindTexture,
		compressedTexImage2D: compressedTexImage2D,
		compressedTexImage3D: compressedTexImage3D,
		texImage2D: texImage2D,
		texImage3D: texImage3D,

		updateUBOMapping: updateUBOMapping,
		uniformBlockBinding: uniformBlockBinding,

		texStorage2D: texStorage2D,
		texStorage3D: texStorage3D,
		texSubImage2D: texSubImage2D,
		texSubImage3D: texSubImage3D,
		compressedTexSubImage2D: compressedTexSubImage2D,
		compressedTexSubImage3D: compressedTexSubImage3D,

		scissor: scissor,
		viewport: viewport,

		reset: reset

	};

}

function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

	const isWebGL2 = capabilities.isWebGL2;
	const maxTextures = capabilities.maxTextures;
	const maxCubemapSize = capabilities.maxCubemapSize;
	const maxTextureSize = capabilities.maxTextureSize;
	const maxSamples = capabilities.maxSamples;
	const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
	const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );

	const _videoTextures = new WeakMap();
	let _canvas;

	const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

	// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
	// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
	// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

	let useOffscreenCanvas = false;

	try {

		useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
			// eslint-disable-next-line compat/compat
			&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

	} catch ( err ) {

		// Ignore any errors

	}

	function createCanvas( width, height ) {

		// Use OffscreenCanvas when available. Specially needed in web workers

		return useOffscreenCanvas ?
			// eslint-disable-next-line compat/compat
			new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

	}

	function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

		let scale = 1;

		// handle case if texture exceeds max size

		if ( image.width > maxSize || image.height > maxSize ) {

			scale = maxSize / Math.max( image.width, image.height );

		}

		// only perform resize if necessary

		if ( scale < 1 || needsPowerOfTwo === true ) {

			// only perform resize for certain image types

			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

				const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;

				const width = floor( scale * image.width );
				const height = floor( scale * image.height );

				if ( _canvas === undefined ) _canvas = createCanvas( width, height );

				// cube textures can't reuse the same canvas

				const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

				canvas.width = width;
				canvas.height = height;

				const context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, width, height );

				console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

				return canvas;

			} else {

				if ( 'data' in image ) {

					console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

				}

				return image;

			}

		}

		return image;

	}

	function isPowerOfTwo$1( image ) {

		return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );

	}

	function textureNeedsPowerOfTwo( texture ) {

		if ( isWebGL2 ) return false;

		return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
			( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

	}

	function textureNeedsGenerateMipmaps( texture, supportsMips ) {

		return texture.generateMipmaps && supportsMips &&
			texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

	}

	function generateMipmap( target ) {

		_gl.generateMipmap( target );

	}

	function getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

		if ( isWebGL2 === false ) return glFormat;

		if ( internalFormatName !== null ) {

			if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

			console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

		}

		let internalFormat = glFormat;

		if ( glFormat === _gl.RED ) {

			if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

		}

		if ( glFormat === _gl.RED_INTEGER ) {

			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;
			if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;
			if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;
			if ( glType === _gl.BYTE ) internalFormat = _gl.R8I;
			if ( glType === _gl.SHORT ) internalFormat = _gl.R16I;
			if ( glType === _gl.INT ) internalFormat = _gl.R32I;

		}

		if ( glFormat === _gl.RG ) {

			if ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;
			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;
			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;

		}

		if ( glFormat === _gl.RGBA ) {

			if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
			if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
			if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
			if ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;
			if ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;

		}

		if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
			internalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||
			internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

			extensions.get( 'EXT_color_buffer_float' );

		}

		return internalFormat;

	}

	function getMipLevels( texture, image, supportsMips ) {

		if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {

			return Math.log2( Math.max( image.width, image.height ) ) + 1;

		} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

			// user-defined mipmaps

			return texture.mipmaps.length;

		} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

			return image.mipmaps.length;

		} else {

			// texture without mipmaps (only base level)

			return 1;

		}

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback( f ) {

		if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	//

	function onTextureDispose( event ) {

		const texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		if ( texture.isVideoTexture ) {

			_videoTextures.delete( texture );

		}

	}

	function onRenderTargetDispose( event ) {

		const renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

	}

	//

	function deallocateTexture( texture ) {

		const textureProperties = properties.get( texture );

		if ( textureProperties.__webglInit === undefined ) return;

		// check if it's necessary to remove the WebGLTexture object

		const source = texture.source;
		const webglTextures = _sources.get( source );

		if ( webglTextures ) {

			const webglTexture = webglTextures[ textureProperties.__cacheKey ];
			webglTexture.usedTimes --;

			// the WebGLTexture object is not used anymore, remove it

			if ( webglTexture.usedTimes === 0 ) {

				deleteTexture( texture );

			}

			// remove the weak map entry if no WebGLTexture uses the source anymore

			if ( Object.keys( webglTextures ).length === 0 ) {

				_sources.delete( source );

			}

		}

		properties.remove( texture );

	}

	function deleteTexture( texture ) {

		const textureProperties = properties.get( texture );
		_gl.deleteTexture( textureProperties.__webglTexture );

		const source = texture.source;
		const webglTextures = _sources.get( source );
		delete webglTextures[ textureProperties.__cacheKey ];

		info.memory.textures --;

	}

	function deallocateRenderTarget( renderTarget ) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get( renderTarget );
		const textureProperties = properties.get( texture );

		if ( textureProperties.__webglTexture !== undefined ) {

			_gl.deleteTexture( textureProperties.__webglTexture );

			info.memory.textures --;

		}

		if ( renderTarget.depthTexture ) {

			renderTarget.depthTexture.dispose();

		}

		if ( renderTarget.isWebGLCubeRenderTarget ) {

			for ( let i = 0; i < 6; i ++ ) {

				if ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {

					for ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );

				} else {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );

				}

				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

			}

		} else {

			if ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {

				for ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );

			}

			if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
			if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

			if ( renderTargetProperties.__webglColorRenderbuffer ) {

				for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

					if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

				}

			}

			if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

		}

		if ( renderTarget.isWebGLMultipleRenderTargets ) {

			for ( let i = 0, il = texture.length; i < il; i ++ ) {

				const attachmentProperties = properties.get( texture[ i ] );

				if ( attachmentProperties.__webglTexture ) {

					_gl.deleteTexture( attachmentProperties.__webglTexture );

					info.memory.textures --;

				}

				properties.remove( texture[ i ] );

			}

		}

		properties.remove( texture );
		properties.remove( renderTarget );

	}

	//

	let textureUnits = 0;

	function resetTextureUnits() {

		textureUnits = 0;

	}

	function allocateTextureUnit() {

		const textureUnit = textureUnits;

		if ( textureUnit >= maxTextures ) {

			console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

		}

		textureUnits += 1;

		return textureUnit;

	}

	function getTextureCacheKey( texture ) {

		const array = [];

		array.push( texture.wrapS );
		array.push( texture.wrapT );
		array.push( texture.wrapR || 0 );
		array.push( texture.magFilter );
		array.push( texture.minFilter );
		array.push( texture.anisotropy );
		array.push( texture.internalFormat );
		array.push( texture.format );
		array.push( texture.type );
		array.push( texture.generateMipmaps );
		array.push( texture.premultiplyAlpha );
		array.push( texture.flipY );
		array.push( texture.unpackAlignment );
		array.push( texture.colorSpace );

		return array.join();

	}

	//

	function setTexture2D( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.isVideoTexture ) updateVideoTexture( texture );

		if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

			const image = texture.image;

			if ( image === null ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

			} else if ( image.complete === false ) {

				console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

			} else {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

		}

		state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

	}

	function setTexture2DArray( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadTexture( textureProperties, texture, slot );
			return;

		}

		state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

	}

	function setTexture3D( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadTexture( textureProperties, texture, slot );
			return;

		}

		state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

	}

	function setTextureCube( texture, slot ) {

		const textureProperties = properties.get( texture );

		if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

			uploadCubeTexture( textureProperties, texture, slot );
			return;

		}

		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

	}

	const wrappingToGL = {
		[ RepeatWrapping ]: _gl.REPEAT,
		[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,
		[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT
	};

	const filterToGL = {
		[ NearestFilter ]: _gl.NEAREST,
		[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,
		[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,

		[ LinearFilter ]: _gl.LINEAR,
		[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,
		[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR
	};

	const compareToGL = {
		[ NeverCompare ]: _gl.NEVER,
		[ AlwaysCompare ]: _gl.ALWAYS,
		[ LessCompare ]: _gl.LESS,
		[ LessEqualCompare ]: _gl.LEQUAL,
		[ EqualCompare ]: _gl.EQUAL,
		[ GreaterEqualCompare ]: _gl.GEQUAL,
		[ GreaterCompare ]: _gl.GREATER,
		[ NotEqualCompare ]: _gl.NOTEQUAL
	};

	function setTextureParameters( textureType, texture, supportsMips ) {

		if ( supportsMips ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

			if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );

			}

			if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

			}

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

			if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

				console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

			}

		}

		if ( texture.compareFunction ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );
			_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

		}

		if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

			const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( texture.magFilter === NearestFilter ) return;
			if ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;
			if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
			if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only

			if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
				properties.get( texture ).__currentAnisotropy = texture.anisotropy;

			}

		}

	}

	function initTexture( textureProperties, texture ) {

		let forceUpload = false;

		if ( textureProperties.__webglInit === undefined ) {

			textureProperties.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

		}

		// create Source <-> WebGLTextures mapping if necessary

		const source = texture.source;
		let webglTextures = _sources.get( source );

		if ( webglTextures === undefined ) {

			webglTextures = {};
			_sources.set( source, webglTextures );

		}

		// check if there is already a WebGLTexture object for the given texture parameters

		const textureCacheKey = getTextureCacheKey( texture );

		if ( textureCacheKey !== textureProperties.__cacheKey ) {

			// if not, create a new instance of WebGLTexture

			if ( webglTextures[ textureCacheKey ] === undefined ) {

				// create new entry

				webglTextures[ textureCacheKey ] = {
					texture: _gl.createTexture(),
					usedTimes: 0
				};

				info.memory.textures ++;

				// when a new instance of WebGLTexture was created, a texture upload is required
				// even if the image contents are identical

				forceUpload = true;

			}

			webglTextures[ textureCacheKey ].usedTimes ++;

			// every time the texture cache key changes, it's necessary to check if an instance of
			// WebGLTexture can be deleted in order to avoid a memory leak.

			const webglTexture = webglTextures[ textureProperties.__cacheKey ];

			if ( webglTexture !== undefined ) {

				webglTextures[ textureProperties.__cacheKey ].usedTimes --;

				if ( webglTexture.usedTimes === 0 ) {

					deleteTexture( texture );

				}

			}

			// store references to cache key and WebGLTexture object

			textureProperties.__cacheKey = textureCacheKey;
			textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

		}

		return forceUpload;

	}

	function uploadTexture( textureProperties, texture, slot ) {

		let textureType = _gl.TEXTURE_2D;

		if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;
		if ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;

		const forceUpload = initTexture( textureProperties, texture );
		const source = texture.source;

		state.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		const sourceProperties = properties.get( source );

		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

			state.activeTexture( _gl.TEXTURE0 + slot );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );

			const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
			let image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
			image = verifyColorSpace( texture, image );

			const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
				glFormat = utils.convert( texture.format, texture.colorSpace );

			let glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

			setTextureParameters( textureType, texture, supportsMips );

			let mipmap;
			const mipmaps = texture.mipmaps;

			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
			const levels = getMipLevels( texture, image, supportsMips );

			if ( texture.isDepthTexture ) {

				// populate depth texture with dummy data

				glInternalFormat = _gl.DEPTH_COMPONENT;

				if ( isWebGL2 ) {

					if ( texture.type === FloatType ) {

						glInternalFormat = _gl.DEPTH_COMPONENT32F;

					} else if ( texture.type === UnsignedIntType ) {

						glInternalFormat = _gl.DEPTH_COMPONENT24;

					} else if ( texture.type === UnsignedInt248Type ) {

						glInternalFormat = _gl.DEPTH24_STENCIL8;

					} else {

						glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D

					}

				} else {

					if ( texture.type === FloatType ) {

						console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

					}

				}

				// validation checks for WebGL 1

				if ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

						texture.type = UnsignedIntType;
						glType = utils.convert( texture.type );

					}

				}

				if ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					glInternalFormat = _gl.DEPTH_STENCIL;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedInt248Type ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );

					}

				}

				//

				if ( allocateMemory ) {

					if ( useTexStorage ) {

						state.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

					}

				}

			} else if ( texture.isDataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

					}

					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( useTexStorage ) {

							state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

						}

					}

					texture.generateMipmaps = false;

				} else {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

						}

						state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

					}

				}

			} else if ( texture.isCompressedTexture ) {

				if ( texture.isCompressedArrayTexture ) {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );

					}

					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( texture.format !== RGBAFormat ) {

							if ( glFormat !== null ) {

								if ( useTexStorage ) {

									state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );

								} else {

									state.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );

								}

							} else {

								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

							}

						} else {

							if ( useTexStorage ) {

								state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

							} else {

								state.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				} else {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

					}

					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( texture.format !== RGBAFormat ) {

							if ( glFormat !== null ) {

								if ( useTexStorage ) {

									state.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

								} else {

									state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								}

							} else {

								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

							}

						} else {

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

							} else {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

			} else if ( texture.isDataArrayTexture ) {

				if ( useTexStorage ) {

					if ( allocateMemory ) {

						state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );

					}

					state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

				} else {

					state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

				}

			} else if ( texture.isData3DTexture ) {

				if ( useTexStorage ) {

					if ( allocateMemory ) {

						state.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );

					}

					state.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

				} else {

					state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

				}

			} else if ( texture.isFramebufferTexture ) {

				if ( allocateMemory ) {

					if ( useTexStorage ) {

						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

					} else {

						let width = image.width, height = image.height;

						for ( let i = 0; i < levels; i ++ ) {

							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );

							width >>= 1;
							height >>= 1;

						}

					}

				}

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

					}

					for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];

						if ( useTexStorage ) {

							state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

						}

					}

					texture.generateMipmaps = false;

				} else {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

						}

						state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );

					} else {

						state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );

					}

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( textureType );

			}

			sourceProperties.__version = source.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		textureProperties.__version = texture.version;

	}

	function uploadCubeTexture( textureProperties, texture, slot ) {

		if ( texture.image.length !== 6 ) return;

		const forceUpload = initTexture( textureProperties, texture );
		const source = texture.source;

		state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		const sourceProperties = properties.get( source );

		if ( source.version !== sourceProperties.__version || forceUpload === true ) {

			state.activeTexture( _gl.TEXTURE0 + slot );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
			_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );

			const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
			const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

			const cubeImage = [];

			for ( let i = 0; i < 6; i ++ ) {

				if ( ! isCompressed && ! isDataTexture ) {

					cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

				} else {

					cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

				}

				cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

			}

			const image = cubeImage[ 0 ],
				supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
				glFormat = utils.convert( texture.format, texture.colorSpace ),
				glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );

			const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
			const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
			let levels = getMipLevels( texture, image, supportsMips );

			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

			let mipmaps;

			if ( isCompressed ) {

				if ( useTexStorage && allocateMemory ) {

					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );

				}

				for ( let i = 0; i < 6; i ++ ) {

					mipmaps = cubeImage[ i ].mipmaps;

					for ( let j = 0; j < mipmaps.length; j ++ ) {

						const mipmap = mipmaps[ j ];

						if ( texture.format !== RGBAFormat ) {

							if ( glFormat !== null ) {

								if ( useTexStorage ) {

									state.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

								} else {

									state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								}

							} else {

								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

							}

						} else {

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

			} else {

				mipmaps = texture.mipmaps;

				if ( useTexStorage && allocateMemory ) {

					// TODO: Uniformly handle mipmap definitions
					// Normal textures and compressed cube textures define base level + mips with their mipmap array
					// Uncompressed cube textures use their mipmap array only for mips (no base level)

					if ( mipmaps.length > 0 ) levels ++;

					state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );

				}

				for ( let i = 0; i < 6; i ++ ) {

					if ( isDataTexture ) {

						if ( useTexStorage ) {

							state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						}

						for ( let j = 0; j < mipmaps.length; j ++ ) {

							const mipmap = mipmaps[ j ];
							const mipmapImage = mipmap.image[ i ].image;

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

							}

						}

					} else {

						if ( useTexStorage ) {

							state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

						} else {

							state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

						}

						for ( let j = 0; j < mipmaps.length; j ++ ) {

							const mipmap = mipmaps[ j ];

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

							}

						}

					}

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				// We assume images for cube map have the same size.
				generateMipmap( _gl.TEXTURE_CUBE_MAP );

			}

			sourceProperties.__version = source.version;

			if ( texture.onUpdate ) texture.onUpdate( texture );

		}

		textureProperties.__version = texture.version;

	}

	// Render targets

	// Setup storage for target texture and bind it to correct framebuffer
	function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {

		const glFormat = utils.convert( texture.format, texture.colorSpace );
		const glType = utils.convert( texture.type );
		const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
		const renderTargetProperties = properties.get( renderTarget );

		if ( ! renderTargetProperties.__hasExternalTextures ) {

			const width = Math.max( 1, renderTarget.width >> level );
			const height = Math.max( 1, renderTarget.height >> level );

			if ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {

				state.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );

			} else {

				state.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );

			}

		}

		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( useMultisampledRTT( renderTarget ) ) {

			multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

		} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753

			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, level );

		}

		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}


	// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
	function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			let glInternalFormat = _gl.DEPTH_COMPONENT16;

			if ( isMultisample || useMultisampledRTT( renderTarget ) ) {

				const depthTexture = renderTarget.depthTexture;

				if ( depthTexture && depthTexture.isDepthTexture ) {

					if ( depthTexture.type === FloatType ) {

						glInternalFormat = _gl.DEPTH_COMPONENT32F;

					} else if ( depthTexture.type === UnsignedIntType ) {

						glInternalFormat = _gl.DEPTH_COMPONENT24;

					}

				}

				const samples = getRenderTargetSamples( renderTarget );

				if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				}

			} else {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

			}

			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			const samples = getRenderTargetSamples( renderTarget );

			if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

				_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

			} else if ( useMultisampledRTT( renderTarget ) ) {

				multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

			} else {

				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );

			}


			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

			for ( let i = 0; i < textures.length; i ++ ) {

				const texture = textures[ i ];

				const glFormat = utils.convert( texture.format, texture.colorSpace );
				const glType = utils.convert( texture.type );
				const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
				const samples = getRenderTargetSamples( renderTarget );

				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				} else if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

				}

			}

		}

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

	}

	// Setup resources for a Depth Texture for a FBO (needs an extension)
	function setupDepthTexture( framebuffer, renderTarget ) {

		const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
		if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

		state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

		if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

			throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

		}

		// upload an empty depth texture with framebuffer size
		if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
				renderTarget.depthTexture.image.width !== renderTarget.width ||
				renderTarget.depthTexture.image.height !== renderTarget.height ) {

			renderTarget.depthTexture.image.width = renderTarget.width;
			renderTarget.depthTexture.image.height = renderTarget.height;
			renderTarget.depthTexture.needsUpdate = true;

		}

		setTexture2D( renderTarget.depthTexture, 0 );

		const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
		const samples = getRenderTargetSamples( renderTarget );

		if ( renderTarget.depthTexture.format === DepthFormat ) {

			if ( useMultisampledRTT( renderTarget ) ) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

			} else {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			}

		} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

			if ( useMultisampledRTT( renderTarget ) ) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

			} else {

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

			}

		} else {

			throw new Error( 'Unknown depthTexture format' );

		}

	}

	// Setup GL resources for a non-texture depth buffer
	function setupDepthRenderbuffer( renderTarget ) {

		const renderTargetProperties = properties.get( renderTarget );
		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

		if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

			if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

			setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

		} else {

			if ( isCube ) {

				renderTargetProperties.__webglDepthbuffer = [];

				for ( let i = 0; i < 6; i ++ ) {

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
					renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

				}

			} else {

				state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
				renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
				setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

			}

		}

		state.bindFramebuffer( _gl.FRAMEBUFFER, null );

	}

	// rebind framebuffer with external textures
	function rebindTextures( renderTarget, colorTexture, depthTexture ) {

		const renderTargetProperties = properties.get( renderTarget );

		if ( colorTexture !== undefined ) {

			setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );

		}

		if ( depthTexture !== undefined ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	// Set up GL resources for the render target
	function setupRenderTarget( renderTarget ) {

		const texture = renderTarget.texture;

		const renderTargetProperties = properties.get( renderTarget );
		const textureProperties = properties.get( texture );

		renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

		if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {

			if ( textureProperties.__webglTexture === undefined ) {

				textureProperties.__webglTexture = _gl.createTexture();

			}

			textureProperties.__version = texture.version;
			info.memory.textures ++;

		}

		const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
		const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

		// Setup framebuffer

		if ( isCube ) {

			renderTargetProperties.__webglFramebuffer = [];

			for ( let i = 0; i < 6; i ++ ) {

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					renderTargetProperties.__webglFramebuffer[ i ] = [];

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						renderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();

					}

				} else {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			}

		} else {

			if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

					renderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

			}

			if ( isMultipleRenderTargets ) {

				if ( capabilities.drawBuffers ) {

					const textures = renderTarget.texture;

					for ( let i = 0, il = textures.length; i < il; i ++ ) {

						const attachmentProperties = properties.get( textures[ i ] );

						if ( attachmentProperties.__webglTexture === undefined ) {

							attachmentProperties.__webglTexture = _gl.createTexture();

							info.memory.textures ++;

						}

					}

				} else {

					console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );

				}

			}

			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

				const textures = isMultipleRenderTargets ? texture : [ texture ];

				renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
				renderTargetProperties.__webglColorRenderbuffer = [];

				state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

				for ( let i = 0; i < textures.length; i ++ ) {

					const texture = textures[ i ];
					renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

					_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					const glFormat = utils.convert( texture.format, texture.colorSpace );
					const glType = utils.convert( texture.type );
					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );
					const samples = getRenderTargetSamples( renderTarget );
					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

				}

				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

				if ( renderTarget.depthBuffer ) {

					renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

				}

				state.bindFramebuffer( _gl.FRAMEBUFFER, null );

			}

		}

		// Setup color buffer

		if ( isCube ) {

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
			setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

			for ( let i = 0; i < 6; i ++ ) {

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );

					}

				} else {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( _gl.TEXTURE_CUBE_MAP );

			}

			state.unbindTexture();

		} else if ( isMultipleRenderTargets ) {

			const textures = renderTarget.texture;

			for ( let i = 0, il = textures.length; i < il; i ++ ) {

				const attachment = textures[ i ];
				const attachmentProperties = properties.get( attachment );

				state.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );

				if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {

					generateMipmap( _gl.TEXTURE_2D );

				}

			}

			state.unbindTexture();

		} else {

			let glTextureType = _gl.TEXTURE_2D;

			if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

				if ( isWebGL2 ) {

					glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;

				} else {

					console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );

				}

			}

			state.bindTexture( glTextureType, textureProperties.__webglTexture );
			setTextureParameters( glTextureType, texture, supportsMips );

			if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

				for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );

				}

			} else {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( glTextureType );

			}

			state.unbindTexture();

		}

		// Setup depth and stencil buffers

		if ( renderTarget.depthBuffer ) {

			setupDepthRenderbuffer( renderTarget );

		}

	}

	function updateRenderTargetMipmap( renderTarget ) {

		const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

		const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

		for ( let i = 0, il = textures.length; i < il; i ++ ) {

			const texture = textures[ i ];

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
				const webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				generateMipmap( target );
				state.unbindTexture();

			}

		}

	}

	function updateMultisampleRenderTarget( renderTarget ) {

		if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

			const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];
			const width = renderTarget.width;
			const height = renderTarget.height;
			let mask = _gl.COLOR_BUFFER_BIT;
			const invalidationArray = [];
			const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
			const renderTargetProperties = properties.get( renderTarget );
			const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );

			// If MRT we need to remove FBO attachments
			if ( isMultipleRenderTargets ) {

				for ( let i = 0; i < textures.length; i ++ ) {

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );

				}

			}

			state.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
			state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

			for ( let i = 0; i < textures.length; i ++ ) {

				invalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );

				if ( renderTarget.depthBuffer ) {

					invalidationArray.push( depthStyle );

				}

				const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;

				if ( ignoreDepthValues === false ) {

					if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;
					if ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

				}

				if ( isMultipleRenderTargets ) {

					_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

				}

				if ( ignoreDepthValues === true ) {

					_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );
					_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );

				}

				if ( isMultipleRenderTargets ) {

					const webglTexture = properties.get( textures[ i ] ).__webglTexture;
					_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );

				}

				_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

				if ( supportsInvalidateFramebuffer ) {

					_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );

				}


			}

			state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
			state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

			// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
			if ( isMultipleRenderTargets ) {

				for ( let i = 0; i < textures.length; i ++ ) {

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					const webglTexture = properties.get( textures[ i ] ).__webglTexture;

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );

				}

			}

			state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

		}

	}

	function getRenderTargetSamples( renderTarget ) {

		return Math.min( maxSamples, renderTarget.samples );

	}

	function useMultisampledRTT( renderTarget ) {

		const renderTargetProperties = properties.get( renderTarget );

		return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

	}

	function updateVideoTexture( texture ) {

		const frame = info.render.frame;

		// Check the last frame we updated the VideoTexture

		if ( _videoTextures.get( texture ) !== frame ) {

			_videoTextures.set( texture, frame );
			texture.update();

		}

	}

	function verifyColorSpace( texture, image ) {

		const colorSpace = texture.colorSpace;
		const format = texture.format;
		const type = texture.type;

		if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;

		if ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {

			// sRGB

			if ( colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace ) {

				if ( isWebGL2 === false ) {

					// in WebGL 1, try to use EXT_sRGB extension and unsized formats

					if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {

						texture.format = _SRGBAFormat;

						// it's not possible to generate mips in WebGL 1 with this extension

						texture.minFilter = LinearFilter;
						texture.generateMipmaps = false;

					} else {

						// slow fallback (CPU decode)

						image = ImageUtils.sRGBToLinear( image );

					}

				} else {

					// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

					if ( format !== RGBAFormat || type !== UnsignedByteType ) {

						console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

					}

				}

			} else {

				console.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );

			}

		}

		return image;

	}

	//

	this.allocateTextureUnit = allocateTextureUnit;
	this.resetTextureUnits = resetTextureUnits;

	this.setTexture2D = setTexture2D;
	this.setTexture2DArray = setTexture2DArray;
	this.setTexture3D = setTexture3D;
	this.setTextureCube = setTextureCube;
	this.rebindTextures = rebindTextures;
	this.setupRenderTarget = setupRenderTarget;
	this.updateRenderTargetMipmap = updateRenderTargetMipmap;
	this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
	this.setupDepthRenderbuffer = setupDepthRenderbuffer;
	this.setupFrameBufferTexture = setupFrameBufferTexture;
	this.useMultisampledRTT = useMultisampledRTT;

}

const LinearTransferFunction = 0;
const SRGBTransferFunction = 1;

function WebGLUtils( gl, extensions, capabilities ) {

	const isWebGL2 = capabilities.isWebGL2;

	function convert( p, colorSpace = NoColorSpace ) {

		let extension;

		const transferFunction = ( colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace ) ? SRGBTransferFunction : LinearTransferFunction;

		if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
		if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;

		if ( p === ByteType ) return gl.BYTE;
		if ( p === ShortType ) return gl.SHORT;
		if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
		if ( p === IntType ) return gl.INT;
		if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
		if ( p === FloatType ) return gl.FLOAT;

		if ( p === HalfFloatType ) {

			if ( isWebGL2 ) return gl.HALF_FLOAT;

			extension = extensions.get( 'OES_texture_half_float' );

			if ( extension !== null ) {

				return extension.HALF_FLOAT_OES;

			} else {

				return null;

			}

		}

		if ( p === AlphaFormat ) return gl.ALPHA;
		if ( p === RGBAFormat ) return gl.RGBA;
		if ( p === LuminanceFormat ) return gl.LUMINANCE;
		if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
		if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
		if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

		// WebGL 1 sRGB fallback

		if ( p === _SRGBAFormat ) {

			extension = extensions.get( 'EXT_sRGB' );

			if ( extension !== null ) {

				return extension.SRGB_ALPHA_EXT;

			} else {

				return null;

			}

		}

		// WebGL2 formats.

		if ( p === RedFormat ) return gl.RED;
		if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
		if ( p === RGFormat ) return gl.RG;
		if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
		if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

		// S3TC

		if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

			if ( transferFunction === SRGBTransferFunction ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

				} else {

					return null;

				}

			} else {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
					if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
					if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

				} else {

					return null;

				}

			}

		}

		// PVRTC

		if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

			if ( extension !== null ) {

				if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

			} else {

				return null;

			}

		}

		// ETC1

		if ( p === RGB_ETC1_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

			if ( extension !== null ) {

				return extension.COMPRESSED_RGB_ETC1_WEBGL;

			} else {

				return null;

			}

		}

		// ETC2

		if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_etc' );

			if ( extension !== null ) {

				if ( p === RGB_ETC2_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
				if ( p === RGBA_ETC2_EAC_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

			} else {

				return null;

			}

		}

		// ASTC

		if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
			p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
			p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
			p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
			p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

			extension = extensions.get( 'WEBGL_compressed_texture_astc' );

			if ( extension !== null ) {

				if ( p === RGBA_ASTC_4x4_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
				if ( p === RGBA_ASTC_5x4_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
				if ( p === RGBA_ASTC_5x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
				if ( p === RGBA_ASTC_6x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
				if ( p === RGBA_ASTC_6x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
				if ( p === RGBA_ASTC_8x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
				if ( p === RGBA_ASTC_8x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
				if ( p === RGBA_ASTC_8x8_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
				if ( p === RGBA_ASTC_10x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
				if ( p === RGBA_ASTC_10x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
				if ( p === RGBA_ASTC_10x8_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
				if ( p === RGBA_ASTC_10x10_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
				if ( p === RGBA_ASTC_12x10_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
				if ( p === RGBA_ASTC_12x12_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

			} else {

				return null;

			}

		}

		// BPTC

		if ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {

			extension = extensions.get( 'EXT_texture_compression_bptc' );

			if ( extension !== null ) {

				if ( p === RGBA_BPTC_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
				if ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
				if ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;

			} else {

				return null;

			}

		}

		// RGTC

		if ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {

			extension = extensions.get( 'EXT_texture_compression_rgtc' );

			if ( extension !== null ) {

				if ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;
				if ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
				if ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
				if ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

			} else {

				return null;

			}

		}

		//

		if ( p === UnsignedInt248Type ) {

			if ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;

			extension = extensions.get( 'WEBGL_depth_texture' );

			if ( extension !== null ) {

				return extension.UNSIGNED_INT_24_8_WEBGL;

			} else {

				return null;

			}

		}

		// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

		return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

	}

	return { convert: convert };

}

class ArrayCamera extends PerspectiveCamera {

	constructor( array = [] ) {

		super();

		this.isArrayCamera = true;

		this.cameras = array;

	}

}

class Group extends Object3D {

	constructor() {

		super();

		this.isGroup = true;

		this.type = 'Group';

	}

}

const _moveEvent = { type: 'move' };

class WebXRController {

	constructor() {

		this._targetRay = null;
		this._grip = null;
		this._hand = null;

	}

	getHandSpace() {

		if ( this._hand === null ) {

			this._hand = new Group();
			this._hand.matrixAutoUpdate = false;
			this._hand.visible = false;

			this._hand.joints = {};
			this._hand.inputState = { pinching: false };

		}

		return this._hand;

	}

	getTargetRaySpace() {

		if ( this._targetRay === null ) {

			this._targetRay = new Group();
			this._targetRay.matrixAutoUpdate = false;
			this._targetRay.visible = false;
			this._targetRay.hasLinearVelocity = false;
			this._targetRay.linearVelocity = new Vector3();
			this._targetRay.hasAngularVelocity = false;
			this._targetRay.angularVelocity = new Vector3();

		}

		return this._targetRay;

	}

	getGripSpace() {

		if ( this._grip === null ) {

			this._grip = new Group();
			this._grip.matrixAutoUpdate = false;
			this._grip.visible = false;
			this._grip.hasLinearVelocity = false;
			this._grip.linearVelocity = new Vector3();
			this._grip.hasAngularVelocity = false;
			this._grip.angularVelocity = new Vector3();

		}

		return this._grip;

	}

	dispatchEvent( event ) {

		if ( this._targetRay !== null ) {

			this._targetRay.dispatchEvent( event );

		}

		if ( this._grip !== null ) {

			this._grip.dispatchEvent( event );

		}

		if ( this._hand !== null ) {

			this._hand.dispatchEvent( event );

		}

		return this;

	}

	connect( inputSource ) {

		if ( inputSource && inputSource.hand ) {

			const hand = this._hand;

			if ( hand ) {

				for ( const inputjoint of inputSource.hand.values() ) {

					// Initialize hand with joints when connected
					this._getHandJoint( hand, inputjoint );

				}

			}

		}

		this.dispatchEvent( { type: 'connected', data: inputSource } );

		return this;

	}

	disconnect( inputSource ) {

		this.dispatchEvent( { type: 'disconnected', data: inputSource } );

		if ( this._targetRay !== null ) {

			this._targetRay.visible = false;

		}

		if ( this._grip !== null ) {

			this._grip.visible = false;

		}

		if ( this._hand !== null ) {

			this._hand.visible = false;

		}

		return this;

	}

	update( inputSource, frame, referenceSpace ) {

		let inputPose = null;
		let gripPose = null;
		let handPose = null;

		const targetRay = this._targetRay;
		const grip = this._grip;
		const hand = this._hand;

		if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

			if ( hand && inputSource.hand ) {

				handPose = true;

				for ( const inputjoint of inputSource.hand.values() ) {

					// Update the joints groups with the XRJoint poses
					const jointPose = frame.getJointPose( inputjoint, referenceSpace );

					// The transform of this joint will be updated with the joint pose on each frame
					const joint = this._getHandJoint( hand, inputjoint );

					if ( jointPose !== null ) {

						joint.matrix.fromArray( jointPose.transform.matrix );
						joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
						joint.matrixWorldNeedsUpdate = true;
						joint.jointRadius = jointPose.radius;

					}

					joint.visible = jointPose !== null;

				}

				// Custom events

				// Check pinchz
				const indexTip = hand.joints[ 'index-finger-tip' ];
				const thumbTip = hand.joints[ 'thumb-tip' ];
				const distance = indexTip.position.distanceTo( thumbTip.position );

				const distanceToPinch = 0.02;
				const threshold = 0.005;

				if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

					hand.inputState.pinching = false;
					this.dispatchEvent( {
						type: 'pinchend',
						handedness: inputSource.handedness,
						target: this
					} );

				} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

					hand.inputState.pinching = true;
					this.dispatchEvent( {
						type: 'pinchstart',
						handedness: inputSource.handedness,
						target: this
					} );

				}

			} else {

				if ( grip !== null && inputSource.gripSpace ) {

					gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

					if ( gripPose !== null ) {

						grip.matrix.fromArray( gripPose.transform.matrix );
						grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
						grip.matrixWorldNeedsUpdate = true;

						if ( gripPose.linearVelocity ) {

							grip.hasLinearVelocity = true;
							grip.linearVelocity.copy( gripPose.linearVelocity );

						} else {

							grip.hasLinearVelocity = false;

						}

						if ( gripPose.angularVelocity ) {

							grip.hasAngularVelocity = true;
							grip.angularVelocity.copy( gripPose.angularVelocity );

						} else {

							grip.hasAngularVelocity = false;

						}

					}

				}

			}

			if ( targetRay !== null ) {

				inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

				// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
				if ( inputPose === null && gripPose !== null ) {

					inputPose = gripPose;

				}

				if ( inputPose !== null ) {

					targetRay.matrix.fromArray( inputPose.transform.matrix );
					targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
					targetRay.matrixWorldNeedsUpdate = true;

					if ( inputPose.linearVelocity ) {

						targetRay.hasLinearVelocity = true;
						targetRay.linearVelocity.copy( inputPose.linearVelocity );

					} else {

						targetRay.hasLinearVelocity = false;

					}

					if ( inputPose.angularVelocity ) {

						targetRay.hasAngularVelocity = true;
						targetRay.angularVelocity.copy( inputPose.angularVelocity );

					} else {

						targetRay.hasAngularVelocity = false;

					}

					this.dispatchEvent( _moveEvent );

				}

			}


		}

		if ( targetRay !== null ) {

			targetRay.visible = ( inputPose !== null );

		}

		if ( grip !== null ) {

			grip.visible = ( gripPose !== null );

		}

		if ( hand !== null ) {

			hand.visible = ( handPose !== null );

		}

		return this;

	}

	// private method

	_getHandJoint( hand, inputjoint ) {

		if ( hand.joints[ inputjoint.jointName ] === undefined ) {

			const joint = new Group();
			joint.matrixAutoUpdate = false;
			joint.visible = false;
			hand.joints[ inputjoint.jointName ] = joint;

			hand.add( joint );

		}

		return hand.joints[ inputjoint.jointName ];

	}

}

class DepthTexture extends Texture {

	constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
		if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

		super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.isDepthTexture = true;

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps = false;

		this.compareFunction = null;

	}


	copy( source ) {

		super.copy( source );

		this.compareFunction = source.compareFunction;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

		return data;

	}

}

class WebXRManager extends EventDispatcher {

	constructor( renderer, gl ) {

		super();

		const scope = this;

		let session = null;

		let framebufferScaleFactor = 1.0;

		let referenceSpace = null;
		let referenceSpaceType = 'local-floor';
		// Set default foveation to maximum.
		let foveation = 1.0;
		let customReferenceSpace = null;

		let pose = null;
		let glBinding = null;
		let glProjLayer = null;
		let glBaseLayer = null;
		let xrFrame = null;
		const attributes = gl.getContextAttributes();
		let initialRenderTarget = null;
		let newRenderTarget = null;

		const controllers = [];
		const controllerInputSources = [];

		//

		const cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();

		const cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();

		const cameras = [ cameraL, cameraR ];

		const cameraXR = new ArrayCamera();
		cameraXR.layers.enable( 1 );
		cameraXR.layers.enable( 2 );

		let _currentDepthNear = null;
		let _currentDepthFar = null;

		//

		this.cameraAutoUpdate = true;
		this.enabled = false;

		this.isPresenting = false;

		this.getController = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getTargetRaySpace();

		};

		this.getControllerGrip = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getGripSpace();

		};

		this.getHand = function ( index ) {

			let controller = controllers[ index ];

			if ( controller === undefined ) {

				controller = new WebXRController();
				controllers[ index ] = controller;

			}

			return controller.getHandSpace();

		};

		//

		function onSessionEvent( event ) {

			const controllerIndex = controllerInputSources.indexOf( event.inputSource );

			if ( controllerIndex === - 1 ) {

				return;

			}

			const controller = controllers[ controllerIndex ];

			if ( controller !== undefined ) {

				controller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );
				controller.dispatchEvent( { type: event.type, data: event.inputSource } );

			}

		}

		function onSessionEnd() {

			session.removeEventListener( 'select', onSessionEvent );
			session.removeEventListener( 'selectstart', onSessionEvent );
			session.removeEventListener( 'selectend', onSessionEvent );
			session.removeEventListener( 'squeeze', onSessionEvent );
			session.removeEventListener( 'squeezestart', onSessionEvent );
			session.removeEventListener( 'squeezeend', onSessionEvent );
			session.removeEventListener( 'end', onSessionEnd );
			session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

			for ( let i = 0; i < controllers.length; i ++ ) {

				const inputSource = controllerInputSources[ i ];

				if ( inputSource === null ) continue;

				controllerInputSources[ i ] = null;

				controllers[ i ].disconnect( inputSource );

			}

			_currentDepthNear = null;
			_currentDepthFar = null;

			// restore framebuffer/rendering state

			renderer.setRenderTarget( initialRenderTarget );

			glBaseLayer = null;
			glProjLayer = null;
			glBinding = null;
			session = null;
			newRenderTarget = null;

			//

			animation.stop();

			scope.isPresenting = false;

			scope.dispatchEvent( { type: 'sessionend' } );

		}

		this.setFramebufferScaleFactor = function ( value ) {

			framebufferScaleFactor = value;

			if ( scope.isPresenting === true ) {

				console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

			}

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

			if ( scope.isPresenting === true ) {

				console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

			}

		};

		this.getReferenceSpace = function () {

			return customReferenceSpace || referenceSpace;

		};

		this.setReferenceSpace = function ( space ) {

			customReferenceSpace = space;

		};

		this.getBaseLayer = function () {

			return glProjLayer !== null ? glProjLayer : glBaseLayer;

		};

		this.getBinding = function () {

			return glBinding;

		};

		this.getFrame = function () {

			return xrFrame;

		};

		this.getSession = function () {

			return session;

		};

		this.setSession = async function ( value ) {

			session = value;

			if ( session !== null ) {

				initialRenderTarget = renderer.getRenderTarget();

				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'squeeze', onSessionEvent );
				session.addEventListener( 'squeezestart', onSessionEvent );
				session.addEventListener( 'squeezeend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );
				session.addEventListener( 'inputsourceschange', onInputSourcesChange );

				if ( attributes.xrCompatible !== true ) {

					await gl.makeXRCompatible();

				}

				if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {

					const layerInit = {
						antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
						alpha: true,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					};

					glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

					session.updateRenderState( { baseLayer: glBaseLayer } );

					newRenderTarget = new WebGLRenderTarget(
						glBaseLayer.framebufferWidth,
						glBaseLayer.framebufferHeight,
						{
							format: RGBAFormat,
							type: UnsignedByteType,
							colorSpace: renderer.outputColorSpace,
							stencilBuffer: attributes.stencil
						}
					);

				} else {

					let depthFormat = null;
					let depthType = null;
					let glDepthFormat = null;

					if ( attributes.depth ) {

						glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
						depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
						depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;

					}

					const projectionlayerInit = {
						colorFormat: gl.RGBA8,
						depthFormat: glDepthFormat,
						scaleFactor: framebufferScaleFactor
					};

					glBinding = new XRWebGLBinding( session, gl );

					glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

					session.updateRenderState( { layers: [ glProjLayer ] } );

					newRenderTarget = new WebGLRenderTarget(
						glProjLayer.textureWidth,
						glProjLayer.textureHeight,
						{
							format: RGBAFormat,
							type: UnsignedByteType,
							depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
							stencilBuffer: attributes.stencil,
							colorSpace: renderer.outputColorSpace,
							samples: attributes.antialias ? 4 : 0
						} );

					const renderTargetProperties = renderer.properties.get( newRenderTarget );
					renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;

				}

				newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

				this.setFoveation( foveation );

				customReferenceSpace = null;
				referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

				animation.setContext( session );
				animation.start();

				scope.isPresenting = true;

				scope.dispatchEvent( { type: 'sessionstart' } );

			}

		};

		this.getEnvironmentBlendMode = function () {

			if ( session !== null ) {

				return session.environmentBlendMode;

			}

		};

		function onInputSourcesChange( event ) {

			// Notify disconnected

			for ( let i = 0; i < event.removed.length; i ++ ) {

				const inputSource = event.removed[ i ];
				const index = controllerInputSources.indexOf( inputSource );

				if ( index >= 0 ) {

					controllerInputSources[ index ] = null;
					controllers[ index ].disconnect( inputSource );

				}

			}

			// Notify connected

			for ( let i = 0; i < event.added.length; i ++ ) {

				const inputSource = event.added[ i ];

				let controllerIndex = controllerInputSources.indexOf( inputSource );

				if ( controllerIndex === - 1 ) {

					// Assign input source a controller that currently has no input source

					for ( let i = 0; i < controllers.length; i ++ ) {

						if ( i >= controllerInputSources.length ) {

							controllerInputSources.push( inputSource );
							controllerIndex = i;
							break;

						} else if ( controllerInputSources[ i ] === null ) {

							controllerInputSources[ i ] = inputSource;
							controllerIndex = i;
							break;

						}

					}

					// If all controllers do currently receive input we ignore new ones

					if ( controllerIndex === - 1 ) break;

				}

				const controller = controllers[ controllerIndex ];

				if ( controller ) {

					controller.connect( inputSource );

				}

			}

		}

		//

		const cameraLPos = new Vector3();
		const cameraRPos = new Vector3();

		/**
		 * Assumes 2 cameras that are parallel and share an X-axis, and that
		 * the cameras' projection and world matrices have already been set.
		 * And that near and far planes are identical for both cameras.
		 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
		 */
		function setProjectionFromUnion( camera, cameraL, cameraR ) {

			cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
			cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

			const ipd = cameraLPos.distanceTo( cameraRPos );

			const projL = cameraL.projectionMatrix.elements;
			const projR = cameraR.projectionMatrix.elements;

			// VR systems will have identical far and near planes, and
			// most likely identical top and bottom frustum extents.
			// Use the left camera for these values.
			const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
			const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
			const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
			const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

			const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
			const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
			const left = near * leftFov;
			const right = near * rightFov;

			// Calculate the new camera's position offset from the
			// left camera. xOffset should be roughly half `ipd`.
			const zOffset = ipd / ( - leftFov + rightFov );
			const xOffset = zOffset * - leftFov;

			// TODO: Better way to apply this offset?
			cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
			camera.translateX( xOffset );
			camera.translateZ( zOffset );
			camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

			// Find the union of the frustum values of the cameras and scale
			// the values so that the near plane's position does not change in world space,
			// although must now be relative to the new union camera.
			const near2 = near + zOffset;
			const far2 = far + zOffset;
			const left2 = left - xOffset;
			const right2 = right + ( ipd - xOffset );
			const top2 = topFov * far / far2 * near2;
			const bottom2 = bottomFov * far / far2 * near2;

			camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
			camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();

		}

		function updateCamera( camera, parent ) {

			if ( parent === null ) {

				camera.matrixWorld.copy( camera.matrix );

			} else {

				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

			}

			camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

		}

		this.updateCamera = function ( camera ) {

			if ( session === null ) return;

			cameraXR.near = cameraR.near = cameraL.near = camera.near;
			cameraXR.far = cameraR.far = cameraL.far = camera.far;

			if ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {

				// Note that the new renderState won't apply until the next frame. See #18320

				session.updateRenderState( {
					depthNear: cameraXR.near,
					depthFar: cameraXR.far
				} );

				_currentDepthNear = cameraXR.near;
				_currentDepthFar = cameraXR.far;

			}

			const parent = camera.parent;
			const cameras = cameraXR.cameras;

			updateCamera( cameraXR, parent );

			for ( let i = 0; i < cameras.length; i ++ ) {

				updateCamera( cameras[ i ], parent );

			}

			// update projection matrix for proper view frustum culling

			if ( cameras.length === 2 ) {

				setProjectionFromUnion( cameraXR, cameraL, cameraR );

			} else {

				// assume single camera setup (AR)

				cameraXR.projectionMatrix.copy( cameraL.projectionMatrix );

			}

			// update user camera and its children

			updateUserCamera( camera, cameraXR, parent );

		};

		function updateUserCamera( camera, cameraXR, parent ) {

			if ( parent === null ) {

				camera.matrix.copy( cameraXR.matrixWorld );

			} else {

				camera.matrix.copy( parent.matrixWorld );
				camera.matrix.invert();
				camera.matrix.multiply( cameraXR.matrixWorld );

			}

			camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
			camera.updateMatrixWorld( true );

			camera.projectionMatrix.copy( cameraXR.projectionMatrix );
			camera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );

			if ( camera.isPerspectiveCamera ) {

				camera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );
				camera.zoom = 1;

			}

		}

		this.getCamera = function () {

			return cameraXR;

		};

		this.getFoveation = function () {

			if ( glProjLayer === null && glBaseLayer === null ) {

				return undefined;

			}

			return foveation;

		};

		this.setFoveation = function ( value ) {

			// 0 = no foveation = full resolution
			// 1 = maximum foveation = the edges render at lower resolution

			foveation = value;

			if ( glProjLayer !== null ) {

				glProjLayer.fixedFoveation = value;

			}

			if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

				glBaseLayer.fixedFoveation = value;

			}

		};

		// Animation Loop

		let onAnimationFrameCallback = null;

		function onAnimationFrame( time, frame ) {

			pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
			xrFrame = frame;

			if ( pose !== null ) {

				const views = pose.views;

				if ( glBaseLayer !== null ) {

					renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
					renderer.setRenderTarget( newRenderTarget );

				}

				let cameraXRNeedsUpdate = false;

				// check if it's necessary to rebuild cameraXR's camera list

				if ( views.length !== cameraXR.cameras.length ) {

					cameraXR.cameras.length = 0;
					cameraXRNeedsUpdate = true;

				}

				for ( let i = 0; i < views.length; i ++ ) {

					const view = views[ i ];

					let viewport = null;

					if ( glBaseLayer !== null ) {

						viewport = glBaseLayer.getViewport( view );

					} else {

						const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
						viewport = glSubImage.viewport;

						// For side-by-side projection, we only produce a single texture for both eyes.
						if ( i === 0 ) {

							renderer.setRenderTargetTextures(
								newRenderTarget,
								glSubImage.colorTexture,
								glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );

							renderer.setRenderTarget( newRenderTarget );

						}

					}

					let camera = cameras[ i ];

					if ( camera === undefined ) {

						camera = new PerspectiveCamera();
						camera.layers.enable( i );
						camera.viewport = new Vector4();
						cameras[ i ] = camera;

					}

					camera.matrix.fromArray( view.transform.matrix );
					camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

					if ( i === 0 ) {

						cameraXR.matrix.copy( camera.matrix );
						cameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );

					}

					if ( cameraXRNeedsUpdate === true ) {

						cameraXR.cameras.push( camera );

					}

				}

			}

			//

			for ( let i = 0; i < controllers.length; i ++ ) {

				const inputSource = controllerInputSources[ i ];
				const controller = controllers[ i ];

				if ( inputSource !== null && controller !== undefined ) {

					controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

				}

			}

			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

			if ( frame.detectedPlanes ) {

				scope.dispatchEvent( { type: 'planesdetected', data: frame } );

			}

			xrFrame = null;

		}

		const animation = new WebGLAnimation();

		animation.setAnimationLoop( onAnimationFrame );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () {};

	}

}

function WebGLMaterials( renderer, properties ) {

	function refreshTransformUniform( map, uniform ) {

		if ( map.matrixAutoUpdate === true ) {

			map.updateMatrix();

		}

		uniform.value.copy( map.matrix );

	}

	function refreshFogUniforms( uniforms, fog ) {

		fog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );

		if ( fog.isFog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog.isFogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

		if ( material.isMeshBasicMaterial ) {

			refreshUniformsCommon( uniforms, material );

		} else if ( material.isMeshLambertMaterial ) {

			refreshUniformsCommon( uniforms, material );

		} else if ( material.isMeshToonMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsToon( uniforms, material );

		} else if ( material.isMeshPhongMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsPhong( uniforms, material );

		} else if ( material.isMeshStandardMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsStandard( uniforms, material );

			if ( material.isMeshPhysicalMaterial ) {

				refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

			}

		} else if ( material.isMeshMatcapMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsMatcap( uniforms, material );

		} else if ( material.isMeshDepthMaterial ) {

			refreshUniformsCommon( uniforms, material );

		} else if ( material.isMeshDistanceMaterial ) {

			refreshUniformsCommon( uniforms, material );
			refreshUniformsDistance( uniforms, material );

		} else if ( material.isMeshNormalMaterial ) {

			refreshUniformsCommon( uniforms, material );

		} else if ( material.isLineBasicMaterial ) {

			refreshUniformsLine( uniforms, material );

			if ( material.isLineDashedMaterial ) {

				refreshUniformsDash( uniforms, material );

			}

		} else if ( material.isPointsMaterial ) {

			refreshUniformsPoints( uniforms, material, pixelRatio, height );

		} else if ( material.isSpriteMaterial ) {

			refreshUniformsSprites( uniforms, material );

		} else if ( material.isShadowMaterial ) {

			uniforms.color.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

		} else if ( material.isShaderMaterial ) {

			material.uniformsNeedUpdate = false; // #15581

		}

	}

	function refreshUniformsCommon( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( material.color ) {

			uniforms.diffuse.value.copy( material.color );

		}

		if ( material.emissive ) {

			uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

		}

		if ( material.map ) {

			uniforms.map.value = material.map;

			refreshTransformUniform( material.map, uniforms.mapTransform );

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

		}

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;

			refreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );

			uniforms.bumpScale.value = material.bumpScale;

			if ( material.side === BackSide ) {

				uniforms.bumpScale.value *= - 1;

			}

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;

			refreshTransformUniform( material.normalMap, uniforms.normalMapTransform );

			uniforms.normalScale.value.copy( material.normalScale );

			if ( material.side === BackSide ) {

				uniforms.normalScale.value.negate();

			}

		}

		if ( material.displacementMap ) {

			uniforms.displacementMap.value = material.displacementMap;

			refreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );

			uniforms.displacementScale.value = material.displacementScale;
			uniforms.displacementBias.value = material.displacementBias;

		}

		if ( material.emissiveMap ) {

			uniforms.emissiveMap.value = material.emissiveMap;

			refreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );

		}

		if ( material.specularMap ) {

			uniforms.specularMap.value = material.specularMap;

			refreshTransformUniform( material.specularMap, uniforms.specularMapTransform );

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

		const envMap = properties.get( material ).envMap;

		if ( envMap ) {

			uniforms.envMap.value = envMap;

			uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

			uniforms.reflectivity.value = material.reflectivity;
			uniforms.ior.value = material.ior;
			uniforms.refractionRatio.value = material.refractionRatio;

		}

		if ( material.lightMap ) {

			uniforms.lightMap.value = material.lightMap;

			// artist-friendly light intensity scaling factor
			const scaleFactor = ( renderer._useLegacyLights === true ) ? Math.PI : 1;

			uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;

			refreshTransformUniform( material.lightMap, uniforms.lightMapTransform );

		}

		if ( material.aoMap ) {

			uniforms.aoMap.value = material.aoMap;
			uniforms.aoMapIntensity.value = material.aoMapIntensity;

			refreshTransformUniform( material.aoMap, uniforms.aoMapTransform );

		}

	}

	function refreshUniformsLine( uniforms, material ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;

		if ( material.map ) {

			uniforms.map.value = material.map;

			refreshTransformUniform( material.map, uniforms.mapTransform );

		}

	}

	function refreshUniformsDash( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size * pixelRatio;
		uniforms.scale.value = height * 0.5;

		if ( material.map ) {

			uniforms.map.value = material.map;

			refreshTransformUniform( material.map, uniforms.uvTransform );

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

	}

	function refreshUniformsSprites( uniforms, material ) {

		uniforms.diffuse.value.copy( material.color );
		uniforms.opacity.value = material.opacity;
		uniforms.rotation.value = material.rotation;

		if ( material.map ) {

			uniforms.map.value = material.map;

			refreshTransformUniform( material.map, uniforms.mapTransform );

		}

		if ( material.alphaMap ) {

			uniforms.alphaMap.value = material.alphaMap;

			refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

		}

		if ( material.alphaTest > 0 ) {

			uniforms.alphaTest.value = material.alphaTest;

		}

	}

	function refreshUniformsPhong( uniforms, material ) {

		uniforms.specular.value.copy( material.specular );
		uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

	}

	function refreshUniformsToon( uniforms, material ) {

		if ( material.gradientMap ) {

			uniforms.gradientMap.value = material.gradientMap;

		}

	}

	function refreshUniformsStandard( uniforms, material ) {

		uniforms.metalness.value = material.metalness;

		if ( material.metalnessMap ) {

			uniforms.metalnessMap.value = material.metalnessMap;

			refreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );

		}

		uniforms.roughness.value = material.roughness;

		if ( material.roughnessMap ) {

			uniforms.roughnessMap.value = material.roughnessMap;

			refreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );

		}

		const envMap = properties.get( material ).envMap;

		if ( envMap ) {

			//uniforms.envMap.value = material.envMap; // part of uniforms common
			uniforms.envMapIntensity.value = material.envMapIntensity;

		}

	}

	function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

		uniforms.ior.value = material.ior; // also part of uniforms common

		if ( material.sheen > 0 ) {

			uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

			uniforms.sheenRoughness.value = material.sheenRoughness;

			if ( material.sheenColorMap ) {

				uniforms.sheenColorMap.value = material.sheenColorMap;

				refreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );

			}

			if ( material.sheenRoughnessMap ) {

				uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

				refreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );

			}

		}

		if ( material.clearcoat > 0 ) {

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

			if ( material.clearcoatMap ) {

				uniforms.clearcoatMap.value = material.clearcoatMap;

				refreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );

			}

			if ( material.clearcoatRoughnessMap ) {

				uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

				refreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );

			}

			if ( material.clearcoatNormalMap ) {

				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				refreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );

				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );

				if ( material.side === BackSide ) {

					uniforms.clearcoatNormalScale.value.negate();

				}

			}

		}

		if ( material.iridescence > 0 ) {

			uniforms.iridescence.value = material.iridescence;
			uniforms.iridescenceIOR.value = material.iridescenceIOR;
			uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
			uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

			if ( material.iridescenceMap ) {

				uniforms.iridescenceMap.value = material.iridescenceMap;

				refreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );

			}

			if ( material.iridescenceThicknessMap ) {

				uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

				refreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );

			}

		}

		if ( material.transmission > 0 ) {

			uniforms.transmission.value = material.transmission;
			uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
			uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

			if ( material.transmissionMap ) {

				uniforms.transmissionMap.value = material.transmissionMap;

				refreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );

			}

			uniforms.thickness.value = material.thickness;

			if ( material.thicknessMap ) {

				uniforms.thicknessMap.value = material.thicknessMap;

				refreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );

			}

			uniforms.attenuationDistance.value = material.attenuationDistance;
			uniforms.attenuationColor.value.copy( material.attenuationColor );

		}

		if ( material.anisotropy > 0 ) {

			uniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

			if ( material.anisotropyMap ) {

				uniforms.anisotropyMap.value = material.anisotropyMap;

				refreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );

			}

		}

		uniforms.specularIntensity.value = material.specularIntensity;
		uniforms.specularColor.value.copy( material.specularColor );

		if ( material.specularColorMap ) {

			uniforms.specularColorMap.value = material.specularColorMap;

			refreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );

		}

		if ( material.specularIntensityMap ) {

			uniforms.specularIntensityMap.value = material.specularIntensityMap;

			refreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );

		}

	}

	function refreshUniformsMatcap( uniforms, material ) {

		if ( material.matcap ) {

			uniforms.matcap.value = material.matcap;

		}

	}

	function refreshUniformsDistance( uniforms, material ) {

		const light = properties.get( material ).light;

		uniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );
		uniforms.nearDistance.value = light.shadow.camera.near;
		uniforms.farDistance.value = light.shadow.camera.far;

	}

	return {
		refreshFogUniforms: refreshFogUniforms,
		refreshMaterialUniforms: refreshMaterialUniforms
	};

}

function WebGLUniformsGroups( gl, info, capabilities, state ) {

	let buffers = {};
	let updateList = {};
	let allocatedBindingPoints = [];

	const maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ) : 0; // binding points are global whereas block indices are per shader program

	function bind( uniformsGroup, program ) {

		const webglProgram = program.program;
		state.uniformBlockBinding( uniformsGroup, webglProgram );

	}

	function update( uniformsGroup, program ) {

		let buffer = buffers[ uniformsGroup.id ];

		if ( buffer === undefined ) {

			prepareUniformsGroup( uniformsGroup );

			buffer = createBuffer( uniformsGroup );
			buffers[ uniformsGroup.id ] = buffer;

			uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );

		}

		// ensure to update the binding points/block indices mapping for this program

		const webglProgram = program.program;
		state.updateUBOMapping( uniformsGroup, webglProgram );

		// update UBO once per frame

		const frame = info.render.frame;

		if ( updateList[ uniformsGroup.id ] !== frame ) {

			updateBufferData( uniformsGroup );

			updateList[ uniformsGroup.id ] = frame;

		}

	}

	function createBuffer( uniformsGroup ) {

		// the setup of an UBO is independent of a particular shader program but global

		const bindingPointIndex = allocateBindingPointIndex();
		uniformsGroup.__bindingPointIndex = bindingPointIndex;

		const buffer = gl.createBuffer();
		const size = uniformsGroup.__size;
		const usage = uniformsGroup.usage;

		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );
		gl.bufferData( gl.UNIFORM_BUFFER, size, usage );
		gl.bindBuffer( gl.UNIFORM_BUFFER, null );
		gl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );

		return buffer;

	}

	function allocateBindingPointIndex() {

		for ( let i = 0; i < maxBindingPoints; i ++ ) {

			if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {

				allocatedBindingPoints.push( i );
				return i;

			}

		}

		console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );

		return 0;

	}

	function updateBufferData( uniformsGroup ) {

		const buffer = buffers[ uniformsGroup.id ];
		const uniforms = uniformsGroup.uniforms;
		const cache = uniformsGroup.__cache;

		gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );

		for ( let i = 0, il = uniforms.length; i < il; i ++ ) {

			const uniform = uniforms[ i ];

			// partly update the buffer if necessary

			if ( hasUniformChanged( uniform, i, cache ) === true ) {

				const offset = uniform.__offset;

				const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

				let arrayOffset = 0;

				for ( let i = 0; i < values.length; i ++ ) {

					const value = values[ i ];

					const info = getUniformSize( value );

					if ( typeof value === 'number' ) {

						uniform.__data[ 0 ] = value;
						gl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );

					} else if ( value.isMatrix3 ) {

						// manually converting 3x3 to 3x4

						uniform.__data[ 0 ] = value.elements[ 0 ];
						uniform.__data[ 1 ] = value.elements[ 1 ];
						uniform.__data[ 2 ] = value.elements[ 2 ];
						uniform.__data[ 3 ] = value.elements[ 0 ];
						uniform.__data[ 4 ] = value.elements[ 3 ];
						uniform.__data[ 5 ] = value.elements[ 4 ];
						uniform.__data[ 6 ] = value.elements[ 5 ];
						uniform.__data[ 7 ] = value.elements[ 0 ];
						uniform.__data[ 8 ] = value.elements[ 6 ];
						uniform.__data[ 9 ] = value.elements[ 7 ];
						uniform.__data[ 10 ] = value.elements[ 8 ];
						uniform.__data[ 11 ] = value.elements[ 0 ];

					} else {

						value.toArray( uniform.__data, arrayOffset );

						arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;

					}

				}

				gl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );

			}

		}

		gl.bindBuffer( gl.UNIFORM_BUFFER, null );

	}

	function hasUniformChanged( uniform, index, cache ) {

		const value = uniform.value;

		if ( cache[ index ] === undefined ) {

			// cache entry does not exist so far

			if ( typeof value === 'number' ) {

				cache[ index ] = value;

			} else {

				const values = Array.isArray( value ) ? value : [ value ];

				const tempValues = [];

				for ( let i = 0; i < values.length; i ++ ) {

					tempValues.push( values[ i ].clone() );

				}

				cache[ index ] = tempValues;

			}

			return true;

		} else {

			// compare current value with cached entry

			if ( typeof value === 'number' ) {

				if ( cache[ index ] !== value ) {

					cache[ index ] = value;
					return true;

				}

			} else {

				const cachedObjects = Array.isArray( cache[ index ] ) ? cache[ index ] : [ cache[ index ] ];
				const values = Array.isArray( value ) ? value : [ value ];

				for ( let i = 0; i < cachedObjects.length; i ++ ) {

					const cachedObject = cachedObjects[ i ];

					if ( cachedObject.equals( values[ i ] ) === false ) {

						cachedObject.copy( values[ i ] );
						return true;

					}

				}

			}

		}

		return false;

	}

	function prepareUniformsGroup( uniformsGroup ) {

		// determine total buffer size according to the STD140 layout
		// Hint: STD140 is the only supported layout in WebGL 2

		const uniforms = uniformsGroup.uniforms;

		let offset = 0; // global buffer offset in bytes
		const chunkSize = 16; // size of a chunk in bytes
		let chunkOffset = 0; // offset within a single chunk in bytes

		for ( let i = 0, l = uniforms.length; i < l; i ++ ) {

			const uniform = uniforms[ i ];

			const infos = {
				boundary: 0, // bytes
				storage: 0 // bytes
			};

			const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

			for ( let j = 0, jl = values.length; j < jl; j ++ ) {

				const value = values[ j ];

				const info = getUniformSize( value );

				infos.boundary += info.boundary;
				infos.storage += info.storage;

			}

			// the following two properties will be used for partial buffer updates

			uniform.__data = new Float32Array( infos.storage / Float32Array.BYTES_PER_ELEMENT );
			uniform.__offset = offset;

			//

			if ( i > 0 ) {

				chunkOffset = offset % chunkSize;

				const remainingSizeInChunk = chunkSize - chunkOffset;

				// check for chunk overflow

				if ( chunkOffset !== 0 && ( remainingSizeInChunk - infos.boundary ) < 0 ) {

					// add padding and adjust offset

					offset += ( chunkSize - chunkOffset );
					uniform.__offset = offset;

				}

			}

			offset += infos.storage;

		}

		// ensure correct final padding

		chunkOffset = offset % chunkSize;

		if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );

		//

		uniformsGroup.__size = offset;
		uniformsGroup.__cache = {};

		return this;

	}

	function getUniformSize( value ) {

		const info = {
			boundary: 0, // bytes
			storage: 0 // bytes
		};

		// determine sizes according to STD140

		if ( typeof value === 'number' ) {

			// float/int

			info.boundary = 4;
			info.storage = 4;

		} else if ( value.isVector2 ) {

			// vec2

			info.boundary = 8;
			info.storage = 8;

		} else if ( value.isVector3 || value.isColor ) {

			// vec3

			info.boundary = 16;
			info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes

		} else if ( value.isVector4 ) {

			// vec4

			info.boundary = 16;
			info.storage = 16;

		} else if ( value.isMatrix3 ) {

			// mat3 (in STD140 a 3x3 matrix is represented as 3x4)

			info.boundary = 48;
			info.storage = 48;

		} else if ( value.isMatrix4 ) {

			// mat4

			info.boundary = 64;
			info.storage = 64;

		} else if ( value.isTexture ) {

			console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );

		} else {

			console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );

		}

		return info;

	}

	function onUniformsGroupsDispose( event ) {

		const uniformsGroup = event.target;

		uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );

		const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
		allocatedBindingPoints.splice( index, 1 );

		gl.deleteBuffer( buffers[ uniformsGroup.id ] );

		delete buffers[ uniformsGroup.id ];
		delete updateList[ uniformsGroup.id ];

	}

	function dispose() {

		for ( const id in buffers ) {

			gl.deleteBuffer( buffers[ id ] );

		}

		allocatedBindingPoints = [];
		buffers = {};
		updateList = {};

	}

	return {

		bind: bind,
		update: update,

		dispose: dispose

	};

}

class WebGLRenderer {

	constructor( parameters = {} ) {

		const {
			canvas = createCanvasElement(),
			context = null,
			depth = true,
			stencil = true,
			alpha = false,
			antialias = false,
			premultipliedAlpha = true,
			preserveDrawingBuffer = false,
			powerPreference = 'default',
			failIfMajorPerformanceCaveat = false,
		} = parameters;

		this.isWebGLRenderer = true;

		let _alpha;

		if ( context !== null ) {

			_alpha = context.getContextAttributes().alpha;

		} else {

			_alpha = alpha;

		}

		const uintClearColor = new Uint32Array( 4 );
		const intClearColor = new Int32Array( 4 );

		let currentRenderList = null;
		let currentRenderState = null;

		// render() can be called from within a callback triggered by another render.
		// We track this so that the nested render call gets its list and state isolated from the parent render call.

		const renderListStack = [];
		const renderStateStack = [];

		// public properties

		this.domElement = canvas;

		// Debug configuration container
		this.debug = {

			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true,
			/**
			 * Callback for custom error reporting.
			 * @type {?Function}
			 */
			onShaderError: null
		};

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.outputColorSpace = SRGBColorSpace;

		// physical lights

		this._useLegacyLights = false;

		// tone mapping

		this.toneMapping = NoToneMapping;
		this.toneMappingExposure = 1.0;

		// internal properties

		const _this = this;

		let _isContextLost = false;

		// internal state cache

		let _currentActiveCubeFace = 0;
		let _currentActiveMipmapLevel = 0;
		let _currentRenderTarget = null;
		let _currentMaterialId = - 1;

		let _currentCamera = null;

		const _currentViewport = new Vector4();
		const _currentScissor = new Vector4();
		let _currentScissorTest = null;

		const _currentClearColor = new Color( 0x000000 );
		let _currentClearAlpha = 0;

		//

		let _width = canvas.width;
		let _height = canvas.height;

		let _pixelRatio = 1;
		let _opaqueSort = null;
		let _transparentSort = null;

		const _viewport = new Vector4( 0, 0, _width, _height );
		const _scissor = new Vector4( 0, 0, _width, _height );
		let _scissorTest = false;

		// frustum

		const _frustum = new Frustum();

		// clipping

		let _clippingEnabled = false;
		let _localClippingEnabled = false;

		// transmission

		let _transmissionRenderTarget = null;

		// camera matrices cache

		const _projScreenMatrix = new Matrix4();

		const _vector2 = new Vector2();
		const _vector3 = new Vector3();

		const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		// initialize

		let _gl = context;

		function getContext( contextNames, contextAttributes ) {

			for ( let i = 0; i < contextNames.length; i ++ ) {

				const contextName = contextNames[ i ];
				const context = canvas.getContext( contextName, contextAttributes );
				if ( context !== null ) return context;

			}

			return null;

		}

		try {

			const contextAttributes = {
				alpha: true,
				depth,
				stencil,
				antialias,
				premultipliedAlpha,
				preserveDrawingBuffer,
				powerPreference,
				failIfMajorPerformanceCaveat,
			};

			// OffscreenCanvas does not have setAttribute, see #22811
			if ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );

			// event listeners must be registered before WebGL context is created, see #12753
			canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
			canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

			if ( _gl === null ) {

				const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

				if ( _this.isWebGL1Renderer === true ) {

					contextNames.shift();

				}

				_gl = getContext( contextNames, contextAttributes );

				if ( _gl === null ) {

					if ( getContext( contextNames ) ) {

						throw new Error( 'Error creating WebGL context with your selected attributes.' );

					} else {

						throw new Error( 'Error creating WebGL context.' );

					}

				}

			}

			if ( typeof WebGLRenderingContext !== 'undefined' && _gl instanceof WebGLRenderingContext ) { // @deprecated, r153

				console.warn( 'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.' );

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error.message );
			throw error;

		}

		let extensions, capabilities, state, info;
		let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
		let programCache, materials, renderLists, renderStates, clipping, shadowMap;

		let background, morphtargets, bufferRenderer, indexedBufferRenderer;

		let utils, bindingStates, uniformsGroups;

		function initGLContext() {

			extensions = new WebGLExtensions( _gl );

			capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			extensions.init( capabilities );

			utils = new WebGLUtils( _gl, extensions, capabilities );

			state = new WebGLState( _gl, extensions, capabilities );

			info = new WebGLInfo( _gl );
			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
			cubemaps = new WebGLCubeMaps( _this );
			cubeuvmaps = new WebGLCubeUVMaps( _this );
			attributes = new WebGLAttributes( _gl, capabilities );
			bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
			geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
			objects = new WebGLObjects( _gl, geometries, attributes, info );
			morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
			clipping = new WebGLClipping( properties );
			programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
			materials = new WebGLMaterials( _this, properties );
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates( extensions, capabilities );
			background = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );
			shadowMap = new WebGLShadowMap( _this, objects, capabilities );
			uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );

			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

			info.programs = programCache.programs;

			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.shadowMap = shadowMap;
			_this.state = state;
			_this.info = info;

		}

		initGLContext();

		// xr

		const xr = new WebXRManager( _this, _gl );

		this.xr = xr;

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			const extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.loseContext();

		};

		this.forceContextRestore = function () {

			const extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) extension.restoreContext();

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) return;

			_pixelRatio = value;

			this.setSize( _width, _height, false );

		};

		this.getSize = function ( target ) {

			return target.set( _width, _height );

		};

		this.setSize = function ( width, height, updateStyle = true ) {

			if ( xr.isPresenting ) {

				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;

			}

			_width = width;
			_height = height;

			canvas.width = Math.floor( width * _pixelRatio );
			canvas.height = Math.floor( height * _pixelRatio );

			if ( updateStyle === true ) {

				canvas.style.width = width + 'px';
				canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.getDrawingBufferSize = function ( target ) {

			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

		};

		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

			_width = width;
			_height = height;

			_pixelRatio = pixelRatio;

			canvas.width = Math.floor( width * pixelRatio );
			canvas.height = Math.floor( height * pixelRatio );

			this.setViewport( 0, 0, width, height );

		};

		this.getCurrentViewport = function ( target ) {

			return target.copy( _currentViewport );

		};

		this.getViewport = function ( target ) {

			return target.copy( _viewport );

		};

		this.setViewport = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_viewport.set( x.x, x.y, x.z, x.w );

			} else {

				_viewport.set( x, y, width, height );

			}

			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissor = function ( target ) {

			return target.copy( _scissor );

		};

		this.setScissor = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_scissor.set( x.x, x.y, x.z, x.w );

			} else {

				_scissor.set( x, y, width, height );

			}

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissorTest = function () {

			return _scissorTest;

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		this.setOpaqueSort = function ( method ) {

			_opaqueSort = method;

		};

		this.setTransparentSort = function ( method ) {

			_transparentSort = method;

		};

		// Clearing

		this.getClearColor = function ( target ) {

			return target.copy( background.getClearColor() );

		};

		this.setClearColor = function () {

			background.setClearColor.apply( background, arguments );

		};

		this.getClearAlpha = function () {

			return background.getClearAlpha();

		};

		this.setClearAlpha = function () {

			background.setClearAlpha.apply( background, arguments );

		};

		this.clear = function ( color = true, depth = true, stencil = true ) {

			let bits = 0;

			if ( color ) {

				// check if we're trying to clear an integer target
				let isIntegerFormat = false;
				if ( _currentRenderTarget !== null ) {

					const targetFormat = _currentRenderTarget.texture.format;
					isIntegerFormat = targetFormat === RGBAIntegerFormat ||
						targetFormat === RGIntegerFormat ||
						targetFormat === RedIntegerFormat;

				}

				// use the appropriate clear functions to clear the target if it's a signed
				// or unsigned integer target
				if ( isIntegerFormat ) {

					const targetType = _currentRenderTarget.texture.type;
					const isUnsignedType = targetType === UnsignedByteType ||
						targetType === UnsignedIntType ||
						targetType === UnsignedShortType ||
						targetType === UnsignedInt248Type ||
						targetType === UnsignedShort4444Type ||
						targetType === UnsignedShort5551Type;

					const clearColor = background.getClearColor();
					const a = background.getClearAlpha();
					const r = clearColor.r;
					const g = clearColor.g;
					const b = clearColor.b;

					if ( isUnsignedType ) {

						uintClearColor[ 0 ] = r;
						uintClearColor[ 1 ] = g;
						uintClearColor[ 2 ] = b;
						uintClearColor[ 3 ] = a;
						_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );

					} else {

						intClearColor[ 0 ] = r;
						intClearColor[ 1 ] = g;
						intClearColor[ 2 ] = b;
						intClearColor[ 3 ] = a;
						_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );

					}

				} else {

					bits |= _gl.COLOR_BUFFER_BIT;

				}

			}

			if ( depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		//

		this.dispose = function () {

			canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
			canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			cubemaps.dispose();
			cubeuvmaps.dispose();
			objects.dispose();
			bindingStates.dispose();
			uniformsGroups.dispose();
			programCache.dispose();

			xr.dispose();

			xr.removeEventListener( 'sessionstart', onXRSessionStart );
			xr.removeEventListener( 'sessionend', onXRSessionEnd );

			if ( _transmissionRenderTarget ) {

				_transmissionRenderTarget.dispose();
				_transmissionRenderTarget = null;

			}

			animation.stop();

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			console.log( 'THREE.WebGLRenderer: Context Lost.' );

			_isContextLost = true;

		}

		function onContextRestore( /* event */ ) {

			console.log( 'THREE.WebGLRenderer: Context Restored.' );

			_isContextLost = false;

			const infoAutoReset = info.autoReset;
			const shadowMapEnabled = shadowMap.enabled;
			const shadowMapAutoUpdate = shadowMap.autoUpdate;
			const shadowMapNeedsUpdate = shadowMap.needsUpdate;
			const shadowMapType = shadowMap.type;

			initGLContext();

			info.autoReset = infoAutoReset;
			shadowMap.enabled = shadowMapEnabled;
			shadowMap.autoUpdate = shadowMapAutoUpdate;
			shadowMap.needsUpdate = shadowMapNeedsUpdate;
			shadowMap.type = shadowMapType;

		}

		function onContextCreationError( event ) {

			console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

		}

		function onMaterialDispose( event ) {

			const material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReferences( material );

			properties.remove( material );

		}


		function releaseMaterialProgramReferences( material ) {

			const programs = properties.get( material ).programs;

			if ( programs !== undefined ) {

				programs.forEach( function ( program ) {

					programCache.releaseProgram( program );

				} );

				if ( material.isShaderMaterial ) {

					programCache.releaseShaderCache( material );

				}

			}

		}

		// Buffer rendering

		this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

			if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

			const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

			const program = setProgram( camera, scene, geometry, material, object );

			state.setMaterial( material, frontFaceCW );

			//

			let index = geometry.index;
			let rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = geometries.getWireframeAttribute( geometry );

				if ( index === undefined ) return;

				rangeFactor = 2;

			}

			//

			const drawRange = geometry.drawRange;
			const position = geometry.attributes.position;

			let drawStart = drawRange.start * rangeFactor;
			let drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;

			if ( group !== null ) {

				drawStart = Math.max( drawStart, group.start * rangeFactor );
				drawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );

			}

			if ( index !== null ) {

				drawStart = Math.max( drawStart, 0 );
				drawEnd = Math.min( drawEnd, index.count );

			} else if ( position !== undefined && position !== null ) {

				drawStart = Math.max( drawStart, 0 );
				drawEnd = Math.min( drawEnd, position.count );

			}

			const drawCount = drawEnd - drawStart;

			if ( drawCount < 0 || drawCount === Infinity ) return;

			//

			bindingStates.setup( object, material, program, geometry, index );

			let attribute;
			let renderer = bufferRenderer;

			if ( index !== null ) {

				attribute = attributes.get( index );

				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );

			}

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( _gl.LINES );

				} else {

					renderer.setMode( _gl.TRIANGLES );

				}

			} else if ( object.isLine ) {

				let lineWidth = material.linewidth;

				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( _gl.LINES );

				} else if ( object.isLineLoop ) {

					renderer.setMode( _gl.LINE_LOOP );

				} else {

					renderer.setMode( _gl.LINE_STRIP );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( _gl.POINTS );

			} else if ( object.isSprite ) {

				renderer.setMode( _gl.TRIANGLES );

			}

			if ( object.isInstancedMesh ) {

				renderer.renderInstances( drawStart, drawCount, object.count );

			} else if ( geometry.isInstancedBufferGeometry ) {

				const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
				const instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );

				renderer.renderInstances( drawStart, drawCount, instanceCount );

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		// Compile

		this.compile = function ( scene, camera ) {

			function prepare( material, scene, object ) {

				if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

					material.side = BackSide;
					material.needsUpdate = true;
					getProgram( material, scene, object );

					material.side = FrontSide;
					material.needsUpdate = true;
					getProgram( material, scene, object );

					material.side = DoubleSide;

				} else {

					getProgram( material, scene, object );

				}

			}

			currentRenderState = renderStates.get( scene );
			currentRenderState.init();

			renderStateStack.push( currentRenderState );

			scene.traverseVisible( function ( object ) {

				if ( object.isLight && object.layers.test( camera.layers ) ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				}

			} );

			currentRenderState.setupLights( _this._useLegacyLights );

			scene.traverse( function ( object ) {

				const material = object.material;

				if ( material ) {

					if ( Array.isArray( material ) ) {

						for ( let i = 0; i < material.length; i ++ ) {

							const material2 = material[ i ];

							prepare( material2, scene, object );

						}

					} else {

						prepare( material, scene, object );

					}

				}

			} );

			renderStateStack.pop();
			currentRenderState = null;

		};

		// Animation Loop

		let onAnimationFrameCallback = null;

		function onAnimationFrame( time ) {

			if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

		}

		function onXRSessionStart() {

			animation.stop();

		}

		function onXRSessionEnd() {

			animation.start();

		}

		const animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		if ( typeof self !== 'undefined' ) animation.setContext( self );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;
			xr.setAnimationLoop( callback );

			( callback === null ) ? animation.stop() : animation.start();

		};

		xr.addEventListener( 'sessionstart', onXRSessionStart );
		xr.addEventListener( 'sessionend', onXRSessionEnd );

		// Rendering

		this.render = function ( scene, camera ) {

			if ( camera !== undefined && camera.isCamera !== true ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			if ( _isContextLost === true ) return;

			// update scene graph

			if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

			// update camera matrices and frustum

			if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

			if ( xr.enabled === true && xr.isPresenting === true ) {

				if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

				camera = xr.getCamera(); // use XR camera for rendering

			}

			//
			if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

			currentRenderState = renderStates.get( scene, renderStateStack.length );
			currentRenderState.init();

			renderStateStack.push( currentRenderState );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromProjectionMatrix( _projScreenMatrix );

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );

			currentRenderList = renderLists.get( scene, renderListStack.length );
			currentRenderList.init();

			renderListStack.push( currentRenderList );

			projectObject( scene, camera, 0, _this.sortObjects );

			currentRenderList.finish();

			if ( _this.sortObjects === true ) {

				currentRenderList.sort( _opaqueSort, _transparentSort );

			}

			//

			this.info.render.frame ++;

			if ( _clippingEnabled === true ) clipping.beginShadows();

			const shadowsArray = currentRenderState.state.shadowsArray;

			shadowMap.render( shadowsArray, scene, camera );

			if ( _clippingEnabled === true ) clipping.endShadows();

			//

			if ( this.info.autoReset === true ) this.info.reset();


			//

			background.render( currentRenderList, scene );

			// render scene

			currentRenderState.setupLights( _this._useLegacyLights );

			if ( camera.isArrayCamera ) {

				const cameras = camera.cameras;

				for ( let i = 0, l = cameras.length; i < l; i ++ ) {

					const camera2 = cameras[ i ];

					renderScene( currentRenderList, scene, camera2, camera2.viewport );

				}

			} else {

				renderScene( currentRenderList, scene, camera );

			}

			//

			if ( _currentRenderTarget !== null ) {

				// resolve multisample renderbuffers to a single-sample texture if necessary

				textures.updateMultisampleRenderTarget( _currentRenderTarget );

				// Generate mipmap if we're using any kind of mipmap filtering

				textures.updateRenderTargetMipmap( _currentRenderTarget );

			}

			//

			if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

			// _gl.finish();

			bindingStates.resetDefaultState();
			_currentMaterialId = - 1;
			_currentCamera = null;

			renderStateStack.pop();

			if ( renderStateStack.length > 0 ) {

				currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

			} else {

				currentRenderState = null;

			}

			renderListStack.pop();

			if ( renderListStack.length > 0 ) {

				currentRenderList = renderListStack[ renderListStack.length - 1 ];

			} else {

				currentRenderList = null;

			}

		};

		function projectObject( object, camera, groupOrder, sortObjects ) {

			if ( object.visible === false ) return;

			const visible = object.layers.test( camera.layers );

			if ( visible ) {

				if ( object.isGroup ) {

					groupOrder = object.renderOrder;

				} else if ( object.isLOD ) {

					if ( object.autoUpdate === true ) object.update( camera );

				} else if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				} else if ( object.isSprite ) {

					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						const geometry = objects.update( object );
						const material = object.material;

						if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

						const geometry = objects.update( object );
						const material = object.material;

						if ( sortObjects ) {

							if ( object.boundingSphere !== undefined ) {

								if ( object.boundingSphere === null ) object.computeBoundingSphere();
								_vector3.copy( object.boundingSphere.center );

							} else {

								if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
								_vector3.copy( geometry.boundingSphere.center );

							}

							_vector3
								.applyMatrix4( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						if ( Array.isArray( material ) ) {

							const groups = geometry.groups;

							for ( let i = 0, l = groups.length; i < l; i ++ ) {

								const group = groups[ i ];
								const groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

								}

							}

						} else if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				}

			}

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, groupOrder, sortObjects );

			}

		}

		function renderScene( currentRenderList, scene, camera, viewport ) {

			const opaqueObjects = currentRenderList.opaque;
			const transmissiveObjects = currentRenderList.transmissive;
			const transparentObjects = currentRenderList.transparent;

			currentRenderState.setupLightsView( camera );

			if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

			if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );

			if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

			if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
			if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
			if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );

			state.setPolygonOffset( false );

		}

		function renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {

			const isWebGL2 = capabilities.isWebGL2;

			if ( _transmissionRenderTarget === null ) {

				_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
					generateMipmaps: true,
					type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
					minFilter: LinearMipmapLinearFilter,
					samples: ( isWebGL2 ) ? 4 : 0
				} );

				// debug

				/*
				const geometry = new PlaneGeometry();
				const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );

				const mesh = new Mesh( geometry, material );
				scene.add( mesh );
				*/

			}

			_this.getDrawingBufferSize( _vector2 );

			if ( isWebGL2 ) {

				_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );

			} else {

				_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );

			}

			//

			const currentRenderTarget = _this.getRenderTarget();
			_this.setRenderTarget( _transmissionRenderTarget );

			_this.getClearColor( _currentClearColor );
			_currentClearAlpha = _this.getClearAlpha();
			if ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );

			_this.clear();

			// Turn off the features which can affect the frag color for opaque objects pass.
			// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
			const currentToneMapping = _this.toneMapping;
			_this.toneMapping = NoToneMapping;

			renderObjects( opaqueObjects, scene, camera );

			textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
			textures.updateRenderTargetMipmap( _transmissionRenderTarget );

			let renderTargetNeedsUpdate = false;

			for ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {

				const renderItem = transmissiveObjects[ i ];

				const object = renderItem.object;
				const geometry = renderItem.geometry;
				const material = renderItem.material;
				const group = renderItem.group;

				if ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {

					const currentSide = material.side;

					material.side = BackSide;
					material.needsUpdate = true;

					renderObject( object, scene, camera, geometry, material, group );

					material.side = currentSide;
					material.needsUpdate = true;

					renderTargetNeedsUpdate = true;

				}

			}

			if ( renderTargetNeedsUpdate === true ) {

				textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
				textures.updateRenderTargetMipmap( _transmissionRenderTarget );

			}

			_this.setRenderTarget( currentRenderTarget );

			_this.setClearColor( _currentClearColor, _currentClearAlpha );

			_this.toneMapping = currentToneMapping;

		}

		function renderObjects( renderList, scene, camera ) {

			const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

			for ( let i = 0, l = renderList.length; i < l; i ++ ) {

				const renderItem = renderList[ i ];

				const object = renderItem.object;
				const geometry = renderItem.geometry;
				const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
				const group = renderItem.group;

				if ( object.layers.test( camera.layers ) ) {

					renderObject( object, scene, camera, geometry, material, group );

				}

			}

		}

		function renderObject( object, scene, camera, geometry, material, group ) {

			object.onBeforeRender( _this, scene, camera, geometry, material, group );

			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

			material.onBeforeRender( _this, scene, camera, geometry, object, group );

			if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

				material.side = BackSide;
				material.needsUpdate = true;
				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

				material.side = FrontSide;
				material.needsUpdate = true;
				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

				material.side = DoubleSide;

			} else {

				_this.renderBufferDirect( camera, scene, geometry, material, object, group );

			}

			object.onAfterRender( _this, scene, camera, geometry, material, group );

		}

		function getProgram( material, scene, object ) {

			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			const materialProperties = properties.get( material );

			const lights = currentRenderState.state.lights;
			const shadowsArray = currentRenderState.state.shadowsArray;

			const lightsStateVersion = lights.state.version;

			const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
			const programCacheKey = programCache.getProgramCacheKey( parameters );

			let programs = materialProperties.programs;

			// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

			materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
			materialProperties.fog = scene.fog;
			materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );

			if ( programs === undefined ) {

				// new material

				material.addEventListener( 'dispose', onMaterialDispose );

				programs = new Map();
				materialProperties.programs = programs;

			}

			let program = programs.get( programCacheKey );

			if ( program !== undefined ) {

				// early out if program and light state is identical

				if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

					updateCommonMaterialProperties( material, parameters );

					return program;

				}

			} else {

				parameters.uniforms = programCache.getUniforms( material );

				material.onBuild( object, parameters, _this );

				material.onBeforeCompile( parameters, _this );

				program = programCache.acquireProgram( parameters, programCacheKey );
				programs.set( programCacheKey, program );

				materialProperties.uniforms = parameters.uniforms;

			}

			const uniforms = materialProperties.uniforms;

			if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

				uniforms.clippingPlanes = clipping.uniform;

			}

			updateCommonMaterialProperties( material, parameters );

			// store the light setup it was created for

			materialProperties.needsLights = materialNeedsLights( material );
			materialProperties.lightsStateVersion = lightsStateVersion;

			if ( materialProperties.needsLights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.directionalLightShadows.value = lights.state.directionalShadow;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.spotLightShadows.value = lights.state.spotShadow;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.ltc_1.value = lights.state.rectAreaLTC1;
				uniforms.ltc_2.value = lights.state.rectAreaLTC2;
				uniforms.pointLights.value = lights.state.point;
				uniforms.pointLightShadows.value = lights.state.pointShadow;
				uniforms.hemisphereLights.value = lights.state.hemi;

				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
				uniforms.spotLightMap.value = lights.state.spotLightMap;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
				// TODO (abelnation): add area lights shadow info to uniforms

			}

			const progUniforms = program.getUniforms();
			const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.currentProgram = program;
			materialProperties.uniformsList = uniformsList;

			return program;

		}

		function updateCommonMaterialProperties( material, parameters ) {

			const materialProperties = properties.get( material );

			materialProperties.outputColorSpace = parameters.outputColorSpace;
			materialProperties.instancing = parameters.instancing;
			materialProperties.instancingColor = parameters.instancingColor;
			materialProperties.skinning = parameters.skinning;
			materialProperties.morphTargets = parameters.morphTargets;
			materialProperties.morphNormals = parameters.morphNormals;
			materialProperties.morphColors = parameters.morphColors;
			materialProperties.morphTargetsCount = parameters.morphTargetsCount;
			materialProperties.numClippingPlanes = parameters.numClippingPlanes;
			materialProperties.numIntersection = parameters.numClipIntersection;
			materialProperties.vertexAlphas = parameters.vertexAlphas;
			materialProperties.vertexTangents = parameters.vertexTangents;
			materialProperties.toneMapping = parameters.toneMapping;

		}

		function setProgram( camera, scene, geometry, material, object ) {

			if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

			textures.resetTextureUnits();

			const fog = scene.fog;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;
			const colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );
			const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
			const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
			const vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );
			const morphTargets = !! geometry.morphAttributes.position;
			const morphNormals = !! geometry.morphAttributes.normal;
			const morphColors = !! geometry.morphAttributes.color;

			let toneMapping = NoToneMapping;

			if ( material.toneMapped ) {

				if ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {

					toneMapping = _this.toneMapping;

				}

			}

			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

			const materialProperties = properties.get( material );
			const lights = currentRenderState.state.lights;

			if ( _clippingEnabled === true ) {

				if ( _localClippingEnabled === true || camera !== _currentCamera ) {

					const useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					clipping.setState( material, camera, useCache );

				}

			}

			//

			let needsProgramChange = false;

			if ( material.version === materialProperties.__version ) {

				if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

					needsProgramChange = true;

				} else if ( materialProperties.outputColorSpace !== colorSpace ) {

					needsProgramChange = true;

				} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

					needsProgramChange = true;

				} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

					needsProgramChange = true;

				} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

					needsProgramChange = true;

				} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

					needsProgramChange = true;

				} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {

					needsProgramChange = true;

				} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {

					needsProgramChange = true;

				} else if ( materialProperties.envMap !== envMap ) {

					needsProgramChange = true;

				} else if ( material.fog === true && materialProperties.fog !== fog ) {

					needsProgramChange = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== clipping.numPlanes ||
					materialProperties.numIntersection !== clipping.numIntersection ) ) {

					needsProgramChange = true;

				} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

					needsProgramChange = true;

				} else if ( materialProperties.vertexTangents !== vertexTangents ) {

					needsProgramChange = true;

				} else if ( materialProperties.morphTargets !== morphTargets ) {

					needsProgramChange = true;

				} else if ( materialProperties.morphNormals !== morphNormals ) {

					needsProgramChange = true;

				} else if ( materialProperties.morphColors !== morphColors ) {

					needsProgramChange = true;

				} else if ( materialProperties.toneMapping !== toneMapping ) {

					needsProgramChange = true;

				} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {

					needsProgramChange = true;

				}

			} else {

				needsProgramChange = true;
				materialProperties.__version = material.version;

			}

			//

			let program = materialProperties.currentProgram;

			if ( needsProgramChange === true ) {

				program = getProgram( material, scene, object );

			}

			let refreshProgram = false;
			let refreshMaterial = false;
			let refreshLights = false;

			const p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.uniforms;

			if ( state.useProgram( program.program ) ) {

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || _currentCamera !== camera ) {

				// common camera uniforms

				p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
				p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

				const uCamPos = p_uniforms.map.cameraPosition;

				if ( uCamPos !== undefined ) {

					uCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );

				}

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}

				// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067

				if ( material.isMeshPhongMaterial ||
					material.isMeshToonMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ) {

					p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

				}

				if ( _currentCamera !== camera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

			}

			// skinning and morph target uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone and morph texture must go before other textures
			// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

			if ( object.isSkinnedMesh ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				const skeleton = object.skeleton;

				if ( skeleton ) {

					if ( capabilities.floatVertexTextures ) {

						if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

					} else {

						console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );

					}

				}

			}

			const morphAttributes = geometry.morphAttributes;

			if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {

				morphtargets.update( object, geometry, program );

			}

			if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

				materialProperties.receiveShadow = object.receiveShadow;
				p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

			}

			// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512

			if ( material.isMeshGouraudMaterial && material.envMap !== null ) {

				m_uniforms.envMap.value = envMap;

				m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

			}

			if ( refreshMaterial ) {

				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

				if ( materialProperties.needsLights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog === true ) {

					materials.refreshFogUniforms( m_uniforms, fog );

				}

				materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

			}

			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
				material.uniformsNeedUpdate = false;

			}

			if ( material.isSpriteMaterial ) {

				p_uniforms.setValue( _gl, 'center', object.center );

			}

			// common matrices

			p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
			p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			// UBOs

			if ( material.isShaderMaterial || material.isRawShaderMaterial ) {

				const groups = material.uniformsGroups;

				for ( let i = 0, l = groups.length; i < l; i ++ ) {

					if ( capabilities.isWebGL2 ) {

						const group = groups[ i ];

						uniformsGroups.update( group, program );
						uniformsGroups.bind( group, program );

					} else {

						console.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );

					}

				}

			}

			return program;

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.directionalLightShadows.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.pointLightShadows.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.spotLightShadows.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		function materialNeedsLights( material ) {

			return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial || material.isShadowMaterial ||
				( material.isShaderMaterial && material.lights === true );

		}

		this.getActiveCubeFace = function () {

			return _currentActiveCubeFace;

		};

		this.getActiveMipmapLevel = function () {

			return _currentActiveMipmapLevel;

		};

		this.getRenderTarget = function () {

			return _currentRenderTarget;

		};

		this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

			properties.get( renderTarget.texture ).__webglTexture = colorTexture;
			properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;

			const renderTargetProperties = properties.get( renderTarget );
			renderTargetProperties.__hasExternalTextures = true;

			if ( renderTargetProperties.__hasExternalTextures ) {

				renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

				if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {

					// The multisample_render_to_texture extension doesn't work properly if there
					// are midframe flushes and an external depth buffer. Disable use of the extension.
					if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {

						console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
						renderTargetProperties.__useRenderToTexture = false;

					}

				}

			}

		};

		this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

			const renderTargetProperties = properties.get( renderTarget );
			renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
			renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

		};

		this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;

			let useDefaultFramebuffer = true;
			let framebuffer = null;
			let isCube = false;
			let isRenderTarget3D = false;

			if ( renderTarget ) {

				const renderTargetProperties = properties.get( renderTarget );

				if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

					// We need to make sure to rebind the framebuffer.
					state.bindFramebuffer( _gl.FRAMEBUFFER, null );
					useDefaultFramebuffer = false;

				} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

					textures.setupRenderTarget( renderTarget );

				} else if ( renderTargetProperties.__hasExternalTextures ) {

					// Color and depth texture must be rebound in order for the swapchain to update.
					textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

				}

				const texture = renderTarget.texture;

				if ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

					isRenderTarget3D = true;

				}

				const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLCubeRenderTarget ) {

					if ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {

						framebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];

					} else {

						framebuffer = __webglFramebuffer[ activeCubeFace ];

					}

					isCube = true;

				} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

				} else {

					if ( Array.isArray( __webglFramebuffer ) ) {

						framebuffer = __webglFramebuffer[ activeMipmapLevel ];

					} else {

						framebuffer = __webglFramebuffer;

					}

				}

				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

			} else {

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
				_currentScissorTest = _scissorTest;

			}

			const framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {

				state.drawBuffers( renderTarget, framebuffer );

			}

			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			if ( isCube ) {

				const textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

			} else if ( isRenderTarget3D ) {

				const textureProperties = properties.get( renderTarget.texture );
				const layer = activeCubeFace || 0;
				_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

			}

			_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

				framebuffer = framebuffer[ activeCubeFaceIndex ];

			}

			if ( framebuffer ) {

				state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				try {

					const texture = renderTarget.texture;
					const textureFormat = texture.format;
					const textureType = texture.type;

					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );

					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! halfFloatSupportedByExt ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

					if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

						_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

					}

				} finally {

					// restore framebuffer of current render target if necessary

					const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				}

			}

		};

		this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {

			const levelScale = Math.pow( 2, - level );
			const width = Math.floor( texture.image.width * levelScale );
			const height = Math.floor( texture.image.height * levelScale );

			textures.setTexture2D( texture, 0 );

			_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height );

			state.unbindTexture();

		};

		this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {

			const width = srcTexture.image.width;
			const height = srcTexture.image.height;
			const glFormat = utils.convert( dstTexture.format );
			const glType = utils.convert( dstTexture.type );

			textures.setTexture2D( dstTexture, 0 );

			// As another texture upload may have changed pixelStorei
			// parameters, make sure they are correct for the dstTexture
			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

			if ( srcTexture.isDataTexture ) {

				_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

			} else {

				if ( srcTexture.isCompressedTexture ) {

					_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

				} else {

					_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );

				}

			}

			// Generate mipmaps only when copying level 0
			if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );

			state.unbindTexture();

		};

		this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {

			if ( _this.isWebGL1Renderer ) {

				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
				return;

			}

			const width = sourceBox.max.x - sourceBox.min.x + 1;
			const height = sourceBox.max.y - sourceBox.min.y + 1;
			const depth = sourceBox.max.z - sourceBox.min.z + 1;
			const glFormat = utils.convert( dstTexture.format );
			const glType = utils.convert( dstTexture.type );
			let glTarget;

			if ( dstTexture.isData3DTexture ) {

				textures.setTexture3D( dstTexture, 0 );
				glTarget = _gl.TEXTURE_3D;

			} else if ( dstTexture.isDataArrayTexture ) {

				textures.setTexture2DArray( dstTexture, 0 );
				glTarget = _gl.TEXTURE_2D_ARRAY;

			} else {

				console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
				return;

			}

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

			const unpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
			const unpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );
			const unpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
			const unpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );
			const unpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );

			const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;

			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );
			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );
			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, sourceBox.min.x );
			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, sourceBox.min.y );
			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, sourceBox.min.z );

			if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

				_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );

			} else {

				if ( srcTexture.isCompressedArrayTexture ) {

					console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
					_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );

				} else {

					_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );

				}

			}

			_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, unpackRowLen );
			_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight );
			_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, unpackSkipPixels );
			_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, unpackSkipRows );
			_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, unpackSkipImages );

			// Generate mipmaps only when copying level 0
			if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );

			state.unbindTexture();

		};

		this.initTexture = function ( texture ) {

			if ( texture.isCubeTexture ) {

				textures.setTextureCube( texture, 0 );

			} else if ( texture.isData3DTexture ) {

				textures.setTexture3D( texture, 0 );

			} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

				textures.setTexture2DArray( texture, 0 );

			} else {

				textures.setTexture2D( texture, 0 );

			}

			state.unbindTexture();

		};

		this.resetState = function () {

			_currentActiveCubeFace = 0;
			_currentActiveMipmapLevel = 0;
			_currentRenderTarget = null;

			state.reset();
			bindingStates.reset();

		};

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

		}

	}

	get coordinateSystem() {

		return WebGLCoordinateSystem;

	}

	get physicallyCorrectLights() { // @deprecated, r150

		console.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );
		return ! this.useLegacyLights;

	}

	set physicallyCorrectLights( value ) { // @deprecated, r150

		console.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );
		this.useLegacyLights = ! value;

	}

	get outputEncoding() { // @deprecated, r152

		console.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );
		return this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;

	}

	set outputEncoding( encoding ) { // @deprecated, r152

		console.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );
		this.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;

	}

	get useLegacyLights() { // @deprecated, r155

		console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
		return this._useLegacyLights;

	}

	set useLegacyLights( value ) { // @deprecated, r155

		console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
		this._useLegacyLights = value;

	}

}

class Scene extends Object3D {

	constructor() {

		super();

		this.isScene = true;

		this.type = 'Scene';

		this.background = null;
		this.environment = null;
		this.fog = null;

		this.backgroundBlurriness = 0;
		this.backgroundIntensity = 1;

		this.overrideMaterial = null;

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

		}

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		if ( source.background !== null ) this.background = source.background.clone();
		if ( source.environment !== null ) this.environment = source.environment.clone();
		if ( source.fog !== null ) this.fog = source.fog.clone();

		this.backgroundBlurriness = source.backgroundBlurriness;
		this.backgroundIntensity = source.backgroundIntensity;

		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

		this.matrixAutoUpdate = source.matrixAutoUpdate;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
		if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
		if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;

		return data;

	}

}

class InterleavedBuffer {

	constructor( array, stride ) {

		this.isInterleavedBuffer = true;

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

		this.uuid = generateUUID();

	}

	onUploadCallback() {}

	set needsUpdate( value ) {

		if ( value === true ) this.version ++;

	}

	setUsage( value ) {

		this.usage = value;

		return this;

	}

	copy( source ) {

		this.array = new source.array.constructor( source.array );
		this.count = source.count;
		this.stride = source.stride;
		this.usage = source.usage;

		return this;

	}

	copyAt( index1, attribute, index2 ) {

		index1 *= this.stride;
		index2 *= attribute.stride;

		for ( let i = 0, l = this.stride; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

		return this;

	}

	set( value, offset = 0 ) {

		this.array.set( value, offset );

		return this;

	}

	clone( data ) {

		if ( data.arrayBuffers === undefined ) {

			data.arrayBuffers = {};

		}

		if ( this.array.buffer._uuid === undefined ) {

			this.array.buffer._uuid = generateUUID();

		}

		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

			data.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;

		}

		const array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );

		const ib = new this.constructor( array, this.stride );
		ib.setUsage( this.usage );

		return ib;

	}

	onUpload( callback ) {

		this.onUploadCallback = callback;

		return this;

	}

	toJSON( data ) {

		if ( data.arrayBuffers === undefined ) {

			data.arrayBuffers = {};

		}

		// generate UUID for array buffer if necessary

		if ( this.array.buffer._uuid === undefined ) {

			this.array.buffer._uuid = generateUUID();

		}

		if ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {

			data.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );

		}

		//

		return {
			uuid: this.uuid,
			buffer: this.array.buffer._uuid,
			type: this.array.constructor.name,
			stride: this.stride
		};

	}

}

const _vector$5 = /*@__PURE__*/ new Vector3();

class InterleavedBufferAttribute {

	constructor( interleavedBuffer, itemSize, offset, normalized = false ) {

		this.isInterleavedBufferAttribute = true;

		this.name = '';

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized;

	}

	get count() {

		return this.data.count;

	}

	get array() {

		return this.data.array;

	}

	set needsUpdate( value ) {

		this.data.needsUpdate = value;

	}

	applyMatrix4( m ) {

		for ( let i = 0, l = this.data.count; i < l; i ++ ) {

			_vector$5.fromBufferAttribute( this, i );

			_vector$5.applyMatrix4( m );

			this.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );

		}

		return this;

	}

	applyNormalMatrix( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$5.fromBufferAttribute( this, i );

			_vector$5.applyNormalMatrix( m );

			this.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );

		}

		return this;

	}

	transformDirection( m ) {

		for ( let i = 0, l = this.count; i < l; i ++ ) {

			_vector$5.fromBufferAttribute( this, i );

			_vector$5.transformDirection( m );

			this.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );

		}

		return this;

	}

	setX( index, x ) {

		if ( this.normalized ) x = normalize( x, this.array );

		this.data.array[ index * this.data.stride + this.offset ] = x;

		return this;

	}

	setY( index, y ) {

		if ( this.normalized ) y = normalize( y, this.array );

		this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

		return this;

	}

	setZ( index, z ) {

		if ( this.normalized ) z = normalize( z, this.array );

		this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

		return this;

	}

	setW( index, w ) {

		if ( this.normalized ) w = normalize( w, this.array );

		this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

		return this;

	}

	getX( index ) {

		let x = this.data.array[ index * this.data.stride + this.offset ];

		if ( this.normalized ) x = denormalize( x, this.array );

		return x;

	}

	getY( index ) {

		let y = this.data.array[ index * this.data.stride + this.offset + 1 ];

		if ( this.normalized ) y = denormalize( y, this.array );

		return y;

	}

	getZ( index ) {

		let z = this.data.array[ index * this.data.stride + this.offset + 2 ];

		if ( this.normalized ) z = denormalize( z, this.array );

		return z;

	}

	getW( index ) {

		let w = this.data.array[ index * this.data.stride + this.offset + 3 ];

		if ( this.normalized ) w = denormalize( w, this.array );

		return w;

	}

	setXY( index, x, y ) {

		index = index * this.data.stride + this.offset;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );

		}

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;

		return this;

	}

	setXYZ( index, x, y, z ) {

		index = index * this.data.stride + this.offset;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );
			z = normalize( z, this.array );

		}

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;

		return this;

	}

	setXYZW( index, x, y, z, w ) {

		index = index * this.data.stride + this.offset;

		if ( this.normalized ) {

			x = normalize( x, this.array );
			y = normalize( y, this.array );
			z = normalize( z, this.array );
			w = normalize( w, this.array );

		}

		this.data.array[ index + 0 ] = x;
		this.data.array[ index + 1 ] = y;
		this.data.array[ index + 2 ] = z;
		this.data.array[ index + 3 ] = w;

		return this;

	}

	clone( data ) {

		if ( data === undefined ) {

			console.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );

			const array = [];

			for ( let i = 0; i < this.count; i ++ ) {

				const index = i * this.data.stride + this.offset;

				for ( let j = 0; j < this.itemSize; j ++ ) {

					array.push( this.data.array[ index + j ] );

				}

			}

			return new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );

		} else {

			if ( data.interleavedBuffers === undefined ) {

				data.interleavedBuffers = {};

			}

			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

				data.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );

			}

			return new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );

		}

	}

	toJSON( data ) {

		if ( data === undefined ) {

			console.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );

			const array = [];

			for ( let i = 0; i < this.count; i ++ ) {

				const index = i * this.data.stride + this.offset;

				for ( let j = 0; j < this.itemSize; j ++ ) {

					array.push( this.data.array[ index + j ] );

				}

			}

			// de-interleave data and save it as an ordinary buffer attribute for now

			return {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: array,
				normalized: this.normalized
			};

		} else {

			// save as true interleaved attribute

			if ( data.interleavedBuffers === undefined ) {

				data.interleavedBuffers = {};

			}

			if ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {

				data.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );

			}

			return {
				isInterleavedBufferAttribute: true,
				itemSize: this.itemSize,
				data: this.data.uuid,
				offset: this.offset,
				normalized: this.normalized
			};

		}

	}

}

/**
 * Extensible curve object.
 *
 * Some common of curve methods:
 * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )
 * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following curves inherit from THREE.Curve:
 *
 * -- 2D curves --
 * THREE.ArcCurve
 * THREE.CubicBezierCurve
 * THREE.EllipseCurve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.SplineCurve
 *
 * -- 3D curves --
 * THREE.CatmullRomCurve3
 * THREE.CubicBezierCurve3
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath.
 *
 **/

class Curve {

	constructor() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	// Virtual base class method to overwrite and implement in subclasses
	//	- t [0 .. 1]

	getPoint( /* t, optionalTarget */ ) {

		console.warn( 'THREE.Curve: .getPoint() not implemented.' );
		return null;

	}

	// Get point at relative position in curve according to arc length
	// - u [0 .. 1]

	getPointAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getPoint( t, optionalTarget );

	}

	// Get sequence of points using getPoint( t )

	getPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPoint( d / divisions ) );

		}

		return points;

	}

	// Get sequence of points using getPointAt( u )

	getSpacedPoints( divisions = 5 ) {

		const points = [];

		for ( let d = 0; d <= divisions; d ++ ) {

			points.push( this.getPointAt( d / divisions ) );

		}

		return points;

	}

	// Get total curve arc length

	getLength() {

		const lengths = this.getLengths();
		return lengths[ lengths.length - 1 ];

	}

	// Get list of cumulative segment lengths

	getLengths( divisions = this.arcLengthDivisions ) {

		if ( this.cacheArcLengths &&
			( this.cacheArcLengths.length === divisions + 1 ) &&
			! this.needsUpdate ) {

			return this.cacheArcLengths;

		}

		this.needsUpdate = false;

		const cache = [];
		let current, last = this.getPoint( 0 );
		let sum = 0;

		cache.push( 0 );

		for ( let p = 1; p <= divisions; p ++ ) {

			current = this.getPoint( p / divisions );
			sum += current.distanceTo( last );
			cache.push( sum );
			last = current;

		}

		this.cacheArcLengths = cache;

		return cache; // { sums: cache, sum: sum }; Sum is in the last element.

	}

	updateArcLengths() {

		this.needsUpdate = true;
		this.getLengths();

	}

	// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

	getUtoTmapping( u, distance ) {

		const arcLengths = this.getLengths();

		let i = 0;
		const il = arcLengths.length;

		let targetArcLength; // The targeted u distance value to get

		if ( distance ) {

			targetArcLength = distance;

		} else {

			targetArcLength = u * arcLengths[ il - 1 ];

		}

		// binary search for the index with largest value smaller than target u distance

		let low = 0, high = il - 1, comparison;

		while ( low <= high ) {

			i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

			comparison = arcLengths[ i ] - targetArcLength;

			if ( comparison < 0 ) {

				low = i + 1;

			} else if ( comparison > 0 ) {

				high = i - 1;

			} else {

				high = i;
				break;

				// DONE

			}

		}

		i = high;

		if ( arcLengths[ i ] === targetArcLength ) {

			return i / ( il - 1 );

		}

		// we could get finer grain at lengths, or use simple interpolation between two points

		const lengthBefore = arcLengths[ i ];
		const lengthAfter = arcLengths[ i + 1 ];

		const segmentLength = lengthAfter - lengthBefore;

		// determine where we are between the 'before' and 'after' points

		const segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

		// add that fractional amount to t

		const t = ( i + segmentFraction ) / ( il - 1 );

		return t;

	}

	// Returns a unit vector tangent at t
	// In case any sub curve does not implement its tangent derivation,
	// 2 points a small delta apart will be used to find its gradient
	// which seems to give a reasonable approximation

	getTangent( t, optionalTarget ) {

		const delta = 0.0001;
		let t1 = t - delta;
		let t2 = t + delta;

		// Capping in case of danger

		if ( t1 < 0 ) t1 = 0;
		if ( t2 > 1 ) t2 = 1;

		const pt1 = this.getPoint( t1 );
		const pt2 = this.getPoint( t2 );

		const tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );

		tangent.copy( pt2 ).sub( pt1 ).normalize();

		return tangent;

	}

	getTangentAt( u, optionalTarget ) {

		const t = this.getUtoTmapping( u );
		return this.getTangent( t, optionalTarget );

	}

	computeFrenetFrames( segments, closed ) {

		// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

		const normal = new Vector3();

		const tangents = [];
		const normals = [];
		const binormals = [];

		const vec = new Vector3();
		const mat = new Matrix4();

		// compute the tangent vectors for each segment on the curve

		for ( let i = 0; i <= segments; i ++ ) {

			const u = i / segments;

			tangents[ i ] = this.getTangentAt( u, new Vector3() );

		}

		// select an initial normal vector perpendicular to the first tangent vector,
		// and in the direction of the minimum tangent xyz component

		normals[ 0 ] = new Vector3();
		binormals[ 0 ] = new Vector3();
		let min = Number.MAX_VALUE;
		const tx = Math.abs( tangents[ 0 ].x );
		const ty = Math.abs( tangents[ 0 ].y );
		const tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= min ) {

			min = tx;
			normal.set( 1, 0, 0 );

		}

		if ( ty <= min ) {

			min = ty;
			normal.set( 0, 1, 0 );

		}

		if ( tz <= min ) {

			normal.set( 0, 0, 1 );

		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


		// compute the slowly-varying normal and binormal vectors for each segment on the curve

		for ( let i = 1; i <= segments; i ++ ) {

			normals[ i ] = normals[ i - 1 ].clone();

			binormals[ i ] = binormals[ i - 1 ].clone();

			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

			if ( vec.length() > Number.EPSILON ) {

				vec.normalize();

				const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

			}

			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

		if ( closed === true ) {

			let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
			theta /= segments;

			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

				theta = - theta;

			}

			for ( let i = 1; i <= segments; i ++ ) {

				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

		}

		return {
			tangents: tangents,
			normals: normals,
			binormals: binormals
		};

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( source ) {

		this.arcLengthDivisions = source.arcLengthDivisions;

		return this;

	}

	toJSON() {

		const data = {
			metadata: {
				version: 4.6,
				type: 'Curve',
				generator: 'Curve.toJSON'
			}
		};

		data.arcLengthDivisions = this.arcLengthDivisions;
		data.type = this.type;

		return data;

	}

	fromJSON( json ) {

		this.arcLengthDivisions = json.arcLengthDivisions;

		return this;

	}

}

class EllipseCurve extends Curve {

	constructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {

		super();

		this.isEllipseCurve = true;

		this.type = 'EllipseCurve';

		this.aX = aX;
		this.aY = aY;

		this.xRadius = xRadius;
		this.yRadius = yRadius;

		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;

		this.aClockwise = aClockwise;

		this.aRotation = aRotation;

	}

	getPoint( t, optionalTarget ) {

		const point = optionalTarget || new Vector2();

		const twoPi = Math.PI * 2;
		let deltaAngle = this.aEndAngle - this.aStartAngle;
		const samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) deltaAngle += twoPi;
		while ( deltaAngle > twoPi ) deltaAngle -= twoPi;

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		const angle = this.aStartAngle + t * deltaAngle;
		let x = this.aX + this.xRadius * Math.cos( angle );
		let y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			const cos = Math.cos( this.aRotation );
			const sin = Math.sin( this.aRotation );

			const tx = x - this.aX;
			const ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	}

	copy( source ) {

		super.copy( source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	}

}

class ArcCurve extends EllipseCurve {

	constructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		super( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.isArcCurve = true;

		this.type = 'ArcCurve';

	}

}

/**
 * Centripetal CatmullRom Curve - which is useful for avoiding
 * cusps and self-intersections in non-uniform catmull rom curves.
 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
 *
 * curve.type accepts centripetal(default), chordal and catmullrom
 * curve.tension is used for catmullrom which defaults to 0.5
 */


/*
Based on an optimized c++ solution in
 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
 - http://ideone.com/NoEbVM

This CubicPoly class could be used for reusing some variables and calculations,
but for three.js curve use, it could be possible inlined and flatten into a single function call
which can be placed in CurveUtils.
*/

function CubicPoly() {

	let c0 = 0, c1 = 0, c2 = 0, c3 = 0;

	/*
	 * Compute coefficients for a cubic polynomial
	 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
	 * such that
	 *   p(0) = x0, p(1) = x1
	 *  and
	 *   p'(0) = t0, p'(1) = t1.
	 */
	function init( x0, x1, t0, t1 ) {

		c0 = x0;
		c1 = t0;
		c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
		c3 = 2 * x0 - 2 * x1 + t0 + t1;

	}

	return {

		initCatmullRom: function ( x0, x1, x2, x3, tension ) {

			init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

		},

		initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

			// compute tangents when parameterized in [t1,t2]
			let t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			let t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;

			init( x1, x2, t1, t2 );

		},

		calc: function ( t ) {

			const t2 = t * t;
			const t3 = t2 * t;
			return c0 + c1 * t + c2 * t2 + c3 * t3;

		}

	};

}

//

const tmp = /*@__PURE__*/ new Vector3();
const px = /*@__PURE__*/ new CubicPoly();
const py = /*@__PURE__*/ new CubicPoly();
const pz = /*@__PURE__*/ new CubicPoly();

class CatmullRomCurve3 extends Curve {

	constructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {

		super();

		this.isCatmullRomCurve3 = true;

		this.type = 'CatmullRomCurve3';

		this.points = points;
		this.closed = closed;
		this.curveType = curveType;
		this.tension = tension;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const points = this.points;
		const l = points.length;

		const p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		let intPoint = Math.floor( p );
		let weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		let p0, p3; // 4 points (p1 & p2 defined below)

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		const p1 = points[ intPoint % l ];
		const p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			const pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			let dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			let dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			let dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) dt1 = 1.0;
			if ( dt0 < 1e-4 ) dt0 = dt1;
			if ( dt2 < 1e-4 ) dt2 = dt1;

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	}

}

/**
 * Bezier Curves formulas obtained from
 * https://en.wikipedia.org/wiki/B%C3%A9zier_curve
 */

function CatmullRom( t, p0, p1, p2, p3 ) {

	const v0 = ( p2 - p0 ) * 0.5;
	const v1 = ( p3 - p1 ) * 0.5;
	const t2 = t * t;
	const t3 = t * t2;
	return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

}

//

function QuadraticBezierP0( t, p ) {

	const k = 1 - t;
	return k * k * p;

}

function QuadraticBezierP1( t, p ) {

	return 2 * ( 1 - t ) * t * p;

}

function QuadraticBezierP2( t, p ) {

	return t * t * p;

}

function QuadraticBezier( t, p0, p1, p2 ) {

	return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
		QuadraticBezierP2( t, p2 );

}

//

function CubicBezierP0( t, p ) {

	const k = 1 - t;
	return k * k * k * p;

}

function CubicBezierP1( t, p ) {

	const k = 1 - t;
	return 3 * k * k * t * p;

}

function CubicBezierP2( t, p ) {

	return 3 * ( 1 - t ) * t * t * p;

}

function CubicBezierP3( t, p ) {

	return t * t * t * p;

}

function CubicBezier( t, p0, p1, p2, p3 ) {

	return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
		CubicBezierP3( t, p3 );

}

class CubicBezierCurve extends Curve {

	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {

		super();

		this.isCubicBezierCurve = true;

		this.type = 'CubicBezierCurve';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	}

}

class CubicBezierCurve3 extends Curve {

	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {

		super();

		this.isCubicBezierCurve3 = true;

		this.type = 'CubicBezierCurve3';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	}

}

class LineCurve extends Curve {

	constructor( v1 = new Vector2(), v2 = new Vector2() ) {

		super();

		this.isLineCurve = true;

		this.type = 'LineCurve';

		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	}

	// Line curve is linear, so we can overwrite default getPointAt
	getPointAt( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	}

	getTangent( t, optionalTarget = new Vector2() ) {

		return optionalTarget.subVectors( this.v2, this.v1 ).normalize();

	}

	getTangentAt( u, optionalTarget ) {

		return this.getTangent( u, optionalTarget );

	}

	copy( source ) {

		super.copy( source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

class LineCurve3 extends Curve {

	constructor( v1 = new Vector3(), v2 = new Vector3() ) {

		super();

		this.isLineCurve3 = true;

		this.type = 'LineCurve3';

		this.v1 = v1;
		this.v2 = v2;

	}
	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	}
	// Line curve is linear, so we can overwrite default getPointAt
	getPointAt( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	}

	getTangent( t, optionalTarget = new Vector3() ) {

		return optionalTarget.subVectors( this.v2, this.v1 ).normalize();

	}

	getTangentAt( u, optionalTarget ) {

		return this.getTangent( u, optionalTarget );

	}

	copy( source ) {

		super.copy( source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}
	toJSON() {

		const data = super.toJSON();

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}
	fromJSON( json ) {

		super.fromJSON( json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

class QuadraticBezierCurve extends Curve {

	constructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {

		super();

		this.isQuadraticBezierCurve = true;

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

class QuadraticBezierCurve3 extends Curve {

	constructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {

		super();

		this.isQuadraticBezierCurve3 = true;

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	}

	getPoint( t, optionalTarget = new Vector3() ) {

		const point = optionalTarget;

		const v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	}

}

class SplineCurve extends Curve {

	constructor( points = [] ) {

		super();

		this.isSplineCurve = true;

		this.type = 'SplineCurve';

		this.points = points;

	}

	getPoint( t, optionalTarget = new Vector2() ) {

		const point = optionalTarget;

		const points = this.points;
		const p = ( points.length - 1 ) * t;

		const intPoint = Math.floor( p );
		const weight = p - intPoint;

		const p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		const p1 = points[ intPoint ];
		const p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		const p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	}

	copy( source ) {

		super.copy( source );

		this.points = [];

		for ( let i = 0, l = source.points.length; i < l; i ++ ) {

			const point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.points = [];

		for ( let i = 0, l = this.points.length; i < l; i ++ ) {

			const point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.points = [];

		for ( let i = 0, l = json.points.length; i < l; i ++ ) {

			const point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	}

}

var Curves = /*#__PURE__*/Object.freeze({
	__proto__: null,
	ArcCurve: ArcCurve,
	CatmullRomCurve3: CatmullRomCurve3,
	CubicBezierCurve: CubicBezierCurve,
	CubicBezierCurve3: CubicBezierCurve3,
	EllipseCurve: EllipseCurve,
	LineCurve: LineCurve,
	LineCurve3: LineCurve3,
	QuadraticBezierCurve: QuadraticBezierCurve,
	QuadraticBezierCurve3: QuadraticBezierCurve3,
	SplineCurve: SplineCurve
});

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

class CurvePath extends Curve {

	constructor() {

		super();

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	add( curve ) {

		this.curves.push( curve );

	}

	closePath() {

		// Add a line curve if start and end of lines are not connected
		const startPoint = this.curves[ 0 ].getPoint( 0 );
		const endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

		if ( ! startPoint.equals( endPoint ) ) {

			this.curves.push( new LineCurve( endPoint, startPoint ) );

		}

	}

	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:

	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')

	getPoint( t, optionalTarget ) {

		const d = t * this.getLength();
		const curveLengths = this.getCurveLengths();
		let i = 0;

		// To think about boundaries points.

		while ( i < curveLengths.length ) {

			if ( curveLengths[ i ] >= d ) {

				const diff = curveLengths[ i ] - d;
				const curve = this.curves[ i ];

				const segmentLength = curve.getLength();
				const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

				return curve.getPointAt( u, optionalTarget );

			}

			i ++;

		}

		return null;

		// loop where sum != 0, sum > d , sum+1 <d

	}

	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength

	getLength() {

		const lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];

	}

	// cacheLengths must be recalculated.
	updateArcLengths() {

		this.needsUpdate = true;
		this.cacheLengths = null;
		this.getCurveLengths();

	}

	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.

	getCurveLengths() {

		// We use cache values if curves and cache array are same length

		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

			return this.cacheLengths;

		}

		// Get length of sub-curve
		// Push sums into cached array

		const lengths = [];
		let sums = 0;

		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

			sums += this.curves[ i ].getLength();
			lengths.push( sums );

		}

		this.cacheLengths = lengths;

		return lengths;

	}

	getSpacedPoints( divisions = 40 ) {

		const points = [];

		for ( let i = 0; i <= divisions; i ++ ) {

			points.push( this.getPoint( i / divisions ) );

		}

		if ( this.autoClose ) {

			points.push( points[ 0 ] );

		}

		return points;

	}

	getPoints( divisions = 12 ) {

		const points = [];
		let last;

		for ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {

			const curve = curves[ i ];
			const resolution = curve.isEllipseCurve ? divisions * 2
				: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1
					: curve.isSplineCurve ? divisions * curve.points.length
						: divisions;

			const pts = curve.getPoints( resolution );

			for ( let j = 0; j < pts.length; j ++ ) {

				const point = pts[ j ];

				if ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates

				points.push( point );
				last = point;

			}

		}

		if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

			points.push( points[ 0 ] );

		}

		return points;

	}

	copy( source ) {

		super.copy( source );

		this.curves = [];

		for ( let i = 0, l = source.curves.length; i < l; i ++ ) {

			const curve = source.curves[ i ];

			this.curves.push( curve.clone() );

		}

		this.autoClose = source.autoClose;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.autoClose = this.autoClose;
		data.curves = [];

		for ( let i = 0, l = this.curves.length; i < l; i ++ ) {

			const curve = this.curves[ i ];
			data.curves.push( curve.toJSON() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.autoClose = json.autoClose;
		this.curves = [];

		for ( let i = 0, l = json.curves.length; i < l; i ++ ) {

			const curve = json.curves[ i ];
			this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

		}

		return this;

	}

}

class Path extends CurvePath {

	constructor( points ) {

		super();

		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	setFromPoints( points ) {

		this.moveTo( points[ 0 ].x, points[ 0 ].y );

		for ( let i = 1, l = points.length; i < l; i ++ ) {

			this.lineTo( points[ i ].x, points[ i ].y );

		}

		return this;

	}

	moveTo( x, y ) {

		this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

		return this;

	}

	lineTo( x, y ) {

		const curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
		this.curves.push( curve );

		this.currentPoint.set( x, y );

		return this;

	}

	quadraticCurveTo( aCPx, aCPy, aX, aY ) {

		const curve = new QuadraticBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCPx, aCPy ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

		return this;

	}

	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		const curve = new CubicBezierCurve(
			this.currentPoint.clone(),
			new Vector2( aCP1x, aCP1y ),
			new Vector2( aCP2x, aCP2y ),
			new Vector2( aX, aY )
		);

		this.curves.push( curve );

		this.currentPoint.set( aX, aY );

		return this;

	}

	splineThru( pts /*Array of Vector*/ ) {

		const npts = [ this.currentPoint.clone() ].concat( pts );

		const curve = new SplineCurve( npts );
		this.curves.push( curve );

		this.currentPoint.copy( pts[ pts.length - 1 ] );

		return this;

	}

	arc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		const x0 = this.currentPoint.x;
		const y0 = this.currentPoint.y;

		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );

		return this;

	}

	absarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		return this;

	}

	ellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		const x0 = this.currentPoint.x;
		const y0 = this.currentPoint.y;

		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		return this;

	}

	absellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		const curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

		if ( this.curves.length > 0 ) {

			// if a previous curve is present, attempt to join
			const firstPoint = curve.getPoint( 0 );

			if ( ! firstPoint.equals( this.currentPoint ) ) {

				this.lineTo( firstPoint.x, firstPoint.y );

			}

		}

		this.curves.push( curve );

		const lastPoint = curve.getPoint( 1 );
		this.currentPoint.copy( lastPoint );

		return this;

	}

	copy( source ) {

		super.copy( source );

		this.currentPoint.copy( source.currentPoint );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.currentPoint = this.currentPoint.toArray();

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.currentPoint.fromArray( json.currentPoint );

		return this;

	}

}

class CircleGeometry extends BufferGeometry {

	constructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super();

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		segments = Math.max( 3, segments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		const vertex = new Vector3();
		const uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			const segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( let i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	static fromJSON( data ) {

		return new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );

	}

}

class CylinderGeometry extends BufferGeometry {

	constructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super();

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		const scope = this;

		radialSegments = Math.floor( radialSegments );
		heightSegments = Math.floor( heightSegments );

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let index = 0;
		const indexArray = [];
		const halfHeight = height / 2;
		let groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) generateCap( true );
			if ( radiusBottom > 0 ) generateCap( false );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			const normal = new Vector3();
			const vertex = new Vector3();

			let groupCount = 0;

			// this will be used to calculate the normal
			const slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( let y = 0; y <= heightSegments; y ++ ) {

				const indexRow = [];

				const v = y / heightSegments;

				// calculate the radius of the current row

				const radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( let x = 0; x <= radialSegments; x ++ ) {

					const u = x / radialSegments;

					const theta = u * thetaLength + thetaStart;

					const sinTheta = Math.sin( theta );
					const cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( let x = 0; x < radialSegments; x ++ ) {

				for ( let y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					const a = indexArray[ y ][ x ];
					const b = indexArray[ y + 1 ][ x ];
					const c = indexArray[ y + 1 ][ x + 1 ];
					const d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			// save the index of the first center vertex
			const centerIndexStart = index;

			const uv = new Vector2();
			const vertex = new Vector3();

			let groupCount = 0;

			const radius = ( top === true ) ? radiusTop : radiusBottom;
			const sign = ( top === true ) ? 1 : - 1;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( let x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex
			const centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( let x = 0; x <= radialSegments; x ++ ) {

				const u = x / radialSegments;
				const theta = u * thetaLength + thetaStart;

				const cosTheta = Math.cos( theta );
				const sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( let x = 0; x < radialSegments; x ++ ) {

				const c = centerIndexStart + x;
				const i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	static fromJSON( data ) {

		return new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

	}

}

class ConeGeometry extends CylinderGeometry {

	constructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {

		super( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	static fromJSON( data ) {

		return new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );

	}

}

class Shape extends Path {

	constructor( points ) {

		super( points );

		this.uuid = generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	getPointsHoles( divisions ) {

		const holesPts = [];

		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

			holesPts[ i ] = this.holes[ i ].getPoints( divisions );

		}

		return holesPts;

	}

	// get points of shape and holes (keypoints based on segments parameter)

	extractPoints( divisions ) {

		return {

			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )

		};

	}

	copy( source ) {

		super.copy( source );

		this.holes = [];

		for ( let i = 0, l = source.holes.length; i < l; i ++ ) {

			const hole = source.holes[ i ];

			this.holes.push( hole.clone() );

		}

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.uuid = this.uuid;
		data.holes = [];

		for ( let i = 0, l = this.holes.length; i < l; i ++ ) {

			const hole = this.holes[ i ];
			data.holes.push( hole.toJSON() );

		}

		return data;

	}

	fromJSON( json ) {

		super.fromJSON( json );

		this.uuid = json.uuid;
		this.holes = [];

		for ( let i = 0, l = json.holes.length; i < l; i ++ ) {

			const hole = json.holes[ i ];
			this.holes.push( new Path().fromJSON( hole ) );

		}

		return this;

	}

}

/**
 * Port from https://github.com/mapbox/earcut (v2.2.4)
 */

const Earcut = {

	triangulate: function ( data, holeIndices, dim = 2 ) {

		const hasHoles = holeIndices && holeIndices.length;
		const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;
		let outerNode = linkedList( data, 0, outerLen, dim, true );
		const triangles = [];

		if ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;

		let minX, minY, maxX, maxY, x, y, invSize;

		if ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );

		// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
		if ( data.length > 80 * dim ) {

			minX = maxX = data[ 0 ];
			minY = maxY = data[ 1 ];

			for ( let i = dim; i < outerLen; i += dim ) {

				x = data[ i ];
				y = data[ i + 1 ];
				if ( x < minX ) minX = x;
				if ( y < minY ) minY = y;
				if ( x > maxX ) maxX = x;
				if ( y > maxY ) maxY = y;

			}

			// minX, minY and invSize are later used to transform coords into integers for z-order calculation
			invSize = Math.max( maxX - minX, maxY - minY );
			invSize = invSize !== 0 ? 32767 / invSize : 0;

		}

		earcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );

		return triangles;

	}

};

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList( data, start, end, dim, clockwise ) {

	let i, last;

	if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

		for ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	} else {

		for ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );

	}

	if ( last && equals( last, last.next ) ) {

		removeNode( last );
		last = last.next;

	}

	return last;

}

// eliminate colinear or duplicate points
function filterPoints( start, end ) {

	if ( ! start ) return start;
	if ( ! end ) end = start;

	let p = start,
		again;
	do {

		again = false;

		if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

			removeNode( p );
			p = end = p.prev;
			if ( p === p.next ) break;
			again = true;

		} else {

			p = p.next;

		}

	} while ( again || p !== end );

	return end;

}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

	if ( ! ear ) return;

	// interlink polygon nodes in z-order
	if ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );

	let stop = ear,
		prev, next;

	// iterate through ears, slicing them one by one
	while ( ear.prev !== ear.next ) {

		prev = ear.prev;
		next = ear.next;

		if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

			// cut off the triangle
			triangles.push( prev.i / dim | 0 );
			triangles.push( ear.i / dim | 0 );
			triangles.push( next.i / dim | 0 );

			removeNode( ear );

			// skipping the next vertex leads to less sliver triangles
			ear = next.next;
			stop = next.next;

			continue;

		}

		ear = next;

		// if we looped through the whole remaining polygon and can't find any more ears
		if ( ear === stop ) {

			// try filtering points and slicing again
			if ( ! pass ) {

				earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

				// if this didn't work, try curing all small self-intersections locally

			} else if ( pass === 1 ) {

				ear = cureLocalIntersections( filterPoints( ear ), triangles, dim );
				earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

				// as a last resort, try splitting the remaining polygon into two

			} else if ( pass === 2 ) {

				splitEarcut( ear, triangles, dim, minX, minY, invSize );

			}

			break;

		}

	}

}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar( ear ) {

	const a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	// now make sure we don't have other points inside the potential ear
	const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

	// triangle bbox; min & max are calculated like this for speed
	const x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),
		y0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),
		x1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),
		y1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );

	let p = c.next;
	while ( p !== a ) {

		if ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&
			pointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&
			area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.next;

	}

	return true;

}

function isEarHashed( ear, minX, minY, invSize ) {

	const a = ear.prev,
		b = ear,
		c = ear.next;

	if ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear

	const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;

	// triangle bbox; min & max are calculated like this for speed
	const x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),
		y0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),
		x1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),
		y1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );

	// z-order range for the current triangle bbox;
	const minZ = zOrder( x0, y0, minX, minY, invSize ),
		maxZ = zOrder( x1, y1, minX, minY, invSize );

	let p = ear.prevZ,
		n = ear.nextZ;

	// look for points inside the triangle in both directions
	while ( p && p.z >= minZ && n && n.z <= maxZ ) {

		if ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
			pointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.prevZ;

		if ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
			pointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;
		n = n.nextZ;

	}

	// look for remaining points in decreasing z-order
	while ( p && p.z >= minZ ) {

		if ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&
			pointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;
		p = p.prevZ;

	}

	// look for remaining points in increasing z-order
	while ( n && n.z <= maxZ ) {

		if ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&
			pointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;
		n = n.nextZ;

	}

	return true;

}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections( start, triangles, dim ) {

	let p = start;
	do {

		const a = p.prev,
			b = p.next.next;

		if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

			triangles.push( a.i / dim | 0 );
			triangles.push( p.i / dim | 0 );
			triangles.push( b.i / dim | 0 );

			// remove two nodes involved
			removeNode( p );
			removeNode( p.next );

			p = start = b;

		}

		p = p.next;

	} while ( p !== start );

	return filterPoints( p );

}

// try splitting polygon into two and triangulate them independently
function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

	// look for a valid diagonal that divides the polygon into two
	let a = start;
	do {

		let b = a.next.next;
		while ( b !== a.prev ) {

			if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

				// split the polygon in two by the diagonal
				let c = splitPolygon( a, b );

				// filter colinear points around the cuts
				a = filterPoints( a, a.next );
				c = filterPoints( c, c.next );

				// run earcut on each half
				earcutLinked( a, triangles, dim, minX, minY, invSize, 0 );
				earcutLinked( c, triangles, dim, minX, minY, invSize, 0 );
				return;

			}

			b = b.next;

		}

		a = a.next;

	} while ( a !== start );

}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles( data, holeIndices, outerNode, dim ) {

	const queue = [];
	let i, len, start, end, list;

	for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

		start = holeIndices[ i ] * dim;
		end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
		list = linkedList( data, start, end, dim, false );
		if ( list === list.next ) list.steiner = true;
		queue.push( getLeftmost( list ) );

	}

	queue.sort( compareX );

	// process holes from left to right
	for ( i = 0; i < queue.length; i ++ ) {

		outerNode = eliminateHole( queue[ i ], outerNode );

	}

	return outerNode;

}

function compareX( a, b ) {

	return a.x - b.x;

}

// find a bridge between vertices that connects hole with an outer ring and link it
function eliminateHole( hole, outerNode ) {

	const bridge = findHoleBridge( hole, outerNode );
	if ( ! bridge ) {

		return outerNode;

	}

	const bridgeReverse = splitPolygon( bridge, hole );

	// filter collinear points around the cuts
	filterPoints( bridgeReverse, bridgeReverse.next );
	return filterPoints( bridge, bridge.next );

}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge( hole, outerNode ) {

	let p = outerNode,
		qx = - Infinity,
		m;

	const hx = hole.x, hy = hole.y;

	// find a segment intersected by a ray from the hole's leftmost point to the left;
	// segment's endpoint with lesser x will be potential connection point
	do {

		if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

			const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
			if ( x <= hx && x > qx ) {

				qx = x;
				m = p.x < p.next.x ? p : p.next;
				if ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint

			}

		}

		p = p.next;

	} while ( p !== outerNode );

	if ( ! m ) return null;

	// look for points inside the triangle of hole point, segment intersection and endpoint;
	// if there are no points found, we have a valid connection;
	// otherwise choose the point of the minimum angle with the ray as connection point

	const stop = m,
		mx = m.x,
		my = m.y;
	let tanMin = Infinity, tan;

	p = m;

	do {

		if ( hx >= p.x && p.x >= mx && hx !== p.x &&
				pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

			tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

			if ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {

				m = p;
				tanMin = tan;

			}

		}

		p = p.next;

	} while ( p !== stop );

	return m;

}

// whether sector in vertex m contains sector in vertex p in the same coordinates
function sectorContainsSector( m, p ) {

	return area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;

}

// interlink polygon nodes in z-order
function indexCurve( start, minX, minY, invSize ) {

	let p = start;
	do {

		if ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );
		p.prevZ = p.prev;
		p.nextZ = p.next;
		p = p.next;

	} while ( p !== start );

	p.prevZ.nextZ = null;
	p.prevZ = null;

	sortLinked( p );

}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked( list ) {

	let i, p, q, e, tail, numMerges, pSize, qSize,
		inSize = 1;

	do {

		p = list;
		list = null;
		tail = null;
		numMerges = 0;

		while ( p ) {

			numMerges ++;
			q = p;
			pSize = 0;
			for ( i = 0; i < inSize; i ++ ) {

				pSize ++;
				q = q.nextZ;
				if ( ! q ) break;

			}

			qSize = inSize;

			while ( pSize > 0 || ( qSize > 0 && q ) ) {

				if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

					e = p;
					p = p.nextZ;
					pSize --;

				} else {

					e = q;
					q = q.nextZ;
					qSize --;

				}

				if ( tail ) tail.nextZ = e;
				else list = e;

				e.prevZ = tail;
				tail = e;

			}

			p = q;

		}

		tail.nextZ = null;
		inSize *= 2;

	} while ( numMerges > 1 );

	return list;

}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder( x, y, minX, minY, invSize ) {

	// coords are transformed into non-negative 15-bit integer range
	x = ( x - minX ) * invSize | 0;
	y = ( y - minY ) * invSize | 0;

	x = ( x | ( x << 8 ) ) & 0x00FF00FF;
	x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
	x = ( x | ( x << 2 ) ) & 0x33333333;
	x = ( x | ( x << 1 ) ) & 0x55555555;

	y = ( y | ( y << 8 ) ) & 0x00FF00FF;
	y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
	y = ( y | ( y << 2 ) ) & 0x33333333;
	y = ( y | ( y << 1 ) ) & 0x55555555;

	return x | ( y << 1 );

}

// find the leftmost node of a polygon ring
function getLeftmost( start ) {

	let p = start,
		leftmost = start;
	do {

		if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;
		p = p.next;

	} while ( p !== start );

	return leftmost;

}

// check if a point lies within a convex triangle
function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

	return ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&
           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&
           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );

}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal( a, b ) {

	return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges
           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible
            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors
            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case

}

// signed area of a triangle
function area( p, q, r ) {

	return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

}

// check if two points are equal
function equals( p1, p2 ) {

	return p1.x === p2.x && p1.y === p2.y;

}

// check if two segments intersect
function intersects( p1, q1, p2, q2 ) {

	const o1 = sign( area( p1, q1, p2 ) );
	const o2 = sign( area( p1, q1, q2 ) );
	const o3 = sign( area( p2, q2, p1 ) );
	const o4 = sign( area( p2, q2, q1 ) );

	if ( o1 !== o2 && o3 !== o4 ) return true; // general case

	if ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1
	if ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1
	if ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2
	if ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2

	return false;

}

// for collinear points p, q, r, check if point q lies on segment pr
function onSegment( p, q, r ) {

	return q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );

}

function sign( num ) {

	return num > 0 ? 1 : num < 0 ? - 1 : 0;

}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon( a, b ) {

	let p = a;
	do {

		if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
			intersects( p, p.next, a, b ) ) return true;
		p = p.next;

	} while ( p !== a );

	return false;

}

// check if a polygon diagonal is locally inside the polygon
function locallyInside( a, b ) {

	return area( a.prev, a, a.next ) < 0 ?
		area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
		area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside( a, b ) {

	let p = a,
		inside = false;
	const px = ( a.x + b.x ) / 2,
		py = ( a.y + b.y ) / 2;
	do {

		if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
			( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
			inside = ! inside;
		p = p.next;

	} while ( p !== a );

	return inside;

}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon( a, b ) {

	const a2 = new Node( a.i, a.x, a.y ),
		b2 = new Node( b.i, b.x, b.y ),
		an = a.next,
		bp = b.prev;

	a.next = b;
	b.prev = a;

	a2.next = an;
	an.prev = a2;

	b2.next = a2;
	a2.prev = b2;

	bp.next = b2;
	b2.prev = bp;

	return b2;

}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode( i, x, y, last ) {

	const p = new Node( i, x, y );

	if ( ! last ) {

		p.prev = p;
		p.next = p;

	} else {

		p.next = last.next;
		p.prev = last;
		last.next.prev = p;
		last.next = p;

	}

	return p;

}

function removeNode( p ) {

	p.next.prev = p.prev;
	p.prev.next = p.next;

	if ( p.prevZ ) p.prevZ.nextZ = p.nextZ;
	if ( p.nextZ ) p.nextZ.prevZ = p.prevZ;

}

function Node( i, x, y ) {

	// vertex index in coordinates array
	this.i = i;

	// vertex coordinates
	this.x = x;
	this.y = y;

	// previous and next vertex nodes in a polygon ring
	this.prev = null;
	this.next = null;

	// z-order curve value
	this.z = 0;

	// previous and next nodes in z-order
	this.prevZ = null;
	this.nextZ = null;

	// indicates whether this is a steiner point
	this.steiner = false;

}

function signedArea( data, start, end, dim ) {

	let sum = 0;
	for ( let i = start, j = end - dim; i < end; i += dim ) {

		sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
		j = i;

	}

	return sum;

}

class ShapeUtils {

	// calculate area of the contour polygon

	static area( contour ) {

		const n = contour.length;
		let a = 0.0;

		for ( let p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	}

	static isClockWise( pts ) {

		return ShapeUtils.area( pts ) < 0;

	}

	static triangulateShape( contour, holes ) {

		const vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
		const holeIndices = []; // array of hole indices
		const faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

		removeDupEndPts( contour );
		addContour( vertices, contour );

		//

		let holeIndex = contour.length;

		holes.forEach( removeDupEndPts );

		for ( let i = 0; i < holes.length; i ++ ) {

			holeIndices.push( holeIndex );
			holeIndex += holes[ i ].length;
			addContour( vertices, holes[ i ] );

		}

		//

		const triangles = Earcut.triangulate( vertices, holeIndices );

		//

		for ( let i = 0; i < triangles.length; i += 3 ) {

			faces.push( triangles.slice( i, i + 3 ) );

		}

		return faces;

	}

}

function removeDupEndPts( points ) {

	const l = points.length;

	if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

		points.pop();

	}

}

function addContour( vertices, contour ) {

	for ( let i = 0; i < contour.length; i ++ ) {

		vertices.push( contour[ i ].x );
		vertices.push( contour[ i ].y );

	}

}

/**
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
 *  depth: <float>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
 *  bevelOffset: <float>, // how far from shape outline does bevel start
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.Curve> // curve to extrude shape along
 *
 *  UVGenerator: <Object> // object that provides UV generator functions
 *
 * }
 */


class ExtrudeGeometry extends BufferGeometry {

	constructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {

		super();

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		const scope = this;

		const verticesArray = [];
		const uvArray = [];

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];
			addShape( shape );

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		this.computeVertexNormals();

		// functions

		function addShape( shape ) {

			const placeholder = [];

			// options

			const curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			const steps = options.steps !== undefined ? options.steps : 1;
			const depth = options.depth !== undefined ? options.depth : 1;

			let bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			let bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;
			let bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;
			let bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
			let bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			const extrudePath = options.extrudePath;

			const uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

			//

			let extrudePts, extrudeByPath = false;
			let splineTube, binormal, normal, position2;

			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
				bevelOffset = 0;

			}

			// Variables initialization

			const shapePoints = shape.extractPoints( curveSegments );

			let vertices = shapePoints.shape;
			const holes = shapePoints.holes;

			const reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			const faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			const contour = vertices; // vertices has all points but contour has only points of circumference

			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

				const ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );

				return pt.clone().addScaledVector( vec, size );

			}

			const vlen = vertices.length, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				let v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				const v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				const v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				const v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				const collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					const v_prev_len = Math.sqrt( v_prev_lensq );
					const v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					const ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					const ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					const ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					const ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					const sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					const v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					let direction_eq = false; // assumes: opposite

					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			const contourMovements = [];

			for ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) j = 0;
				if ( k === il ) k = 0;

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			const holesMovements = [];
			let oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

				const ahole = holes[ h ];

				oneHoleMovements = [];

				for ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) j = 0;
					if ( k === il ) k = 0;

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( let b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				const t = b / bevelSegments;
				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( let i = 0, il = contour.length; i < il; i ++ ) {

					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( let i = 0, il = ahole.length; i < il; i ++ ) {

						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			const bs = bevelSize + bevelOffset;

			// Back facing vertices

			for ( let i = 0; i < vlen; i ++ ) {

				const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			for ( let s = 1; s <= steps; s ++ ) {

				for ( let i = 0; i < vlen; i ++ ) {

					const vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, depth / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( let b = bevelSegments - 1; b >= 0; b -- ) {

				const t = b / bevelSegments;
				const z = bevelThickness * Math.cos( t * Math.PI / 2 );
				const bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( let i = 0, il = contour.length; i < il; i ++ ) {

					const vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );

				}

				// expand holes

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( let i = 0, il = ahole.length; i < il; i ++ ) {

						const vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, depth + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				const start = verticesArray.length / 3;

				if ( bevelEnabled ) {

					let layer = 0; // steps + 1
					let offset = vlen * layer;

					// Bottom faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( let i = 0; i < flen; i ++ ) {

						const face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length / 3 - start, 0 );

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				const start = verticesArray.length / 3;
				let layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( let h = 0, hl = holes.length; h < hl; h ++ ) {

					const ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length / 3 - start, 1 );


			}

			function sidewalls( contour, layeroffset ) {

				let i = contour.length;

				while ( -- i >= 0 ) {

					const j = i;
					let k = i - 1;
					if ( k < 0 ) k = contour.length - 1;

					//console.log('b', i,j, i-1, k,vertices.length);

					for ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {

						const slen1 = vlen * s;
						const slen2 = vlen * ( s + 1 );

						const a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				const nextIndex = verticesArray.length / 3;
				const uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				const nextIndex = verticesArray.length / 3;
				const uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

		}

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		const shapes = this.parameters.shapes;
		const options = this.parameters.options;

		return toJSON$1( shapes, options, data );

	}

	static fromJSON( data, shapes ) {

		const geometryShapes = [];

		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

			const shape = shapes[ data.shapes[ j ] ];

			geometryShapes.push( shape );

		}

		const extrudePath = data.options.extrudePath;

		if ( extrudePath !== undefined ) {

			data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

		}

		return new ExtrudeGeometry( geometryShapes, data.options );

	}

}

const WorldUVGenerator = {

	generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

		const a_x = vertices[ indexA * 3 ];
		const a_y = vertices[ indexA * 3 + 1 ];
		const b_x = vertices[ indexB * 3 ];
		const b_y = vertices[ indexB * 3 + 1 ];
		const c_x = vertices[ indexC * 3 ];
		const c_y = vertices[ indexC * 3 + 1 ];

		return [
			new Vector2( a_x, a_y ),
			new Vector2( b_x, b_y ),
			new Vector2( c_x, c_y )
		];

	},

	generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

		const a_x = vertices[ indexA * 3 ];
		const a_y = vertices[ indexA * 3 + 1 ];
		const a_z = vertices[ indexA * 3 + 2 ];
		const b_x = vertices[ indexB * 3 ];
		const b_y = vertices[ indexB * 3 + 1 ];
		const b_z = vertices[ indexB * 3 + 2 ];
		const c_x = vertices[ indexC * 3 ];
		const c_y = vertices[ indexC * 3 + 1 ];
		const c_z = vertices[ indexC * 3 + 2 ];
		const d_x = vertices[ indexD * 3 ];
		const d_y = vertices[ indexD * 3 + 1 ];
		const d_z = vertices[ indexD * 3 + 2 ];

		if ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {

			return [
				new Vector2( a_x, 1 - a_z ),
				new Vector2( b_x, 1 - b_z ),
				new Vector2( c_x, 1 - c_z ),
				new Vector2( d_x, 1 - d_z )
			];

		} else {

			return [
				new Vector2( a_y, 1 - a_z ),
				new Vector2( b_y, 1 - b_z ),
				new Vector2( c_y, 1 - c_z ),
				new Vector2( d_y, 1 - d_z )
			];

		}

	}

};

function toJSON$1( shapes, options, data ) {

	data.shapes = [];

	if ( Array.isArray( shapes ) ) {

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];

			data.shapes.push( shape.uuid );

		}

	} else {

		data.shapes.push( shapes.uuid );

	}

	data.options = Object.assign( {}, options );

	if ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();

	return data;

}

class ShapeGeometry extends BufferGeometry {

	constructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {

		super();

		this.type = 'ShapeGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		// buffers

		const indices = [];
		const vertices = [];
		const normals = [];
		const uvs = [];

		// helper variables

		let groupStart = 0;
		let groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( let i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			const indexOffset = vertices.length / 3;
			const points = shape.extractPoints( curveSegments );

			let shapeVertices = points.shape;
			const shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

			}

			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

				const shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

			const faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {

				const shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {

				const vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// indices

			for ( let i = 0, l = faces.length; i < l; i ++ ) {

				const face = faces[ i ];

				const a = face[ 0 ] + indexOffset;
				const b = face[ 1 ] + indexOffset;
				const c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		const shapes = this.parameters.shapes;

		return toJSON( shapes, data );

	}

	static fromJSON( data, shapes ) {

		const geometryShapes = [];

		for ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {

			const shape = shapes[ data.shapes[ j ] ];

			geometryShapes.push( shape );

		}

		return new ShapeGeometry( geometryShapes, data.curveSegments );

	}

}

function toJSON( shapes, data ) {

	data.shapes = [];

	if ( Array.isArray( shapes ) ) {

		for ( let i = 0, l = shapes.length; i < l; i ++ ) {

			const shape = shapes[ i ];

			data.shapes.push( shape.uuid );

		}

	} else {

		data.shapes.push( shapes.uuid );

	}

	return data;

}

class WireframeGeometry extends BufferGeometry {

	constructor( geometry = null ) {

		super();

		this.type = 'WireframeGeometry';

		this.parameters = {
			geometry: geometry
		};

		if ( geometry !== null ) {

			// buffer

			const vertices = [];
			const edges = new Set();

			// helper variables

			const start = new Vector3();
			const end = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				const position = geometry.attributes.position;
				const indices = geometry.index;
				let groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all edges without duplicates

				for ( let o = 0, ol = groups.length; o < ol; ++ o ) {

					const group = groups[ o ];

					const groupStart = group.start;
					const groupCount = group.count;

					for ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {

						for ( let j = 0; j < 3; j ++ ) {

							const index1 = indices.getX( i + j );
							const index2 = indices.getX( i + ( j + 1 ) % 3 );

							start.fromBufferAttribute( position, index1 );
							end.fromBufferAttribute( position, index2 );

							if ( isUniqueEdge( start, end, edges ) === true ) {

								vertices.push( start.x, start.y, start.z );
								vertices.push( end.x, end.y, end.z );

							}

						}

					}

				}

			} else {

				// non-indexed BufferGeometry

				const position = geometry.attributes.position;

				for ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( let j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						const index1 = 3 * i + j;
						const index2 = 3 * i + ( ( j + 1 ) % 3 );

						start.fromBufferAttribute( position, index1 );
						end.fromBufferAttribute( position, index2 );

						if ( isUniqueEdge( start, end, edges ) === true ) {

							vertices.push( start.x, start.y, start.z );
							vertices.push( end.x, end.y, end.z );

						}

					}

				}

			}

			// build geometry

			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

		}

	}

	copy( source ) {

		super.copy( source );

		this.parameters = Object.assign( {}, source.parameters );

		return this;

	}

}

function isUniqueEdge( start, end, edges ) {

	const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
	const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge

	if ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {

		return false;

	} else {

		edges.add( hash1 );
		edges.add( hash2 );
		return true;

	}

}

const Cache = {

	enabled: false,

	files: {},

	add: function ( key, file ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		if ( this.enabled === false ) return;

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {};

	}

};

class LoadingManager {

	constructor( onLoad, onProgress, onError ) {

		const scope = this;

		let isLoading = false;
		let itemsLoaded = 0;
		let itemsTotal = 0;
		let urlModifier = undefined;
		const handlers = [];

		// Refer to #5689 for the reason why we don't set .onStart
		// in the constructor

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;

			return this;

		};

		this.addHandler = function ( regex, loader ) {

			handlers.push( regex, loader );

			return this;

		};

		this.removeHandler = function ( regex ) {

			const index = handlers.indexOf( regex );

			if ( index !== - 1 ) {

				handlers.splice( index, 2 );

			}

			return this;

		};

		this.getHandler = function ( file ) {

			for ( let i = 0, l = handlers.length; i < l; i += 2 ) {

				const regex = handlers[ i ];
				const loader = handlers[ i + 1 ];

				if ( regex.global ) regex.lastIndex = 0; // see #17920

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		};

	}

}

const DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();

class Loader {

	constructor( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.crossOrigin = 'anonymous';
		this.withCredentials = false;
		this.path = '';
		this.resourcePath = '';
		this.requestHeader = {};

	}

	load( /* url, onLoad, onProgress, onError */ ) {}

	loadAsync( url, onProgress ) {

		const scope = this;

		return new Promise( function ( resolve, reject ) {

			scope.load( url, resolve, onProgress, reject );

		} );

	}

	parse( /* data */ ) {}

	setCrossOrigin( crossOrigin ) {

		this.crossOrigin = crossOrigin;
		return this;

	}

	setWithCredentials( value ) {

		this.withCredentials = value;
		return this;

	}

	setPath( path ) {

		this.path = path;
		return this;

	}

	setResourcePath( resourcePath ) {

		this.resourcePath = resourcePath;
		return this;

	}

	setRequestHeader( requestHeader ) {

		this.requestHeader = requestHeader;
		return this;

	}

}

Loader.DEFAULT_MATERIAL_NAME = '__DEFAULT';

const loading = {};

class HttpError extends Error {

	constructor( message, response ) {

		super( message );
		this.response = response;

	}

}

class FileLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		if ( url === undefined ) url = '';

		if ( this.path !== undefined ) url = this.path + url;

		url = this.manager.resolveURL( url );

		const cached = Cache.get( url );

		if ( cached !== undefined ) {

			this.manager.itemStart( url );

			setTimeout( () => {

				if ( onLoad ) onLoad( cached );

				this.manager.itemEnd( url );

			}, 0 );

			return cached;

		}

		// Check if request is duplicate

		if ( loading[ url ] !== undefined ) {

			loading[ url ].push( {

				onLoad: onLoad,
				onProgress: onProgress,
				onError: onError

			} );

			return;

		}

		// Initialise array for duplicate requests
		loading[ url ] = [];

		loading[ url ].push( {
			onLoad: onLoad,
			onProgress: onProgress,
			onError: onError,
		} );

		// create request
		const req = new Request( url, {
			headers: new Headers( this.requestHeader ),
			credentials: this.withCredentials ? 'include' : 'same-origin',
			// An abort controller could be added within a future PR
		} );

		// record states ( avoid data race )
		const mimeType = this.mimeType;
		const responseType = this.responseType;

		// start the fetch
		fetch( req )
			.then( response => {

				if ( response.status === 200 || response.status === 0 ) {

					// Some browsers return HTTP Status 0 when using non-http protocol
					// e.g. 'file://' or 'data://'. Handle as success.

					if ( response.status === 0 ) {

						console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );

					}

					// Workaround: Checking if response.body === undefined for Alipay browser #23548

					if ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {

						return response;

					}

					const callbacks = loading[ url ];
					const reader = response.body.getReader();

					// Nginx needs X-File-Size check
					// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content
					const contentLength = response.headers.get( 'Content-Length' ) || response.headers.get( 'X-File-Size' );
					const total = contentLength ? parseInt( contentLength ) : 0;
					const lengthComputable = total !== 0;
					let loaded = 0;

					// periodically read data into the new stream tracking while download progress
					const stream = new ReadableStream( {
						start( controller ) {

							readData();

							function readData() {

								reader.read().then( ( { done, value } ) => {

									if ( done ) {

										controller.close();

									} else {

										loaded += value.byteLength;

										const event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );
										for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

											const callback = callbacks[ i ];
											if ( callback.onProgress ) callback.onProgress( event );

										}

										controller.enqueue( value );
										readData();

									}

								} );

							}

						}

					} );

					return new Response( stream );

				} else {

					throw new HttpError( `fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response );

				}

			} )
			.then( response => {

				switch ( responseType ) {

					case 'arraybuffer':

						return response.arrayBuffer();

					case 'blob':

						return response.blob();

					case 'document':

						return response.text()
							.then( text => {

								const parser = new DOMParser();
								return parser.parseFromString( text, mimeType );

							} );

					case 'json':

						return response.json();

					default:

						if ( mimeType === undefined ) {

							return response.text();

						} else {

							// sniff encoding
							const re = /charset="?([^;"\s]*)"?/i;
							const exec = re.exec( mimeType );
							const label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;
							const decoder = new TextDecoder( label );
							return response.arrayBuffer().then( ab => decoder.decode( ab ) );

						}

				}

			} )
			.then( data => {

				// Add to cache only on HTTP success, so that we do not cache
				// error response bodies as proper responses to requests.
				Cache.add( url, data );

				const callbacks = loading[ url ];
				delete loading[ url ];

				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

					const callback = callbacks[ i ];
					if ( callback.onLoad ) callback.onLoad( data );

				}

			} )
			.catch( err => {

				// Abort errors and other errors are handled the same

				const callbacks = loading[ url ];

				if ( callbacks === undefined ) {

					// When onLoad was called and url was deleted in `loading`
					this.manager.itemError( url );
					throw err;

				}

				delete loading[ url ];

				for ( let i = 0, il = callbacks.length; i < il; i ++ ) {

					const callback = callbacks[ i ];
					if ( callback.onError ) callback.onError( err );

				}

				this.manager.itemError( url );

			} )
			.finally( () => {

				this.manager.itemEnd( url );

			} );

		this.manager.itemStart( url );

	}

	setResponseType( value ) {

		this.responseType = value;
		return this;

	}

	setMimeType( value ) {

		this.mimeType = value;
		return this;

	}

}

class Light extends Object3D {

	constructor( color, intensity = 1 ) {

		super();

		this.isLight = true;

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity;

	}

	dispose() {

		// Empty here in base class; some subclasses override.

	}

	copy( source, recursive ) {

		super.copy( source, recursive );

		this.color.copy( source.color );
		this.intensity = source.intensity;

		return this;

	}

	toJSON( meta ) {

		const data = super.toJSON( meta );

		data.object.color = this.color.getHex();
		data.object.intensity = this.intensity;

		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();

		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;

		if ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();

		return data;

	}

}

const _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();
const _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();
const _lookTarget$1 = /*@__PURE__*/ new Vector3();

class LightShadow {

	constructor( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.normalBias = 0;
		this.radius = 1;
		this.blurSamples = 8;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.mapPass = null;
		this.matrix = new Matrix4();

		this.autoUpdate = true;
		this.needsUpdate = false;

		this._frustum = new Frustum();
		this._frameExtents = new Vector2( 1, 1 );

		this._viewportCount = 1;

		this._viewports = [

			new Vector4( 0, 0, 1, 1 )

		];

	}

	getViewportCount() {

		return this._viewportCount;

	}

	getFrustum() {

		return this._frustum;

	}

	updateMatrices( light ) {

		const shadowCamera = this.camera;
		const shadowMatrix = this.matrix;

		_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );
		shadowCamera.position.copy( _lightPositionWorld$1 );

		_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );
		shadowCamera.lookAt( _lookTarget$1 );
		shadowCamera.updateMatrixWorld();

		_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
		this._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );

		shadowMatrix.set(
			0.5, 0.0, 0.0, 0.5,
			0.0, 0.5, 0.0, 0.5,
			0.0, 0.0, 0.5, 0.5,
			0.0, 0.0, 0.0, 1.0
		);

		shadowMatrix.multiply( _projScreenMatrix$1 );

	}

	getViewport( viewportIndex ) {

		return this._viewports[ viewportIndex ];

	}

	getFrameExtents() {

		return this._frameExtents;

	}

	dispose() {

		if ( this.map ) {

			this.map.dispose();

		}

		if ( this.mapPass ) {

			this.mapPass.dispose();

		}

	}

	copy( source ) {

		this.camera = source.camera.clone();

		this.bias = source.bias;
		this.radius = source.radius;

		this.mapSize.copy( source.mapSize );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	toJSON() {

		const object = {};

		if ( this.bias !== 0 ) object.bias = this.bias;
		if ( this.normalBias !== 0 ) object.normalBias = this.normalBias;
		if ( this.radius !== 1 ) object.radius = this.radius;
		if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();

		object.camera = this.camera.toJSON( false ).object;
		delete object.camera.matrix;

		return object;

	}

}

class DirectionalLightShadow extends LightShadow {

	constructor() {

		super( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

		this.isDirectionalLightShadow = true;

	}

}

class DirectionalLight extends Light {

	constructor( color, intensity ) {

		super( color, intensity );

		this.isDirectionalLight = true;

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DEFAULT_UP );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	dispose() {

		this.shadow.dispose();

	}

	copy( source ) {

		super.copy( source );

		this.target = source.target.clone();
		this.shadow = source.shadow.clone();

		return this;

	}

}

class InstancedBufferGeometry extends BufferGeometry {

	constructor() {

		super();

		this.isInstancedBufferGeometry = true;

		this.type = 'InstancedBufferGeometry';
		this.instanceCount = Infinity;

	}

	copy( source ) {

		super.copy( source );

		this.instanceCount = source.instanceCount;

		return this;

	}

	toJSON() {

		const data = super.toJSON();

		data.instanceCount = this.instanceCount;

		data.isInstancedBufferGeometry = true;

		return data;

	}

}

// Characters [].:/ are reserved for track binding syntax.
const _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
'[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

class InstancedInterleavedBuffer extends InterleavedBuffer {

	constructor( array, stride, meshPerAttribute = 1 ) {

		super( array, stride );

		this.isInstancedInterleavedBuffer = true;

		this.meshPerAttribute = meshPerAttribute;

	}

	copy( source ) {

		super.copy( source );

		this.meshPerAttribute = source.meshPerAttribute;

		return this;

	}

	clone( data ) {

		const ib = super.clone( data );

		ib.meshPerAttribute = this.meshPerAttribute;

		return ib;

	}

	toJSON( data ) {

		const json = super.toJSON( data );

		json.isInstancedInterleavedBuffer = true;
		json.meshPerAttribute = this.meshPerAttribute;

		return json;

	}

}

class Raycaster {

	constructor( origin, direction, near = 0, far = Infinity ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near;
		this.far = far;
		this.camera = null;
		this.layers = new Layers();

		this.params = {
			Mesh: {},
			Line: { threshold: 1 },
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

	}

	set( origin, direction ) {

		// direction is assumed to be normalized (for accurate distance calculations)

		this.ray.set( origin, direction );

	}

	setFromCamera( coords, camera ) {

		if ( camera.isPerspectiveCamera ) {

			this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
			this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
			this.camera = camera;

		} else if ( camera.isOrthographicCamera ) {

			this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
			this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
			this.camera = camera;

		} else {

			console.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );

		}

	}

	intersectObject( object, recursive = true, intersects = [] ) {

		intersectObject( object, this, intersects, recursive );

		intersects.sort( ascSort );

		return intersects;

	}

	intersectObjects( objects, recursive = true, intersects = [] ) {

		for ( let i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects, recursive );

		}

		intersects.sort( ascSort );

		return intersects;

	}

}

function ascSort( a, b ) {

	return a.distance - b.distance;

}

function intersectObject( object, raycaster, intersects, recursive ) {

	if ( object.layers.test( raycaster.layers ) ) {

		object.raycast( raycaster, intersects );

	}

	if ( recursive === true ) {

		const children = object.children;

		for ( let i = 0, l = children.length; i < l; i ++ ) {

			intersectObject( children[ i ], raycaster, intersects, true );

		}

	}

}

/**
 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
 *
 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
 * The azimuthal angle (theta) is measured from the positive z-axis.
 */


class Spherical {

	constructor( radius = 1, phi = 0, theta = 0 ) {

		this.radius = radius;
		this.phi = phi; // polar angle
		this.theta = theta; // azimuthal angle

		return this;

	}

	set( radius, phi, theta ) {

		this.radius = radius;
		this.phi = phi;
		this.theta = theta;

		return this;

	}

	copy( other ) {

		this.radius = other.radius;
		this.phi = other.phi;
		this.theta = other.theta;

		return this;

	}

	// restrict phi to be between EPS and PI-EPS
	makeSafe() {

		const EPS = 0.000001;
		this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

		return this;

	}

	setFromVector3( v ) {

		return this.setFromCartesianCoords( v.x, v.y, v.z );

	}

	setFromCartesianCoords( x, y, z ) {

		this.radius = Math.sqrt( x * x + y * y + z * z );

		if ( this.radius === 0 ) {

			this.theta = 0;
			this.phi = 0;

		} else {

			this.theta = Math.atan2( x, z );
			this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );

		}

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

const _vector$4 = /*@__PURE__*/ new Vector2();

class Box2 {

	constructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {

		this.isBox2 = true;

		this.min = min;
		this.max = max;

	}

	set( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	}

	setFromPoints( points ) {

		this.makeEmpty();

		for ( let i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] );

		}

		return this;

	}

	setFromCenterAndSize( center, size ) {

		const halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );
		this.min.copy( center ).sub( halfSize );
		this.max.copy( center ).add( halfSize );

		return this;

	}

	clone() {

		return new this.constructor().copy( this );

	}

	copy( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	}

	makeEmpty() {

		this.min.x = this.min.y = + Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	}

	isEmpty() {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	}

	getCenter( target ) {

		return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	}

	getSize( target ) {

		return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

	}

	expandByPoint( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	}

	expandByVector( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	}

	expandByScalar( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	}

	containsPoint( point ) {

		return point.x < this.min.x || point.x > this.max.x ||
			point.y < this.min.y || point.y > this.max.y ? false : true;

	}

	containsBox( box ) {

		return this.min.x <= box.min.x && box.max.x <= this.max.x &&
			this.min.y <= box.min.y && box.max.y <= this.max.y;

	}

	getParameter( point, target ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return target.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	}

	intersectsBox( box ) {

		// using 4 splitting planes to rule out intersections

		return box.max.x < this.min.x || box.min.x > this.max.x ||
			box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

	}

	clampPoint( point, target ) {

		return target.copy( point ).clamp( this.min, this.max );

	}

	distanceToPoint( point ) {

		return this.clampPoint( point, _vector$4 ).distanceTo( point );

	}

	intersect( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		if ( this.isEmpty() ) this.makeEmpty();

		return this;

	}

	union( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	}

	translate( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	}

	equals( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	}

}

const _startP = /*@__PURE__*/ new Vector3();
const _startEnd = /*@__PURE__*/ new Vector3();

class Line3 {

	constructor( start = new Vector3(), end = new Vector3() ) {

		this.start = start;
		this.end = end;

	}

	set( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	}

	copy( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	}

	getCenter( target ) {

		return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	}

	delta( target ) {

		return target.subVectors( this.end, this.start );

	}

	distanceSq() {

		return this.start.distanceToSquared( this.end );

	}

	distance() {

		return this.start.distanceTo( this.end );

	}

	at( t, target ) {

		return this.delta( target ).multiplyScalar( t ).add( this.start );

	}

	closestPointToPointParameter( point, clampToLine ) {

		_startP.subVectors( point, this.start );
		_startEnd.subVectors( this.end, this.start );

		const startEnd2 = _startEnd.dot( _startEnd );
		const startEnd_startP = _startEnd.dot( _startP );

		let t = startEnd_startP / startEnd2;

		if ( clampToLine ) {

			t = clamp( t, 0, 1 );

		}

		return t;

	}

	closestPointToPoint( point, clampToLine, target ) {

		const t = this.closestPointToPointParameter( point, clampToLine );

		return this.delta( target ).multiplyScalar( t ).add( this.start );

	}

	applyMatrix4( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	}

	equals( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	}

	clone() {

		return new this.constructor().copy( this );

	}

}

class ShapePath {

	constructor() {

		this.type = 'ShapePath';

		this.color = new Color();

		this.subPaths = [];
		this.currentPath = null;

	}

	moveTo( x, y ) {

		this.currentPath = new Path();
		this.subPaths.push( this.currentPath );
		this.currentPath.moveTo( x, y );

		return this;

	}

	lineTo( x, y ) {

		this.currentPath.lineTo( x, y );

		return this;

	}

	quadraticCurveTo( aCPx, aCPy, aX, aY ) {

		this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

		return this;

	}

	bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

		this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

		return this;

	}

	splineThru( pts ) {

		this.currentPath.splineThru( pts );

		return this;

	}

	toShapes( isCCW ) {

		function toShapesNoHoles( inSubpaths ) {

			const shapes = [];

			for ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {

				const tmpPath = inSubpaths[ i ];

				const tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );

			}

			return shapes;

		}

		function isPointInsidePolygon( inPt, inPolygon ) {

			const polyLen = inPolygon.length;

			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			let inside = false;
			for ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

				let edgeLowPt = inPolygon[ p ];
				let edgeHighPt = inPolygon[ q ];

				let edgeDx = edgeHighPt.x - edgeLowPt.x;
				let edgeDy = edgeHighPt.y - edgeLowPt.y;

				if ( Math.abs( edgeDy ) > Number.EPSILON ) {

					// not parallel
					if ( edgeDy < 0 ) {

						edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

					}

					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

					if ( inPt.y === edgeLowPt.y ) {

						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!

					} else {

						const perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt

					}

				} else {

					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;

				}

			}

			return	inside;

		}

		const isClockWise = ShapeUtils.isClockWise;

		const subPaths = this.subPaths;
		if ( subPaths.length === 0 ) return [];

		let solid, tmpPath, tmpShape;
		const shapes = [];

		if ( subPaths.length === 1 ) {

			tmpPath = subPaths[ 0 ];
			tmpShape = new Shape();
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;

		}

		let holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;

		// console.log("Holes first", holesFirst);

		const betterShapeHoles = [];
		const newShapes = [];
		let newShapeHoles = [];
		let mainIdx = 0;
		let tmpPoints;

		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];

		for ( let i = 0, l = subPaths.length; i < l; i ++ ) {

			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;

			if ( solid ) {

				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;

				newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.curves = tmpPath.curves;

				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];

				//console.log('cw', i);

			} else {

				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

				//console.log('ccw', i);

			}

		}

		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );


		if ( newShapes.length > 1 ) {

			let ambiguous = false;
			let toChange = 0;

			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				betterShapeHoles[ sIdx ] = [];

			}

			for ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

				const sho = newShapeHoles[ sIdx ];

				for ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {

					const ho = sho[ hIdx ];
					let hole_unassigned = true;

					for ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

							if ( sIdx !== s2Idx )	toChange ++;

							if ( hole_unassigned ) {

								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );

							} else {

								ambiguous = true;

							}

						}

					}

					if ( hole_unassigned ) {

						betterShapeHoles[ sIdx ].push( ho );

					}

				}

			}

			if ( toChange > 0 && ambiguous === false ) {

				newShapeHoles = betterShapeHoles;

			}

		}

		let tmpHoles;

		for ( let i = 0, il = newShapes.length; i < il; i ++ ) {

			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];

			for ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

				tmpShape.holes.push( tmpHoles[ j ].h );

			}

		}

		//console.log("shape", shapes);

		return shapes;

	}

}

if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

	__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
		revision: REVISION,
	} } ) );

}

if ( typeof window !== 'undefined' ) {

	if ( window.__THREE__ ) {

		console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

	} else {

		window.__THREE__ = REVISION;

	}

}

const COLOR_SPACE_SVG = SRGBColorSpace;

class SVGLoader extends Loader {

	constructor( manager ) {

		super( manager );

		// Default dots per inch
		this.defaultDPI = 90;

		// Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'
		this.defaultUnit = 'px';

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( scope.manager );
		loader.setPath( scope.path );
		loader.setRequestHeader( scope.requestHeader );
		loader.setWithCredentials( scope.withCredentials );
		loader.load( url, function ( text ) {

			try {

				onLoad( scope.parse( text ) );

			} catch ( e ) {

				if ( onError ) {

					onError( e );

				} else {

					console.error( e );

				}

				scope.manager.itemError( url );

			}

		}, onProgress, onError );

	}

	parse( text ) {

		const scope = this;

		function parseNode( node, style ) {

			if ( node.nodeType !== 1 ) return;

			const transform = getNodeTransform( node );

			let isDefsNode = false;

			let path = null;

			switch ( node.nodeName ) {

				case 'svg':
					style = parseStyle( node, style );
					break;

				case 'style':
					parseCSSStylesheet( node );
					break;

				case 'g':
					style = parseStyle( node, style );
					break;

				case 'path':
					style = parseStyle( node, style );
					if ( node.hasAttribute( 'd' ) ) path = parsePathNode( node );
					break;

				case 'rect':
					style = parseStyle( node, style );
					path = parseRectNode( node );
					break;

				case 'polygon':
					style = parseStyle( node, style );
					path = parsePolygonNode( node );
					break;

				case 'polyline':
					style = parseStyle( node, style );
					path = parsePolylineNode( node );
					break;

				case 'circle':
					style = parseStyle( node, style );
					path = parseCircleNode( node );
					break;

				case 'ellipse':
					style = parseStyle( node, style );
					path = parseEllipseNode( node );
					break;

				case 'line':
					style = parseStyle( node, style );
					path = parseLineNode( node );
					break;

				case 'defs':
					isDefsNode = true;
					break;

				case 'use':
					style = parseStyle( node, style );

					const href = node.getAttributeNS( 'http://www.w3.org/1999/xlink', 'href' ) || '';
					const usedNodeId = href.substring( 1 );
					const usedNode = node.viewportElement.getElementById( usedNodeId );
					if ( usedNode ) {

						parseNode( usedNode, style );

					} else {

						console.warn( 'SVGLoader: \'use node\' references non-existent node id: ' + usedNodeId );

					}

					break;
					// console.log( node );

			}

			if ( path ) {

				if ( style.fill !== undefined && style.fill !== 'none' ) {

					path.color.setStyle( style.fill, COLOR_SPACE_SVG );

				}

				transformPath( path, currentTransform );

				paths.push( path );

				path.userData = { node: node, style: style };

			}

			const childNodes = node.childNodes;

			for ( let i = 0; i < childNodes.length; i ++ ) {

				const node = childNodes[ i ];

				if ( isDefsNode && node.nodeName !== 'style' && node.nodeName !== 'defs' ) {

					// Ignore everything in defs except CSS style definitions
					// and nested defs, because it is OK by the standard to have
					// <style/> there.
					continue;

				}

				parseNode( node, style );

			}


			if ( transform ) {

				transformStack.pop();

				if ( transformStack.length > 0 ) {

					currentTransform.copy( transformStack[ transformStack.length - 1 ] );

				} else {

					currentTransform.identity();

				}

			}

		}

		function parsePathNode( node ) {

			const path = new ShapePath();

			const point = new Vector2();
			const control = new Vector2();

			const firstPoint = new Vector2();
			let isFirstPoint = true;
			let doSetFirstPoint = false;

			const d = node.getAttribute( 'd' );

			if ( d === '' || d === 'none' ) return null;

			// console.log( d );

			const commands = d.match( /[a-df-z][^a-df-z]*/ig );

			for ( let i = 0, l = commands.length; i < l; i ++ ) {

				const command = commands[ i ];

				const type = command.charAt( 0 );
				const data = command.slice( 1 ).trim();

				if ( isFirstPoint === true ) {

					doSetFirstPoint = true;
					isFirstPoint = false;

				}

				let numbers;

				switch ( type ) {

					case 'M':
						numbers = parseFloats( data );
						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							point.x = numbers[ j + 0 ];
							point.y = numbers[ j + 1 ];
							control.x = point.x;
							control.y = point.y;

							if ( j === 0 ) {

								path.moveTo( point.x, point.y );

							} else {

								path.lineTo( point.x, point.y );

							}

							if ( j === 0 ) firstPoint.copy( point );

						}

						break;

					case 'H':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j ++ ) {

							point.x = numbers[ j ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'V':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j ++ ) {

							point.y = numbers[ j ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'L':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							point.x = numbers[ j + 0 ];
							point.y = numbers[ j + 1 ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'C':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {

							path.bezierCurveTo(
								numbers[ j + 0 ],
								numbers[ j + 1 ],
								numbers[ j + 2 ],
								numbers[ j + 3 ],
								numbers[ j + 4 ],
								numbers[ j + 5 ]
							);
							control.x = numbers[ j + 2 ];
							control.y = numbers[ j + 3 ];
							point.x = numbers[ j + 4 ];
							point.y = numbers[ j + 5 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'S':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {

							path.bezierCurveTo(
								getReflection( point.x, control.x ),
								getReflection( point.y, control.y ),
								numbers[ j + 0 ],
								numbers[ j + 1 ],
								numbers[ j + 2 ],
								numbers[ j + 3 ]
							);
							control.x = numbers[ j + 0 ];
							control.y = numbers[ j + 1 ];
							point.x = numbers[ j + 2 ];
							point.y = numbers[ j + 3 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'Q':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {

							path.quadraticCurveTo(
								numbers[ j + 0 ],
								numbers[ j + 1 ],
								numbers[ j + 2 ],
								numbers[ j + 3 ]
							);
							control.x = numbers[ j + 0 ];
							control.y = numbers[ j + 1 ];
							point.x = numbers[ j + 2 ];
							point.y = numbers[ j + 3 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'T':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							const rx = getReflection( point.x, control.x );
							const ry = getReflection( point.y, control.y );
							path.quadraticCurveTo(
								rx,
								ry,
								numbers[ j + 0 ],
								numbers[ j + 1 ]
							);
							control.x = rx;
							control.y = ry;
							point.x = numbers[ j + 0 ];
							point.y = numbers[ j + 1 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'A':
						numbers = parseFloats( data, [ 3, 4 ], 7 );

						for ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {

							// skip command if start point == end point
							if ( numbers[ j + 5 ] == point.x && numbers[ j + 6 ] == point.y ) continue;

							const start = point.clone();
							point.x = numbers[ j + 5 ];
							point.y = numbers[ j + 6 ];
							control.x = point.x;
							control.y = point.y;
							parseArcCommand(
								path, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point
							);

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'm':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							point.x += numbers[ j + 0 ];
							point.y += numbers[ j + 1 ];
							control.x = point.x;
							control.y = point.y;

							if ( j === 0 ) {

								path.moveTo( point.x, point.y );

							} else {

								path.lineTo( point.x, point.y );

							}

							if ( j === 0 ) firstPoint.copy( point );

						}

						break;

					case 'h':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j ++ ) {

							point.x += numbers[ j ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'v':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j ++ ) {

							point.y += numbers[ j ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'l':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							point.x += numbers[ j + 0 ];
							point.y += numbers[ j + 1 ];
							control.x = point.x;
							control.y = point.y;
							path.lineTo( point.x, point.y );

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'c':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 6 ) {

							path.bezierCurveTo(
								point.x + numbers[ j + 0 ],
								point.y + numbers[ j + 1 ],
								point.x + numbers[ j + 2 ],
								point.y + numbers[ j + 3 ],
								point.x + numbers[ j + 4 ],
								point.y + numbers[ j + 5 ]
							);
							control.x = point.x + numbers[ j + 2 ];
							control.y = point.y + numbers[ j + 3 ];
							point.x += numbers[ j + 4 ];
							point.y += numbers[ j + 5 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 's':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {

							path.bezierCurveTo(
								getReflection( point.x, control.x ),
								getReflection( point.y, control.y ),
								point.x + numbers[ j + 0 ],
								point.y + numbers[ j + 1 ],
								point.x + numbers[ j + 2 ],
								point.y + numbers[ j + 3 ]
							);
							control.x = point.x + numbers[ j + 0 ];
							control.y = point.y + numbers[ j + 1 ];
							point.x += numbers[ j + 2 ];
							point.y += numbers[ j + 3 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'q':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 4 ) {

							path.quadraticCurveTo(
								point.x + numbers[ j + 0 ],
								point.y + numbers[ j + 1 ],
								point.x + numbers[ j + 2 ],
								point.y + numbers[ j + 3 ]
							);
							control.x = point.x + numbers[ j + 0 ];
							control.y = point.y + numbers[ j + 1 ];
							point.x += numbers[ j + 2 ];
							point.y += numbers[ j + 3 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 't':
						numbers = parseFloats( data );

						for ( let j = 0, jl = numbers.length; j < jl; j += 2 ) {

							const rx = getReflection( point.x, control.x );
							const ry = getReflection( point.y, control.y );
							path.quadraticCurveTo(
								rx,
								ry,
								point.x + numbers[ j + 0 ],
								point.y + numbers[ j + 1 ]
							);
							control.x = rx;
							control.y = ry;
							point.x = point.x + numbers[ j + 0 ];
							point.y = point.y + numbers[ j + 1 ];

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'a':
						numbers = parseFloats( data, [ 3, 4 ], 7 );

						for ( let j = 0, jl = numbers.length; j < jl; j += 7 ) {

							// skip command if no displacement
							if ( numbers[ j + 5 ] == 0 && numbers[ j + 6 ] == 0 ) continue;

							const start = point.clone();
							point.x += numbers[ j + 5 ];
							point.y += numbers[ j + 6 ];
							control.x = point.x;
							control.y = point.y;
							parseArcCommand(
								path, numbers[ j ], numbers[ j + 1 ], numbers[ j + 2 ], numbers[ j + 3 ], numbers[ j + 4 ], start, point
							);

							if ( j === 0 && doSetFirstPoint === true ) firstPoint.copy( point );

						}

						break;

					case 'Z':
					case 'z':
						path.currentPath.autoClose = true;

						if ( path.currentPath.curves.length > 0 ) {

							// Reset point to beginning of Path
							point.copy( firstPoint );
							path.currentPath.currentPoint.copy( point );
							isFirstPoint = true;

						}

						break;

					default:
						console.warn( command );

				}

				// console.log( type, parseFloats( data ), parseFloats( data ).length  )

				doSetFirstPoint = false;

			}

			return path;

		}

		function parseCSSStylesheet( node ) {

			if ( ! node.sheet || ! node.sheet.cssRules || ! node.sheet.cssRules.length ) return;

			for ( let i = 0; i < node.sheet.cssRules.length; i ++ ) {

				const stylesheet = node.sheet.cssRules[ i ];

				if ( stylesheet.type !== 1 ) continue;

				const selectorList = stylesheet.selectorText
					.split( /,/gm )
					.filter( Boolean )
					.map( i => i.trim() );

				for ( let j = 0; j < selectorList.length; j ++ ) {

					// Remove empty rules
					const definitions = Object.fromEntries(
						Object.entries( stylesheet.style ).filter( ( [ , v ] ) => v !== '' )
					);

					stylesheets[ selectorList[ j ] ] = Object.assign(
						stylesheets[ selectorList[ j ] ] || {},
						definitions
					);

				}

			}

		}

		/**
		 * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
		 * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion
		 * From
		 * rx ry x-axis-rotation large-arc-flag sweep-flag x y
		 * To
		 * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation
		 */

		function parseArcCommand( path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end ) {

			if ( rx == 0 || ry == 0 ) {

				// draw a line if either of the radii == 0
				path.lineTo( end.x, end.y );
				return;

			}

			x_axis_rotation = x_axis_rotation * Math.PI / 180;

			// Ensure radii are positive
			rx = Math.abs( rx );
			ry = Math.abs( ry );

			// Compute (x1', y1')
			const dx2 = ( start.x - end.x ) / 2.0;
			const dy2 = ( start.y - end.y ) / 2.0;
			const x1p = Math.cos( x_axis_rotation ) * dx2 + Math.sin( x_axis_rotation ) * dy2;
			const y1p = - Math.sin( x_axis_rotation ) * dx2 + Math.cos( x_axis_rotation ) * dy2;

			// Compute (cx', cy')
			let rxs = rx * rx;
			let rys = ry * ry;
			const x1ps = x1p * x1p;
			const y1ps = y1p * y1p;

			// Ensure radii are large enough
			const cr = x1ps / rxs + y1ps / rys;

			if ( cr > 1 ) {

				// scale up rx,ry equally so cr == 1
				const s = Math.sqrt( cr );
				rx = s * rx;
				ry = s * ry;
				rxs = rx * rx;
				rys = ry * ry;

			}

			const dq = ( rxs * y1ps + rys * x1ps );
			const pq = ( rxs * rys - dq ) / dq;
			let q = Math.sqrt( Math.max( 0, pq ) );
			if ( large_arc_flag === sweep_flag ) q = - q;
			const cxp = q * rx * y1p / ry;
			const cyp = - q * ry * x1p / rx;

			// Step 3: Compute (cx, cy) from (cx', cy')
			const cx = Math.cos( x_axis_rotation ) * cxp - Math.sin( x_axis_rotation ) * cyp + ( start.x + end.x ) / 2;
			const cy = Math.sin( x_axis_rotation ) * cxp + Math.cos( x_axis_rotation ) * cyp + ( start.y + end.y ) / 2;

			// Step 4: Compute θ1 and Δθ
			const theta = svgAngle( 1, 0, ( x1p - cxp ) / rx, ( y1p - cyp ) / ry );
			const delta = svgAngle( ( x1p - cxp ) / rx, ( y1p - cyp ) / ry, ( - x1p - cxp ) / rx, ( - y1p - cyp ) / ry ) % ( Math.PI * 2 );

			path.currentPath.absellipse( cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation );

		}

		function svgAngle( ux, uy, vx, vy ) {

			const dot = ux * vx + uy * vy;
			const len = Math.sqrt( ux * ux + uy * uy ) * Math.sqrt( vx * vx + vy * vy );
			let ang = Math.acos( Math.max( - 1, Math.min( 1, dot / len ) ) ); // floating point precision, slightly over values appear
			if ( ( ux * vy - uy * vx ) < 0 ) ang = - ang;
			return ang;

		}

		/*
		* According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute
		* rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough
		*/
		function parseRectNode( node ) {

			const x = parseFloatWithUnits( node.getAttribute( 'x' ) || 0 );
			const y = parseFloatWithUnits( node.getAttribute( 'y' ) || 0 );
			const rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || node.getAttribute( 'ry' ) || 0 );
			const ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || node.getAttribute( 'rx' ) || 0 );
			const w = parseFloatWithUnits( node.getAttribute( 'width' ) );
			const h = parseFloatWithUnits( node.getAttribute( 'height' ) );

			// Ellipse arc to Bezier approximation Coefficient (Inversed). See:
			// https://spencermortensen.com/articles/bezier-circle/
			const bci = 1 - 0.551915024494;

			const path = new ShapePath();

			// top left
			path.moveTo( x + rx, y );

			// top right
			path.lineTo( x + w - rx, y );
			if ( rx !== 0 || ry !== 0 ) {

				path.bezierCurveTo(
					x + w - rx * bci,
					y,
					x + w,
					y + ry * bci,
					x + w,
					y + ry
				);

			}

			// bottom right
			path.lineTo( x + w, y + h - ry );
			if ( rx !== 0 || ry !== 0 ) {

				path.bezierCurveTo(
					x + w,
					y + h - ry * bci,
					x + w - rx * bci,
					y + h,
					x + w - rx,
					y + h
				);

			}

			// bottom left
			path.lineTo( x + rx, y + h );
			if ( rx !== 0 || ry !== 0 ) {

				path.bezierCurveTo(
					x + rx * bci,
					y + h,
					x,
					y + h - ry * bci,
					x,
					y + h - ry
				);

			}

			// back to top left
			path.lineTo( x, y + ry );
			if ( rx !== 0 || ry !== 0 ) {

				path.bezierCurveTo( x, y + ry * bci, x + rx * bci, y, x + rx, y );

			}

			return path;

		}

		function parsePolygonNode( node ) {

			function iterator( match, a, b ) {

				const x = parseFloatWithUnits( a );
				const y = parseFloatWithUnits( b );

				if ( index === 0 ) {

					path.moveTo( x, y );

				} else {

					path.lineTo( x, y );

				}

				index ++;

			}

			const regex = /([+-]?\d*\.?\d+(?:e[+-]?\d+)?)(?:,|\s)([+-]?\d*\.?\d+(?:e[+-]?\d+)?)/g;

			const path = new ShapePath();

			let index = 0;

			node.getAttribute( 'points' ).replace( regex, iterator );

			path.currentPath.autoClose = true;

			return path;

		}

		function parsePolylineNode( node ) {

			function iterator( match, a, b ) {

				const x = parseFloatWithUnits( a );
				const y = parseFloatWithUnits( b );

				if ( index === 0 ) {

					path.moveTo( x, y );

				} else {

					path.lineTo( x, y );

				}

				index ++;

			}

			const regex = /([+-]?\d*\.?\d+(?:e[+-]?\d+)?)(?:,|\s)([+-]?\d*\.?\d+(?:e[+-]?\d+)?)/g;

			const path = new ShapePath();

			let index = 0;

			node.getAttribute( 'points' ).replace( regex, iterator );

			path.currentPath.autoClose = false;

			return path;

		}

		function parseCircleNode( node ) {

			const x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );
			const y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );
			const r = parseFloatWithUnits( node.getAttribute( 'r' ) || 0 );

			const subpath = new Path();
			subpath.absarc( x, y, r, 0, Math.PI * 2 );

			const path = new ShapePath();
			path.subPaths.push( subpath );

			return path;

		}

		function parseEllipseNode( node ) {

			const x = parseFloatWithUnits( node.getAttribute( 'cx' ) || 0 );
			const y = parseFloatWithUnits( node.getAttribute( 'cy' ) || 0 );
			const rx = parseFloatWithUnits( node.getAttribute( 'rx' ) || 0 );
			const ry = parseFloatWithUnits( node.getAttribute( 'ry' ) || 0 );

			const subpath = new Path();
			subpath.absellipse( x, y, rx, ry, 0, Math.PI * 2 );

			const path = new ShapePath();
			path.subPaths.push( subpath );

			return path;

		}

		function parseLineNode( node ) {

			const x1 = parseFloatWithUnits( node.getAttribute( 'x1' ) || 0 );
			const y1 = parseFloatWithUnits( node.getAttribute( 'y1' ) || 0 );
			const x2 = parseFloatWithUnits( node.getAttribute( 'x2' ) || 0 );
			const y2 = parseFloatWithUnits( node.getAttribute( 'y2' ) || 0 );

			const path = new ShapePath();
			path.moveTo( x1, y1 );
			path.lineTo( x2, y2 );
			path.currentPath.autoClose = false;

			return path;

		}

		//

		function parseStyle( node, style ) {

			style = Object.assign( {}, style ); // clone style

			let stylesheetStyles = {};

			if ( node.hasAttribute( 'class' ) ) {

				const classSelectors = node.getAttribute( 'class' )
					.split( /\s/ )
					.filter( Boolean )
					.map( i => i.trim() );

				for ( let i = 0; i < classSelectors.length; i ++ ) {

					stylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '.' + classSelectors[ i ] ] );

				}

			}

			if ( node.hasAttribute( 'id' ) ) {

				stylesheetStyles = Object.assign( stylesheetStyles, stylesheets[ '#' + node.getAttribute( 'id' ) ] );

			}

			function addStyle( svgName, jsName, adjustFunction ) {

				if ( adjustFunction === undefined ) adjustFunction = function copy( v ) {

					if ( v.startsWith( 'url' ) ) console.warn( 'SVGLoader: url access in attributes is not implemented.' );

					return v;

				};

				if ( node.hasAttribute( svgName ) ) style[ jsName ] = adjustFunction( node.getAttribute( svgName ) );
				if ( stylesheetStyles[ svgName ] ) style[ jsName ] = adjustFunction( stylesheetStyles[ svgName ] );
				if ( node.style && node.style[ svgName ] !== '' ) style[ jsName ] = adjustFunction( node.style[ svgName ] );

			}

			function clamp( v ) {

				return Math.max( 0, Math.min( 1, parseFloatWithUnits( v ) ) );

			}

			function positive( v ) {

				return Math.max( 0, parseFloatWithUnits( v ) );

			}

			addStyle( 'fill', 'fill' );
			addStyle( 'fill-opacity', 'fillOpacity', clamp );
			addStyle( 'fill-rule', 'fillRule' );
			addStyle( 'opacity', 'opacity', clamp );
			addStyle( 'stroke', 'stroke' );
			addStyle( 'stroke-opacity', 'strokeOpacity', clamp );
			addStyle( 'stroke-width', 'strokeWidth', positive );
			addStyle( 'stroke-linejoin', 'strokeLineJoin' );
			addStyle( 'stroke-linecap', 'strokeLineCap' );
			addStyle( 'stroke-miterlimit', 'strokeMiterLimit', positive );
			addStyle( 'visibility', 'visibility' );

			return style;

		}

		// http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes

		function getReflection( a, b ) {

			return a - ( b - a );

		}

		// from https://github.com/ppvg/svg-numbers (MIT License)

		function parseFloats( input, flags, stride ) {

			if ( typeof input !== 'string' ) {

				throw new TypeError( 'Invalid input: ' + typeof input );

			}

			// Character groups
			const RE = {
				SEPARATOR: /[ \t\r\n\,.\-+]/,
				WHITESPACE: /[ \t\r\n]/,
				DIGIT: /[\d]/,
				SIGN: /[-+]/,
				POINT: /\./,
				COMMA: /,/,
				EXP: /e/i,
				FLAGS: /[01]/
			};

			// States
			const SEP = 0;
			const INT = 1;
			const FLOAT = 2;
			const EXP = 3;

			let state = SEP;
			let seenComma = true;
			let number = '', exponent = '';
			const result = [];

			function throwSyntaxError( current, i, partial ) {

				const error = new SyntaxError( 'Unexpected character "' + current + '" at index ' + i + '.' );
				error.partial = partial;
				throw error;

			}

			function newNumber() {

				if ( number !== '' ) {

					if ( exponent === '' ) result.push( Number( number ) );
					else result.push( Number( number ) * Math.pow( 10, Number( exponent ) ) );

				}

				number = '';
				exponent = '';

			}

			let current;
			const length = input.length;

			for ( let i = 0; i < length; i ++ ) {

				current = input[ i ];

				// check for flags
				if ( Array.isArray( flags ) && flags.includes( result.length % stride ) && RE.FLAGS.test( current ) ) {

					state = INT;
					number = current;
					newNumber();
					continue;

				}

				// parse until next number
				if ( state === SEP ) {

					// eat whitespace
					if ( RE.WHITESPACE.test( current ) ) {

						continue;

					}

					// start new number
					if ( RE.DIGIT.test( current ) || RE.SIGN.test( current ) ) {

						state = INT;
						number = current;
						continue;

					}

					if ( RE.POINT.test( current ) ) {

						state = FLOAT;
						number = current;
						continue;

					}

					// throw on double commas (e.g. "1, , 2")
					if ( RE.COMMA.test( current ) ) {

						if ( seenComma ) {

							throwSyntaxError( current, i, result );

						}

						seenComma = true;

					}

				}

				// parse integer part
				if ( state === INT ) {

					if ( RE.DIGIT.test( current ) ) {

						number += current;
						continue;

					}

					if ( RE.POINT.test( current ) ) {

						number += current;
						state = FLOAT;
						continue;

					}

					if ( RE.EXP.test( current ) ) {

						state = EXP;
						continue;

					}

					// throw on double signs ("-+1"), but not on sign as separator ("-1-2")
					if ( RE.SIGN.test( current )
							&& number.length === 1
							&& RE.SIGN.test( number[ 0 ] ) ) {

						throwSyntaxError( current, i, result );

					}

				}

				// parse decimal part
				if ( state === FLOAT ) {

					if ( RE.DIGIT.test( current ) ) {

						number += current;
						continue;

					}

					if ( RE.EXP.test( current ) ) {

						state = EXP;
						continue;

					}

					// throw on double decimal points (e.g. "1..2")
					if ( RE.POINT.test( current ) && number[ number.length - 1 ] === '.' ) {

						throwSyntaxError( current, i, result );

					}

				}

				// parse exponent part
				if ( state === EXP ) {

					if ( RE.DIGIT.test( current ) ) {

						exponent += current;
						continue;

					}

					if ( RE.SIGN.test( current ) ) {

						if ( exponent === '' ) {

							exponent += current;
							continue;

						}

						if ( exponent.length === 1 && RE.SIGN.test( exponent ) ) {

							throwSyntaxError( current, i, result );

						}

					}

				}


				// end of number
				if ( RE.WHITESPACE.test( current ) ) {

					newNumber();
					state = SEP;
					seenComma = false;

				} else if ( RE.COMMA.test( current ) ) {

					newNumber();
					state = SEP;
					seenComma = true;

				} else if ( RE.SIGN.test( current ) ) {

					newNumber();
					state = INT;
					number = current;

				} else if ( RE.POINT.test( current ) ) {

					newNumber();
					state = FLOAT;
					number = current;

				} else {

					throwSyntaxError( current, i, result );

				}

			}

			// add the last number found (if any)
			newNumber();

			return result;

		}

		// Units

		const units = [ 'mm', 'cm', 'in', 'pt', 'pc', 'px' ];

		// Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)
		const unitConversion = {

			'mm': {
				'mm': 1,
				'cm': 0.1,
				'in': 1 / 25.4,
				'pt': 72 / 25.4,
				'pc': 6 / 25.4,
				'px': - 1
			},
			'cm': {
				'mm': 10,
				'cm': 1,
				'in': 1 / 2.54,
				'pt': 72 / 2.54,
				'pc': 6 / 2.54,
				'px': - 1
			},
			'in': {
				'mm': 25.4,
				'cm': 2.54,
				'in': 1,
				'pt': 72,
				'pc': 6,
				'px': - 1
			},
			'pt': {
				'mm': 25.4 / 72,
				'cm': 2.54 / 72,
				'in': 1 / 72,
				'pt': 1,
				'pc': 6 / 72,
				'px': - 1
			},
			'pc': {
				'mm': 25.4 / 6,
				'cm': 2.54 / 6,
				'in': 1 / 6,
				'pt': 72 / 6,
				'pc': 1,
				'px': - 1
			},
			'px': {
				'px': 1
			}

		};

		function parseFloatWithUnits( string ) {

			let theUnit = 'px';

			if ( typeof string === 'string' || string instanceof String ) {

				for ( let i = 0, n = units.length; i < n; i ++ ) {

					const u = units[ i ];

					if ( string.endsWith( u ) ) {

						theUnit = u;
						string = string.substring( 0, string.length - u.length );
						break;

					}

				}

			}

			let scale = undefined;

			if ( theUnit === 'px' && scope.defaultUnit !== 'px' ) {

				// Conversion scale from  pixels to inches, then to default units

				scale = unitConversion[ 'in' ][ scope.defaultUnit ] / scope.defaultDPI;

			} else {

				scale = unitConversion[ theUnit ][ scope.defaultUnit ];

				if ( scale < 0 ) {

					// Conversion scale to pixels

					scale = unitConversion[ theUnit ][ 'in' ] * scope.defaultDPI;

				}

			}

			return scale * parseFloat( string );

		}

		// Transforms

		function getNodeTransform( node ) {

			if ( ! ( node.hasAttribute( 'transform' ) || ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) ) ) {

				return null;

			}

			const transform = parseNodeTransform( node );

			if ( transformStack.length > 0 ) {

				transform.premultiply( transformStack[ transformStack.length - 1 ] );

			}

			currentTransform.copy( transform );
			transformStack.push( transform );

			return transform;

		}

		function parseNodeTransform( node ) {

			const transform = new Matrix3();
			const currentTransform = tempTransform0;

			if ( node.nodeName === 'use' && ( node.hasAttribute( 'x' ) || node.hasAttribute( 'y' ) ) ) {

				const tx = parseFloatWithUnits( node.getAttribute( 'x' ) );
				const ty = parseFloatWithUnits( node.getAttribute( 'y' ) );

				transform.translate( tx, ty );

			}

			if ( node.hasAttribute( 'transform' ) ) {

				const transformsTexts = node.getAttribute( 'transform' ).split( ')' );

				for ( let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex -- ) {

					const transformText = transformsTexts[ tIndex ].trim();

					if ( transformText === '' ) continue;

					const openParPos = transformText.indexOf( '(' );
					const closeParPos = transformText.length;

					if ( openParPos > 0 && openParPos < closeParPos ) {

						const transformType = transformText.slice( 0, openParPos );

						const array = parseFloats( transformText.slice( openParPos + 1 ) );

						currentTransform.identity();

						switch ( transformType ) {

							case 'translate':

								if ( array.length >= 1 ) {

									const tx = array[ 0 ];
									let ty = 0;

									if ( array.length >= 2 ) {

										ty = array[ 1 ];

									}

									currentTransform.translate( tx, ty );

								}

								break;

							case 'rotate':

								if ( array.length >= 1 ) {

									let angle = 0;
									let cx = 0;
									let cy = 0;

									// Angle
									angle = array[ 0 ] * Math.PI / 180;

									if ( array.length >= 3 ) {

										// Center x, y
										cx = array[ 1 ];
										cy = array[ 2 ];

									}

									// Rotate around center (cx, cy)
									tempTransform1.makeTranslation( - cx, - cy );
									tempTransform2.makeRotation( angle );
									tempTransform3.multiplyMatrices( tempTransform2, tempTransform1 );
									tempTransform1.makeTranslation( cx, cy );
									currentTransform.multiplyMatrices( tempTransform1, tempTransform3 );

								}

								break;

							case 'scale':

								if ( array.length >= 1 ) {

									const scaleX = array[ 0 ];
									let scaleY = scaleX;

									if ( array.length >= 2 ) {

										scaleY = array[ 1 ];

									}

									currentTransform.scale( scaleX, scaleY );

								}

								break;

							case 'skewX':

								if ( array.length === 1 ) {

									currentTransform.set(
										1, Math.tan( array[ 0 ] * Math.PI / 180 ), 0,
										0, 1, 0,
										0, 0, 1
									);

								}

								break;

							case 'skewY':

								if ( array.length === 1 ) {

									currentTransform.set(
										1, 0, 0,
										Math.tan( array[ 0 ] * Math.PI / 180 ), 1, 0,
										0, 0, 1
									);

								}

								break;

							case 'matrix':

								if ( array.length === 6 ) {

									currentTransform.set(
										array[ 0 ], array[ 2 ], array[ 4 ],
										array[ 1 ], array[ 3 ], array[ 5 ],
										0, 0, 1
									);

								}

								break;

						}

					}

					transform.premultiply( currentTransform );

				}

			}

			return transform;

		}

		function transformPath( path, m ) {

			function transfVec2( v2 ) {

				tempV3.set( v2.x, v2.y, 1 ).applyMatrix3( m );

				v2.set( tempV3.x, tempV3.y );

			}

			function transfEllipseGeneric( curve ) {

				// For math description see:
				// https://math.stackexchange.com/questions/4544164

				const a = curve.xRadius;
				const b = curve.yRadius;

				const cosTheta = Math.cos( curve.aRotation );
				const sinTheta = Math.sin( curve.aRotation );

				const v1 = new Vector3( a * cosTheta, a * sinTheta, 0 );
				const v2 = new Vector3( - b * sinTheta, b * cosTheta, 0 );

				const f1 = v1.applyMatrix3( m );
				const f2 = v2.applyMatrix3( m );

				const mF = tempTransform0.set(
					f1.x, f2.x, 0,
					f1.y, f2.y, 0,
					0, 0, 1,
				);

				const mFInv = tempTransform1.copy( mF ).invert();
				const mFInvT = tempTransform2.copy( mFInv ).transpose();
				const mQ = mFInvT.multiply( mFInv );
				const mQe = mQ.elements;

				const ed = eigenDecomposition( mQe[ 0 ], mQe[ 1 ], mQe[ 4 ] );
				const rt1sqrt = Math.sqrt( ed.rt1 );
				const rt2sqrt = Math.sqrt( ed.rt2 );

				curve.xRadius = 1 / rt1sqrt;
				curve.yRadius = 1 / rt2sqrt;
				curve.aRotation = Math.atan2( ed.sn, ed.cs );

				const isFullEllipse =
					( curve.aEndAngle - curve.aStartAngle ) % ( 2 * Math.PI ) < Number.EPSILON;

				// Do not touch angles of a full ellipse because after transformation they
				// would converge to a sinle value effectively removing the whole curve

				if ( ! isFullEllipse ) {

					const mDsqrt = tempTransform1.set(
						rt1sqrt, 0, 0,
						0, rt2sqrt, 0,
						0, 0, 1,
					);

					const mRT = tempTransform2.set(
						ed.cs, ed.sn, 0,
						- ed.sn, ed.cs, 0,
						0, 0, 1,
					);

					const mDRF = mDsqrt.multiply( mRT ).multiply( mF );

					const transformAngle = phi => {

						const { x: cosR, y: sinR } =
							new Vector3( Math.cos( phi ), Math.sin( phi ), 0 ).applyMatrix3( mDRF );

						return Math.atan2( sinR, cosR );

					};

					curve.aStartAngle = transformAngle( curve.aStartAngle );
					curve.aEndAngle = transformAngle( curve.aEndAngle );

					if ( isTransformFlipped( m ) ) {

						curve.aClockwise = ! curve.aClockwise;

					}

				}

			}

			function transfEllipseNoSkew( curve ) {

				// Faster shortcut if no skew is applied
				// (e.g, a euclidean transform of a group containing the ellipse)

				const sx = getTransformScaleX( m );
				const sy = getTransformScaleY( m );

				curve.xRadius *= sx;
				curve.yRadius *= sy;

				// Extract rotation angle from the matrix of form:
				//
				//  | cosθ sx   -sinθ sy |
				//  | sinθ sx    cosθ sy |
				//
				// Remembering that tanθ = sinθ / cosθ; and that
				// `sx`, `sy`, or both might be zero.
				const theta =
					sx > Number.EPSILON
						? Math.atan2( m.elements[ 1 ], m.elements[ 0 ] )
						: Math.atan2( - m.elements[ 3 ], m.elements[ 4 ] );

				curve.aRotation += theta;

				if ( isTransformFlipped( m ) ) {

					curve.aStartAngle *= - 1;
					curve.aEndAngle *= - 1;
					curve.aClockwise = ! curve.aClockwise;

				}

			}

			const subPaths = path.subPaths;

			for ( let i = 0, n = subPaths.length; i < n; i ++ ) {

				const subPath = subPaths[ i ];
				const curves = subPath.curves;

				for ( let j = 0; j < curves.length; j ++ ) {

					const curve = curves[ j ];

					if ( curve.isLineCurve ) {

						transfVec2( curve.v1 );
						transfVec2( curve.v2 );

					} else if ( curve.isCubicBezierCurve ) {

						transfVec2( curve.v0 );
						transfVec2( curve.v1 );
						transfVec2( curve.v2 );
						transfVec2( curve.v3 );

					} else if ( curve.isQuadraticBezierCurve ) {

						transfVec2( curve.v0 );
						transfVec2( curve.v1 );
						transfVec2( curve.v2 );

					} else if ( curve.isEllipseCurve ) {

						// Transform ellipse center point

						tempV2.set( curve.aX, curve.aY );
						transfVec2( tempV2 );
						curve.aX = tempV2.x;
						curve.aY = tempV2.y;

						// Transform ellipse shape parameters

						if ( isTransformSkewed( m ) ) {

							transfEllipseGeneric( curve );

						} else {

							transfEllipseNoSkew( curve );

						}

					}

				}

			}

		}

		function isTransformFlipped( m ) {

			const te = m.elements;
			return te[ 0 ] * te[ 4 ] - te[ 1 ] * te[ 3 ] < 0;

		}

		function isTransformSkewed( m ) {

			const te = m.elements;
			const basisDot = te[ 0 ] * te[ 3 ] + te[ 1 ] * te[ 4 ];

			// Shortcut for trivial rotations and transformations
			if ( basisDot === 0 ) return false;

			const sx = getTransformScaleX( m );
			const sy = getTransformScaleY( m );

			return Math.abs( basisDot / ( sx * sy ) ) > Number.EPSILON;

		}

		function getTransformScaleX( m ) {

			const te = m.elements;
			return Math.sqrt( te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] );

		}

		function getTransformScaleY( m ) {

			const te = m.elements;
			return Math.sqrt( te[ 3 ] * te[ 3 ] + te[ 4 ] * te[ 4 ] );

		}

		// Calculates the eigensystem of a real symmetric 2x2 matrix
		//    [ A  B ]
		//    [ B  C ]
		// in the form
		//    [ A  B ]  =  [ cs  -sn ] [ rt1   0  ] [  cs  sn ]
		//    [ B  C ]     [ sn   cs ] [  0   rt2 ] [ -sn  cs ]
		// where rt1 >= rt2.
		//
		// Adapted from: https://www.mpi-hd.mpg.de/personalhomes/globes/3x3/index.html
		// -> Algorithms for real symmetric matrices -> Analytical (2x2 symmetric)
		function eigenDecomposition( A, B, C ) {

			let rt1, rt2, cs, sn, t;
			const sm = A + C;
			const df = A - C;
			const rt = Math.sqrt( df * df + 4 * B * B );

			if ( sm > 0 ) {

				rt1 = 0.5 * ( sm + rt );
				t = 1 / rt1;
				rt2 = A * t * C - B * t * B;

			} else if ( sm < 0 ) {

				rt2 = 0.5 * ( sm - rt );

			} else {

				// This case needs to be treated separately to avoid div by 0

				rt1 = 0.5 * rt;
				rt2 = - 0.5 * rt;

			}

			// Calculate eigenvectors

			if ( df > 0 ) {

				cs = df + rt;

			} else {

				cs = df - rt;

			}

			if ( Math.abs( cs ) > 2 * Math.abs( B ) ) {

				t = - 2 * B / cs;
				sn = 1 / Math.sqrt( 1 + t * t );
				cs = t * sn;

			} else if ( Math.abs( B ) === 0 ) {

				cs = 1;
				sn = 0;

			} else {

				t = - 0.5 * cs / B;
				cs = 1 / Math.sqrt( 1 + t * t );
				sn = t * cs;

			}

			if ( df > 0 ) {

				t = cs;
				cs = - sn;
				sn = t;

			}

			return { rt1, rt2, cs, sn };

		}

		//

		const paths = [];
		const stylesheets = {};

		const transformStack = [];

		const tempTransform0 = new Matrix3();
		const tempTransform1 = new Matrix3();
		const tempTransform2 = new Matrix3();
		const tempTransform3 = new Matrix3();
		const tempV2 = new Vector2();
		const tempV3 = new Vector3();

		const currentTransform = new Matrix3();

		const xml = new DOMParser().parseFromString( text, 'image/svg+xml' ); // application/xml

		parseNode( xml.documentElement, {
			fill: '#000',
			fillOpacity: 1,
			strokeOpacity: 1,
			strokeWidth: 1,
			strokeLineJoin: 'miter',
			strokeLineCap: 'butt',
			strokeMiterLimit: 4
		} );

		const data = { paths: paths, xml: xml.documentElement };

		// console.log( paths );
		return data;

	}

	static createShapes( shapePath ) {

		// Param shapePath: a shapepath as returned by the parse function of this class
		// Returns Shape object

		const BIGNUMBER = 999999999;

		const IntersectionLocationType = {
			ORIGIN: 0,
			DESTINATION: 1,
			BETWEEN: 2,
			LEFT: 3,
			RIGHT: 4,
			BEHIND: 5,
			BEYOND: 6
		};

		const classifyResult = {
			loc: IntersectionLocationType.ORIGIN,
			t: 0
		};

		function findEdgeIntersection( a0, a1, b0, b1 ) {

			const x1 = a0.x;
			const x2 = a1.x;
			const x3 = b0.x;
			const x4 = b1.x;
			const y1 = a0.y;
			const y2 = a1.y;
			const y3 = b0.y;
			const y4 = b1.y;
			const nom1 = ( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 );
			const nom2 = ( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 );
			const denom = ( y4 - y3 ) * ( x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );
			const t1 = nom1 / denom;
			const t2 = nom2 / denom;

			if ( ( ( denom === 0 ) && ( nom1 !== 0 ) ) || ( t1 <= 0 ) || ( t1 >= 1 ) || ( t2 < 0 ) || ( t2 > 1 ) ) {

				//1. lines are parallel or edges don't intersect

				return null;

			} else if ( ( nom1 === 0 ) && ( denom === 0 ) ) {

				//2. lines are colinear

				//check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)
				for ( let i = 0; i < 2; i ++ ) {

					classifyPoint( i === 0 ? b0 : b1, a0, a1 );
					//find position of this endpoints relatively to edge1
					if ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {

						const point = ( i === 0 ? b0 : b1 );
						return { x: point.x, y: point.y, t: classifyResult.t };

					} else if ( classifyResult.loc == IntersectionLocationType.BETWEEN ) {

						const x = + ( ( x1 + classifyResult.t * ( x2 - x1 ) ).toPrecision( 10 ) );
						const y = + ( ( y1 + classifyResult.t * ( y2 - y1 ) ).toPrecision( 10 ) );
						return { x: x, y: y, t: classifyResult.t, };

					}

				}

				return null;

			} else {

				//3. edges intersect

				for ( let i = 0; i < 2; i ++ ) {

					classifyPoint( i === 0 ? b0 : b1, a0, a1 );

					if ( classifyResult.loc == IntersectionLocationType.ORIGIN ) {

						const point = ( i === 0 ? b0 : b1 );
						return { x: point.x, y: point.y, t: classifyResult.t };

					}

				}

				const x = + ( ( x1 + t1 * ( x2 - x1 ) ).toPrecision( 10 ) );
				const y = + ( ( y1 + t1 * ( y2 - y1 ) ).toPrecision( 10 ) );
				return { x: x, y: y, t: t1 };

			}

		}

		function classifyPoint( p, edgeStart, edgeEnd ) {

			const ax = edgeEnd.x - edgeStart.x;
			const ay = edgeEnd.y - edgeStart.y;
			const bx = p.x - edgeStart.x;
			const by = p.y - edgeStart.y;
			const sa = ax * by - bx * ay;

			if ( ( p.x === edgeStart.x ) && ( p.y === edgeStart.y ) ) {

				classifyResult.loc = IntersectionLocationType.ORIGIN;
				classifyResult.t = 0;
				return;

			}

			if ( ( p.x === edgeEnd.x ) && ( p.y === edgeEnd.y ) ) {

				classifyResult.loc = IntersectionLocationType.DESTINATION;
				classifyResult.t = 1;
				return;

			}

			if ( sa < - Number.EPSILON ) {

				classifyResult.loc = IntersectionLocationType.LEFT;
				return;

			}

			if ( sa > Number.EPSILON ) {

				classifyResult.loc = IntersectionLocationType.RIGHT;
				return;


			}

			if ( ( ( ax * bx ) < 0 ) || ( ( ay * by ) < 0 ) ) {

				classifyResult.loc = IntersectionLocationType.BEHIND;
				return;

			}

			if ( ( Math.sqrt( ax * ax + ay * ay ) ) < ( Math.sqrt( bx * bx + by * by ) ) ) {

				classifyResult.loc = IntersectionLocationType.BEYOND;
				return;

			}

			let t;

			if ( ax !== 0 ) {

				t = bx / ax;

			} else {

				t = by / ay;

			}

			classifyResult.loc = IntersectionLocationType.BETWEEN;
			classifyResult.t = t;

		}

		function getIntersections( path1, path2 ) {

			const intersectionsRaw = [];
			const intersections = [];

			for ( let index = 1; index < path1.length; index ++ ) {

				const path1EdgeStart = path1[ index - 1 ];
				const path1EdgeEnd = path1[ index ];

				for ( let index2 = 1; index2 < path2.length; index2 ++ ) {

					const path2EdgeStart = path2[ index2 - 1 ];
					const path2EdgeEnd = path2[ index2 ];

					const intersection = findEdgeIntersection( path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd );

					if ( intersection !== null && intersectionsRaw.find( i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON ) === undefined ) {

						intersectionsRaw.push( intersection );
						intersections.push( new Vector2( intersection.x, intersection.y ) );

					}

				}

			}

			return intersections;

		}

		function getScanlineIntersections( scanline, boundingBox, paths ) {

			const center = new Vector2();
			boundingBox.getCenter( center );

			const allIntersections = [];

			paths.forEach( path => {

				// check if the center of the bounding box is in the bounding box of the paths.
				// this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.
				// if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.
				if ( path.boundingBox.containsPoint( center ) ) {

					const intersections = getIntersections( scanline, path.points );

					intersections.forEach( p => {

						allIntersections.push( { identifier: path.identifier, isCW: path.isCW, point: p } );

					} );

				}

			} );

			allIntersections.sort( ( i1, i2 ) => {

				return i1.point.x - i2.point.x;

			} );

			return allIntersections;

		}

		function isHoleTo( simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule ) {

			if ( _fillRule === null || _fillRule === undefined || _fillRule === '' ) {

				_fillRule = 'nonzero';

			}

			const centerBoundingBox = new Vector2();
			simplePath.boundingBox.getCenter( centerBoundingBox );

			const scanline = [ new Vector2( scanlineMinX, centerBoundingBox.y ), new Vector2( scanlineMaxX, centerBoundingBox.y ) ];

			const scanlineIntersections = getScanlineIntersections( scanline, simplePath.boundingBox, allPaths );

			scanlineIntersections.sort( ( i1, i2 ) => {

				return i1.point.x - i2.point.x;

			} );

			const baseIntersections = [];
			const otherIntersections = [];

			scanlineIntersections.forEach( i => {

				if ( i.identifier === simplePath.identifier ) {

					baseIntersections.push( i );

				} else {

					otherIntersections.push( i );

				}

			} );

			const firstXOfPath = baseIntersections[ 0 ].point.x;

			// build up the path hierarchy
			const stack = [];
			let i = 0;

			while ( i < otherIntersections.length && otherIntersections[ i ].point.x < firstXOfPath ) {

				if ( stack.length > 0 && stack[ stack.length - 1 ] === otherIntersections[ i ].identifier ) {

					stack.pop();

				} else {

					stack.push( otherIntersections[ i ].identifier );

				}

				i ++;

			}

			stack.push( simplePath.identifier );

			if ( _fillRule === 'evenodd' ) {

				const isHole = stack.length % 2 === 0 ? true : false;
				const isHoleFor = stack[ stack.length - 2 ];

				return { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };

			} else if ( _fillRule === 'nonzero' ) {

				// check if path is a hole by counting the amount of paths with alternating rotations it has to cross.
				let isHole = true;
				let isHoleFor = null;
				let lastCWValue = null;

				for ( let i = 0; i < stack.length; i ++ ) {

					const identifier = stack[ i ];
					if ( isHole ) {

						lastCWValue = allPaths[ identifier ].isCW;
						isHole = false;
						isHoleFor = identifier;

					} else if ( lastCWValue !== allPaths[ identifier ].isCW ) {

						lastCWValue = allPaths[ identifier ].isCW;
						isHole = true;

					}

				}

				return { identifier: simplePath.identifier, isHole: isHole, for: isHoleFor };

			} else {

				console.warn( 'fill-rule: "' + _fillRule + '" is currently not implemented.' );

			}

		}

		// check for self intersecting paths
		// TODO

		// check intersecting paths
		// TODO

		// prepare paths for hole detection
		let scanlineMinX = BIGNUMBER;
		let scanlineMaxX = - BIGNUMBER;

		let simplePaths = shapePath.subPaths.map( p => {

			const points = p.getPoints();
			let maxY = - BIGNUMBER;
			let minY = BIGNUMBER;
			let maxX = - BIGNUMBER;
			let minX = BIGNUMBER;

	      	//points.forEach(p => p.y *= -1);

			for ( let i = 0; i < points.length; i ++ ) {

				const p = points[ i ];

				if ( p.y > maxY ) {

					maxY = p.y;

				}

				if ( p.y < minY ) {

					minY = p.y;

				}

				if ( p.x > maxX ) {

					maxX = p.x;

				}

				if ( p.x < minX ) {

					minX = p.x;

				}

			}

			//
			if ( scanlineMaxX <= maxX ) {

				scanlineMaxX = maxX + 1;

			}

			if ( scanlineMinX >= minX ) {

				scanlineMinX = minX - 1;

			}

			return { curves: p.curves, points: points, isCW: ShapeUtils.isClockWise( points ), identifier: - 1, boundingBox: new Box2( new Vector2( minX, minY ), new Vector2( maxX, maxY ) ) };

		} );

		simplePaths = simplePaths.filter( sp => sp.points.length > 1 );

		for ( let identifier = 0; identifier < simplePaths.length; identifier ++ ) {

			simplePaths[ identifier ].identifier = identifier;

		}

		// check if path is solid or a hole
		const isAHole = simplePaths.map( p => isHoleTo( p, simplePaths, scanlineMinX, scanlineMaxX, ( shapePath.userData ? shapePath.userData.style.fillRule : undefined ) ) );


		const shapesToReturn = [];
		simplePaths.forEach( p => {

			const amIAHole = isAHole[ p.identifier ];

			if ( ! amIAHole.isHole ) {

				const shape = new Shape();
				shape.curves = p.curves;
				const holes = isAHole.filter( h => h.isHole && h.for === p.identifier );
				holes.forEach( h => {

					const hole = simplePaths[ h.identifier ];
					const path = new Path();
					path.curves = hole.curves;
					shape.holes.push( path );

				} );
				shapesToReturn.push( shape );

			}

		} );

		return shapesToReturn;

	}

	static getStrokeStyle( width, color, lineJoin, lineCap, miterLimit ) {

		// Param width: Stroke width
		// Param color: As returned by THREE.Color.getStyle()
		// Param lineJoin: One of "round", "bevel", "miter" or "miter-limit"
		// Param lineCap: One of "round", "square" or "butt"
		// Param miterLimit: Maximum join length, in multiples of the "width" parameter (join is truncated if it exceeds that distance)
		// Returns style object

		width = width !== undefined ? width : 1;
		color = color !== undefined ? color : '#000';
		lineJoin = lineJoin !== undefined ? lineJoin : 'miter';
		lineCap = lineCap !== undefined ? lineCap : 'butt';
		miterLimit = miterLimit !== undefined ? miterLimit : 4;

		return {
			strokeColor: color,
			strokeWidth: width,
			strokeLineJoin: lineJoin,
			strokeLineCap: lineCap,
			strokeMiterLimit: miterLimit
		};

	}

	static pointsToStroke( points, style, arcDivisions, minDistance ) {

		// Generates a stroke with some width around the given path.
		// The path can be open or closed (last point equals to first point)
		// Param points: Array of Vector2D (the path). Minimum 2 points.
		// Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object
		// Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)
		// Param minDistance: Points closer to this distance will be merged. (Optional)
		// Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)

		const vertices = [];
		const normals = [];
		const uvs = [];

		if ( SVGLoader.pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs ) === 0 ) {

			return null;

		}

		const geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		geometry.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		return geometry;

	}

	static pointsToStrokeWithBuffers( points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset ) {

		// This function can be called to update existing arrays or buffers.
		// Accepts same parameters as pointsToStroke, plus the buffers and optional offset.
		// Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)
		// Returns number of written vertices / normals / uvs pairs
		// if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)
		// 'normals' and 'uvs' buffers are optional

		const tempV2_1 = new Vector2();
		const tempV2_2 = new Vector2();
		const tempV2_3 = new Vector2();
		const tempV2_4 = new Vector2();
		const tempV2_5 = new Vector2();
		const tempV2_6 = new Vector2();
		const tempV2_7 = new Vector2();
		const lastPointL = new Vector2();
		const lastPointR = new Vector2();
		const point0L = new Vector2();
		const point0R = new Vector2();
		const currentPointL = new Vector2();
		const currentPointR = new Vector2();
		const nextPointL = new Vector2();
		const nextPointR = new Vector2();
		const innerPoint = new Vector2();
		const outerPoint = new Vector2();

		arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;
		minDistance = minDistance !== undefined ? minDistance : 0.001;
		vertexOffset = vertexOffset !== undefined ? vertexOffset : 0;

		// First ensure there are no duplicated points
		points = removeDuplicatedPoints( points );

		const numPoints = points.length;

		if ( numPoints < 2 ) return 0;

		const isClosed = points[ 0 ].equals( points[ numPoints - 1 ] );

		let currentPoint;
		let previousPoint = points[ 0 ];
		let nextPoint;

		const strokeWidth2 = style.strokeWidth / 2;

		const deltaU = 1 / ( numPoints - 1 );
		let u0 = 0, u1;

		let innerSideModified;
		let joinIsOnLeftSide;
		let isMiter;
		let initialJoinIsOnLeftSide = false;

		let numVertices = 0;
		let currentCoordinate = vertexOffset * 3;
		let currentCoordinateUV = vertexOffset * 2;

		// Get initial left and right stroke points
		getNormal( points[ 0 ], points[ 1 ], tempV2_1 ).multiplyScalar( strokeWidth2 );
		lastPointL.copy( points[ 0 ] ).sub( tempV2_1 );
		lastPointR.copy( points[ 0 ] ).add( tempV2_1 );
		point0L.copy( lastPointL );
		point0R.copy( lastPointR );

		for ( let iPoint = 1; iPoint < numPoints; iPoint ++ ) {

			currentPoint = points[ iPoint ];

			// Get next point
			if ( iPoint === numPoints - 1 ) {

				if ( isClosed ) {

					// Skip duplicated initial point
					nextPoint = points[ 1 ];

				} else nextPoint = undefined;

			} else {

				nextPoint = points[ iPoint + 1 ];

			}

			// Normal of previous segment in tempV2_1
			const normal1 = tempV2_1;
			getNormal( previousPoint, currentPoint, normal1 );

			tempV2_3.copy( normal1 ).multiplyScalar( strokeWidth2 );
			currentPointL.copy( currentPoint ).sub( tempV2_3 );
			currentPointR.copy( currentPoint ).add( tempV2_3 );

			u1 = u0 + deltaU;

			innerSideModified = false;

			if ( nextPoint !== undefined ) {

				// Normal of next segment in tempV2_2
				getNormal( currentPoint, nextPoint, tempV2_2 );

				tempV2_3.copy( tempV2_2 ).multiplyScalar( strokeWidth2 );
				nextPointL.copy( currentPoint ).sub( tempV2_3 );
				nextPointR.copy( currentPoint ).add( tempV2_3 );

				joinIsOnLeftSide = true;
				tempV2_3.subVectors( nextPoint, previousPoint );
				if ( normal1.dot( tempV2_3 ) < 0 ) {

					joinIsOnLeftSide = false;

				}

				if ( iPoint === 1 ) initialJoinIsOnLeftSide = joinIsOnLeftSide;

				tempV2_3.subVectors( nextPoint, currentPoint );
				tempV2_3.normalize();
				const dot = Math.abs( normal1.dot( tempV2_3 ) );

				// If path is straight, don't create join
				if ( dot > Number.EPSILON ) {

					// Compute inner and outer segment intersections
					const miterSide = strokeWidth2 / dot;
					tempV2_3.multiplyScalar( - miterSide );
					tempV2_4.subVectors( currentPoint, previousPoint );
					tempV2_5.copy( tempV2_4 ).setLength( miterSide ).add( tempV2_3 );
					innerPoint.copy( tempV2_5 ).negate();
					const miterLength2 = tempV2_5.length();
					const segmentLengthPrev = tempV2_4.length();
					tempV2_4.divideScalar( segmentLengthPrev );
					tempV2_6.subVectors( nextPoint, currentPoint );
					const segmentLengthNext = tempV2_6.length();
					tempV2_6.divideScalar( segmentLengthNext );
					// Check that previous and next segments doesn't overlap with the innerPoint of intersection
					if ( tempV2_4.dot( innerPoint ) < segmentLengthPrev && tempV2_6.dot( innerPoint ) < segmentLengthNext ) {

						innerSideModified = true;

					}

					outerPoint.copy( tempV2_5 ).add( currentPoint );
					innerPoint.add( currentPoint );

					isMiter = false;

					if ( innerSideModified ) {

						if ( joinIsOnLeftSide ) {

							nextPointR.copy( innerPoint );
							currentPointR.copy( innerPoint );

						} else {

							nextPointL.copy( innerPoint );
							currentPointL.copy( innerPoint );

						}

					} else {

						// The segment triangles are generated here if there was overlapping

						makeSegmentTriangles();

					}

					switch ( style.strokeLineJoin ) {

						case 'bevel':

							makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );

							break;

						case 'round':

							// Segment triangles

							createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );

							// Join triangles

							if ( joinIsOnLeftSide ) {

								makeCircularSector( currentPoint, currentPointL, nextPointL, u1, 0 );

							} else {

								makeCircularSector( currentPoint, nextPointR, currentPointR, u1, 1 );

							}

							break;

						case 'miter':
						case 'miter-clip':
						default:

							const miterFraction = ( strokeWidth2 * style.strokeMiterLimit ) / miterLength2;

							if ( miterFraction < 1 ) {

								// The join miter length exceeds the miter limit

								if ( style.strokeLineJoin !== 'miter-clip' ) {

									makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u1 );
									break;

								} else {

									// Segment triangles

									createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified );

									// Miter-clip join triangles

									if ( joinIsOnLeftSide ) {

										tempV2_6.subVectors( outerPoint, currentPointL ).multiplyScalar( miterFraction ).add( currentPointL );
										tempV2_7.subVectors( outerPoint, nextPointL ).multiplyScalar( miterFraction ).add( nextPointL );

										addVertex( currentPointL, u1, 0 );
										addVertex( tempV2_6, u1, 0 );
										addVertex( currentPoint, u1, 0.5 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( tempV2_6, u1, 0 );
										addVertex( tempV2_7, u1, 0 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( tempV2_7, u1, 0 );
										addVertex( nextPointL, u1, 0 );

									} else {

										tempV2_6.subVectors( outerPoint, currentPointR ).multiplyScalar( miterFraction ).add( currentPointR );
										tempV2_7.subVectors( outerPoint, nextPointR ).multiplyScalar( miterFraction ).add( nextPointR );

										addVertex( currentPointR, u1, 1 );
										addVertex( tempV2_6, u1, 1 );
										addVertex( currentPoint, u1, 0.5 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( tempV2_6, u1, 1 );
										addVertex( tempV2_7, u1, 1 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( tempV2_7, u1, 1 );
										addVertex( nextPointR, u1, 1 );

									}

								}

							} else {

								// Miter join segment triangles

								if ( innerSideModified ) {

									// Optimized segment + join triangles

									if ( joinIsOnLeftSide ) {

										addVertex( lastPointR, u0, 1 );
										addVertex( lastPointL, u0, 0 );
										addVertex( outerPoint, u1, 0 );

										addVertex( lastPointR, u0, 1 );
										addVertex( outerPoint, u1, 0 );
										addVertex( innerPoint, u1, 1 );

									} else {

										addVertex( lastPointR, u0, 1 );
										addVertex( lastPointL, u0, 0 );
										addVertex( outerPoint, u1, 1 );

										addVertex( lastPointL, u0, 0 );
										addVertex( innerPoint, u1, 0 );
										addVertex( outerPoint, u1, 1 );

									}


									if ( joinIsOnLeftSide ) {

										nextPointL.copy( outerPoint );

									} else {

										nextPointR.copy( outerPoint );

									}


								} else {

									// Add extra miter join triangles

									if ( joinIsOnLeftSide ) {

										addVertex( currentPointL, u1, 0 );
										addVertex( outerPoint, u1, 0 );
										addVertex( currentPoint, u1, 0.5 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( outerPoint, u1, 0 );
										addVertex( nextPointL, u1, 0 );

									} else {

										addVertex( currentPointR, u1, 1 );
										addVertex( outerPoint, u1, 1 );
										addVertex( currentPoint, u1, 0.5 );

										addVertex( currentPoint, u1, 0.5 );
										addVertex( outerPoint, u1, 1 );
										addVertex( nextPointR, u1, 1 );

									}

								}

								isMiter = true;

							}

							break;

					}

				} else {

					// The segment triangles are generated here when two consecutive points are collinear

					makeSegmentTriangles();

				}

			} else {

				// The segment triangles are generated here if it is the ending segment

				makeSegmentTriangles();

			}

			if ( ! isClosed && iPoint === numPoints - 1 ) {

				// Start line endcap
				addCapGeometry( points[ 0 ], point0L, point0R, joinIsOnLeftSide, true, u0 );

			}

			// Increment loop variables

			u0 = u1;

			previousPoint = currentPoint;

			lastPointL.copy( nextPointL );
			lastPointR.copy( nextPointR );

		}

		if ( ! isClosed ) {

			// Ending line endcap
			addCapGeometry( currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1 );

		} else if ( innerSideModified && vertices ) {

			// Modify path first segment vertices to adjust to the segments inner and outer intersections

			let lastOuter = outerPoint;
			let lastInner = innerPoint;

			if ( initialJoinIsOnLeftSide !== joinIsOnLeftSide ) {

				lastOuter = innerPoint;
				lastInner = outerPoint;

			}

			if ( joinIsOnLeftSide ) {

				if ( isMiter || initialJoinIsOnLeftSide ) {

					lastInner.toArray( vertices, 0 * 3 );
					lastInner.toArray( vertices, 3 * 3 );

					if ( isMiter ) {

						lastOuter.toArray( vertices, 1 * 3 );

					}

				}

			} else {

				if ( isMiter || ! initialJoinIsOnLeftSide ) {

					lastInner.toArray( vertices, 1 * 3 );
					lastInner.toArray( vertices, 3 * 3 );

					if ( isMiter ) {

						lastOuter.toArray( vertices, 0 * 3 );

					}

				}

			}

		}

		return numVertices;

		// -- End of algorithm

		// -- Functions

		function getNormal( p1, p2, result ) {

			result.subVectors( p2, p1 );
			return result.set( - result.y, result.x ).normalize();

		}

		function addVertex( position, u, v ) {

			if ( vertices ) {

				vertices[ currentCoordinate ] = position.x;
				vertices[ currentCoordinate + 1 ] = position.y;
				vertices[ currentCoordinate + 2 ] = 0;

				if ( normals ) {

					normals[ currentCoordinate ] = 0;
					normals[ currentCoordinate + 1 ] = 0;
					normals[ currentCoordinate + 2 ] = 1;

				}

				currentCoordinate += 3;

				if ( uvs ) {

					uvs[ currentCoordinateUV ] = u;
					uvs[ currentCoordinateUV + 1 ] = v;

					currentCoordinateUV += 2;

				}

			}

			numVertices += 3;

		}

		function makeCircularSector( center, p1, p2, u, v ) {

			// param p1, p2: Points in the circle arc.
			// p1 and p2 are in clockwise direction.

			tempV2_1.copy( p1 ).sub( center ).normalize();
			tempV2_2.copy( p2 ).sub( center ).normalize();

			let angle = Math.PI;
			const dot = tempV2_1.dot( tempV2_2 );
			if ( Math.abs( dot ) < 1 ) angle = Math.abs( Math.acos( dot ) );

			angle /= arcDivisions;

			tempV2_3.copy( p1 );

			for ( let i = 0, il = arcDivisions - 1; i < il; i ++ ) {

				tempV2_4.copy( tempV2_3 ).rotateAround( center, angle );

				addVertex( tempV2_3, u, v );
				addVertex( tempV2_4, u, v );
				addVertex( center, u, 0.5 );

				tempV2_3.copy( tempV2_4 );

			}

			addVertex( tempV2_4, u, v );
			addVertex( p2, u, v );
			addVertex( center, u, 0.5 );

		}

		function makeSegmentTriangles() {

			addVertex( lastPointR, u0, 1 );
			addVertex( lastPointL, u0, 0 );
			addVertex( currentPointL, u1, 0 );

			addVertex( lastPointR, u0, 1 );
			addVertex( currentPointL, u1, 1 );
			addVertex( currentPointR, u1, 0 );

		}

		function makeSegmentWithBevelJoin( joinIsOnLeftSide, innerSideModified, u ) {

			if ( innerSideModified ) {

				// Optimized segment + bevel triangles

				if ( joinIsOnLeftSide ) {

					// Path segments triangles

					addVertex( lastPointR, u0, 1 );
					addVertex( lastPointL, u0, 0 );
					addVertex( currentPointL, u1, 0 );

					addVertex( lastPointR, u0, 1 );
					addVertex( currentPointL, u1, 0 );
					addVertex( innerPoint, u1, 1 );

					// Bevel join triangle

					addVertex( currentPointL, u, 0 );
					addVertex( nextPointL, u, 0 );
					addVertex( innerPoint, u, 0.5 );

				} else {

					// Path segments triangles

					addVertex( lastPointR, u0, 1 );
					addVertex( lastPointL, u0, 0 );
					addVertex( currentPointR, u1, 1 );

					addVertex( lastPointL, u0, 0 );
					addVertex( innerPoint, u1, 0 );
					addVertex( currentPointR, u1, 1 );

					// Bevel join triangle

					addVertex( currentPointR, u, 1 );
					addVertex( nextPointR, u, 0 );
					addVertex( innerPoint, u, 0.5 );

				}

			} else {

				// Bevel join triangle. The segment triangles are done in the main loop

				if ( joinIsOnLeftSide ) {

					addVertex( currentPointL, u, 0 );
					addVertex( nextPointL, u, 0 );
					addVertex( currentPoint, u, 0.5 );

				} else {

					addVertex( currentPointR, u, 1 );
					addVertex( nextPointR, u, 0 );
					addVertex( currentPoint, u, 0.5 );

				}

			}

		}

		function createSegmentTrianglesWithMiddleSection( joinIsOnLeftSide, innerSideModified ) {

			if ( innerSideModified ) {

				if ( joinIsOnLeftSide ) {

					addVertex( lastPointR, u0, 1 );
					addVertex( lastPointL, u0, 0 );
					addVertex( currentPointL, u1, 0 );

					addVertex( lastPointR, u0, 1 );
					addVertex( currentPointL, u1, 0 );
					addVertex( innerPoint, u1, 1 );

					addVertex( currentPointL, u0, 0 );
					addVertex( currentPoint, u1, 0.5 );
					addVertex( innerPoint, u1, 1 );

					addVertex( currentPoint, u1, 0.5 );
					addVertex( nextPointL, u0, 0 );
					addVertex( innerPoint, u1, 1 );

				} else {

					addVertex( lastPointR, u0, 1 );
					addVertex( lastPointL, u0, 0 );
					addVertex( currentPointR, u1, 1 );

					addVertex( lastPointL, u0, 0 );
					addVertex( innerPoint, u1, 0 );
					addVertex( currentPointR, u1, 1 );

					addVertex( currentPointR, u0, 1 );
					addVertex( innerPoint, u1, 0 );
					addVertex( currentPoint, u1, 0.5 );

					addVertex( currentPoint, u1, 0.5 );
					addVertex( innerPoint, u1, 0 );
					addVertex( nextPointR, u0, 1 );

				}

			}

		}

		function addCapGeometry( center, p1, p2, joinIsOnLeftSide, start, u ) {

			// param center: End point of the path
			// param p1, p2: Left and right cap points

			switch ( style.strokeLineCap ) {

				case 'round':

					if ( start ) {

						makeCircularSector( center, p2, p1, u, 0.5 );

					} else {

						makeCircularSector( center, p1, p2, u, 0.5 );

					}

					break;

				case 'square':

					if ( start ) {

						tempV2_1.subVectors( p1, center );
						tempV2_2.set( tempV2_1.y, - tempV2_1.x );

						tempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );
						tempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );

						// Modify already existing vertices
						if ( joinIsOnLeftSide ) {

							tempV2_3.toArray( vertices, 1 * 3 );
							tempV2_4.toArray( vertices, 0 * 3 );
							tempV2_4.toArray( vertices, 3 * 3 );

						} else {

							tempV2_3.toArray( vertices, 1 * 3 );
							tempV2_3.toArray( vertices, 3 * 3 );
							tempV2_4.toArray( vertices, 0 * 3 );

						}

					} else {

						tempV2_1.subVectors( p2, center );
						tempV2_2.set( tempV2_1.y, - tempV2_1.x );

						tempV2_3.addVectors( tempV2_1, tempV2_2 ).add( center );
						tempV2_4.subVectors( tempV2_2, tempV2_1 ).add( center );

						const vl = vertices.length;

						// Modify already existing vertices
						if ( joinIsOnLeftSide ) {

							tempV2_3.toArray( vertices, vl - 1 * 3 );
							tempV2_4.toArray( vertices, vl - 2 * 3 );
							tempV2_4.toArray( vertices, vl - 4 * 3 );

						} else {

							tempV2_3.toArray( vertices, vl - 2 * 3 );
							tempV2_4.toArray( vertices, vl - 1 * 3 );
							tempV2_4.toArray( vertices, vl - 4 * 3 );

						}

					}

					break;

			}

		}

		function removeDuplicatedPoints( points ) {

			// Creates a new array if necessary with duplicated points removed.
			// This does not remove duplicated initial and ending points of a closed path.

			let dupPoints = false;
			for ( let i = 1, n = points.length - 1; i < n; i ++ ) {

				if ( points[ i ].distanceTo( points[ i + 1 ] ) < minDistance ) {

					dupPoints = true;
					break;

				}

			}

			if ( ! dupPoints ) return points;

			const newPoints = [];
			newPoints.push( points[ 0 ] );

			for ( let i = 1, n = points.length - 1; i < n; i ++ ) {

				if ( points[ i ].distanceTo( points[ i + 1 ] ) >= minDistance ) {

					newPoints.push( points[ i ] );

				}

			}

			newPoints.push( points[ points.length - 1 ] );

			return newPoints;

		}

	}


}

//

const _vector$1 = new Vector3();
const _viewMatrix = new Matrix4();
const _viewProjectionMatrix = new Matrix4();
const _a = new Vector3();
const _b = new Vector3();

class CSS2DRenderer {

	constructor( parameters = {} ) {

		const _this = this;

		let _width, _height;
		let _widthHalf, _heightHalf;

		const cache = {
			objects: new WeakMap()
		};

		const domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );

		domElement.style.overflow = 'hidden';

		this.domElement = domElement;

		this.getSize = function () {

			return {
				width: _width,
				height: _height
			};

		};

		this.render = function ( scene, camera ) {

			if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();
			if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

			_viewMatrix.copy( camera.matrixWorldInverse );
			_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );

			renderObject( scene, scene, camera );
			zOrder( scene );

		};

		this.setSize = function ( width, height ) {

			_width = width;
			_height = height;

			_widthHalf = _width / 2;
			_heightHalf = _height / 2;

			domElement.style.width = width + 'px';
			domElement.style.height = height + 'px';

		};

		function renderObject( object, scene, camera ) {

			if ( object.isCSS2DObject ) {

				_vector$1.setFromMatrixPosition( object.matrixWorld );
				_vector$1.applyMatrix4( _viewProjectionMatrix );

				const visible = ( object.visible === true ) && ( _vector$1.z >= - 1 && _vector$1.z <= 1 ) && ( object.layers.test( camera.layers ) === true );
				object.element.style.display = ( visible === true ) ? '' : 'none';

				if ( visible === true ) {

					object.onBeforeRender( _this, scene, camera );

					const element = object.element;

					element.style.transform = 'translate(' + ( - 100 * object.center.x ) + '%,' + ( - 100 * object.center.y ) + '%)' + 'translate(' + ( _vector$1.x * _widthHalf + _widthHalf ) + 'px,' + ( - _vector$1.y * _heightHalf + _heightHalf ) + 'px)';

					if ( element.parentNode !== domElement ) {

						domElement.appendChild( element );

					}

					object.onAfterRender( _this, scene, camera );

				}

				const objectData = {
					distanceToCameraSquared: getDistanceToSquared( camera, object )
				};

				cache.objects.set( object, objectData );

			}

			for ( let i = 0, l = object.children.length; i < l; i ++ ) {

				renderObject( object.children[ i ], scene, camera );

			}

		}

		function getDistanceToSquared( object1, object2 ) {

			_a.setFromMatrixPosition( object1.matrixWorld );
			_b.setFromMatrixPosition( object2.matrixWorld );

			return _a.distanceToSquared( _b );

		}

		function filterAndFlatten( scene ) {

			const result = [];

			scene.traverse( function ( object ) {

				if ( object.isCSS2DObject ) result.push( object );

			} );

			return result;

		}

		function zOrder( scene ) {

			const sorted = filterAndFlatten( scene ).sort( function ( a, b ) {

				if ( a.renderOrder !== b.renderOrder ) {

					return b.renderOrder - a.renderOrder;

				}

				const distanceA = cache.objects.get( a ).distanceToCameraSquared;
				const distanceB = cache.objects.get( b ).distanceToCameraSquared;

				return distanceA - distanceB;

			} );

			const zMax = sorted.length;

			for ( let i = 0, l = sorted.length; i < l; i ++ ) {

				sorted[ i ].element.style.zIndex = zMax - i;

			}

		}

	}

}

// OrbitControls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one-finger move
//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

const _changeEvent = { type: 'change' };
const _startEvent = { type: 'start' };
const _endEvent = { type: 'end' };
const _ray$1 = new Ray();
const _plane = new Plane();
const TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );

class OrbitControls extends EventDispatcher {

	constructor( object, domElement ) {

		super();

		this.object = object;
		this.domElement = domElement;
		this.domElement.style.touchAction = 'none'; // disable touch scroll

		// Set to false to disable this control
		this.enabled = true;

		// "target" sets the location of focus, where the object orbits around
		this.target = new Vector3();

		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.05;

		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.panSpeed = 1.0;
		this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push
		this.zoomToCursor = false;

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

		// The four arrow keys
		this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };

		// Mouse buttons
		this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

		// Touch fingers
		this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		// the target DOM element for key events
		this._domElementKeyEvents = null;

		//
		// public methods
		//

		this.getPolarAngle = function () {

			return spherical.phi;

		};

		this.getAzimuthalAngle = function () {

			return spherical.theta;

		};

		this.getDistance = function () {

			return this.object.position.distanceTo( this.target );

		};

		this.listenToKeyEvents = function ( domElement ) {

			domElement.addEventListener( 'keydown', onKeyDown );
			this._domElementKeyEvents = domElement;

		};

		this.stopListenToKeyEvents = function () {

			this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );
			this._domElementKeyEvents = null;

		};

		this.saveState = function () {

			scope.target0.copy( scope.target );
			scope.position0.copy( scope.object.position );
			scope.zoom0 = scope.object.zoom;

		};

		this.reset = function () {

			scope.target.copy( scope.target0 );
			scope.object.position.copy( scope.position0 );
			scope.object.zoom = scope.zoom0;

			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( _changeEvent );

			scope.update();

			state = STATE.NONE;

		};

		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function () {

			const offset = new Vector3();

			// so camera.up is the orbit axis
			const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );
			const quatInverse = quat.clone().invert();

			const lastPosition = new Vector3();
			const lastQuaternion = new Quaternion();
			const lastTargetPosition = new Vector3();

			const twoPI = 2 * Math.PI;

			return function update( deltaTime = null ) {

				const position = scope.object.position;

				offset.copy( position ).sub( scope.target );

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );

				// angle from z-axis around y-axis
				spherical.setFromVector3( offset );

				if ( scope.autoRotate && state === STATE.NONE ) {

					rotateLeft( getAutoRotationAngle( deltaTime ) );

				}

				if ( scope.enableDamping ) {

					spherical.theta += sphericalDelta.theta * scope.dampingFactor;
					spherical.phi += sphericalDelta.phi * scope.dampingFactor;

				} else {

					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;

				}

				// restrict theta to be between desired limits

				let min = scope.minAzimuthAngle;
				let max = scope.maxAzimuthAngle;

				if ( isFinite( min ) && isFinite( max ) ) {

					if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;

					if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;

					if ( min <= max ) {

						spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );

					} else {

						spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?
							Math.max( min, spherical.theta ) :
							Math.min( max, spherical.theta );

					}

				}

				// restrict phi to be between desired limits
				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

				spherical.makeSafe();


				// move target to panned location

				if ( scope.enableDamping === true ) {

					scope.target.addScaledVector( panOffset, scope.dampingFactor );

				} else {

					scope.target.add( panOffset );

				}

				// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera
				// we adjust zoom later in these cases
				if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {

					spherical.radius = clampDistance( spherical.radius );

				} else {

					spherical.radius = clampDistance( spherical.radius * scale );

				}


				offset.setFromSpherical( spherical );

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );

				position.copy( scope.target ).add( offset );

				scope.object.lookAt( scope.target );

				if ( scope.enableDamping === true ) {

					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
					sphericalDelta.phi *= ( 1 - scope.dampingFactor );

					panOffset.multiplyScalar( 1 - scope.dampingFactor );

				} else {

					sphericalDelta.set( 0, 0, 0 );

					panOffset.set( 0, 0, 0 );

				}

				// adjust camera position
				let zoomChanged = false;
				if ( scope.zoomToCursor && performCursorZoom ) {

					let newRadius = null;
					if ( scope.object.isPerspectiveCamera ) {

						// move the camera down the pointer ray
						// this method avoids floating point error
						const prevRadius = offset.length();
						newRadius = clampDistance( prevRadius * scale );

						const radiusDelta = prevRadius - newRadius;
						scope.object.position.addScaledVector( dollyDirection, radiusDelta );
						scope.object.updateMatrixWorld();

					} else if ( scope.object.isOrthographicCamera ) {

						// adjust the ortho camera position based on zoom changes
						const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );
						mouseBefore.unproject( scope.object );

						scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );
						scope.object.updateProjectionMatrix();
						zoomChanged = true;

						const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );
						mouseAfter.unproject( scope.object );

						scope.object.position.sub( mouseAfter ).add( mouseBefore );
						scope.object.updateMatrixWorld();

						newRadius = offset.length();

					} else {

						console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );
						scope.zoomToCursor = false;

					}

					// handle the placement of the target
					if ( newRadius !== null ) {

						if ( this.screenSpacePanning ) {

							// position the orbit target in front of the new camera position
							scope.target.set( 0, 0, - 1 )
								.transformDirection( scope.object.matrix )
								.multiplyScalar( newRadius )
								.add( scope.object.position );

						} else {

							// get the ray and translation plane to compute target
							_ray$1.origin.copy( scope.object.position );
							_ray$1.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );

							// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid
							// extremely large values
							if ( Math.abs( scope.object.up.dot( _ray$1.direction ) ) < TILT_LIMIT ) {

								object.lookAt( scope.target );

							} else {

								_plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );
								_ray$1.intersectPlane( _plane, scope.target );

							}

						}

					}

				} else if ( scope.object.isOrthographicCamera ) {

					scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );
					scope.object.updateProjectionMatrix();
					zoomChanged = true;

				}

				scale = 1;
				performCursorZoom = false;

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if ( zoomChanged ||
					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||
					lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {

					scope.dispatchEvent( _changeEvent );

					lastPosition.copy( scope.object.position );
					lastQuaternion.copy( scope.object.quaternion );
					lastTargetPosition.copy( scope.target );

					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

		this.dispose = function () {

			scope.domElement.removeEventListener( 'contextmenu', onContextMenu );

			scope.domElement.removeEventListener( 'pointerdown', onPointerDown );
			scope.domElement.removeEventListener( 'pointercancel', onPointerUp );
			scope.domElement.removeEventListener( 'wheel', onMouseWheel );

			scope.domElement.removeEventListener( 'pointermove', onPointerMove );
			scope.domElement.removeEventListener( 'pointerup', onPointerUp );


			if ( scope._domElementKeyEvents !== null ) {

				scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );
				scope._domElementKeyEvents = null;

			}

			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

		};

		//
		// internals
		//

		const scope = this;

		const STATE = {
			NONE: - 1,
			ROTATE: 0,
			DOLLY: 1,
			PAN: 2,
			TOUCH_ROTATE: 3,
			TOUCH_PAN: 4,
			TOUCH_DOLLY_PAN: 5,
			TOUCH_DOLLY_ROTATE: 6
		};

		let state = STATE.NONE;

		const EPS = 0.000001;

		// current position in spherical coordinates
		const spherical = new Spherical();
		const sphericalDelta = new Spherical();

		let scale = 1;
		const panOffset = new Vector3();

		const rotateStart = new Vector2();
		const rotateEnd = new Vector2();
		const rotateDelta = new Vector2();

		const panStart = new Vector2();
		const panEnd = new Vector2();
		const panDelta = new Vector2();

		const dollyStart = new Vector2();
		const dollyEnd = new Vector2();
		const dollyDelta = new Vector2();

		const dollyDirection = new Vector3();
		const mouse = new Vector2();
		let performCursorZoom = false;

		const pointers = [];
		const pointerPositions = {};

		function getAutoRotationAngle( deltaTime ) {

			if ( deltaTime !== null ) {

				return ( 2 * Math.PI / 60 * scope.autoRotateSpeed ) * deltaTime;

			} else {

				return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

			}

		}

		function getZoomScale() {

			return Math.pow( 0.95, scope.zoomSpeed );

		}

		function rotateLeft( angle ) {

			sphericalDelta.theta -= angle;

		}

		function rotateUp( angle ) {

			sphericalDelta.phi -= angle;

		}

		const panLeft = function () {

			const v = new Vector3();

			return function panLeft( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
				v.multiplyScalar( - distance );

				panOffset.add( v );

			};

		}();

		const panUp = function () {

			const v = new Vector3();

			return function panUp( distance, objectMatrix ) {

				if ( scope.screenSpacePanning === true ) {

					v.setFromMatrixColumn( objectMatrix, 1 );

				} else {

					v.setFromMatrixColumn( objectMatrix, 0 );
					v.crossVectors( scope.object.up, v );

				}

				v.multiplyScalar( distance );

				panOffset.add( v );

			};

		}();

		// deltaX and deltaY are in pixels; right and down are positive
		const pan = function () {

			const offset = new Vector3();

			return function pan( deltaX, deltaY ) {

				const element = scope.domElement;

				if ( scope.object.isPerspectiveCamera ) {

					// perspective
					const position = scope.object.position;
					offset.copy( position ).sub( scope.target );
					let targetDistance = offset.length();

					// half of the fov is center to top of screen
					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

					// we use only clientHeight here so aspect ratio does not distort speed
					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

				} else if ( scope.object.isOrthographicCamera ) {

					// orthographic
					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

				} else {

					// camera neither orthographic nor perspective
					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
					scope.enablePan = false;

				}

			};

		}();

		function dollyOut( dollyScale ) {

			if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {

				scale /= dollyScale;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		function dollyIn( dollyScale ) {

			if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {

				scale *= dollyScale;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		function updateMouseParameters( event ) {

			if ( ! scope.zoomToCursor ) {

				return;

			}

			performCursorZoom = true;

			const rect = scope.domElement.getBoundingClientRect();
			const x = event.clientX - rect.left;
			const y = event.clientY - rect.top;
			const w = rect.width;
			const h = rect.height;

			mouse.x = ( x / w ) * 2 - 1;
			mouse.y = - ( y / h ) * 2 + 1;

			dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( scope.object ).sub( scope.object.position ).normalize();

		}

		function clampDistance( dist ) {

			return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );

		}

		//
		// event callbacks - update the object state
		//

		function handleMouseDownRotate( event ) {

			rotateStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownDolly( event ) {

			updateMouseParameters( event );
			dollyStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownPan( event ) {

			panStart.set( event.clientX, event.clientY );

		}

		function handleMouseMoveRotate( event ) {

			rotateEnd.set( event.clientX, event.clientY );

			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

			const element = scope.domElement;

			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleMouseMoveDolly( event ) {

			dollyEnd.set( event.clientX, event.clientY );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyOut( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyIn( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleMouseMovePan( event ) {

			panEnd.set( event.clientX, event.clientY );

			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleMouseWheel( event ) {

			updateMouseParameters( event );

			if ( event.deltaY < 0 ) {

				dollyIn( getZoomScale() );

			} else if ( event.deltaY > 0 ) {

				dollyOut( getZoomScale() );

			}

			scope.update();

		}

		function handleKeyDown( event ) {

			let needsUpdate = false;

			switch ( event.code ) {

				case scope.keys.UP:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

					} else {

						pan( 0, scope.keyPanSpeed );

					}

					needsUpdate = true;
					break;

				case scope.keys.BOTTOM:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

					} else {

						pan( 0, - scope.keyPanSpeed );

					}

					needsUpdate = true;
					break;

				case scope.keys.LEFT:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

					} else {

						pan( scope.keyPanSpeed, 0 );

					}

					needsUpdate = true;
					break;

				case scope.keys.RIGHT:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

					} else {

						pan( - scope.keyPanSpeed, 0 );

					}

					needsUpdate = true;
					break;

			}

			if ( needsUpdate ) {

				// prevent the browser from scrolling on cursor keys
				event.preventDefault();

				scope.update();

			}


		}

		function handleTouchStartRotate() {

			if ( pointers.length === 1 ) {

				rotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

			} else {

				const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
				const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

				rotateStart.set( x, y );

			}

		}

		function handleTouchStartPan() {

			if ( pointers.length === 1 ) {

				panStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

			} else {

				const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
				const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

				panStart.set( x, y );

			}

		}

		function handleTouchStartDolly() {

			const dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;
			const dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;

			const distance = Math.sqrt( dx * dx + dy * dy );

			dollyStart.set( 0, distance );

		}

		function handleTouchStartDollyPan() {

			if ( scope.enableZoom ) handleTouchStartDolly();

			if ( scope.enablePan ) handleTouchStartPan();

		}

		function handleTouchStartDollyRotate() {

			if ( scope.enableZoom ) handleTouchStartDolly();

			if ( scope.enableRotate ) handleTouchStartRotate();

		}

		function handleTouchMoveRotate( event ) {

			if ( pointers.length == 1 ) {

				rotateEnd.set( event.pageX, event.pageY );

			} else {

				const position = getSecondPointerPosition( event );

				const x = 0.5 * ( event.pageX + position.x );
				const y = 0.5 * ( event.pageY + position.y );

				rotateEnd.set( x, y );

			}

			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

			const element = scope.domElement;

			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

			rotateStart.copy( rotateEnd );

		}

		function handleTouchMovePan( event ) {

			if ( pointers.length === 1 ) {

				panEnd.set( event.pageX, event.pageY );

			} else {

				const position = getSecondPointerPosition( event );

				const x = 0.5 * ( event.pageX + position.x );
				const y = 0.5 * ( event.pageY + position.y );

				panEnd.set( x, y );

			}

			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

		}

		function handleTouchMoveDolly( event ) {

			const position = getSecondPointerPosition( event );

			const dx = event.pageX - position.x;
			const dy = event.pageY - position.y;

			const distance = Math.sqrt( dx * dx + dy * dy );

			dollyEnd.set( 0, distance );

			dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );

			dollyOut( dollyDelta.y );

			dollyStart.copy( dollyEnd );

		}

		function handleTouchMoveDollyPan( event ) {

			if ( scope.enableZoom ) handleTouchMoveDolly( event );

			if ( scope.enablePan ) handleTouchMovePan( event );

		}

		function handleTouchMoveDollyRotate( event ) {

			if ( scope.enableZoom ) handleTouchMoveDolly( event );

			if ( scope.enableRotate ) handleTouchMoveRotate( event );

		}

		//
		// event handlers - FSM: listen for events and reset state
		//

		function onPointerDown( event ) {

			if ( scope.enabled === false ) return;

			if ( pointers.length === 0 ) {

				scope.domElement.setPointerCapture( event.pointerId );

				scope.domElement.addEventListener( 'pointermove', onPointerMove );
				scope.domElement.addEventListener( 'pointerup', onPointerUp );

			}

			//

			addPointer( event );

			if ( event.pointerType === 'touch' ) {

				onTouchStart( event );

			} else {

				onMouseDown( event );

			}

		}

		function onPointerMove( event ) {

			if ( scope.enabled === false ) return;

			if ( event.pointerType === 'touch' ) {

				onTouchMove( event );

			} else {

				onMouseMove( event );

			}

		}

		function onPointerUp( event ) {

			removePointer( event );

			if ( pointers.length === 0 ) {

				scope.domElement.releasePointerCapture( event.pointerId );

				scope.domElement.removeEventListener( 'pointermove', onPointerMove );
				scope.domElement.removeEventListener( 'pointerup', onPointerUp );

			}

			scope.dispatchEvent( _endEvent );

			state = STATE.NONE;

		}

		function onMouseDown( event ) {

			let mouseAction;

			switch ( event.button ) {

				case 0:

					mouseAction = scope.mouseButtons.LEFT;
					break;

				case 1:

					mouseAction = scope.mouseButtons.MIDDLE;
					break;

				case 2:

					mouseAction = scope.mouseButtons.RIGHT;
					break;

				default:

					mouseAction = - 1;

			}

			switch ( mouseAction ) {

				case MOUSE.DOLLY:

					if ( scope.enableZoom === false ) return;

					handleMouseDownDolly( event );

					state = STATE.DOLLY;

					break;

				case MOUSE.ROTATE:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						if ( scope.enablePan === false ) return;

						handleMouseDownPan( event );

						state = STATE.PAN;

					} else {

						if ( scope.enableRotate === false ) return;

						handleMouseDownRotate( event );

						state = STATE.ROTATE;

					}

					break;

				case MOUSE.PAN:

					if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

						if ( scope.enableRotate === false ) return;

						handleMouseDownRotate( event );

						state = STATE.ROTATE;

					} else {

						if ( scope.enablePan === false ) return;

						handleMouseDownPan( event );

						state = STATE.PAN;

					}

					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) {

				scope.dispatchEvent( _startEvent );

			}

		}

		function onMouseMove( event ) {

			switch ( state ) {

				case STATE.ROTATE:

					if ( scope.enableRotate === false ) return;

					handleMouseMoveRotate( event );

					break;

				case STATE.DOLLY:

					if ( scope.enableZoom === false ) return;

					handleMouseMoveDolly( event );

					break;

				case STATE.PAN:

					if ( scope.enablePan === false ) return;

					handleMouseMovePan( event );

					break;

			}

		}

		function onMouseWheel( event ) {

			if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;

			event.preventDefault();

			scope.dispatchEvent( _startEvent );

			handleMouseWheel( event );

			scope.dispatchEvent( _endEvent );

		}

		function onKeyDown( event ) {

			if ( scope.enabled === false || scope.enablePan === false ) return;

			handleKeyDown( event );

		}

		function onTouchStart( event ) {

			trackPointer( event );

			switch ( pointers.length ) {

				case 1:

					switch ( scope.touches.ONE ) {

						case TOUCH.ROTATE:

							if ( scope.enableRotate === false ) return;

							handleTouchStartRotate();

							state = STATE.TOUCH_ROTATE;

							break;

						case TOUCH.PAN:

							if ( scope.enablePan === false ) return;

							handleTouchStartPan();

							state = STATE.TOUCH_PAN;

							break;

						default:

							state = STATE.NONE;

					}

					break;

				case 2:

					switch ( scope.touches.TWO ) {

						case TOUCH.DOLLY_PAN:

							if ( scope.enableZoom === false && scope.enablePan === false ) return;

							handleTouchStartDollyPan();

							state = STATE.TOUCH_DOLLY_PAN;

							break;

						case TOUCH.DOLLY_ROTATE:

							if ( scope.enableZoom === false && scope.enableRotate === false ) return;

							handleTouchStartDollyRotate();

							state = STATE.TOUCH_DOLLY_ROTATE;

							break;

						default:

							state = STATE.NONE;

					}

					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) {

				scope.dispatchEvent( _startEvent );

			}

		}

		function onTouchMove( event ) {

			trackPointer( event );

			switch ( state ) {

				case STATE.TOUCH_ROTATE:

					if ( scope.enableRotate === false ) return;

					handleTouchMoveRotate( event );

					scope.update();

					break;

				case STATE.TOUCH_PAN:

					if ( scope.enablePan === false ) return;

					handleTouchMovePan( event );

					scope.update();

					break;

				case STATE.TOUCH_DOLLY_PAN:

					if ( scope.enableZoom === false && scope.enablePan === false ) return;

					handleTouchMoveDollyPan( event );

					scope.update();

					break;

				case STATE.TOUCH_DOLLY_ROTATE:

					if ( scope.enableZoom === false && scope.enableRotate === false ) return;

					handleTouchMoveDollyRotate( event );

					scope.update();

					break;

				default:

					state = STATE.NONE;

			}

		}

		function onContextMenu( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

		}

		function addPointer( event ) {

			pointers.push( event );

		}

		function removePointer( event ) {

			delete pointerPositions[ event.pointerId ];

			for ( let i = 0; i < pointers.length; i ++ ) {

				if ( pointers[ i ].pointerId == event.pointerId ) {

					pointers.splice( i, 1 );
					return;

				}

			}

		}

		function trackPointer( event ) {

			let position = pointerPositions[ event.pointerId ];

			if ( position === undefined ) {

				position = new Vector2();
				pointerPositions[ event.pointerId ] = position;

			}

			position.set( event.pageX, event.pageY );

		}

		function getSecondPointerPosition( event ) {

			const pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];

			return pointerPositions[ pointer.pointerId ];

		}

		//

		scope.domElement.addEventListener( 'contextmenu', onContextMenu );

		scope.domElement.addEventListener( 'pointerdown', onPointerDown );
		scope.domElement.addEventListener( 'pointercancel', onPointerUp );
		scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );

		// force an update at start

		this.update();

	}

}

/**
 * Text = 3D Text
 *
 * parameters = {
 *  font: <THREE.Font>, // font
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
 *  bevelOffset: <float> // how far from text outline does bevel start
 * }
 */

class TextGeometry extends ExtrudeGeometry {

	constructor( text, parameters = {} ) {

		const font = parameters.font;

		if ( font === undefined ) {

			super(); // generate default extrude geometry

		} else {

			const shapes = font.generateShapes( text, parameters.size );

			// translate parameters to ExtrudeGeometry API

			parameters.depth = parameters.height !== undefined ? parameters.height : 50;

			// defaults

			if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
			if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
			if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

			super( shapes, parameters );

		}

		this.type = 'TextGeometry';

	}

}

const _box$1 = new Box3();
const _vector = new Vector3();

class LineSegmentsGeometry extends InstancedBufferGeometry {

	constructor() {

		super();

		this.isLineSegmentsGeometry = true;

		this.type = 'LineSegmentsGeometry';

		const positions = [ - 1, 2, 0, 1, 2, 0, - 1, 1, 0, 1, 1, 0, - 1, 0, 0, 1, 0, 0, - 1, - 1, 0, 1, - 1, 0 ];
		const uvs = [ - 1, 2, 1, 2, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 2, 1, - 2 ];
		const index = [ 0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5 ];

		this.setIndex( index );
		this.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	applyMatrix4( matrix ) {

		const start = this.attributes.instanceStart;
		const end = this.attributes.instanceEnd;

		if ( start !== undefined ) {

			start.applyMatrix4( matrix );

			end.applyMatrix4( matrix );

			start.needsUpdate = true;

		}

		if ( this.boundingBox !== null ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere !== null ) {

			this.computeBoundingSphere();

		}

		return this;

	}

	setPositions( array ) {

		let lineSegments;

		if ( array instanceof Float32Array ) {

			lineSegments = array;

		} else if ( Array.isArray( array ) ) {

			lineSegments = new Float32Array( array );

		}

		const instanceBuffer = new InstancedInterleavedBuffer( lineSegments, 6, 1 ); // xyz, xyz

		this.setAttribute( 'instanceStart', new InterleavedBufferAttribute( instanceBuffer, 3, 0 ) ); // xyz
		this.setAttribute( 'instanceEnd', new InterleavedBufferAttribute( instanceBuffer, 3, 3 ) ); // xyz

		//

		this.computeBoundingBox();
		this.computeBoundingSphere();

		return this;

	}

	setColors( array ) {

		let colors;

		if ( array instanceof Float32Array ) {

			colors = array;

		} else if ( Array.isArray( array ) ) {

			colors = new Float32Array( array );

		}

		const instanceColorBuffer = new InstancedInterleavedBuffer( colors, 6, 1 ); // rgb, rgb

		this.setAttribute( 'instanceColorStart', new InterleavedBufferAttribute( instanceColorBuffer, 3, 0 ) ); // rgb
		this.setAttribute( 'instanceColorEnd', new InterleavedBufferAttribute( instanceColorBuffer, 3, 3 ) ); // rgb

		return this;

	}

	fromWireframeGeometry( geometry ) {

		this.setPositions( geometry.attributes.position.array );

		return this;

	}

	fromEdgesGeometry( geometry ) {

		this.setPositions( geometry.attributes.position.array );

		return this;

	}

	fromMesh( mesh ) {

		this.fromWireframeGeometry( new WireframeGeometry( mesh.geometry ) );

		// set colors, maybe

		return this;

	}

	fromLineSegments( lineSegments ) {

		const geometry = lineSegments.geometry;

		this.setPositions( geometry.attributes.position.array ); // assumes non-indexed

		// set colors, maybe

		return this;

	}

	computeBoundingBox() {

		if ( this.boundingBox === null ) {

			this.boundingBox = new Box3();

		}

		const start = this.attributes.instanceStart;
		const end = this.attributes.instanceEnd;

		if ( start !== undefined && end !== undefined ) {

			this.boundingBox.setFromBufferAttribute( start );

			_box$1.setFromBufferAttribute( end );

			this.boundingBox.union( _box$1 );

		}

	}

	computeBoundingSphere() {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new Sphere();

		}

		if ( this.boundingBox === null ) {

			this.computeBoundingBox();

		}

		const start = this.attributes.instanceStart;
		const end = this.attributes.instanceEnd;

		if ( start !== undefined && end !== undefined ) {

			const center = this.boundingSphere.center;

			this.boundingBox.getCenter( center );

			let maxRadiusSq = 0;

			for ( let i = 0, il = start.count; i < il; i ++ ) {

				_vector.fromBufferAttribute( start, i );
				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );

				_vector.fromBufferAttribute( end, i );
				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );

			}

			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

			if ( isNaN( this.boundingSphere.radius ) ) {

				console.error( 'THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this );

			}

		}

	}

	toJSON() {

		// todo

	}

	applyMatrix( matrix ) {

		console.warn( 'THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().' );

		return this.applyMatrix4( matrix );

	}

}

class LineGeometry extends LineSegmentsGeometry {

	constructor() {

		super();

		this.isLineGeometry = true;

		this.type = 'LineGeometry';

	}

	setPositions( array ) {

		// converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format

		const length = array.length - 3;
		const points = new Float32Array( 2 * length );

		for ( let i = 0; i < length; i += 3 ) {

			points[ 2 * i ] = array[ i ];
			points[ 2 * i + 1 ] = array[ i + 1 ];
			points[ 2 * i + 2 ] = array[ i + 2 ];

			points[ 2 * i + 3 ] = array[ i + 3 ];
			points[ 2 * i + 4 ] = array[ i + 4 ];
			points[ 2 * i + 5 ] = array[ i + 5 ];

		}

		super.setPositions( points );

		return this;

	}

	setColors( array ) {

		// converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format

		const length = array.length - 3;
		const colors = new Float32Array( 2 * length );

		for ( let i = 0; i < length; i += 3 ) {

			colors[ 2 * i ] = array[ i ];
			colors[ 2 * i + 1 ] = array[ i + 1 ];
			colors[ 2 * i + 2 ] = array[ i + 2 ];

			colors[ 2 * i + 3 ] = array[ i + 3 ];
			colors[ 2 * i + 4 ] = array[ i + 4 ];
			colors[ 2 * i + 5 ] = array[ i + 5 ];

		}

		super.setColors( colors );

		return this;

	}

	fromLine( line ) {

		const geometry = line.geometry;

		this.setPositions( geometry.attributes.position.array ); // assumes non-indexed

		// set colors, maybe

		return this;

	}

}

/**
 * parameters = {
 *  color: <hex>,
 *  linewidth: <float>,
 *  dashed: <boolean>,
 *  dashScale: <float>,
 *  dashSize: <float>,
 *  dashOffset: <float>,
 *  gapSize: <float>,
 *  resolution: <Vector2>, // to be set by renderer
 * }
 */


UniformsLib.line = {

	worldUnits: { value: 1 },
	linewidth: { value: 1 },
	resolution: { value: new Vector2( 1, 1 ) },
	dashOffset: { value: 0 },
	dashScale: { value: 1 },
	dashSize: { value: 1 },
	gapSize: { value: 1 } // todo FIX - maybe change to totalSize

};

ShaderLib[ 'line' ] = {

	uniforms: UniformsUtils.merge( [
		UniformsLib.common,
		UniformsLib.fog,
		UniformsLib.line
	] ),

	vertexShader:
	/* glsl */`
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				// get the offset direction as perpendicular to the view vector
				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 offset;
				if ( position.y < 0.5 ) {

					offset = normalize( cross( start.xyz, worldDir ) );

				} else {

					offset = normalize( cross( end.xyz, worldDir ) );

				}

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				float forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// extend the line bounds to encompass  endcaps
					start.xyz += - worldDir * linewidth * 0.5;
					end.xyz += worldDir * linewidth * 0.5;

					// shift the position of the quad so it hugs the forward edge of the line
					offset.xy -= dir * forwardOffset;
					offset.z += 0.5;

				#endif

				// endcaps
				if ( position.y > 1.0 || position.y < 0.0 ) {

					offset.xy += dir * 2.0 * forwardOffset;

				}

				// adjust for linewidth
				offset *= linewidth * 0.5;

				// set the world position
				worldPos = ( position.y < 0.5 ) ? start : end;
				worldPos.xyz += offset;

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`,

	fragmentShader:
	/* glsl */`
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
};

class LineMaterial extends ShaderMaterial {

	constructor( parameters ) {

		super( {

			type: 'LineMaterial',

			uniforms: UniformsUtils.clone( ShaderLib[ 'line' ].uniforms ),

			vertexShader: ShaderLib[ 'line' ].vertexShader,
			fragmentShader: ShaderLib[ 'line' ].fragmentShader,

			clipping: true // required for clipping support

		} );

		this.isLineMaterial = true;

		Object.defineProperties( this, {

			color: {

				enumerable: true,

				get: function () {

					return this.uniforms.diffuse.value;

				},

				set: function ( value ) {

					this.uniforms.diffuse.value = value;

				}

			},

			worldUnits: {

				enumerable: true,

				get: function () {

					return 'WORLD_UNITS' in this.defines;

				},

				set: function ( value ) {

					if ( value === true ) {

						this.defines.WORLD_UNITS = '';

					} else {

						delete this.defines.WORLD_UNITS;

					}

				}

			},

			linewidth: {

				enumerable: true,

				get: function () {

					return this.uniforms.linewidth.value;

				},

				set: function ( value ) {

					this.uniforms.linewidth.value = value;

				}

			},

			dashed: {

				enumerable: true,

				get: function () {

					return Boolean( 'USE_DASH' in this.defines );

				},

				set( value ) {

					if ( Boolean( value ) !== Boolean( 'USE_DASH' in this.defines ) ) {

						this.needsUpdate = true;

					}

					if ( value === true ) {

						this.defines.USE_DASH = '';

					} else {

						delete this.defines.USE_DASH;

					}

				}

			},

			dashScale: {

				enumerable: true,

				get: function () {

					return this.uniforms.dashScale.value;

				},

				set: function ( value ) {

					this.uniforms.dashScale.value = value;

				}

			},

			dashSize: {

				enumerable: true,

				get: function () {

					return this.uniforms.dashSize.value;

				},

				set: function ( value ) {

					this.uniforms.dashSize.value = value;

				}

			},

			dashOffset: {

				enumerable: true,

				get: function () {

					return this.uniforms.dashOffset.value;

				},

				set: function ( value ) {

					this.uniforms.dashOffset.value = value;

				}

			},

			gapSize: {

				enumerable: true,

				get: function () {

					return this.uniforms.gapSize.value;

				},

				set: function ( value ) {

					this.uniforms.gapSize.value = value;

				}

			},

			opacity: {

				enumerable: true,

				get: function () {

					return this.uniforms.opacity.value;

				},

				set: function ( value ) {

					this.uniforms.opacity.value = value;

				}

			},

			resolution: {

				enumerable: true,

				get: function () {

					return this.uniforms.resolution.value;

				},

				set: function ( value ) {

					this.uniforms.resolution.value.copy( value );

				}

			},

			alphaToCoverage: {

				enumerable: true,

				get: function () {

					return Boolean( 'USE_ALPHA_TO_COVERAGE' in this.defines );

				},

				set: function ( value ) {

					if ( Boolean( value ) !== Boolean( 'USE_ALPHA_TO_COVERAGE' in this.defines ) ) {

						this.needsUpdate = true;

					}

					if ( value === true ) {

						this.defines.USE_ALPHA_TO_COVERAGE = '';
						this.extensions.derivatives = true;

					} else {

						delete this.defines.USE_ALPHA_TO_COVERAGE;
						this.extensions.derivatives = false;

					}

				}

			}

		} );

		this.setValues( parameters );

	}

}

const _start = new Vector3();
const _end = new Vector3();

const _start4 = new Vector4();
const _end4 = new Vector4();

const _ssOrigin = new Vector4();
const _ssOrigin3 = new Vector3();
const _mvMatrix = new Matrix4();
const _line = new Line3();
const _closestPoint = new Vector3();

const _box = new Box3();
const _sphere = new Sphere();
const _clipToWorldVector = new Vector4();

let _ray, _lineWidth;

// Returns the margin required to expand by in world space given the distance from the camera,
// line width, resolution, and camera projection
function getWorldSpaceHalfWidth( camera, distance, resolution ) {

	// transform into clip space, adjust the x and y values by the pixel width offset, then
	// transform back into world space to get world offset. Note clip space is [-1, 1] so full
	// width does not need to be halved.
	_clipToWorldVector.set( 0, 0, - distance, 1.0 ).applyMatrix4( camera.projectionMatrix );
	_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );
	_clipToWorldVector.x = _lineWidth / resolution.width;
	_clipToWorldVector.y = _lineWidth / resolution.height;
	_clipToWorldVector.applyMatrix4( camera.projectionMatrixInverse );
	_clipToWorldVector.multiplyScalar( 1.0 / _clipToWorldVector.w );

	return Math.abs( Math.max( _clipToWorldVector.x, _clipToWorldVector.y ) );

}

function raycastWorldUnits( lineSegments, intersects ) {

	const matrixWorld = lineSegments.matrixWorld;
	const geometry = lineSegments.geometry;
	const instanceStart = geometry.attributes.instanceStart;
	const instanceEnd = geometry.attributes.instanceEnd;
	const segmentCount = Math.min( geometry.instanceCount, instanceStart.count );

	for ( let i = 0, l = segmentCount; i < l; i ++ ) {

		_line.start.fromBufferAttribute( instanceStart, i );
		_line.end.fromBufferAttribute( instanceEnd, i );

		_line.applyMatrix4( matrixWorld );

		const pointOnLine = new Vector3();
		const point = new Vector3();

		_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );
		const isInside = point.distanceTo( pointOnLine ) < _lineWidth * 0.5;

		if ( isInside ) {

			intersects.push( {
				point,
				pointOnLine,
				distance: _ray.origin.distanceTo( point ),
				object: lineSegments,
				face: null,
				faceIndex: i,
				uv: null,
				uv1: null,
			} );

		}

	}

}

function raycastScreenSpace( lineSegments, camera, intersects ) {

	const projectionMatrix = camera.projectionMatrix;
	const material = lineSegments.material;
	const resolution = material.resolution;
	const matrixWorld = lineSegments.matrixWorld;

	const geometry = lineSegments.geometry;
	const instanceStart = geometry.attributes.instanceStart;
	const instanceEnd = geometry.attributes.instanceEnd;
	const segmentCount = Math.min( geometry.instanceCount, instanceStart.count );

	const near = - camera.near;

	//

	// pick a point 1 unit out along the ray to avoid the ray origin
	// sitting at the camera origin which will cause "w" to be 0 when
	// applying the projection matrix.
	_ray.at( 1, _ssOrigin );

	// ndc space [ - 1.0, 1.0 ]
	_ssOrigin.w = 1;
	_ssOrigin.applyMatrix4( camera.matrixWorldInverse );
	_ssOrigin.applyMatrix4( projectionMatrix );
	_ssOrigin.multiplyScalar( 1 / _ssOrigin.w );

	// screen space
	_ssOrigin.x *= resolution.x / 2;
	_ssOrigin.y *= resolution.y / 2;
	_ssOrigin.z = 0;

	_ssOrigin3.copy( _ssOrigin );

	_mvMatrix.multiplyMatrices( camera.matrixWorldInverse, matrixWorld );

	for ( let i = 0, l = segmentCount; i < l; i ++ ) {

		_start4.fromBufferAttribute( instanceStart, i );
		_end4.fromBufferAttribute( instanceEnd, i );

		_start4.w = 1;
		_end4.w = 1;

		// camera space
		_start4.applyMatrix4( _mvMatrix );
		_end4.applyMatrix4( _mvMatrix );

		// skip the segment if it's entirely behind the camera
		const isBehindCameraNear = _start4.z > near && _end4.z > near;
		if ( isBehindCameraNear ) {

			continue;

		}

		// trim the segment if it extends behind camera near
		if ( _start4.z > near ) {

			const deltaDist = _start4.z - _end4.z;
			const t = ( _start4.z - near ) / deltaDist;
			_start4.lerp( _end4, t );

		} else if ( _end4.z > near ) {

			const deltaDist = _end4.z - _start4.z;
			const t = ( _end4.z - near ) / deltaDist;
			_end4.lerp( _start4, t );

		}

		// clip space
		_start4.applyMatrix4( projectionMatrix );
		_end4.applyMatrix4( projectionMatrix );

		// ndc space [ - 1.0, 1.0 ]
		_start4.multiplyScalar( 1 / _start4.w );
		_end4.multiplyScalar( 1 / _end4.w );

		// screen space
		_start4.x *= resolution.x / 2;
		_start4.y *= resolution.y / 2;

		_end4.x *= resolution.x / 2;
		_end4.y *= resolution.y / 2;

		// create 2d segment
		_line.start.copy( _start4 );
		_line.start.z = 0;

		_line.end.copy( _end4 );
		_line.end.z = 0;

		// get closest point on ray to segment
		const param = _line.closestPointToPointParameter( _ssOrigin3, true );
		_line.at( param, _closestPoint );

		// check if the intersection point is within clip space
		const zPos = MathUtils.lerp( _start4.z, _end4.z, param );
		const isInClipSpace = zPos >= - 1 && zPos <= 1;

		const isInside = _ssOrigin3.distanceTo( _closestPoint ) < _lineWidth * 0.5;

		if ( isInClipSpace && isInside ) {

			_line.start.fromBufferAttribute( instanceStart, i );
			_line.end.fromBufferAttribute( instanceEnd, i );

			_line.start.applyMatrix4( matrixWorld );
			_line.end.applyMatrix4( matrixWorld );

			const pointOnLine = new Vector3();
			const point = new Vector3();

			_ray.distanceSqToSegment( _line.start, _line.end, point, pointOnLine );

			intersects.push( {
				point: point,
				pointOnLine: pointOnLine,
				distance: _ray.origin.distanceTo( point ),
				object: lineSegments,
				face: null,
				faceIndex: i,
				uv: null,
				uv1: null,
			} );

		}

	}

}

class LineSegments2 extends Mesh {

	constructor( geometry = new LineSegmentsGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {

		super( geometry, material );

		this.isLineSegments2 = true;

		this.type = 'LineSegments2';

	}

	// for backwards-compatibility, but could be a method of LineSegmentsGeometry...

	computeLineDistances() {

		const geometry = this.geometry;

		const instanceStart = geometry.attributes.instanceStart;
		const instanceEnd = geometry.attributes.instanceEnd;
		const lineDistances = new Float32Array( 2 * instanceStart.count );

		for ( let i = 0, j = 0, l = instanceStart.count; i < l; i ++, j += 2 ) {

			_start.fromBufferAttribute( instanceStart, i );
			_end.fromBufferAttribute( instanceEnd, i );

			lineDistances[ j ] = ( j === 0 ) ? 0 : lineDistances[ j - 1 ];
			lineDistances[ j + 1 ] = lineDistances[ j ] + _start.distanceTo( _end );

		}

		const instanceDistanceBuffer = new InstancedInterleavedBuffer( lineDistances, 2, 1 ); // d0, d1

		geometry.setAttribute( 'instanceDistanceStart', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 0 ) ); // d0
		geometry.setAttribute( 'instanceDistanceEnd', new InterleavedBufferAttribute( instanceDistanceBuffer, 1, 1 ) ); // d1

		return this;

	}

	raycast( raycaster, intersects ) {

		const worldUnits = this.material.worldUnits;
		const camera = raycaster.camera;

		if ( camera === null && ! worldUnits ) {

			console.error( 'LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.' );

		}

		const threshold = ( raycaster.params.Line2 !== undefined ) ? raycaster.params.Line2.threshold || 0 : 0;

		_ray = raycaster.ray;

		const matrixWorld = this.matrixWorld;
		const geometry = this.geometry;
		const material = this.material;

		_lineWidth = material.linewidth + threshold;

		// check if we intersect the sphere bounds
		if ( geometry.boundingSphere === null ) {

			geometry.computeBoundingSphere();

		}

		_sphere.copy( geometry.boundingSphere ).applyMatrix4( matrixWorld );

		// increase the sphere bounds by the worst case line screen space width
		let sphereMargin;
		if ( worldUnits ) {

			sphereMargin = _lineWidth * 0.5;

		} else {

			const distanceToSphere = Math.max( camera.near, _sphere.distanceToPoint( _ray.origin ) );
			sphereMargin = getWorldSpaceHalfWidth( camera, distanceToSphere, material.resolution );

		}

		_sphere.radius += sphereMargin;

		if ( _ray.intersectsSphere( _sphere ) === false ) {

			return;

		}

		// check if we intersect the box bounds
		if ( geometry.boundingBox === null ) {

			geometry.computeBoundingBox();

		}

		_box.copy( geometry.boundingBox ).applyMatrix4( matrixWorld );

		// increase the box bounds by the worst case line width
		let boxMargin;
		if ( worldUnits ) {

			boxMargin = _lineWidth * 0.5;

		} else {

			const distanceToBox = Math.max( camera.near, _box.distanceToPoint( _ray.origin ) );
			boxMargin = getWorldSpaceHalfWidth( camera, distanceToBox, material.resolution );

		}

		_box.expandByScalar( boxMargin );

		if ( _ray.intersectsBox( _box ) === false ) {

			return;

		}

		if ( worldUnits ) {

			raycastWorldUnits( this, intersects );

		} else {

			raycastScreenSpace( this, camera, intersects );

		}

	}

}

class Line2 extends LineSegments2 {

	constructor( geometry = new LineGeometry(), material = new LineMaterial( { color: Math.random() * 0xffffff } ) ) {

		super( geometry, material );

		this.isLine2 = true;

		this.type = 'Line2';

	}

}

const glyphs$1 = {
	"0": {
		x_min: 73,
		x_max: 715,
		ha: 792,
		o: "m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 "
	},
	"1": {
		x_min: 215.671875,
		x_max: 574,
		ha: 792,
		o: "m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 "
	},
	"2": {
		x_min: 59,
		x_max: 731,
		ha: 792,
		o: "m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 "
	},
	"3": {
		x_min: 54,
		x_max: 737,
		ha: 792,
		o: "m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 "
	},
	"4": {
		x_min: 48,
		x_max: 742.453125,
		ha: 792,
		o: "m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 "
	},
	"5": {
		x_min: 54.171875,
		x_max: 738,
		ha: 792,
		o: "m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 "
	},
	"6": {
		x_min: 53,
		x_max: 739,
		ha: 792,
		o: "m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 "
	},
	"7": {
		x_min: 58.71875,
		x_max: 730.953125,
		ha: 792,
		o: "m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 "
	},
	"8": {
		x_min: 55,
		x_max: 736,
		ha: 792,
		o: "m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 "
	},
	"9": {
		x_min: 53,
		x_max: 739,
		ha: 792,
		o: "m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 "
	},
	"ο": {
		x_min: 0,
		x_max: 712,
		ha: 815,
		o: "m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 "
	},
	S: {
		x_min: 0,
		x_max: 788,
		ha: 890,
		o: "m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 "
	},
	"¦": {
		x_min: 343,
		x_max: 449,
		ha: 792,
		o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "
	},
	"/": {
		x_min: 183.25,
		x_max: 608.328125,
		ha: 792,
		o: "m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 "
	},
	"Τ": {
		x_min: -0.4375,
		x_max: 777.453125,
		ha: 839,
		o: "m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 "
	},
	y: {
		x_min: 0,
		x_max: 684.78125,
		ha: 771,
		o: "m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 "
	},
	"Π": {
		x_min: 0,
		x_max: 803,
		ha: 917,
		o: "m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 "
	},
	"ΐ": {
		x_min: -111,
		x_max: 339,
		ha: 361,
		o: "m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 "
	},
	g: {
		x_min: 0,
		x_max: 686,
		ha: 838,
		o: "m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 "
	},
	"²": {
		x_min: 0,
		x_max: 442,
		ha: 539,
		o: "m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 "
	},
	"–": {
		x_min: 0,
		x_max: 705.5625,
		ha: 803,
		o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "
	},
	"Κ": {
		x_min: 0,
		x_max: 819.5625,
		ha: 893,
		o: "m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "
	},
	"ƒ": {
		x_min: -46.265625,
		x_max: 392,
		ha: 513,
		o: "m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 "
	},
	e: {
		x_min: 0,
		x_max: 714,
		ha: 813,
		o: "m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 "
	},
	"ό": {
		x_min: 0,
		x_max: 712,
		ha: 815,
		o: "m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 "
	},
	J: {
		x_min: 0,
		x_max: 588,
		ha: 699,
		o: "m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 "
	},
	"»": {
		x_min: -1,
		x_max: 503,
		ha: 601,
		o: "m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 "
	},
	"©": {
		x_min: -3,
		x_max: 1008,
		ha: 1106,
		o: "m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 "
	},
	"ώ": {
		x_min: 0,
		x_max: 922,
		ha: 1030,
		o: "m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 "
	},
	"^": {
		x_min: 193.0625,
		x_max: 598.609375,
		ha: 792,
		o: "m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 "
	},
	"«": {
		x_min: 0,
		x_max: 507.203125,
		ha: 604,
		o: "m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 "
	},
	D: {
		x_min: 0,
		x_max: 828,
		ha: 935,
		o: "m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 "
	},
	"∙": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "
	},
	"ÿ": {
		x_min: 0,
		x_max: 47,
		ha: 125,
		o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "
	},
	w: {
		x_min: 0,
		x_max: 1009.71875,
		ha: 1100,
		o: "m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 "
	},
	$: {
		x_min: 0,
		x_max: 700,
		ha: 793,
		o: "m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 "
	},
	"\\": {
		x_min: -0.015625,
		x_max: 425.0625,
		ha: 522,
		o: "m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 "
	},
	"µ": {
		x_min: 0,
		x_max: 697.21875,
		ha: 747,
		o: "m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 "
	},
	"Ι": {
		x_min: 42,
		x_max: 181,
		ha: 297,
		o: "m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 "
	},
	"Ύ": {
		x_min: 0,
		x_max: 1144.5,
		ha: 1214,
		o: "m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "
	},
	"’": {
		x_min: 0,
		x_max: 139,
		ha: 236,
		o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "
	},
	"Ν": {
		x_min: 0,
		x_max: 801,
		ha: 915,
		o: "m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 "
	},
	"-": {
		x_min: 8.71875,
		x_max: 350.390625,
		ha: 478,
		o: "m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 "
	},
	Q: {
		x_min: 0,
		x_max: 968,
		ha: 1072,
		o: "m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 "
	},
	"ς": {
		x_min: 1,
		x_max: 676.28125,
		ha: 740,
		o: "m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 "
	},
	M: {
		x_min: 0,
		x_max: 954,
		ha: 1067,
		o: "m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 "
	},
	"Ψ": {
		x_min: 0,
		x_max: 1006,
		ha: 1094,
		o: "m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 "
	},
	C: {
		x_min: 0,
		x_max: 886,
		ha: 944,
		o: "m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 "
	},
	"!": {
		x_min: 0,
		x_max: 138,
		ha: 236,
		o: "m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 "
	},
	"{": {
		x_min: 0,
		x_max: 480.5625,
		ha: 578,
		o: "m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 "
	},
	X: {
		x_min: -0.015625,
		x_max: 854.15625,
		ha: 940,
		o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 "
	},
	"#": {
		x_min: 0,
		x_max: 963.890625,
		ha: 1061,
		o: "m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 "
	},
	"ι": {
		x_min: 42,
		x_max: 284,
		ha: 361,
		o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 "
	},
	"Ά": {
		x_min: 0,
		x_max: 906.953125,
		ha: 982,
		o: "m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "
	},
	")": {
		x_min: 0,
		x_max: 318,
		ha: 415,
		o: "m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 "
	},
	"ε": {
		x_min: 0,
		x_max: 634.71875,
		ha: 714,
		o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 "
	},
	"Δ": {
		x_min: 0,
		x_max: 952.78125,
		ha: 1028,
		o: "m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 "
	},
	"}": {
		x_min: 0,
		x_max: 481,
		ha: 578,
		o: "m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 "
	},
	"‰": {
		x_min: -3,
		x_max: 1672,
		ha: 1821,
		o: "m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 "
	},
	a: {
		x_min: 0,
		x_max: 698.609375,
		ha: 794,
		o: "m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 "
	},
	"—": {
		x_min: 0,
		x_max: 941.671875,
		ha: 1039,
		o: "m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 "
	},
	"=": {
		x_min: 8.71875,
		x_max: 780.953125,
		ha: 792,
		o: "m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 "
	},
	N: {
		x_min: 0,
		x_max: 801,
		ha: 914,
		o: "m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 "
	},
	"ρ": {
		x_min: 0,
		x_max: 712,
		ha: 797,
		o: "m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 "
	},
	"¯": {
		x_min: 0,
		x_max: 941.671875,
		ha: 938,
		o: "m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 "
	},
	Z: {
		x_min: 0,
		x_max: 779,
		ha: 849,
		o: "m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 "
	},
	u: {
		x_min: 0,
		x_max: 617,
		ha: 729,
		o: "m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 "
	},
	k: {
		x_min: 0,
		x_max: 612.484375,
		ha: 697,
		o: "m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 "
	},
	"Η": {
		x_min: 0,
		x_max: 803,
		ha: 917,
		o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "
	},
	"Α": {
		x_min: 0,
		x_max: 906.953125,
		ha: 985,
		o: "m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 "
	},
	s: {
		x_min: 0,
		x_max: 604,
		ha: 697,
		o: "m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 "
	},
	B: {
		x_min: 0,
		x_max: 778,
		ha: 876,
		o: "m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 "
	},
	"…": {
		x_min: 0,
		x_max: 614,
		ha: 708,
		o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 "
	},
	"?": {
		x_min: 0,
		x_max: 607,
		ha: 704,
		o: "m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 "
	},
	H: {
		x_min: 0,
		x_max: 803,
		ha: 915,
		o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 "
	},
	"ν": {
		x_min: 0,
		x_max: 675,
		ha: 761,
		o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 "
	},
	c: {
		x_min: 1,
		x_max: 701.390625,
		ha: 775,
		o: "m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 "
	},
	"¶": {
		x_min: 0,
		x_max: 566.671875,
		ha: 678,
		o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "
	},
	"β": {
		x_min: 0,
		x_max: 660,
		ha: 745,
		o: "m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 "
	},
	"Μ": {
		x_min: 0,
		x_max: 954,
		ha: 1068,
		o: "m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 "
	},
	"Ό": {
		x_min: 0.109375,
		x_max: 1120,
		ha: 1217,
		o: "m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "
	},
	"Ή": {
		x_min: 0,
		x_max: 1158,
		ha: 1275,
		o: "m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "
	},
	"•": {
		x_min: 0,
		x_max: 663.890625,
		ha: 775,
		o: "m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 "
	},
	"¥": {
		x_min: 0.1875,
		x_max: 819.546875,
		ha: 886,
		o: "m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 "
	},
	"(": {
		x_min: 0,
		x_max: 318.0625,
		ha: 415,
		o: "m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 "
	},
	U: {
		x_min: 0,
		x_max: 796,
		ha: 904,
		o: "m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 "
	},
	"γ": {
		x_min: 0.5,
		x_max: 744.953125,
		ha: 822,
		o: "m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 "
	},
	"α": {
		x_min: 0,
		x_max: 765.5625,
		ha: 809,
		o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 "
	},
	F: {
		x_min: 0,
		x_max: 683.328125,
		ha: 717,
		o: "m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 "
	},
	"­": {
		x_min: 0,
		x_max: 705.5625,
		ha: 803,
		o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 "
	},
	":": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "
	},
	"Χ": {
		x_min: 0,
		x_max: 854.171875,
		ha: 935,
		o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 "
	},
	"*": {
		x_min: 116,
		x_max: 674,
		ha: 792,
		o: "m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 "
	},
	"†": {
		x_min: 0,
		x_max: 777,
		ha: 835,
		o: "m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 "
	},
	"°": {
		x_min: 0,
		x_max: 347,
		ha: 444,
		o: "m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 "
	},
	V: {
		x_min: 0,
		x_max: 862.71875,
		ha: 940,
		o: "m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 "
	},
	"Ξ": {
		x_min: 0,
		x_max: 734.71875,
		ha: 763,
		o: "m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 "
	},
	" ": {
		x_min: 0,
		x_max: 0,
		ha: 853
	},
	"Ϋ": {
		x_min: 0.328125,
		x_max: 819.515625,
		ha: 889,
		o: "m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 "
	},
	"”": {
		x_min: 0,
		x_max: 347,
		ha: 454,
		o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 "
	},
	"@": {
		x_min: 0,
		x_max: 1260,
		ha: 1357,
		o: "m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 "
	},
	"Ί": {
		x_min: 0,
		x_max: 499,
		ha: 613,
		o: "m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 "
	},
	i: {
		x_min: 14,
		x_max: 136,
		ha: 275,
		o: "m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 "
	},
	"Β": {
		x_min: 0,
		x_max: 778,
		ha: 877,
		o: "m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 "
	},
	"υ": {
		x_min: 0,
		x_max: 617,
		ha: 725,
		o: "m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 "
	},
	"]": {
		x_min: 0,
		x_max: 275,
		ha: 372,
		o: "m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 "
	},
	m: {
		x_min: 0,
		x_max: 1019,
		ha: 1128,
		o: "m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 "
	},
	"χ": {
		x_min: 8.328125,
		x_max: 780.5625,
		ha: 815,
		o: "m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 "
	},
	"ί": {
		x_min: 42,
		x_max: 326.71875,
		ha: 361,
		o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 "
	},
	"Ζ": {
		x_min: 0,
		x_max: 779.171875,
		ha: 850,
		o: "m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 "
	},
	R: {
		x_min: 0,
		x_max: 781.953125,
		ha: 907,
		o: "m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 "
	},
	o: {
		x_min: 0,
		x_max: 713,
		ha: 821,
		o: "m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 "
	},
	K: {
		x_min: 0,
		x_max: 819.46875,
		ha: 906,
		o: "m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 "
	},
	",": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 "
	},
	d: {
		x_min: 0,
		x_max: 683,
		ha: 796,
		o: "m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 "
	},
	"¨": {
		x_min: -109,
		x_max: 247,
		ha: 232,
		o: "m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 "
	},
	E: {
		x_min: 0,
		x_max: 736.109375,
		ha: 789,
		o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "
	},
	Y: {
		x_min: 0,
		x_max: 820,
		ha: 886,
		o: "m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 "
	},
	"\"": {
		x_min: 0,
		x_max: 299,
		ha: 396,
		o: "m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "
	},
	"‹": {
		x_min: 17.984375,
		x_max: 773.609375,
		ha: 792,
		o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "
	},
	"„": {
		x_min: 0,
		x_max: 364,
		ha: 467,
		o: "m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 "
	},
	"δ": {
		x_min: 1,
		x_max: 710,
		ha: 810,
		o: "m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 "
	},
	"έ": {
		x_min: 0,
		x_max: 634.71875,
		ha: 714,
		o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 "
	},
	"ω": {
		x_min: 0,
		x_max: 922,
		ha: 1031,
		o: "m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 "
	},
	"´": {
		x_min: 0,
		x_max: 96,
		ha: 251,
		o: "m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 "
	},
	"±": {
		x_min: 11,
		x_max: 781,
		ha: 792,
		o: "m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 "
	},
	"|": {
		x_min: 343,
		x_max: 449,
		ha: 792,
		o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 "
	},
	"ϋ": {
		x_min: 0,
		x_max: 617,
		ha: 725,
		o: "m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 "
	},
	"§": {
		x_min: 0,
		x_max: 593,
		ha: 690,
		o: "m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 "
	},
	b: {
		x_min: 0,
		x_max: 685,
		ha: 783,
		o: "m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 "
	},
	q: {
		x_min: 0,
		x_max: 683,
		ha: 876,
		o: "m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 "
	},
	"Ω": {
		x_min: -0.171875,
		x_max: 969.5625,
		ha: 1068,
		o: "m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 "
	},
	"ύ": {
		x_min: 0,
		x_max: 617,
		ha: 725,
		o: "m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 "
	},
	z: {
		x_min: -0.015625,
		x_max: 613.890625,
		ha: 697,
		o: "m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 "
	},
	"™": {
		x_min: 0,
		x_max: 894,
		ha: 1000,
		o: "m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 "
	},
	"ή": {
		x_min: 0.78125,
		x_max: 697,
		ha: 810,
		o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 "
	},
	"Θ": {
		x_min: 0,
		x_max: 960,
		ha: 1056,
		o: "m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 "
	},
	"®": {
		x_min: -3,
		x_max: 1008,
		ha: 1106,
		o: "m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 "
	},
	"~": {
		x_min: 0,
		x_max: 833,
		ha: 931,
		o: "m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 "
	},
	"Ε": {
		x_min: 0,
		x_max: 736.21875,
		ha: 778,
		o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 "
	},
	"³": {
		x_min: 0,
		x_max: 450,
		ha: 547,
		o: "m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 "
	},
	"[": {
		x_min: 0,
		x_max: 273.609375,
		ha: 371,
		o: "m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 "
	},
	L: {
		x_min: 0,
		x_max: 645.828125,
		ha: 696,
		o: "m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 "
	},
	"σ": {
		x_min: 0,
		x_max: 803.390625,
		ha: 894,
		o: "m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 "
	},
	"ζ": {
		x_min: 0,
		x_max: 573,
		ha: 642,
		o: "m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 "
	},
	"θ": {
		x_min: 0,
		x_max: 674,
		ha: 778,
		o: "m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 "
	},
	"Ο": {
		x_min: 0,
		x_max: 958,
		ha: 1054,
		o: "m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 "
	},
	"Γ": {
		x_min: 0,
		x_max: 705.28125,
		ha: 749,
		o: "m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 "
	},
	" ": {
		x_min: 0,
		x_max: 0,
		ha: 375
	},
	"%": {
		x_min: -3,
		x_max: 1089,
		ha: 1186,
		o: "m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 "
	},
	P: {
		x_min: 0,
		x_max: 726,
		ha: 806,
		o: "m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 "
	},
	"Έ": {
		x_min: 0,
		x_max: 1078.21875,
		ha: 1118,
		o: "m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 "
	},
	"Ώ": {
		x_min: 0.125,
		x_max: 1136.546875,
		ha: 1235,
		o: "m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 "
	},
	_: {
		x_min: 0,
		x_max: 705.5625,
		ha: 803,
		o: "m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 "
	},
	"Ϊ": {
		x_min: -110,
		x_max: 246,
		ha: 275,
		o: "m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 "
	},
	"+": {
		x_min: 23,
		x_max: 768,
		ha: 792,
		o: "m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 "
	},
	"½": {
		x_min: 0,
		x_max: 1050,
		ha: 1149,
		o: "m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 "
	},
	"Ρ": {
		x_min: 0,
		x_max: 720,
		ha: 783,
		o: "m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 "
	},
	"'": {
		x_min: 0,
		x_max: 139,
		ha: 236,
		o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 "
	},
	"ª": {
		x_min: 0,
		x_max: 350,
		ha: 397,
		o: "m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 "
	},
	"΅": {
		x_min: 0,
		x_max: 450,
		ha: 553,
		o: "m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 "
	},
	T: {
		x_min: 0,
		x_max: 777,
		ha: 835,
		o: "m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 "
	},
	"Φ": {
		x_min: 0,
		x_max: 915,
		ha: 997,
		o: "m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 "
	},
	"⁋": {
		x_min: 0,
		x_max: 0,
		ha: 694
	},
	j: {
		x_min: -77.78125,
		x_max: 167,
		ha: 349,
		o: "m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 "
	},
	"Σ": {
		x_min: 0,
		x_max: 756.953125,
		ha: 819,
		o: "m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 "
	},
	"›": {
		x_min: 18.0625,
		x_max: 774,
		ha: 792,
		o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "
	},
	"<": {
		x_min: 17.984375,
		x_max: 773.609375,
		ha: 792,
		o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 "
	},
	"£": {
		x_min: 0,
		x_max: 704.484375,
		ha: 801,
		o: "m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 "
	},
	t: {
		x_min: 0,
		x_max: 367,
		ha: 458,
		o: "m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 "
	},
	"¬": {
		x_min: 0,
		x_max: 706,
		ha: 803,
		o: "m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 "
	},
	"λ": {
		x_min: 0,
		x_max: 750,
		ha: 803,
		o: "m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 "
	},
	W: {
		x_min: 0,
		x_max: 1263.890625,
		ha: 1351,
		o: "m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 "
	},
	">": {
		x_min: 18.0625,
		x_max: 774,
		ha: 792,
		o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 "
	},
	v: {
		x_min: 0,
		x_max: 675.15625,
		ha: 761,
		o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 "
	},
	"τ": {
		x_min: 0.28125,
		x_max: 644.5,
		ha: 703,
		o: "m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 "
	},
	"ξ": {
		x_min: 0,
		x_max: 624.9375,
		ha: 699,
		o: "m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 "
	},
	"&": {
		x_min: -3,
		x_max: 894.25,
		ha: 992,
		o: "m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 "
	},
	"Λ": {
		x_min: 0,
		x_max: 862.5,
		ha: 942,
		o: "m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 "
	},
	I: {
		x_min: 41,
		x_max: 180,
		ha: 293,
		o: "m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 "
	},
	G: {
		x_min: 0,
		x_max: 921,
		ha: 1011,
		o: "m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 "
	},
	"ΰ": {
		x_min: 0,
		x_max: 617,
		ha: 725,
		o: "m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 "
	},
	"`": {
		x_min: 0,
		x_max: 138.890625,
		ha: 236,
		o: "m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 "
	},
	"·": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 "
	},
	"Υ": {
		x_min: 0.328125,
		x_max: 819.515625,
		ha: 889,
		o: "m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 "
	},
	r: {
		x_min: 0,
		x_max: 355.5625,
		ha: 432,
		o: "m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 "
	},
	x: {
		x_min: 0,
		x_max: 675,
		ha: 764,
		o: "m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 "
	},
	"μ": {
		x_min: 0,
		x_max: 696.609375,
		ha: 747,
		o: "m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 "
	},
	h: {
		x_min: 0,
		x_max: 615,
		ha: 724,
		o: "m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 "
	},
	".": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 "
	},
	"φ": {
		x_min: -2,
		x_max: 878,
		ha: 974,
		o: "m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 "
	},
	";": {
		x_min: 0,
		x_max: 142,
		ha: 239,
		o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 "
	},
	f: {
		x_min: 0,
		x_max: 378,
		ha: 472,
		o: "m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 "
	},
	"“": {
		x_min: 1,
		x_max: 348.21875,
		ha: 454,
		o: "m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 "
	},
	A: {
		x_min: 0.03125,
		x_max: 906.953125,
		ha: 1008,
		o: "m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 "
	},
	"‘": {
		x_min: 1,
		x_max: 139.890625,
		ha: 236,
		o: "m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 "
	},
	"ϊ": {
		x_min: -70,
		x_max: 283,
		ha: 361,
		o: "m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 "
	},
	"π": {
		x_min: -0.21875,
		x_max: 773.21875,
		ha: 857,
		o: "m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 "
	},
	"ά": {
		x_min: 0,
		x_max: 765.5625,
		ha: 809,
		o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 "
	},
	O: {
		x_min: 0,
		x_max: 958,
		ha: 1057,
		o: "m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 "
	},
	n: {
		x_min: 0,
		x_max: 615,
		ha: 724,
		o: "m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 "
	},
	l: {
		x_min: 41,
		x_max: 166,
		ha: 279,
		o: "m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 "
	},
	"¤": {
		x_min: 40.09375,
		x_max: 728.796875,
		ha: 825,
		o: "m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 "
	},
	"κ": {
		x_min: 0,
		x_max: 632.328125,
		ha: 679,
		o: "m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 "
	},
	p: {
		x_min: 0,
		x_max: 685,
		ha: 786,
		o: "m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 "
	},
	"‡": {
		x_min: 0,
		x_max: 777,
		ha: 835,
		o: "m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 "
	},
	"ψ": {
		x_min: 0,
		x_max: 808,
		ha: 907,
		o: "m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 "
	},
	"η": {
		x_min: 0.78125,
		x_max: 697,
		ha: 810,
		o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 "
	}
};
const cssFontWeight$1 = "normal";
const ascender$1 = 1189;
const underlinePosition$1 = -100;
const cssFontStyle$1 = "normal";
const boundingBox$1 = {
	yMin: -334,
	xMin: -111,
	yMax: 1189,
	xMax: 1672
};
const resolution$1 = 1000;
const original_font_information$1 = {
	postscript_name: "Helvetiker-Regular",
	version_string: "Version 1.00 2004 initial release",
	vendor_url: "http://www.magenta.gr/",
	full_font_name: "Helvetiker",
	font_family_name: "Helvetiker",
	copyright: "Copyright (c) Μagenta ltd, 2004",
	description: "",
	trademark: "",
	designer: "",
	designer_url: "",
	unique_font_identifier: "Μagenta ltd:Helvetiker:22-10-104",
	license_url: "http://www.ellak.gr/fonts/MgOpen/license.html",
	license_description: "Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.",
	manufacturer_name: "Μagenta ltd",
	font_sub_family_name: "Regular"
};
const descender$1 = -334;
const familyName$1 = "Helvetiker";
const lineHeight$1 = 1522;
const underlineThickness$1 = 50;
const Helvetiker = {
	glyphs: glyphs$1,
	cssFontWeight: cssFontWeight$1,
	ascender: ascender$1,
	underlinePosition: underlinePosition$1,
	cssFontStyle: cssFontStyle$1,
	boundingBox: boundingBox$1,
	resolution: resolution$1,
	original_font_information: original_font_information$1,
	descender: descender$1,
	familyName: familyName$1,
	lineHeight: lineHeight$1,
	underlineThickness: underlineThickness$1
};

const glyphs = {
	"0": {
		x_min: 51,
		x_max: 779,
		ha: 828,
		o: "m 415 -26 q 142 129 242 -26 q 51 476 51 271 q 141 825 51 683 q 415 984 242 984 q 687 825 585 984 q 779 476 779 682 q 688 131 779 271 q 415 -26 587 -26 m 415 137 q 529 242 485 137 q 568 477 568 338 q 530 713 568 619 q 415 821 488 821 q 303 718 344 821 q 262 477 262 616 q 301 237 262 337 q 415 137 341 137 "
	},
	"1": {
		x_min: 197.609375,
		x_max: 628,
		ha: 828,
		o: "m 628 0 l 434 0 l 434 674 l 197 674 l 197 810 q 373 837 318 810 q 468 984 450 876 l 628 984 l 628 0 "
	},
	"2": {
		x_min: 64,
		x_max: 764,
		ha: 828,
		o: "m 764 685 q 675 452 764 541 q 484 325 637 415 q 307 168 357 250 l 754 168 l 754 0 l 64 0 q 193 301 64 175 q 433 480 202 311 q 564 673 564 576 q 519 780 564 737 q 416 824 475 824 q 318 780 358 824 q 262 633 270 730 l 80 633 q 184 903 80 807 q 415 988 276 988 q 654 907 552 988 q 764 685 764 819 "
	},
	"3": {
		x_min: 61,
		x_max: 767,
		ha: 828,
		o: "m 767 290 q 653 51 767 143 q 402 -32 548 -32 q 168 48 262 -32 q 61 300 61 140 l 250 300 q 298 173 250 219 q 405 132 343 132 q 514 169 471 132 q 563 282 563 211 q 491 405 563 369 q 343 432 439 432 l 343 568 q 472 592 425 568 q 534 701 534 626 q 493 793 534 758 q 398 829 453 829 q 306 789 344 829 q 268 669 268 749 l 80 669 q 182 909 80 823 q 410 986 274 986 q 633 916 540 986 q 735 719 735 840 q 703 608 735 656 q 615 522 672 561 q 727 427 687 486 q 767 290 767 369 "
	},
	"4": {
		x_min: 53,
		x_max: 775.21875,
		ha: 828,
		o: "m 775 213 l 660 213 l 660 0 l 470 0 l 470 213 l 53 213 l 53 384 l 416 958 l 660 958 l 660 370 l 775 370 l 775 213 m 474 364 l 474 786 l 204 363 l 474 364 "
	},
	"5": {
		x_min: 59,
		x_max: 767,
		ha: 828,
		o: "m 767 319 q 644 59 767 158 q 382 -29 533 -29 q 158 43 247 -29 q 59 264 59 123 l 252 264 q 295 165 252 201 q 400 129 339 129 q 512 172 466 129 q 564 308 564 220 q 514 437 564 387 q 398 488 464 488 q 329 472 361 488 q 271 420 297 456 l 93 428 l 157 958 l 722 958 l 722 790 l 295 790 l 271 593 q 348 635 306 621 q 431 649 389 649 q 663 551 560 649 q 767 319 767 453 "
	},
	"6": {
		x_min: 57,
		x_max: 771,
		ha: 828,
		o: "m 744 734 l 544 734 q 500 802 533 776 q 425 828 466 828 q 315 769 359 828 q 264 571 264 701 q 451 638 343 638 q 691 537 602 638 q 771 315 771 449 q 683 79 771 176 q 420 -29 586 -29 q 134 123 227 -29 q 57 455 57 250 q 184 865 57 721 q 452 988 293 988 q 657 916 570 988 q 744 734 744 845 m 426 128 q 538 178 498 128 q 578 300 578 229 q 538 422 578 372 q 415 479 493 479 q 303 430 342 479 q 264 313 264 381 q 308 184 264 240 q 426 128 352 128 "
	},
	"7": {
		x_min: 65.28125,
		x_max: 762.5,
		ha: 828,
		o: "m 762 808 q 521 435 604 626 q 409 0 438 244 l 205 0 q 313 422 227 234 q 548 789 387 583 l 65 789 l 65 958 l 762 958 l 762 808 "
	},
	"8": {
		x_min: 57,
		x_max: 770,
		ha: 828,
		o: "m 625 516 q 733 416 697 477 q 770 284 770 355 q 675 69 770 161 q 415 -29 574 -29 q 145 65 244 -29 q 57 273 57 150 q 93 413 57 350 q 204 516 130 477 q 112 609 142 556 q 83 718 83 662 q 177 905 83 824 q 414 986 272 986 q 650 904 555 986 q 745 715 745 822 q 716 608 745 658 q 625 516 688 558 m 414 590 q 516 624 479 590 q 553 706 553 659 q 516 791 553 755 q 414 828 480 828 q 311 792 348 828 q 275 706 275 757 q 310 624 275 658 q 414 590 345 590 m 413 135 q 527 179 487 135 q 564 279 564 218 q 525 386 564 341 q 411 436 482 436 q 298 387 341 436 q 261 282 261 344 q 300 178 261 222 q 413 135 340 135 "
	},
	"9": {
		x_min: 58,
		x_max: 769,
		ha: 828,
		o: "m 769 492 q 646 90 769 232 q 384 -33 539 -33 q 187 35 271 -33 q 83 224 98 107 l 282 224 q 323 154 286 182 q 404 127 359 127 q 513 182 471 127 q 563 384 563 248 q 475 335 532 355 q 372 315 418 315 q 137 416 224 315 q 58 642 58 507 q 144 877 58 781 q 407 984 239 984 q 694 827 602 984 q 769 492 769 699 m 416 476 q 525 521 488 476 q 563 632 563 566 q 521 764 563 709 q 403 826 474 826 q 297 773 337 826 q 258 649 258 720 q 295 530 258 577 q 416 476 339 476 "
	},
	"ο": {
		x_min: 0,
		x_max: 764,
		ha: 863,
		o: "m 380 -25 q 105 87 211 -25 q 0 372 0 200 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 372 764 544 q 658 87 764 200 q 380 -25 552 -25 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 218 204 283 q 379 142 294 142 "
	},
	S: {
		x_min: 0,
		x_max: 826,
		ha: 915,
		o: "m 826 306 q 701 55 826 148 q 423 -29 587 -29 q 138 60 255 -29 q 0 318 13 154 l 208 318 q 288 192 216 238 q 437 152 352 152 q 559 181 506 152 q 623 282 623 217 q 466 411 623 372 q 176 487 197 478 q 18 719 18 557 q 136 958 18 869 q 399 1040 244 1040 q 670 956 561 1040 q 791 713 791 864 l 591 713 q 526 826 583 786 q 393 866 469 866 q 277 838 326 866 q 218 742 218 804 q 374 617 218 655 q 667 542 646 552 q 826 306 826 471 "
	},
	"¦": {
		x_min: 0,
		x_max: 143,
		ha: 240,
		o: "m 143 462 l 0 462 l 0 984 l 143 984 l 143 462 m 143 -242 l 0 -242 l 0 280 l 143 280 l 143 -242 "
	},
	"/": {
		x_min: 196.109375,
		x_max: 632.5625,
		ha: 828,
		o: "m 632 1040 l 289 -128 l 196 -128 l 538 1040 l 632 1040 "
	},
	"Τ": {
		x_min: -0.609375,
		x_max: 808,
		ha: 878,
		o: "m 808 831 l 508 831 l 508 0 l 298 0 l 298 831 l 0 831 l 0 1013 l 808 1013 l 808 831 "
	},
	y: {
		x_min: 0,
		x_max: 738.890625,
		ha: 828,
		o: "m 738 749 l 444 -107 q 361 -238 413 -199 q 213 -277 308 -277 q 156 -275 176 -277 q 120 -271 131 -271 l 120 -110 q 147 -113 134 -111 q 179 -116 161 -116 q 247 -91 226 -116 q 269 -17 269 -67 q 206 173 269 -4 q 84 515 162 301 q 0 749 41 632 l 218 749 l 376 207 l 529 749 l 738 749 "
	},
	"Π": {
		x_min: 0,
		x_max: 809,
		ha: 922,
		o: "m 809 0 l 598 0 l 598 836 l 208 836 l 208 0 l 0 0 l 0 1012 l 809 1012 l 809 0 "
	},
	"ΐ": {
		x_min: -162,
		x_max: 364,
		ha: 364,
		o: "m 364 810 l 235 810 l 235 952 l 364 952 l 364 810 m 301 1064 l 86 810 l -12 810 l 123 1064 l 301 1064 m -33 810 l -162 810 l -162 952 l -33 952 l -33 810 m 200 0 l 0 0 l 0 748 l 200 748 l 200 0 "
	},
	g: {
		x_min: 0,
		x_max: 724,
		ha: 839,
		o: "m 724 48 q 637 -223 724 -142 q 357 -304 551 -304 q 140 -253 226 -304 q 23 -72 36 -192 l 243 -72 q 290 -127 255 -110 q 368 -144 324 -144 q 504 -82 470 -144 q 530 71 530 -38 l 530 105 q 441 25 496 51 q 319 0 386 0 q 79 115 166 0 q 0 377 0 219 q 77 647 0 534 q 317 775 166 775 q 534 656 456 775 l 534 748 l 724 748 l 724 48 m 368 167 q 492 237 447 167 q 530 382 530 297 q 490 529 530 466 q 364 603 444 603 q 240 532 284 603 q 201 386 201 471 q 240 239 201 300 q 368 167 286 167 "
	},
	"²": {
		x_min: 0,
		x_max: 463,
		ha: 560,
		o: "m 463 791 q 365 627 463 706 q 151 483 258 555 l 455 483 l 455 382 l 0 382 q 84 565 0 488 q 244 672 97 576 q 331 784 331 727 q 299 850 331 824 q 228 876 268 876 q 159 848 187 876 q 132 762 132 820 l 10 762 q 78 924 10 866 q 228 976 137 976 q 392 925 322 976 q 463 791 463 874 "
	},
	"–": {
		x_min: 0,
		x_max: 704.171875,
		ha: 801,
		o: "m 704 297 l 0 297 l 0 450 l 704 450 l 704 297 "
	},
	"Κ": {
		x_min: 0,
		x_max: 899.671875,
		ha: 969,
		o: "m 899 0 l 646 0 l 316 462 l 208 355 l 208 0 l 0 0 l 0 1013 l 208 1013 l 208 596 l 603 1013 l 863 1013 l 460 603 l 899 0 "
	},
	"ƒ": {
		x_min: -46,
		x_max: 440,
		ha: 525,
		o: "m 440 609 l 316 609 l 149 -277 l -46 -277 l 121 609 l 14 609 l 14 749 l 121 749 q 159 949 121 894 q 344 1019 208 1019 l 440 1015 l 440 855 l 377 855 q 326 841 338 855 q 314 797 314 827 q 314 773 314 786 q 314 749 314 761 l 440 749 l 440 609 "
	},
	e: {
		x_min: 0,
		x_max: 708,
		ha: 808,
		o: "m 708 321 l 207 321 q 254 186 207 236 q 362 141 298 141 q 501 227 453 141 l 700 227 q 566 36 662 104 q 362 -26 477 -26 q 112 72 213 -26 q 0 369 0 182 q 95 683 0 573 q 358 793 191 793 q 619 677 531 793 q 708 321 708 561 m 501 453 q 460 571 501 531 q 353 612 420 612 q 247 570 287 612 q 207 453 207 529 l 501 453 "
	},
	"ό": {
		x_min: 0,
		x_max: 764,
		ha: 863,
		o: "m 380 -25 q 105 87 211 -25 q 0 372 0 200 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 372 764 544 q 658 87 764 200 q 380 -25 552 -25 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 218 204 283 q 379 142 294 142 m 593 1039 l 391 823 l 293 823 l 415 1039 l 593 1039 "
	},
	J: {
		x_min: 0,
		x_max: 649,
		ha: 760,
		o: "m 649 294 q 573 48 649 125 q 327 -29 497 -29 q 61 82 136 -29 q 0 375 0 173 l 200 375 l 199 309 q 219 194 199 230 q 321 145 249 145 q 418 193 390 145 q 441 307 441 232 l 441 1013 l 649 1013 l 649 294 "
	},
	"»": {
		x_min: -0.234375,
		x_max: 526,
		ha: 624,
		o: "m 526 286 l 297 87 l 296 250 l 437 373 l 297 495 l 297 660 l 526 461 l 526 286 m 229 286 l 0 87 l 0 250 l 140 373 l 0 495 l 0 660 l 229 461 l 229 286 "
	},
	"©": {
		x_min: 3,
		x_max: 1007,
		ha: 1104,
		o: "m 507 -6 q 129 153 269 -6 q 3 506 3 298 q 127 857 3 713 q 502 1017 266 1017 q 880 855 740 1017 q 1007 502 1007 711 q 882 152 1007 295 q 507 -6 743 -6 m 502 934 q 184 800 302 934 q 79 505 79 680 q 184 210 79 331 q 501 76 302 76 q 819 210 701 76 q 925 507 925 331 q 820 800 925 682 q 502 934 704 934 m 758 410 q 676 255 748 313 q 506 197 605 197 q 298 291 374 197 q 229 499 229 377 q 297 713 229 624 q 494 811 372 811 q 666 760 593 811 q 752 616 739 710 l 621 616 q 587 688 621 658 q 509 719 554 719 q 404 658 441 719 q 368 511 368 598 q 403 362 368 427 q 498 298 438 298 q 624 410 606 298 l 758 410 "
	},
	"ώ": {
		x_min: 0,
		x_max: 945,
		ha: 1051,
		o: "m 566 528 l 372 528 l 372 323 q 372 298 372 311 q 373 271 372 285 q 360 183 373 211 q 292 142 342 142 q 219 222 243 142 q 203 365 203 279 q 241 565 203 461 q 334 748 273 650 l 130 748 q 36 552 68 650 q 0 337 0 444 q 69 96 0 204 q 276 -29 149 -29 q 390 0 337 -29 q 470 78 444 28 q 551 0 495 30 q 668 -29 608 -29 q 874 96 793 -29 q 945 337 945 205 q 910 547 945 444 q 814 748 876 650 l 610 748 q 703 565 671 650 q 742 365 742 462 q 718 189 742 237 q 651 142 694 142 q 577 190 597 142 q 565 289 565 221 l 565 323 l 566 528 m 718 1039 l 516 823 l 417 823 l 540 1039 l 718 1039 "
	},
	"^": {
		x_min: 197.21875,
		x_max: 630.5625,
		ha: 828,
		o: "m 630 836 l 536 836 l 413 987 l 294 836 l 197 836 l 331 1090 l 493 1090 l 630 836 "
	},
	"«": {
		x_min: 0,
		x_max: 526.546875,
		ha: 624,
		o: "m 526 87 l 297 286 l 297 461 l 526 660 l 526 495 l 385 373 l 526 250 l 526 87 m 229 87 l 0 286 l 0 461 l 229 660 l 229 495 l 88 373 l 229 250 l 229 87 "
	},
	D: {
		x_min: 0,
		x_max: 864,
		ha: 968,
		o: "m 400 1013 q 736 874 608 1013 q 864 523 864 735 q 717 146 864 293 q 340 0 570 0 l 0 0 l 0 1013 l 400 1013 m 398 837 l 206 837 l 206 182 l 372 182 q 584 276 507 182 q 657 504 657 365 q 594 727 657 632 q 398 837 522 837 "
	},
	"∙": {
		x_min: 0,
		x_max: 207,
		ha: 304,
		o: "m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 "
	},
	"ÿ": {
		x_min: 0,
		x_max: 47,
		ha: 125,
		o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 "
	},
	w: {
		x_min: 0,
		x_max: 1056.953125,
		ha: 1150,
		o: "m 1056 749 l 848 0 l 647 0 l 527 536 l 412 0 l 211 0 l 0 749 l 202 749 l 325 226 l 429 748 l 633 748 l 740 229 l 864 749 l 1056 749 "
	},
	$: {
		x_min: 0,
		x_max: 704,
		ha: 800,
		o: "m 682 693 l 495 693 q 468 782 491 749 q 391 831 441 824 l 391 579 q 633 462 562 534 q 704 259 704 389 q 616 57 704 136 q 391 -22 528 -22 l 391 -156 l 308 -156 l 308 -22 q 76 69 152 -7 q 0 300 0 147 l 183 300 q 215 191 190 230 q 308 128 245 143 l 308 414 q 84 505 157 432 q 12 700 12 578 q 89 902 12 824 q 308 981 166 981 l 308 1069 l 391 1069 l 391 981 q 595 905 521 981 q 682 693 670 829 m 308 599 l 308 831 q 228 796 256 831 q 200 712 200 762 q 225 642 200 668 q 308 599 251 617 m 391 128 q 476 174 449 140 q 504 258 504 207 q 391 388 504 354 l 391 128 "
	},
	"\\": {
		x_min: -0.03125,
		x_max: 434.765625,
		ha: 532,
		o: "m 434 -128 l 341 -128 l 0 1039 l 91 1040 l 434 -128 "
	},
	"µ": {
		x_min: 0,
		x_max: 647,
		ha: 754,
		o: "m 647 0 l 478 0 l 478 68 q 412 9 448 30 q 330 -11 375 -11 q 261 3 296 -11 q 199 43 226 18 l 199 -277 l 0 -277 l 0 749 l 199 749 l 199 358 q 216 221 199 267 q 322 151 244 151 q 435 240 410 151 q 448 401 448 283 l 448 749 l 647 749 l 647 0 "
	},
	"Ι": {
		x_min: 42,
		x_max: 250,
		ha: 413,
		o: "m 250 0 l 42 0 l 42 1013 l 250 1013 l 250 0 "
	},
	"Ύ": {
		x_min: 0,
		x_max: 1211.15625,
		ha: 1289,
		o: "m 1211 1012 l 907 376 l 907 0 l 697 0 l 697 376 l 374 1012 l 583 1012 l 802 576 l 1001 1012 l 1211 1012 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "
	},
	"’": {
		x_min: 0,
		x_max: 192,
		ha: 289,
		o: "m 192 834 q 137 692 192 751 q 0 626 83 634 l 0 697 q 101 831 101 723 l 0 831 l 0 1013 l 192 1013 l 192 834 "
	},
	"Ν": {
		x_min: 0,
		x_max: 833,
		ha: 946,
		o: "m 833 0 l 617 0 l 206 696 l 206 0 l 0 0 l 0 1013 l 216 1013 l 629 315 l 629 1013 l 833 1013 l 833 0 "
	},
	"-": {
		x_min: 27.78125,
		x_max: 413.890625,
		ha: 525,
		o: "m 413 279 l 27 279 l 27 468 l 413 468 l 413 279 "
	},
	Q: {
		x_min: 0,
		x_max: 995.59375,
		ha: 1096,
		o: "m 995 49 l 885 -70 l 762 42 q 641 -12 709 4 q 497 -29 572 -29 q 135 123 271 -29 q 0 504 0 276 q 131 881 0 731 q 497 1040 270 1040 q 859 883 719 1040 q 994 506 994 731 q 966 321 994 413 q 884 152 938 229 l 995 49 m 730 299 q 767 395 755 344 q 779 504 779 446 q 713 743 779 644 q 505 857 638 857 q 284 745 366 857 q 210 501 210 644 q 279 265 210 361 q 492 157 357 157 q 615 181 557 157 l 508 287 l 620 405 l 730 299 "
	},
	"ς": {
		x_min: 0,
		x_max: 731.78125,
		ha: 768,
		o: "m 731 448 l 547 448 q 485 571 531 533 q 369 610 440 610 q 245 537 292 610 q 204 394 204 473 q 322 186 204 238 q 540 133 430 159 q 659 -15 659 98 q 643 -141 659 -80 q 595 -278 627 -202 l 423 -278 q 458 -186 448 -215 q 474 -88 474 -133 q 352 0 474 -27 q 123 80 181 38 q 0 382 0 170 q 98 660 0 549 q 367 777 202 777 q 622 683 513 777 q 731 448 731 589 "
	},
	M: {
		x_min: 0,
		x_max: 1019,
		ha: 1135,
		o: "m 1019 0 l 823 0 l 823 819 l 618 0 l 402 0 l 194 818 l 194 0 l 0 0 l 0 1013 l 309 1012 l 510 241 l 707 1013 l 1019 1013 l 1019 0 "
	},
	"Ψ": {
		x_min: 0,
		x_max: 995,
		ha: 1085,
		o: "m 995 698 q 924 340 995 437 q 590 200 841 227 l 590 0 l 404 0 l 404 200 q 70 340 152 227 q 0 698 0 437 l 0 1013 l 188 1013 l 188 694 q 212 472 188 525 q 404 383 254 383 l 404 1013 l 590 1013 l 590 383 q 781 472 740 383 q 807 694 807 525 l 807 1013 l 995 1013 l 995 698 "
	},
	C: {
		x_min: 0,
		x_max: 970.828125,
		ha: 1043,
		o: "m 970 345 q 802 70 933 169 q 490 -29 672 -29 q 130 130 268 -29 q 0 506 0 281 q 134 885 0 737 q 502 1040 275 1040 q 802 939 668 1040 q 965 679 936 838 l 745 679 q 649 809 716 761 q 495 857 582 857 q 283 747 361 857 q 214 508 214 648 q 282 267 214 367 q 493 154 359 154 q 651 204 584 154 q 752 345 718 255 l 970 345 "
	},
	"!": {
		x_min: 0,
		x_max: 204,
		ha: 307,
		o: "m 204 739 q 182 515 204 686 q 152 282 167 398 l 52 282 q 13 589 27 473 q 0 739 0 704 l 0 1013 l 204 1013 l 204 739 m 204 0 l 0 0 l 0 203 l 204 203 l 204 0 "
	},
	"{": {
		x_min: 0,
		x_max: 501.390625,
		ha: 599,
		o: "m 501 -285 q 229 -209 301 -285 q 176 -35 176 -155 q 182 47 176 -8 q 189 126 189 103 q 156 245 189 209 q 0 294 112 294 l 0 438 q 154 485 111 438 q 189 603 189 522 q 186 666 189 636 q 176 783 176 772 q 231 945 176 894 q 501 1015 306 1015 l 501 872 q 370 833 408 872 q 340 737 340 801 q 342 677 340 705 q 353 569 353 579 q 326 451 353 496 q 207 366 291 393 q 327 289 294 346 q 353 164 353 246 q 348 79 353 132 q 344 17 344 26 q 372 -95 344 -58 q 501 -141 408 -141 l 501 -285 "
	},
	X: {
		x_min: 0,
		x_max: 894.453125,
		ha: 999,
		o: "m 894 0 l 654 0 l 445 351 l 238 0 l 0 0 l 316 516 l 0 1013 l 238 1013 l 445 659 l 652 1013 l 894 1013 l 577 519 l 894 0 "
	},
	"#": {
		x_min: 0,
		x_max: 1019.453125,
		ha: 1117,
		o: "m 1019 722 l 969 582 l 776 581 l 717 417 l 919 417 l 868 279 l 668 278 l 566 -6 l 413 -5 l 516 279 l 348 279 l 247 -6 l 94 -6 l 196 278 l 0 279 l 49 417 l 245 417 l 304 581 l 98 582 l 150 722 l 354 721 l 455 1006 l 606 1006 l 507 721 l 673 722 l 776 1006 l 927 1006 l 826 721 l 1019 722 m 627 581 l 454 581 l 394 417 l 567 417 l 627 581 "
	},
	"ι": {
		x_min: 42,
		x_max: 242,
		ha: 389,
		o: "m 242 0 l 42 0 l 42 749 l 242 749 l 242 0 "
	},
	"Ά": {
		x_min: 0,
		x_max: 995.828125,
		ha: 1072,
		o: "m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 m 995 0 l 776 0 l 708 208 l 315 208 l 247 0 l 29 0 l 390 1012 l 629 1012 l 995 0 m 652 376 l 509 809 l 369 376 l 652 376 "
	},
	")": {
		x_min: 0,
		x_max: 389,
		ha: 486,
		o: "m 389 357 q 319 14 389 187 q 145 -293 259 -134 l 0 -293 q 139 22 90 -142 q 189 358 189 187 q 139 689 189 525 q 0 1013 90 853 l 145 1013 q 319 703 258 857 q 389 357 389 528 "
	},
	"ε": {
		x_min: 16.671875,
		x_max: 652.78125,
		ha: 742,
		o: "m 652 259 q 565 49 652 123 q 340 -25 479 -25 q 102 39 188 -25 q 16 197 16 104 q 45 299 16 249 q 134 390 75 348 q 58 456 86 419 q 25 552 25 502 q 120 717 25 653 q 322 776 208 776 q 537 710 456 776 q 625 508 625 639 l 445 508 q 415 585 445 563 q 327 608 386 608 q 254 590 293 608 q 215 544 215 573 q 252 469 215 490 q 336 453 280 453 q 369 455 347 453 q 400 456 391 456 l 400 308 l 329 308 q 247 291 280 308 q 204 223 204 269 q 255 154 204 172 q 345 143 286 143 q 426 174 398 143 q 454 259 454 206 l 652 259 "
	},
	"Δ": {
		x_min: 0,
		x_max: 981.953125,
		ha: 1057,
		o: "m 981 0 l 0 0 l 386 1013 l 594 1013 l 981 0 m 715 175 l 490 765 l 266 175 l 715 175 "
	},
	"}": {
		x_min: 0,
		x_max: 500,
		ha: 597,
		o: "m 500 294 q 348 246 390 294 q 315 128 315 209 q 320 42 315 101 q 326 -48 326 -17 q 270 -214 326 -161 q 0 -285 196 -285 l 0 -141 q 126 -97 90 -141 q 154 8 154 -64 q 150 91 154 37 q 146 157 146 145 q 172 281 146 235 q 294 366 206 339 q 173 451 208 390 q 146 576 146 500 q 150 655 146 603 q 154 731 154 708 q 126 831 154 799 q 0 872 90 872 l 0 1015 q 270 944 196 1015 q 326 777 326 891 q 322 707 326 747 q 313 593 313 612 q 347 482 313 518 q 500 438 390 438 l 500 294 "
	},
	"‰": {
		x_min: 0,
		x_max: 1681,
		ha: 1775,
		o: "m 861 484 q 1048 404 979 484 q 1111 228 1111 332 q 1048 51 1111 123 q 859 -29 979 -29 q 672 50 740 -29 q 610 227 610 122 q 672 403 610 331 q 861 484 741 484 m 861 120 q 939 151 911 120 q 967 226 967 183 q 942 299 967 270 q 861 333 912 333 q 783 301 811 333 q 756 226 756 269 q 783 151 756 182 q 861 120 810 120 m 904 984 l 316 -28 l 205 -29 l 793 983 l 904 984 m 250 984 q 436 904 366 984 q 499 730 499 832 q 436 552 499 626 q 248 472 366 472 q 62 552 132 472 q 0 728 0 624 q 62 903 0 831 q 250 984 132 984 m 249 835 q 169 801 198 835 q 140 725 140 768 q 167 652 140 683 q 247 621 195 621 q 327 654 298 621 q 357 730 357 687 q 329 803 357 772 q 249 835 301 835 m 1430 484 q 1618 404 1548 484 q 1681 228 1681 332 q 1618 51 1681 123 q 1429 -29 1548 -29 q 1241 50 1309 -29 q 1179 227 1179 122 q 1241 403 1179 331 q 1430 484 1311 484 m 1431 120 q 1509 151 1481 120 q 1537 226 1537 183 q 1511 299 1537 270 q 1431 333 1482 333 q 1352 301 1380 333 q 1325 226 1325 269 q 1352 151 1325 182 q 1431 120 1379 120 "
	},
	a: {
		x_min: 0,
		x_max: 700,
		ha: 786,
		o: "m 700 0 l 488 0 q 465 93 469 45 q 365 5 427 37 q 233 -26 303 -26 q 65 37 130 -26 q 0 205 0 101 q 120 409 0 355 q 343 452 168 431 q 465 522 465 468 q 424 588 465 565 q 337 611 384 611 q 250 581 285 611 q 215 503 215 552 l 26 503 q 113 707 26 633 q 328 775 194 775 q 538 723 444 775 q 657 554 657 659 l 657 137 q 666 73 657 101 q 700 33 675 45 l 700 0 m 465 297 l 465 367 q 299 322 358 340 q 193 217 193 287 q 223 150 193 174 q 298 127 254 127 q 417 175 370 127 q 465 297 465 224 "
	},
	"—": {
		x_min: 0,
		x_max: 941.671875,
		ha: 1039,
		o: "m 941 297 l 0 297 l 0 450 l 941 450 l 941 297 "
	},
	"=": {
		x_min: 29.171875,
		x_max: 798.609375,
		ha: 828,
		o: "m 798 502 l 29 502 l 29 635 l 798 635 l 798 502 m 798 204 l 29 204 l 29 339 l 798 339 l 798 204 "
	},
	N: {
		x_min: 0,
		x_max: 833,
		ha: 949,
		o: "m 833 0 l 617 0 l 206 695 l 206 0 l 0 0 l 0 1013 l 216 1013 l 629 315 l 629 1013 l 833 1013 l 833 0 "
	},
	"ρ": {
		x_min: 0,
		x_max: 722,
		ha: 810,
		o: "m 364 -17 q 271 0 313 -17 q 194 48 230 16 l 194 -278 l 0 -278 l 0 370 q 87 656 0 548 q 358 775 183 775 q 626 655 524 775 q 722 372 722 541 q 621 95 722 208 q 364 -17 520 -17 m 360 607 q 237 529 280 607 q 201 377 201 463 q 234 229 201 292 q 355 147 277 147 q 467 210 419 147 q 515 374 515 273 q 471 537 515 468 q 360 607 428 607 "
	},
	"¯": {
		x_min: 0,
		x_max: 775,
		ha: 771,
		o: "m 775 958 l 0 958 l 0 1111 l 775 1111 l 775 958 "
	},
	Z: {
		x_min: 0,
		x_max: 804.171875,
		ha: 906,
		o: "m 804 836 l 251 182 l 793 182 l 793 0 l 0 0 l 0 176 l 551 830 l 11 830 l 11 1013 l 804 1013 l 804 836 "
	},
	u: {
		x_min: 0,
		x_max: 668,
		ha: 782,
		o: "m 668 0 l 474 0 l 474 89 q 363 9 425 37 q 233 -19 301 -19 q 61 53 123 -19 q 0 239 0 126 l 0 749 l 199 749 l 199 296 q 225 193 199 233 q 316 146 257 146 q 424 193 380 146 q 469 304 469 240 l 469 749 l 668 749 l 668 0 "
	},
	k: {
		x_min: 0,
		x_max: 688.890625,
		ha: 771,
		o: "m 688 0 l 450 0 l 270 316 l 196 237 l 196 0 l 0 0 l 0 1013 l 196 1013 l 196 483 l 433 748 l 675 748 l 413 469 l 688 0 "
	},
	"Η": {
		x_min: 0,
		x_max: 837,
		ha: 950,
		o: "m 837 0 l 627 0 l 627 450 l 210 450 l 210 0 l 0 0 l 0 1013 l 210 1013 l 210 635 l 627 635 l 627 1013 l 837 1013 l 837 0 "
	},
	"Α": {
		x_min: 0,
		x_max: 966.671875,
		ha: 1043,
		o: "m 966 0 l 747 0 l 679 208 l 286 208 l 218 0 l 0 0 l 361 1013 l 600 1013 l 966 0 m 623 376 l 480 809 l 340 376 l 623 376 "
	},
	s: {
		x_min: 0,
		x_max: 681,
		ha: 775,
		o: "m 681 229 q 568 33 681 105 q 340 -29 471 -29 q 107 39 202 -29 q 0 245 0 114 l 201 245 q 252 155 201 189 q 358 128 295 128 q 436 144 401 128 q 482 205 482 166 q 363 284 482 255 q 143 348 181 329 q 25 533 25 408 q 129 716 25 647 q 340 778 220 778 q 554 710 465 778 q 658 522 643 643 l 463 522 q 419 596 458 570 q 327 622 380 622 q 255 606 290 622 q 221 556 221 590 q 339 473 221 506 q 561 404 528 420 q 681 229 681 344 "
	},
	B: {
		x_min: 0,
		x_max: 835,
		ha: 938,
		o: "m 674 547 q 791 450 747 518 q 835 304 835 383 q 718 75 835 158 q 461 0 612 0 l 0 0 l 0 1013 l 477 1013 q 697 951 609 1013 q 797 754 797 880 q 765 630 797 686 q 674 547 734 575 m 438 621 q 538 646 495 621 q 590 730 590 676 q 537 814 590 785 q 436 838 494 838 l 199 838 l 199 621 l 438 621 m 445 182 q 561 211 513 182 q 618 311 618 247 q 565 410 618 375 q 444 446 512 446 l 199 446 l 199 182 l 445 182 "
	},
	"…": {
		x_min: 0,
		x_max: 819,
		ha: 963,
		o: "m 206 0 l 0 0 l 0 207 l 206 207 l 206 0 m 512 0 l 306 0 l 306 207 l 512 207 l 512 0 m 819 0 l 613 0 l 613 207 l 819 207 l 819 0 "
	},
	"?": {
		x_min: 1,
		x_max: 687,
		ha: 785,
		o: "m 687 734 q 621 563 687 634 q 501 454 560 508 q 436 293 436 386 l 251 293 l 251 391 q 363 557 251 462 q 476 724 476 653 q 432 827 476 788 q 332 866 389 866 q 238 827 275 866 q 195 699 195 781 l 1 699 q 110 955 1 861 q 352 1040 210 1040 q 582 963 489 1040 q 687 734 687 878 m 446 0 l 243 0 l 243 203 l 446 203 l 446 0 "
	},
	H: {
		x_min: 0,
		x_max: 838,
		ha: 953,
		o: "m 838 0 l 628 0 l 628 450 l 210 450 l 210 0 l 0 0 l 0 1013 l 210 1013 l 210 635 l 628 635 l 628 1013 l 838 1013 l 838 0 "
	},
	"ν": {
		x_min: 0,
		x_max: 740.28125,
		ha: 828,
		o: "m 740 749 l 473 0 l 266 0 l 0 749 l 222 749 l 373 211 l 529 749 l 740 749 "
	},
	c: {
		x_min: 0,
		x_max: 751.390625,
		ha: 828,
		o: "m 751 282 q 625 58 725 142 q 384 -26 526 -26 q 107 84 215 -26 q 0 366 0 195 q 98 651 0 536 q 370 774 204 774 q 616 700 518 774 q 751 486 715 626 l 536 486 q 477 570 516 538 q 380 607 434 607 q 248 533 298 607 q 204 378 204 466 q 242 219 204 285 q 377 139 290 139 q 483 179 438 139 q 543 282 527 220 l 751 282 "
	},
	"¶": {
		x_min: 0,
		x_max: 566.671875,
		ha: 678,
		o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 "
	},
	"β": {
		x_min: 0,
		x_max: 703,
		ha: 789,
		o: "m 510 539 q 651 429 600 501 q 703 262 703 357 q 617 53 703 136 q 404 -29 532 -29 q 199 51 279 -29 l 199 -278 l 0 -278 l 0 627 q 77 911 0 812 q 343 1021 163 1021 q 551 957 464 1021 q 649 769 649 886 q 613 638 649 697 q 510 539 577 579 m 344 136 q 452 181 408 136 q 497 291 497 227 q 435 409 497 369 q 299 444 381 444 l 299 600 q 407 634 363 600 q 452 731 452 669 q 417 820 452 784 q 329 857 382 857 q 217 775 246 857 q 199 622 199 725 l 199 393 q 221 226 199 284 q 344 136 254 136 "
	},
	"Μ": {
		x_min: 0,
		x_max: 1019,
		ha: 1132,
		o: "m 1019 0 l 823 0 l 823 818 l 617 0 l 402 0 l 194 818 l 194 0 l 0 0 l 0 1013 l 309 1013 l 509 241 l 708 1013 l 1019 1013 l 1019 0 "
	},
	"Ό": {
		x_min: 0.15625,
		x_max: 1174,
		ha: 1271,
		o: "m 676 -29 q 312 127 451 -29 q 179 505 179 277 q 311 883 179 733 q 676 1040 449 1040 q 1040 883 901 1040 q 1174 505 1174 733 q 1041 127 1174 277 q 676 -29 903 -29 m 676 154 q 890 266 811 154 q 961 506 961 366 q 891 745 961 648 q 676 857 812 857 q 462 747 541 857 q 392 506 392 648 q 461 266 392 365 q 676 154 540 154 m 314 1034 l 98 779 l 0 779 l 136 1034 l 314 1034 "
	},
	"Ή": {
		x_min: 0,
		x_max: 1248,
		ha: 1361,
		o: "m 1248 0 l 1038 0 l 1038 450 l 621 450 l 621 0 l 411 0 l 411 1012 l 621 1012 l 621 635 l 1038 635 l 1038 1012 l 1248 1012 l 1248 0 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "
	},
	"•": {
		x_min: -27.78125,
		x_max: 691.671875,
		ha: 775,
		o: "m 691 508 q 588 252 691 358 q 331 147 486 147 q 77 251 183 147 q -27 508 -27 355 q 75 761 -27 655 q 331 868 179 868 q 585 763 479 868 q 691 508 691 658 "
	},
	"¥": {
		x_min: 0,
		x_max: 836,
		ha: 931,
		o: "m 195 625 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 l 650 625 l 777 625 l 777 472 l 578 472 l 538 389 l 777 389 l 777 236 l 532 236 l 532 0 l 322 0 l 322 236 l 79 236 l 79 389 l 315 389 l 273 472 l 79 472 l 79 625 l 195 625 "
	},
	"(": {
		x_min: 0,
		x_max: 388.890625,
		ha: 486,
		o: "m 388 -293 l 243 -293 q 70 14 130 -134 q 0 357 0 189 q 69 703 0 526 q 243 1013 129 856 l 388 1013 q 248 695 297 860 q 200 358 200 530 q 248 24 200 187 q 388 -293 297 -138 "
	},
	U: {
		x_min: 0,
		x_max: 813,
		ha: 926,
		o: "m 813 362 q 697 79 813 187 q 405 -29 582 -29 q 114 78 229 -29 q 0 362 0 186 l 0 1013 l 210 1013 l 210 387 q 260 226 210 291 q 408 154 315 154 q 554 226 500 154 q 603 387 603 291 l 603 1013 l 813 1013 l 813 362 "
	},
	"γ": {
		x_min: 0.0625,
		x_max: 729.234375,
		ha: 815,
		o: "m 729 749 l 457 37 l 457 -278 l 257 -278 l 257 37 q 218 155 243 95 q 170 275 194 215 l 0 749 l 207 749 l 363 284 l 522 749 l 729 749 "
	},
	"α": {
		x_min: -1,
		x_max: 722,
		ha: 835,
		o: "m 722 0 l 531 0 l 530 101 q 433 8 491 41 q 304 -25 375 -25 q 72 104 157 -25 q -1 372 -1 216 q 72 643 -1 530 q 308 775 158 775 q 433 744 375 775 q 528 656 491 713 l 528 749 l 722 749 l 722 0 m 361 601 q 233 527 277 601 q 196 375 196 464 q 232 224 196 288 q 358 144 277 144 q 487 217 441 144 q 528 370 528 281 q 489 523 528 457 q 361 601 443 601 "
	},
	F: {
		x_min: 0,
		x_max: 706.953125,
		ha: 778,
		o: "m 706 837 l 206 837 l 206 606 l 645 606 l 645 431 l 206 431 l 206 0 l 0 0 l 0 1013 l 706 1013 l 706 837 "
	},
	"­": {
		x_min: 0,
		x_max: 704.171875,
		ha: 801,
		o: "m 704 297 l 0 297 l 0 450 l 704 450 l 704 297 "
	},
	":": {
		x_min: 0,
		x_max: 207,
		ha: 304,
		o: "m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 m 207 0 l 0 0 l 0 207 l 207 207 l 207 0 "
	},
	"Χ": {
		x_min: 0,
		x_max: 894.453125,
		ha: 978,
		o: "m 894 0 l 654 0 l 445 351 l 238 0 l 0 0 l 316 516 l 0 1013 l 238 1013 l 445 660 l 652 1013 l 894 1013 l 577 519 l 894 0 "
	},
	"*": {
		x_min: 115,
		x_max: 713,
		ha: 828,
		o: "m 713 740 l 518 688 l 651 525 l 531 438 l 412 612 l 290 439 l 173 523 l 308 688 l 115 741 l 159 880 l 342 816 l 343 1013 l 482 1013 l 481 816 l 664 880 l 713 740 "
	},
	"†": {
		x_min: 0,
		x_max: 809,
		ha: 894,
		o: "m 509 804 l 809 804 l 809 621 l 509 621 l 509 0 l 299 0 l 299 621 l 0 621 l 0 804 l 299 804 l 299 1011 l 509 1011 l 509 804 "
	},
	"°": {
		x_min: -1,
		x_max: 363,
		ha: 460,
		o: "m 181 808 q 46 862 94 808 q -1 992 -1 917 q 44 1118 -1 1066 q 181 1175 96 1175 q 317 1118 265 1175 q 363 991 363 1066 q 315 862 363 917 q 181 808 267 808 m 181 908 q 240 933 218 908 q 263 992 263 958 q 242 1051 263 1027 q 181 1075 221 1075 q 120 1050 142 1075 q 99 991 99 1026 q 120 933 99 958 q 181 908 142 908 "
	},
	V: {
		x_min: 0,
		x_max: 895.828125,
		ha: 997,
		o: "m 895 1013 l 550 0 l 347 0 l 0 1013 l 231 1013 l 447 256 l 666 1013 l 895 1013 "
	},
	"Ξ": {
		x_min: 0,
		x_max: 751.390625,
		ha: 800,
		o: "m 733 826 l 5 826 l 5 1012 l 733 1012 l 733 826 m 681 432 l 65 432 l 65 617 l 681 617 l 681 432 m 751 0 l 0 0 l 0 183 l 751 183 l 751 0 "
	},
	" ": {
		x_min: 0,
		x_max: 0,
		ha: 853
	},
	"Ϋ": {
		x_min: -0.21875,
		x_max: 836.171875,
		ha: 914,
		o: "m 610 1046 l 454 1046 l 454 1215 l 610 1215 l 610 1046 m 369 1046 l 212 1046 l 212 1215 l 369 1215 l 369 1046 m 836 1012 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1012 l 208 1012 l 427 576 l 626 1012 l 836 1012 "
	},
	"”": {
		x_min: 0,
		x_max: 469,
		ha: 567,
		o: "m 192 834 q 137 692 192 751 q 0 626 83 634 l 0 697 q 101 831 101 723 l 0 831 l 0 1013 l 192 1013 l 192 834 m 469 834 q 414 692 469 751 q 277 626 360 634 l 277 697 q 379 831 379 723 l 277 831 l 277 1013 l 469 1013 l 469 834 "
	},
	"@": {
		x_min: 0,
		x_max: 1276,
		ha: 1374,
		o: "m 1115 -52 q 895 -170 1015 -130 q 647 -211 776 -211 q 158 -34 334 -211 q 0 360 0 123 q 179 810 0 621 q 698 1019 377 1019 q 1138 859 981 1019 q 1276 514 1276 720 q 1173 210 1276 335 q 884 75 1062 75 q 784 90 810 75 q 737 186 749 112 q 647 104 698 133 q 532 75 596 75 q 360 144 420 75 q 308 308 308 205 q 398 568 308 451 q 638 696 497 696 q 731 671 690 696 q 805 604 772 647 l 840 673 l 964 673 q 886 373 915 490 q 856 239 856 257 q 876 201 856 214 q 920 188 895 188 q 1084 284 1019 188 q 1150 511 1150 380 q 1051 779 1150 672 q 715 905 934 905 q 272 734 439 905 q 121 363 121 580 q 250 41 121 170 q 647 -103 394 -103 q 863 -67 751 -103 q 1061 26 975 -32 l 1115 -52 m 769 483 q 770 500 770 489 q 733 567 770 539 q 651 596 695 596 q 508 504 566 596 q 457 322 457 422 q 483 215 457 256 q 561 175 509 175 q 671 221 625 175 q 733 333 718 268 l 769 483 "
	},
	"Ί": {
		x_min: 0,
		x_max: 619,
		ha: 732,
		o: "m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 m 619 0 l 411 0 l 411 1012 l 619 1012 l 619 0 "
	},
	i: {
		x_min: 14,
		x_max: 214,
		ha: 326,
		o: "m 214 830 l 14 830 l 14 1013 l 214 1013 l 214 830 m 214 0 l 14 0 l 14 748 l 214 748 l 214 0 "
	},
	"Β": {
		x_min: 0,
		x_max: 835,
		ha: 961,
		o: "m 675 547 q 791 450 747 518 q 835 304 835 383 q 718 75 835 158 q 461 0 612 0 l 0 0 l 0 1013 l 477 1013 q 697 951 609 1013 q 797 754 797 880 q 766 630 797 686 q 675 547 734 575 m 439 621 q 539 646 496 621 q 590 730 590 676 q 537 814 590 785 q 436 838 494 838 l 199 838 l 199 621 l 439 621 m 445 182 q 561 211 513 182 q 618 311 618 247 q 565 410 618 375 q 444 446 512 446 l 199 446 l 199 182 l 445 182 "
	},
	"υ": {
		x_min: 0,
		x_max: 656,
		ha: 767,
		o: "m 656 416 q 568 55 656 145 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 191 l 0 749 l 200 749 l 200 369 q 216 222 200 268 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 749 l 656 749 l 656 416 "
	},
	"]": {
		x_min: 0,
		x_max: 349,
		ha: 446,
		o: "m 349 -300 l 0 -300 l 0 -154 l 163 -154 l 163 866 l 0 866 l 0 1013 l 349 1013 l 349 -300 "
	},
	m: {
		x_min: 0,
		x_max: 1065,
		ha: 1174,
		o: "m 1065 0 l 866 0 l 866 483 q 836 564 866 532 q 759 596 807 596 q 663 555 700 596 q 627 454 627 514 l 627 0 l 433 0 l 433 481 q 403 563 433 531 q 323 596 374 596 q 231 554 265 596 q 197 453 197 513 l 197 0 l 0 0 l 0 748 l 189 748 l 189 665 q 279 745 226 715 q 392 775 333 775 q 509 744 455 775 q 606 659 563 713 q 695 744 640 713 q 814 775 749 775 q 992 702 920 775 q 1065 523 1065 630 l 1065 0 "
	},
	"χ": {
		x_min: 0,
		x_max: 759.71875,
		ha: 847,
		o: "m 759 -299 l 548 -299 l 379 66 l 215 -299 l 0 -299 l 261 233 l 13 749 l 230 749 l 379 400 l 527 749 l 738 749 l 500 238 l 759 -299 "
	},
	"ί": {
		x_min: 42,
		x_max: 371.171875,
		ha: 389,
		o: "m 242 0 l 42 0 l 42 748 l 242 748 l 242 0 m 371 1039 l 169 823 l 71 823 l 193 1039 l 371 1039 "
	},
	"Ζ": {
		x_min: 0,
		x_max: 804.171875,
		ha: 886,
		o: "m 804 835 l 251 182 l 793 182 l 793 0 l 0 0 l 0 176 l 551 829 l 11 829 l 11 1012 l 804 1012 l 804 835 "
	},
	R: {
		x_min: 0,
		x_max: 836.109375,
		ha: 947,
		o: "m 836 0 l 608 0 q 588 53 596 20 q 581 144 581 86 q 581 179 581 162 q 581 215 581 197 q 553 345 581 306 q 428 393 518 393 l 208 393 l 208 0 l 0 0 l 0 1013 l 491 1013 q 720 944 630 1013 q 819 734 819 869 q 778 584 819 654 q 664 485 738 513 q 757 415 727 463 q 794 231 794 358 l 794 170 q 800 84 794 116 q 836 31 806 51 l 836 0 m 462 838 l 208 838 l 208 572 l 452 572 q 562 604 517 572 q 612 704 612 640 q 568 801 612 765 q 462 838 525 838 "
	},
	o: {
		x_min: 0,
		x_max: 764,
		ha: 871,
		o: "m 380 -26 q 105 86 211 -26 q 0 371 0 199 q 104 660 0 545 q 380 775 209 775 q 658 659 552 775 q 764 371 764 544 q 658 86 764 199 q 380 -26 552 -26 m 379 141 q 515 216 466 141 q 557 373 557 280 q 515 530 557 465 q 379 607 466 607 q 245 530 294 607 q 204 373 204 465 q 245 217 204 282 q 379 141 294 141 "
	},
	K: {
		x_min: 0,
		x_max: 900,
		ha: 996,
		o: "m 900 0 l 647 0 l 316 462 l 208 355 l 208 0 l 0 0 l 0 1013 l 208 1013 l 208 595 l 604 1013 l 863 1013 l 461 603 l 900 0 "
	},
	",": {
		x_min: 0,
		x_max: 206,
		ha: 303,
		o: "m 206 5 q 150 -151 206 -88 q 0 -238 94 -213 l 0 -159 q 84 -100 56 -137 q 111 -2 111 -62 l 0 -2 l 0 205 l 206 205 l 206 5 "
	},
	d: {
		x_min: 0,
		x_max: 722,
		ha: 836,
		o: "m 722 0 l 530 0 l 530 101 q 303 -26 449 -26 q 72 103 155 -26 q 0 373 0 214 q 72 642 0 528 q 305 775 156 775 q 433 743 373 775 q 530 656 492 712 l 530 1013 l 722 1013 l 722 0 m 361 600 q 234 523 280 600 q 196 372 196 458 q 233 220 196 286 q 358 143 278 143 q 489 216 442 143 q 530 369 530 280 q 491 522 530 456 q 361 600 443 600 "
	},
	"¨": {
		x_min: 212,
		x_max: 609,
		ha: 933,
		o: "m 609 1046 l 453 1046 l 453 1216 l 609 1216 l 609 1046 m 369 1046 l 212 1046 l 212 1216 l 369 1216 l 369 1046 "
	},
	E: {
		x_min: 0,
		x_max: 761.109375,
		ha: 824,
		o: "m 761 0 l 0 0 l 0 1013 l 734 1013 l 734 837 l 206 837 l 206 621 l 690 621 l 690 446 l 206 446 l 206 186 l 761 186 l 761 0 "
	},
	Y: {
		x_min: 0,
		x_max: 836,
		ha: 931,
		o: "m 836 1013 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 "
	},
	"\"": {
		x_min: 0,
		x_max: 357,
		ha: 454,
		o: "m 357 604 l 225 604 l 225 988 l 357 988 l 357 604 m 132 604 l 0 604 l 0 988 l 132 988 l 132 604 "
	},
	"‹": {
		x_min: 35.984375,
		x_max: 791.671875,
		ha: 828,
		o: "m 791 17 l 36 352 l 35 487 l 791 823 l 791 672 l 229 421 l 791 168 l 791 17 "
	},
	"„": {
		x_min: 0,
		x_max: 483,
		ha: 588,
		o: "m 206 5 q 150 -151 206 -88 q 0 -238 94 -213 l 0 -159 q 84 -100 56 -137 q 111 -2 111 -62 l 0 -2 l 0 205 l 206 205 l 206 5 m 483 5 q 427 -151 483 -88 q 277 -238 371 -213 l 277 -159 q 361 -100 334 -137 q 388 -2 388 -62 l 277 -2 l 277 205 l 483 205 l 483 5 "
	},
	"δ": {
		x_min: 6,
		x_max: 732,
		ha: 835,
		o: "m 732 352 q 630 76 732 177 q 354 -25 529 -25 q 101 74 197 -25 q 6 333 6 174 q 89 581 6 480 q 323 690 178 690 q 66 864 201 787 l 66 1013 l 669 1013 l 669 856 l 348 856 q 532 729 461 789 q 673 566 625 651 q 732 352 732 465 m 419 551 q 259 496 321 551 q 198 344 198 441 q 238 208 198 267 q 357 140 283 140 q 484 203 437 140 q 526 344 526 260 q 499 466 526 410 q 419 551 473 521 "
	},
	"έ": {
		x_min: 16.671875,
		x_max: 652.78125,
		ha: 742,
		o: "m 652 259 q 565 49 652 123 q 340 -25 479 -25 q 102 39 188 -25 q 16 197 16 104 q 45 299 16 250 q 134 390 75 348 q 58 456 86 419 q 25 552 25 502 q 120 717 25 653 q 322 776 208 776 q 537 710 456 776 q 625 508 625 639 l 445 508 q 415 585 445 563 q 327 608 386 608 q 254 590 293 608 q 215 544 215 573 q 252 469 215 490 q 336 453 280 453 q 369 455 347 453 q 400 456 391 456 l 400 308 l 329 308 q 247 291 280 308 q 204 223 204 269 q 255 154 204 172 q 345 143 286 143 q 426 174 398 143 q 454 259 454 206 l 652 259 m 579 1039 l 377 823 l 279 823 l 401 1039 l 579 1039 "
	},
	"ω": {
		x_min: 0,
		x_max: 945,
		ha: 1051,
		o: "m 565 323 l 565 289 q 577 190 565 221 q 651 142 597 142 q 718 189 694 142 q 742 365 742 237 q 703 565 742 462 q 610 749 671 650 l 814 749 q 910 547 876 650 q 945 337 945 444 q 874 96 945 205 q 668 -29 793 -29 q 551 0 608 -29 q 470 78 495 30 q 390 0 444 28 q 276 -29 337 -29 q 69 96 149 -29 q 0 337 0 204 q 36 553 0 444 q 130 749 68 650 l 334 749 q 241 565 273 650 q 203 365 203 461 q 219 222 203 279 q 292 142 243 142 q 360 183 342 142 q 373 271 373 211 q 372 298 372 285 q 372 323 372 311 l 372 528 l 566 528 l 565 323 "
	},
	"´": {
		x_min: 0,
		x_max: 132,
		ha: 299,
		o: "m 132 604 l 0 604 l 0 988 l 132 988 l 132 604 "
	},
	"±": {
		x_min: 29,
		x_max: 798,
		ha: 828,
		o: "m 798 480 l 484 480 l 484 254 l 344 254 l 344 480 l 29 480 l 29 615 l 344 615 l 344 842 l 484 842 l 484 615 l 798 615 l 798 480 m 798 0 l 29 0 l 29 136 l 798 136 l 798 0 "
	},
	"|": {
		x_min: 0,
		x_max: 143,
		ha: 240,
		o: "m 143 462 l 0 462 l 0 984 l 143 984 l 143 462 m 143 -242 l 0 -242 l 0 280 l 143 280 l 143 -242 "
	},
	"ϋ": {
		x_min: 0,
		x_max: 656,
		ha: 767,
		o: "m 535 810 l 406 810 l 406 952 l 535 952 l 535 810 m 271 810 l 142 810 l 142 952 l 271 952 l 271 810 m 656 417 q 568 55 656 146 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 200 369 q 216 222 200 268 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 748 l 656 748 l 656 417 "
	},
	"§": {
		x_min: 0,
		x_max: 633,
		ha: 731,
		o: "m 633 469 q 601 356 633 406 q 512 274 569 305 q 570 197 548 242 q 593 105 593 152 q 501 -76 593 -5 q 301 -142 416 -142 q 122 -82 193 -142 q 43 108 43 -15 l 212 108 q 251 27 220 53 q 321 1 283 1 q 389 23 360 1 q 419 83 419 46 q 310 194 419 139 q 108 297 111 295 q 0 476 0 372 q 33 584 0 537 q 120 659 62 626 q 72 720 91 686 q 53 790 53 755 q 133 978 53 908 q 312 1042 207 1042 q 483 984 412 1042 q 574 807 562 921 l 409 807 q 379 875 409 851 q 307 900 349 900 q 244 881 270 900 q 218 829 218 862 q 324 731 218 781 q 524 636 506 647 q 633 469 633 565 m 419 334 q 473 411 473 372 q 451 459 473 436 q 390 502 430 481 l 209 595 q 167 557 182 577 q 153 520 153 537 q 187 461 153 491 q 263 413 212 440 l 419 334 "
	},
	b: {
		x_min: 0,
		x_max: 722,
		ha: 822,
		o: "m 416 -26 q 289 6 346 -26 q 192 101 232 39 l 192 0 l 0 0 l 0 1013 l 192 1013 l 192 656 q 286 743 226 712 q 415 775 346 775 q 649 644 564 775 q 722 374 722 533 q 649 106 722 218 q 416 -26 565 -26 m 361 600 q 232 524 279 600 q 192 371 192 459 q 229 221 192 284 q 357 145 275 145 q 487 221 441 145 q 526 374 526 285 q 488 523 526 460 q 361 600 442 600 "
	},
	q: {
		x_min: 0,
		x_max: 722,
		ha: 833,
		o: "m 722 -298 l 530 -298 l 530 97 q 306 -25 449 -25 q 73 104 159 -25 q 0 372 0 216 q 72 643 0 529 q 305 775 156 775 q 430 742 371 775 q 530 654 488 709 l 530 750 l 722 750 l 722 -298 m 360 601 q 234 527 278 601 q 197 378 197 466 q 233 225 197 291 q 357 144 277 144 q 488 217 441 144 q 530 370 530 282 q 491 523 530 459 q 360 601 443 601 "
	},
	"Ω": {
		x_min: -0.03125,
		x_max: 1008.53125,
		ha: 1108,
		o: "m 1008 0 l 589 0 l 589 199 q 717 368 670 265 q 764 580 764 471 q 698 778 764 706 q 504 855 629 855 q 311 773 380 855 q 243 563 243 691 q 289 360 243 458 q 419 199 336 262 l 419 0 l 0 0 l 0 176 l 202 176 q 77 355 123 251 q 32 569 32 459 q 165 908 32 776 q 505 1040 298 1040 q 844 912 711 1040 q 977 578 977 785 q 931 362 977 467 q 805 176 886 256 l 1008 176 l 1008 0 "
	},
	"ύ": {
		x_min: 0,
		x_max: 656,
		ha: 767,
		o: "m 656 417 q 568 55 656 146 q 326 -25 490 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 201 369 q 218 222 201 269 q 326 142 245 142 q 440 247 411 142 q 456 422 456 304 l 456 748 l 656 748 l 656 417 m 579 1039 l 378 823 l 279 823 l 401 1039 l 579 1039 "
	},
	z: {
		x_min: 0,
		x_max: 663.890625,
		ha: 753,
		o: "m 663 0 l 0 0 l 0 154 l 411 591 l 25 591 l 25 749 l 650 749 l 650 584 l 245 165 l 663 165 l 663 0 "
	},
	"™": {
		x_min: 0,
		x_max: 951,
		ha: 1063,
		o: "m 405 921 l 255 921 l 255 506 l 149 506 l 149 921 l 0 921 l 0 1013 l 405 1013 l 405 921 m 951 506 l 852 506 l 852 916 l 750 506 l 643 506 l 539 915 l 539 506 l 442 506 l 442 1013 l 595 1012 l 695 625 l 794 1013 l 951 1013 l 951 506 "
	},
	"ή": {
		x_min: 0,
		x_max: 669,
		ha: 779,
		o: "m 669 -278 l 469 -278 l 469 390 q 448 526 469 473 q 348 606 417 606 q 244 553 288 606 q 201 441 201 501 l 201 0 l 0 0 l 0 749 l 201 749 l 201 665 q 301 744 244 715 q 423 774 359 774 q 606 685 538 774 q 669 484 669 603 l 669 -278 m 495 1039 l 293 823 l 195 823 l 317 1039 l 495 1039 "
	},
	"Θ": {
		x_min: 0,
		x_max: 993,
		ha: 1092,
		o: "m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 133 883 0 733 q 497 1040 272 1040 q 861 883 722 1040 q 993 505 993 733 q 861 127 993 277 q 497 -29 722 -29 m 497 154 q 711 266 631 154 q 782 506 782 367 q 712 746 782 648 q 497 858 634 858 q 281 746 361 858 q 211 506 211 648 q 280 266 211 365 q 497 154 359 154 m 676 430 l 316 430 l 316 593 l 676 593 l 676 430 "
	},
	"®": {
		x_min: 3,
		x_max: 1007,
		ha: 1104,
		o: "m 507 -6 q 129 153 269 -6 q 3 506 3 298 q 127 857 3 713 q 502 1017 266 1017 q 880 855 740 1017 q 1007 502 1007 711 q 882 152 1007 295 q 507 -6 743 -6 m 502 934 q 184 800 302 934 q 79 505 79 680 q 184 210 79 331 q 501 76 302 76 q 819 210 701 76 q 925 507 925 331 q 820 800 925 682 q 502 934 704 934 m 782 190 l 639 190 q 627 225 632 202 q 623 285 623 248 l 623 326 q 603 411 623 384 q 527 439 584 439 l 388 439 l 388 190 l 257 190 l 257 829 l 566 829 q 709 787 654 829 q 772 654 772 740 q 746 559 772 604 q 675 497 720 514 q 735 451 714 483 q 756 341 756 419 l 756 299 q 760 244 756 265 q 782 212 764 223 l 782 190 m 546 718 l 388 718 l 388 552 l 541 552 q 612 572 584 552 q 641 635 641 593 q 614 695 641 672 q 546 718 587 718 "
	},
	"~": {
		x_min: 0,
		x_max: 851,
		ha: 949,
		o: "m 851 968 q 795 750 851 831 q 599 656 730 656 q 406 744 506 656 q 259 832 305 832 q 162 775 193 832 q 139 656 139 730 l 0 656 q 58 871 0 787 q 251 968 124 968 q 442 879 341 968 q 596 791 544 791 q 691 849 663 791 q 712 968 712 892 l 851 968 "
	},
	"Ε": {
		x_min: 0,
		x_max: 761.546875,
		ha: 824,
		o: "m 761 0 l 0 0 l 0 1012 l 735 1012 l 735 836 l 206 836 l 206 621 l 690 621 l 690 446 l 206 446 l 206 186 l 761 186 l 761 0 "
	},
	"³": {
		x_min: 0,
		x_max: 467,
		ha: 564,
		o: "m 467 555 q 393 413 467 466 q 229 365 325 365 q 70 413 134 365 q 0 565 0 467 l 123 565 q 163 484 131 512 q 229 461 190 461 q 299 486 269 461 q 329 553 329 512 q 281 627 329 607 q 187 641 248 641 l 187 722 q 268 737 237 722 q 312 804 312 758 q 285 859 312 837 q 224 882 259 882 q 165 858 189 882 q 135 783 140 834 l 12 783 q 86 930 20 878 q 230 976 145 976 q 379 931 314 976 q 444 813 444 887 q 423 744 444 773 q 365 695 402 716 q 439 640 412 676 q 467 555 467 605 "
	},
	"[": {
		x_min: 0,
		x_max: 347.21875,
		ha: 444,
		o: "m 347 -300 l 0 -300 l 0 1013 l 347 1013 l 347 866 l 188 866 l 188 -154 l 347 -154 l 347 -300 "
	},
	L: {
		x_min: 0,
		x_max: 704.171875,
		ha: 763,
		o: "m 704 0 l 0 0 l 0 1013 l 208 1013 l 208 186 l 704 186 l 704 0 "
	},
	"σ": {
		x_min: 0,
		x_max: 851.3125,
		ha: 940,
		o: "m 851 594 l 712 594 q 761 369 761 485 q 658 83 761 191 q 379 -25 555 -25 q 104 87 208 -25 q 0 372 0 200 q 103 659 0 544 q 378 775 207 775 q 464 762 407 775 q 549 750 521 750 l 851 750 l 851 594 m 379 142 q 515 216 466 142 q 557 373 557 280 q 515 530 557 465 q 379 608 465 608 q 244 530 293 608 q 203 373 203 465 q 244 218 203 283 q 379 142 293 142 "
	},
	"ζ": {
		x_min: 0,
		x_max: 622,
		ha: 701,
		o: "m 622 -32 q 604 -158 622 -98 q 551 -278 587 -218 l 373 -278 q 426 -180 406 -229 q 446 -80 446 -131 q 421 -22 446 -37 q 354 -8 397 -8 q 316 -9 341 -8 q 280 -11 291 -11 q 75 69 150 -11 q 0 283 0 150 q 87 596 0 437 q 291 856 162 730 l 47 856 l 47 1013 l 592 1013 l 592 904 q 317 660 422 800 q 197 318 197 497 q 306 141 197 169 q 510 123 408 131 q 622 -32 622 102 "
	},
	"θ": {
		x_min: 0,
		x_max: 714,
		ha: 817,
		o: "m 357 1022 q 633 833 534 1022 q 714 486 714 679 q 634 148 714 288 q 354 -25 536 -25 q 79 147 175 -25 q 0 481 0 288 q 79 831 0 679 q 357 1022 177 1022 m 510 590 q 475 763 510 687 q 351 862 430 862 q 233 763 272 862 q 204 590 204 689 l 510 590 m 510 440 l 204 440 q 233 251 204 337 q 355 131 274 131 q 478 248 434 131 q 510 440 510 337 "
	},
	"Ο": {
		x_min: 0,
		x_max: 995,
		ha: 1092,
		o: "m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 132 883 0 733 q 497 1040 270 1040 q 861 883 722 1040 q 995 505 995 733 q 862 127 995 277 q 497 -29 724 -29 m 497 154 q 711 266 632 154 q 781 506 781 365 q 711 745 781 647 q 497 857 632 857 q 283 747 361 857 q 213 506 213 647 q 282 266 213 365 q 497 154 361 154 "
	},
	"Γ": {
		x_min: 0,
		x_max: 703.84375,
		ha: 742,
		o: "m 703 836 l 208 836 l 208 0 l 0 0 l 0 1012 l 703 1012 l 703 836 "
	},
	" ": {
		x_min: 0,
		x_max: 0,
		ha: 375
	},
	"%": {
		x_min: 0,
		x_max: 1111,
		ha: 1213,
		o: "m 861 484 q 1048 404 979 484 q 1111 228 1111 332 q 1048 51 1111 123 q 859 -29 979 -29 q 672 50 740 -29 q 610 227 610 122 q 672 403 610 331 q 861 484 741 484 m 861 120 q 939 151 911 120 q 967 226 967 183 q 942 299 967 270 q 861 333 912 333 q 783 301 811 333 q 756 226 756 269 q 783 151 756 182 q 861 120 810 120 m 904 984 l 316 -28 l 205 -29 l 793 983 l 904 984 m 250 984 q 436 904 366 984 q 499 730 499 832 q 436 552 499 626 q 248 472 366 472 q 62 552 132 472 q 0 728 0 624 q 62 903 0 831 q 250 984 132 984 m 249 835 q 169 801 198 835 q 140 725 140 768 q 167 652 140 683 q 247 621 195 621 q 327 654 298 621 q 357 730 357 687 q 329 803 357 772 q 249 835 301 835 "
	},
	P: {
		x_min: 0,
		x_max: 771,
		ha: 838,
		o: "m 208 361 l 208 0 l 0 0 l 0 1013 l 450 1013 q 682 919 593 1013 q 771 682 771 826 q 687 452 771 544 q 466 361 604 361 l 208 361 m 421 837 l 208 837 l 208 544 l 410 544 q 525 579 480 544 q 571 683 571 615 q 527 792 571 747 q 421 837 484 837 "
	},
	"Έ": {
		x_min: 0,
		x_max: 1172.546875,
		ha: 1235,
		o: "m 1172 0 l 411 0 l 411 1012 l 1146 1012 l 1146 836 l 617 836 l 617 621 l 1101 621 l 1101 446 l 617 446 l 617 186 l 1172 186 l 1172 0 m 313 1035 l 98 780 l 0 780 l 136 1035 l 313 1035 "
	},
	"Ώ": {
		x_min: 0.4375,
		x_max: 1189.546875,
		ha: 1289,
		o: "m 1189 0 l 770 0 l 770 199 q 897 369 849 263 q 945 580 945 474 q 879 778 945 706 q 685 855 810 855 q 492 773 561 855 q 424 563 424 691 q 470 360 424 458 q 600 199 517 262 l 600 0 l 180 0 l 180 176 l 383 176 q 258 355 304 251 q 213 569 213 459 q 346 908 213 776 q 686 1040 479 1040 q 1025 912 892 1040 q 1158 578 1158 785 q 1112 362 1158 467 q 986 176 1067 256 l 1189 176 l 1189 0 m 314 1092 l 99 837 l 0 837 l 136 1092 l 314 1092 "
	},
	_: {
		x_min: 61.109375,
		x_max: 766.671875,
		ha: 828,
		o: "m 766 -333 l 61 -333 l 61 -190 l 766 -190 l 766 -333 "
	},
	"Ϊ": {
		x_min: -56,
		x_max: 342,
		ha: 503,
		o: "m 342 1046 l 186 1046 l 186 1215 l 342 1215 l 342 1046 m 101 1046 l -56 1046 l -56 1215 l 101 1215 l 101 1046 m 249 0 l 41 0 l 41 1012 l 249 1012 l 249 0 "
	},
	"+": {
		x_min: 43,
		x_max: 784,
		ha: 828,
		o: "m 784 353 l 483 353 l 483 0 l 343 0 l 343 353 l 43 353 l 43 489 l 343 489 l 343 840 l 483 840 l 483 489 l 784 489 l 784 353 "
	},
	"½": {
		x_min: 0,
		x_max: 1090,
		ha: 1188,
		o: "m 1090 380 q 992 230 1090 301 q 779 101 886 165 q 822 94 784 95 q 924 93 859 93 l 951 93 l 973 93 l 992 93 l 1009 93 q 1046 93 1027 93 q 1085 93 1066 93 l 1085 0 l 650 0 l 654 38 q 815 233 665 137 q 965 376 965 330 q 936 436 965 412 q 869 461 908 461 q 806 435 831 461 q 774 354 780 409 l 659 354 q 724 505 659 451 q 870 554 783 554 q 1024 506 958 554 q 1090 380 1090 459 m 868 998 l 268 -28 l 154 -27 l 757 999 l 868 998 m 272 422 l 147 422 l 147 799 l 0 799 l 0 875 q 126 900 91 875 q 170 973 162 926 l 272 973 l 272 422 "
	},
	"Ρ": {
		x_min: 0,
		x_max: 771,
		ha: 838,
		o: "m 208 361 l 208 0 l 0 0 l 0 1012 l 450 1012 q 682 919 593 1012 q 771 681 771 826 q 687 452 771 544 q 466 361 604 361 l 208 361 m 422 836 l 209 836 l 209 544 l 410 544 q 525 579 480 544 q 571 683 571 614 q 527 791 571 747 q 422 836 484 836 "
	},
	"'": {
		x_min: 0,
		x_max: 192,
		ha: 289,
		o: "m 192 834 q 137 692 192 751 q 0 626 82 632 l 0 697 q 101 830 101 726 l 0 830 l 0 1013 l 192 1013 l 192 834 "
	},
	"ª": {
		x_min: 0,
		x_max: 350,
		ha: 393,
		o: "m 350 625 l 245 625 q 237 648 241 636 q 233 672 233 661 q 117 611 192 611 q 33 643 66 611 q 0 727 0 675 q 116 846 0 828 q 233 886 233 864 q 211 919 233 907 q 168 931 190 931 q 108 877 108 931 l 14 877 q 56 977 14 942 q 165 1013 98 1013 q 270 987 224 1013 q 329 903 329 955 l 329 694 q 332 661 329 675 q 350 641 336 648 l 350 625 m 233 774 l 233 809 q 151 786 180 796 q 97 733 97 768 q 111 700 97 712 q 149 689 126 689 q 210 713 187 689 q 233 774 233 737 "
	},
	"΅": {
		x_min: 57,
		x_max: 584,
		ha: 753,
		o: "m 584 810 l 455 810 l 455 952 l 584 952 l 584 810 m 521 1064 l 305 810 l 207 810 l 343 1064 l 521 1064 m 186 810 l 57 810 l 57 952 l 186 952 l 186 810 "
	},
	T: {
		x_min: 0,
		x_max: 809,
		ha: 894,
		o: "m 809 831 l 509 831 l 509 0 l 299 0 l 299 831 l 0 831 l 0 1013 l 809 1013 l 809 831 "
	},
	"Φ": {
		x_min: 0,
		x_max: 949,
		ha: 1032,
		o: "m 566 0 l 385 0 l 385 121 q 111 230 222 121 q 0 508 0 340 q 112 775 0 669 q 385 892 219 875 l 385 1013 l 566 1013 l 566 892 q 836 776 732 875 q 949 507 949 671 q 838 231 949 341 q 566 121 728 121 l 566 0 m 566 285 q 701 352 650 285 q 753 508 753 419 q 703 658 753 597 q 566 729 653 720 l 566 285 m 385 285 l 385 729 q 245 661 297 717 q 193 516 193 604 q 246 356 193 427 q 385 285 300 285 "
	},
	j: {
		x_min: -45.828125,
		x_max: 242,
		ha: 361,
		o: "m 242 830 l 42 830 l 42 1013 l 242 1013 l 242 830 m 242 -119 q 180 -267 242 -221 q 20 -308 127 -308 l -45 -308 l -45 -140 l -24 -140 q 25 -130 8 -140 q 42 -88 42 -120 l 42 748 l 242 748 l 242 -119 "
	},
	"Σ": {
		x_min: 0,
		x_max: 772.21875,
		ha: 849,
		o: "m 772 0 l 0 0 l 0 140 l 368 526 l 18 862 l 18 1012 l 740 1012 l 740 836 l 315 836 l 619 523 l 298 175 l 772 175 l 772 0 "
	},
	"›": {
		x_min: 36.109375,
		x_max: 792,
		ha: 828,
		o: "m 792 352 l 36 17 l 36 168 l 594 420 l 36 672 l 36 823 l 792 487 l 792 352 "
	},
	"<": {
		x_min: 35.984375,
		x_max: 791.671875,
		ha: 828,
		o: "m 791 17 l 36 352 l 35 487 l 791 823 l 791 672 l 229 421 l 791 168 l 791 17 "
	},
	"£": {
		x_min: 0,
		x_max: 716.546875,
		ha: 814,
		o: "m 716 38 q 603 -9 658 5 q 502 -24 548 -24 q 398 -10 451 -24 q 239 25 266 25 q 161 12 200 25 q 77 -29 122 0 l 0 113 q 110 211 81 174 q 151 315 151 259 q 117 440 151 365 l 0 440 l 0 515 l 73 515 q 35 610 52 560 q 15 710 15 671 q 119 910 15 831 q 349 984 216 984 q 570 910 480 984 q 693 668 674 826 l 501 668 q 455 791 501 746 q 353 830 414 830 q 256 795 298 830 q 215 705 215 760 q 249 583 215 655 q 283 515 266 548 l 479 515 l 479 440 l 309 440 q 316 394 313 413 q 319 355 319 374 q 287 241 319 291 q 188 135 263 205 q 262 160 225 152 q 332 168 298 168 q 455 151 368 168 q 523 143 500 143 q 588 152 558 143 q 654 189 617 162 l 716 38 "
	},
	t: {
		x_min: 0,
		x_max: 412,
		ha: 511,
		o: "m 412 -6 q 349 -8 391 -6 q 287 -11 307 -11 q 137 38 177 -11 q 97 203 97 87 l 97 609 l 0 609 l 0 749 l 97 749 l 97 951 l 297 951 l 297 749 l 412 749 l 412 609 l 297 609 l 297 191 q 315 152 297 162 q 366 143 334 143 q 389 143 378 143 q 412 143 400 143 l 412 -6 "
	},
	"¬": {
		x_min: 0,
		x_max: 704,
		ha: 801,
		o: "m 704 93 l 551 93 l 551 297 l 0 297 l 0 450 l 704 450 l 704 93 "
	},
	"λ": {
		x_min: 0,
		x_max: 701.390625,
		ha: 775,
		o: "m 701 0 l 491 0 l 345 444 l 195 0 l 0 0 l 238 697 l 131 1013 l 334 1013 l 701 0 "
	},
	W: {
		x_min: 0,
		x_max: 1291.671875,
		ha: 1399,
		o: "m 1291 1013 l 1002 0 l 802 0 l 645 777 l 490 0 l 288 0 l 0 1013 l 215 1013 l 388 298 l 534 1012 l 757 1013 l 904 299 l 1076 1013 l 1291 1013 "
	},
	">": {
		x_min: 36.109375,
		x_max: 792,
		ha: 828,
		o: "m 792 352 l 36 17 l 36 168 l 594 420 l 36 672 l 36 823 l 792 487 l 792 352 "
	},
	v: {
		x_min: 0,
		x_max: 740.28125,
		ha: 828,
		o: "m 740 749 l 473 0 l 266 0 l 0 749 l 222 749 l 373 211 l 529 749 l 740 749 "
	},
	"τ": {
		x_min: 0.28125,
		x_max: 618.734375,
		ha: 699,
		o: "m 618 593 l 409 593 l 409 0 l 210 0 l 210 593 l 0 593 l 0 749 l 618 749 l 618 593 "
	},
	"ξ": {
		x_min: 0,
		x_max: 640,
		ha: 715,
		o: "m 640 -14 q 619 -157 640 -84 q 563 -299 599 -230 l 399 -299 q 442 -194 433 -223 q 468 -85 468 -126 q 440 -25 468 -41 q 368 -10 412 -10 q 333 -11 355 -10 q 302 -13 311 -13 q 91 60 179 -13 q 0 259 0 138 q 56 426 0 354 q 201 530 109 493 q 106 594 144 553 q 65 699 65 642 q 94 787 65 747 q 169 856 123 828 l 22 856 l 22 1013 l 597 1013 l 597 856 l 497 857 q 345 840 398 857 q 257 736 257 812 q 366 614 257 642 q 552 602 416 602 l 552 446 l 513 446 q 313 425 379 446 q 199 284 199 389 q 312 162 199 184 q 524 136 418 148 q 640 -14 640 105 "
	},
	"&": {
		x_min: -1,
		x_max: 910.109375,
		ha: 1007,
		o: "m 910 -1 l 676 -1 l 607 83 q 291 -47 439 -47 q 50 100 135 -47 q -1 273 -1 190 q 51 431 -1 357 q 218 568 104 505 q 151 661 169 629 q 120 769 120 717 q 201 951 120 885 q 382 1013 276 1013 q 555 957 485 1013 q 635 789 635 894 q 584 644 635 709 q 468 539 548 597 l 615 359 q 664 527 654 440 l 844 527 q 725 223 824 359 l 910 -1 m 461 787 q 436 848 461 826 q 381 870 412 870 q 325 849 349 870 q 301 792 301 829 q 324 719 301 757 q 372 660 335 703 q 430 714 405 680 q 461 787 461 753 m 500 214 l 318 441 q 198 286 198 363 q 225 204 198 248 q 347 135 268 135 q 425 153 388 135 q 500 214 462 172 "
	},
	"Λ": {
		x_min: 0,
		x_max: 894.453125,
		ha: 974,
		o: "m 894 0 l 666 0 l 447 757 l 225 0 l 0 0 l 344 1013 l 547 1013 l 894 0 "
	},
	I: {
		x_min: 41,
		x_max: 249,
		ha: 365,
		o: "m 249 0 l 41 0 l 41 1013 l 249 1013 l 249 0 "
	},
	G: {
		x_min: 0,
		x_max: 971,
		ha: 1057,
		o: "m 971 -1 l 829 -1 l 805 118 q 479 -29 670 -29 q 126 133 261 -29 q 0 509 0 286 q 130 884 0 737 q 493 1040 268 1040 q 790 948 659 1040 q 961 698 920 857 l 736 698 q 643 813 709 769 q 500 857 578 857 q 285 746 364 857 q 213 504 213 644 q 285 263 213 361 q 505 154 365 154 q 667 217 598 154 q 761 374 736 280 l 548 374 l 548 548 l 971 548 l 971 -1 "
	},
	"ΰ": {
		x_min: 0,
		x_max: 655,
		ha: 767,
		o: "m 583 810 l 454 810 l 454 952 l 583 952 l 583 810 m 186 810 l 57 809 l 57 952 l 186 952 l 186 810 m 516 1039 l 315 823 l 216 823 l 338 1039 l 516 1039 m 655 417 q 567 55 655 146 q 326 -25 489 -25 q 59 97 137 -25 q 0 369 0 192 l 0 748 l 200 748 l 201 369 q 218 222 201 269 q 326 142 245 142 q 439 247 410 142 q 455 422 455 304 l 455 748 l 655 748 l 655 417 "
	},
	"`": {
		x_min: 0,
		x_max: 190,
		ha: 288,
		o: "m 190 654 l 0 654 l 0 830 q 55 970 0 909 q 190 1040 110 1031 l 190 969 q 111 922 134 952 q 88 836 88 892 l 190 836 l 190 654 "
	},
	"·": {
		x_min: 0,
		x_max: 207,
		ha: 304,
		o: "m 207 528 l 0 528 l 0 735 l 207 735 l 207 528 "
	},
	"Υ": {
		x_min: -0.21875,
		x_max: 836.171875,
		ha: 914,
		o: "m 836 1013 l 532 376 l 532 0 l 322 0 l 322 376 l 0 1013 l 208 1013 l 427 576 l 626 1013 l 836 1013 "
	},
	r: {
		x_min: 0,
		x_max: 431.9375,
		ha: 513,
		o: "m 431 564 q 269 536 320 564 q 200 395 200 498 l 200 0 l 0 0 l 0 748 l 183 748 l 183 618 q 285 731 224 694 q 431 768 345 768 l 431 564 "
	},
	x: {
		x_min: 0,
		x_max: 738.890625,
		ha: 826,
		o: "m 738 0 l 504 0 l 366 238 l 230 0 l 0 0 l 252 382 l 11 749 l 238 749 l 372 522 l 502 749 l 725 749 l 488 384 l 738 0 "
	},
	"μ": {
		x_min: 0,
		x_max: 647,
		ha: 754,
		o: "m 647 0 l 477 0 l 477 68 q 411 9 448 30 q 330 -11 374 -11 q 261 3 295 -11 q 199 43 226 18 l 199 -278 l 0 -278 l 0 749 l 199 749 l 199 358 q 216 222 199 268 q 322 152 244 152 q 435 240 410 152 q 448 401 448 283 l 448 749 l 647 749 l 647 0 "
	},
	h: {
		x_min: 0,
		x_max: 669,
		ha: 782,
		o: "m 669 0 l 469 0 l 469 390 q 449 526 469 472 q 353 607 420 607 q 248 554 295 607 q 201 441 201 501 l 201 0 l 0 0 l 0 1013 l 201 1013 l 201 665 q 303 743 245 715 q 425 772 362 772 q 609 684 542 772 q 669 484 669 605 l 669 0 "
	},
	".": {
		x_min: 0,
		x_max: 206,
		ha: 303,
		o: "m 206 0 l 0 0 l 0 207 l 206 207 l 206 0 "
	},
	"φ": {
		x_min: -1,
		x_max: 921,
		ha: 990,
		o: "m 542 -278 l 367 -278 l 367 -22 q 99 92 200 -22 q -1 376 -1 206 q 72 627 -1 520 q 288 769 151 742 l 288 581 q 222 495 243 550 q 202 378 202 439 q 240 228 202 291 q 367 145 285 157 l 367 776 l 515 776 q 807 667 694 776 q 921 379 921 558 q 815 93 921 209 q 542 -22 709 -22 l 542 -278 m 542 145 q 672 225 625 145 q 713 381 713 291 q 671 536 713 470 q 542 611 624 611 l 542 145 "
	},
	";": {
		x_min: 0,
		x_max: 208,
		ha: 306,
		o: "m 208 528 l 0 528 l 0 735 l 208 735 l 208 528 m 208 6 q 152 -151 208 -89 q 0 -238 96 -212 l 0 -158 q 87 -100 61 -136 q 113 0 113 -65 l 0 0 l 0 207 l 208 207 l 208 6 "
	},
	f: {
		x_min: 0,
		x_max: 424,
		ha: 525,
		o: "m 424 609 l 300 609 l 300 0 l 107 0 l 107 609 l 0 609 l 0 749 l 107 749 q 145 949 107 894 q 328 1019 193 1019 l 424 1015 l 424 855 l 362 855 q 312 841 324 855 q 300 797 300 827 q 300 773 300 786 q 300 749 300 761 l 424 749 l 424 609 "
	},
	"“": {
		x_min: 0,
		x_max: 468,
		ha: 567,
		o: "m 190 631 l 0 631 l 0 807 q 55 947 0 885 q 190 1017 110 1010 l 190 947 q 88 813 88 921 l 190 813 l 190 631 m 468 631 l 278 631 l 278 807 q 333 947 278 885 q 468 1017 388 1010 l 468 947 q 366 813 366 921 l 468 813 l 468 631 "
	},
	A: {
		x_min: 0,
		x_max: 966.671875,
		ha: 1069,
		o: "m 966 0 l 747 0 l 679 208 l 286 208 l 218 0 l 0 0 l 361 1013 l 600 1013 l 966 0 m 623 376 l 480 810 l 340 376 l 623 376 "
	},
	"‘": {
		x_min: 0,
		x_max: 190,
		ha: 289,
		o: "m 190 631 l 0 631 l 0 807 q 55 947 0 885 q 190 1017 110 1010 l 190 947 q 88 813 88 921 l 190 813 l 190 631 "
	},
	"ϊ": {
		x_min: -55,
		x_max: 337,
		ha: 389,
		o: "m 337 810 l 208 810 l 208 952 l 337 952 l 337 810 m 74 810 l -55 810 l -55 952 l 74 952 l 74 810 m 242 0 l 42 0 l 42 748 l 242 748 l 242 0 "
	},
	"π": {
		x_min: 0.5,
		x_max: 838.890625,
		ha: 938,
		o: "m 838 593 l 750 593 l 750 0 l 549 0 l 549 593 l 287 593 l 287 0 l 88 0 l 88 593 l 0 593 l 0 749 l 838 749 l 838 593 "
	},
	"ά": {
		x_min: -1,
		x_max: 722,
		ha: 835,
		o: "m 722 0 l 531 0 l 530 101 q 433 8 491 41 q 304 -25 375 -25 q 72 104 157 -25 q -1 372 -1 216 q 72 643 -1 530 q 308 775 158 775 q 433 744 375 775 q 528 656 491 713 l 528 749 l 722 749 l 722 0 m 361 601 q 233 527 277 601 q 196 375 196 464 q 232 224 196 288 q 358 144 277 144 q 487 217 441 144 q 528 370 528 281 q 489 523 528 457 q 361 601 443 601 m 579 1039 l 377 823 l 279 823 l 401 1039 l 579 1039 "
	},
	O: {
		x_min: 0,
		x_max: 994,
		ha: 1094,
		o: "m 497 -29 q 133 127 272 -29 q 0 505 0 277 q 131 883 0 733 q 497 1040 270 1040 q 860 883 721 1040 q 994 505 994 733 q 862 127 994 277 q 497 -29 723 -29 m 497 154 q 710 266 631 154 q 780 506 780 365 q 710 745 780 647 q 497 857 631 857 q 283 747 361 857 q 213 506 213 647 q 282 266 213 365 q 497 154 361 154 "
	},
	n: {
		x_min: 0,
		x_max: 669,
		ha: 782,
		o: "m 669 0 l 469 0 l 469 452 q 442 553 469 513 q 352 601 412 601 q 245 553 290 601 q 200 441 200 505 l 200 0 l 0 0 l 0 748 l 194 748 l 194 659 q 289 744 230 713 q 416 775 349 775 q 600 700 531 775 q 669 509 669 626 l 669 0 "
	},
	l: {
		x_min: 41,
		x_max: 240,
		ha: 363,
		o: "m 240 0 l 41 0 l 41 1013 l 240 1013 l 240 0 "
	},
	"¤": {
		x_min: 40.265625,
		x_max: 727.203125,
		ha: 825,
		o: "m 727 792 l 594 659 q 620 552 620 609 q 598 459 620 504 l 725 331 l 620 224 l 491 352 q 382 331 443 331 q 273 352 322 331 l 144 224 l 40 330 l 167 459 q 147 552 147 501 q 172 658 147 608 l 40 794 l 147 898 l 283 759 q 383 776 330 776 q 482 759 434 776 l 620 898 l 727 792 m 383 644 q 308 617 334 644 q 283 551 283 590 q 309 489 283 517 q 381 462 335 462 q 456 488 430 462 q 482 554 482 515 q 455 616 482 588 q 383 644 429 644 "
	},
	"κ": {
		x_min: 0,
		x_max: 691.84375,
		ha: 779,
		o: "m 691 0 l 479 0 l 284 343 l 196 252 l 196 0 l 0 0 l 0 749 l 196 749 l 196 490 l 440 749 l 677 749 l 416 479 l 691 0 "
	},
	p: {
		x_min: 0,
		x_max: 722,
		ha: 824,
		o: "m 415 -26 q 287 4 346 -26 q 192 92 228 34 l 192 -298 l 0 -298 l 0 750 l 192 750 l 192 647 q 289 740 230 706 q 416 775 347 775 q 649 645 566 775 q 722 375 722 534 q 649 106 722 218 q 415 -26 564 -26 m 363 603 q 232 529 278 603 q 192 375 192 465 q 230 222 192 286 q 360 146 276 146 q 487 221 441 146 q 526 371 526 285 q 488 523 526 458 q 363 603 443 603 "
	},
	"‡": {
		x_min: 0,
		x_max: 809,
		ha: 894,
		o: "m 299 621 l 0 621 l 0 804 l 299 804 l 299 1011 l 509 1011 l 509 804 l 809 804 l 809 621 l 509 621 l 509 387 l 809 387 l 809 205 l 509 205 l 509 0 l 299 0 l 299 205 l 0 205 l 0 387 l 299 387 l 299 621 "
	},
	"ψ": {
		x_min: 0,
		x_max: 875,
		ha: 979,
		o: "m 522 142 q 657 274 620 163 q 671 352 671 316 l 671 748 l 875 748 l 875 402 q 806 134 875 240 q 525 -22 719 -1 l 525 -278 l 349 -278 l 349 -22 q 65 135 152 -1 q 0 402 0 238 l 0 748 l 204 748 l 204 352 q 231 240 204 295 q 353 142 272 159 l 353 922 l 524 922 l 522 142 "
	},
	"η": {
		x_min: 0,
		x_max: 669,
		ha: 779,
		o: "m 669 -278 l 469 -278 l 469 390 q 448 526 469 473 q 348 606 417 606 q 244 553 288 606 q 201 441 201 501 l 201 0 l 0 0 l 0 749 l 201 749 l 201 665 q 301 744 244 715 q 423 774 359 774 q 606 685 538 774 q 669 484 669 603 l 669 -278 "
	}
};
const cssFontWeight = "bold";
const ascender = 1216;
const underlinePosition = -100;
const cssFontStyle = "normal";
const boundingBox = {
	yMin: -333,
	xMin: -162,
	yMax: 1216,
	xMax: 1681
};
const resolution = 1000;
const original_font_information = {
	postscript_name: "Helvetiker-Bold",
	version_string: "Version 1.00 2004 initial release",
	vendor_url: "http://www.magenta.gr",
	full_font_name: "Helvetiker Bold",
	font_family_name: "Helvetiker",
	copyright: "Copyright (c) Magenta ltd, 2004.",
	description: "",
	trademark: "",
	designer: "",
	designer_url: "",
	unique_font_identifier: "Magenta ltd:Helvetiker Bold:22-10-104",
	license_url: "http://www.ellak.gr/fonts/MgOpen/license.html",
	license_description: "Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license (\"Fonts\") and associated documentation files (the \"Font Software\"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word \"MgOpen\", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the \"MgOpen\" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.",
	manufacturer_name: "Magenta ltd",
	font_sub_family_name: "Bold"
};
const descender = -334;
const familyName = "Helvetiker";
const lineHeight = 1549;
const underlineThickness = 50;
const HelvetikerBold = {
	glyphs: glyphs,
	cssFontWeight: cssFontWeight,
	ascender: ascender,
	underlinePosition: underlinePosition,
	cssFontStyle: cssFontStyle,
	boundingBox: boundingBox,
	resolution: resolution,
	original_font_information: original_font_information,
	descender: descender,
	familyName: familyName,
	lineHeight: lineHeight,
	underlineThickness: underlineThickness
};

class FontLoader extends Loader {

	constructor( manager ) {

		super( manager );

	}

	load( url, onLoad, onProgress, onError ) {

		const scope = this;

		const loader = new FileLoader( this.manager );
		loader.setPath( this.path );
		loader.setRequestHeader( this.requestHeader );
		loader.setWithCredentials( this.withCredentials );
		loader.load( url, function ( text ) {

			const font = scope.parse( JSON.parse( text ) );

			if ( onLoad ) onLoad( font );

		}, onProgress, onError );

	}

	parse( json ) {

		return new Font( json );

	}

}

//

class Font {

	constructor( data ) {

		this.isFont = true;

		this.type = 'Font';

		this.data = data;

	}

	generateShapes( text, size = 100 ) {

		const shapes = [];
		const paths = createPaths( text, size, this.data );

		for ( let p = 0, pl = paths.length; p < pl; p ++ ) {

			shapes.push( ...paths[ p ].toShapes() );

		}

		return shapes;

	}

}

function createPaths( text, size, data ) {

	const chars = Array.from( text );
	const scale = size / data.resolution;
	const line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

	const paths = [];

	let offsetX = 0, offsetY = 0;

	for ( let i = 0; i < chars.length; i ++ ) {

		const char = chars[ i ];

		if ( char === '\n' ) {

			offsetX = 0;
			offsetY -= line_height;

		} else {

			const ret = createPath( char, scale, offsetX, offsetY, data );
			offsetX += ret.offsetX;
			paths.push( ret.path );

		}

	}

	return paths;

}

function createPath( char, scale, offsetX, offsetY, data ) {

	const glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

	if ( ! glyph ) {

		console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

		return;

	}

	const path = new ShapePath();

	let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

	if ( glyph.o ) {

		const outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

		for ( let i = 0, l = outline.length; i < l; ) {

			const action = outline[ i ++ ];

			switch ( action ) {

				case 'm': // moveTo

					x = outline[ i ++ ] * scale + offsetX;
					y = outline[ i ++ ] * scale + offsetY;

					path.moveTo( x, y );

					break;

				case 'l': // lineTo

					x = outline[ i ++ ] * scale + offsetX;
					y = outline[ i ++ ] * scale + offsetY;

					path.lineTo( x, y );

					break;

				case 'q': // quadraticCurveTo

					cpx = outline[ i ++ ] * scale + offsetX;
					cpy = outline[ i ++ ] * scale + offsetY;
					cpx1 = outline[ i ++ ] * scale + offsetX;
					cpy1 = outline[ i ++ ] * scale + offsetY;

					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

					break;

				case 'b': // bezierCurveTo

					cpx = outline[ i ++ ] * scale + offsetX;
					cpy = outline[ i ++ ] * scale + offsetY;
					cpx1 = outline[ i ++ ] * scale + offsetX;
					cpy1 = outline[ i ++ ] * scale + offsetY;
					cpx2 = outline[ i ++ ] * scale + offsetX;
					cpy2 = outline[ i ++ ] * scale + offsetY;

					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

					break;

			}

		}

	}

	return { offsetX: glyph.ha * scale, path: path };

}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var openchemlibMinimal = createCommonjsModule(function (module, exports) {
/**
 * openchemlib - Manipulate molecules
 * @version v8.5.0
 * @date 2023-08-14T05:59:45.940Z
 * @link https://github.com/cheminfo/openchemlib-js
 * @license BSD-3-Clause
*/
(function (root) {

  function getExports($wnd) {

    var $doc = $wnd.document;
    var $gwt = {};
    var navigator = {
      userAgent: 'webkit'
    };

    function noop(){}

    var __gwtModuleFunction = noop;
    __gwtModuleFunction.__moduleStartupDone = noop;

    // Start GWT code 
var l1='object',m1='anonymous',n1='fnStack',o1='\n',p1={4:1,10:1,8:1},q1='Unknown',r1='boolean',s1='number',t1='string',u1=2147483647,v1='For input string: "',w1='null',x1=-2147483648,y1='__noinit__',z1={4:1,8:1},A1={4:1,13:1,18:1},B1={4:1,10:1,24:1,16:1,8:1,25:1},C1=65536,D1=65535,E1=10000,F1=', length: ',G1='Index: ',H1=', Size: ',I1='fromIndex: ',J1=', toIndex: ',K1={6:1,4:1},L1=16777215,M1=65280,N1=0.30000001192092896,O1=545460846592,P1=4294967296,Q1=8589934592,R1=17179869184,S1=34359738368,T1=68719476736,U1=137438953472,V1=274877906944,W1='<line x1="',X1='" ',Y1='y1="',Z1='x2="',$1='y2="',_1='stroke="',a2='stroke-width="',b2='" />',c2={11:1,4:1},d2=536870912,e2=2.617993878,f2=3.665191429,g2=6.283185307179586,h2=3.141592653589793,i2=1.5707963267948966,j2=16384,k2=4096,l2={l:0,m:0,h:1},m2={l:0,m:0,h:2},n2={l:0,m:0,h:4},o2=1920,p2=1024,q2=234881024,r2=167772160,s2=100663296,t2=201326592,u2=114688,v2=4063232,w2=2097152,x2=393216,y2=917504,z2=1966080,A2=17042430230528,B2=16492674416640,C2=15942918602752,D2=14843406974976,E2=12644383719424,F2=8796093022208,G2=549755813888,H2=1649267441664,I2=3848290697216,J2=8246337208320,K2=29360128,L2=268435456,M2=8192,N2=2048,O2={15:1,4:1},P2=-1.5707963267948966,Q2=130560,R2=6291456,S2=1.0471975511965976,T2=0.5235987755982988,U2=786432,V2=524288,W2=262144,X2=-16777216,Y2=16711680,Z2='<DrawingObject type="',$2='><\/DrawingObject>',_2=2.8415926535897933,a3={23:1,4:1,10:1,8:1},b3={4:1,16:1,8:1},c3={4:1},d3={7:1,4:1},e3=131072,f3={l:6,m:0,h:4},g3=1048576,h3=3221225472,i3={l:0,m:0,h:3},j3=8388608,k3=-65536,l3={4:1,65:1},m3='??',n3=2013265920,o3=32505856,p3=31744,q3=1.7976931348623157E308,r3={4:1,10:1,16:1,8:1},s3=33554432,t3=67108864,u3=32768,v3=-33292289,w3=-3.141592653589793,x3=4194303,y3=0.7853981633974483,z3=3.061592653589793,A3=1073741824,B3=541165879296,C3={9:1,4:1,8:1},D3=281.17,E3=289.19,F3=294.21,G3='0.0000',H3='M  END\n',I3='ATOMS',J3='M  END',K3='$$$$',L3='M  V30 ',M3='M  V30 COUNTS ',N3=')\n',O3='M  V30 MDLV30/STEREL',P3='M  V30 MDLV30/STERAC',Q3=3.4028234663852886E38,R3={l:2,m:0,h:4},S3=4194304,T3={l:4179966,m:4063288,h:7},U3={l:4194302,m:4193343,h:7},V3='class="event" ',W3='opacity="0" />',X3='Assignment of aromatic double bonds failed',Y3=1099511627776,Z3=2199023255552,$3=4398046511104,_3='Members of ESR groups must only be stereo centers with known configuration.',a4='Over- or under-specified stereo feature or more than one racemic type bond',b4='Ambiguous configuration at stereo center because of 2 parallel bonds',c4=-0.5235987755982988,d4=-1.0471975511965976,e4=-0.7853981633974483,f4=2.0943951023931953,g4=0.17453292519943295,h4='OCL_RXN_V1.0:',i4="'$MOL' tag not found",j4="'M  END' not found",k4='\nActelion Java MolfileCreator 2.0\n\n  0  0  0  0  0  0              0 V3000\n',l4='M  V30 END CTAB',m4='undefined',n4=0.08726646502812703,o4=0.003921568859368563,p4='Too many percent/per mille characters in pattern "',q4=1048575,r4=17592186044416,s4=1000000000,t4=-17592186044416,u4='CSS1Compat',v4=5.56,w4=11.12,x4=13.34,y4=14.44,z4=0.3010299956639812,A4=4294967295,B4={l:0,m:0,h:524288},C4={27:1,58:1},D4={75:1},E4=15525485,F4=5.9604644775390625E-8,G4=16777216,H4={4:1,27:1,48:1,46:1},I4='Invalid UTF8 sequence';var N0={};var O0={};var P0={};var Q0={};var R0={};var S0={};var T0={};var U0={};var V0={};var W0={};var X0={};var Y0={};var Z0={};var $0={};var _0={};var a1={};var b1={};var c1={};var d1={};var e1={};var f1={};var g1={};var h1={};var i1={};var j1={};var k1={};var _;var pR;var jR;N0.zQ=function zQ(){};function oR(a,b){typeof window===l1&&typeof window['$gwt']===l1&&(window['$gwt'][a]=b);}
function nR(b,c,d,e){N0.mR();var f=jR;function g(){for(var a=0;a<f.length;a++){f[a]();}}
if(b){try{M0(g)();}catch(a){b(c,a);}}else {M0(g)();}}
N0.mR=function mR(){jR==null&&(jR=[]);};function lR(){N0.mR();var a=jR;for(var b=0;b<arguments.length;b++){a.push(arguments[b]);}}
N0.kR=function kR(){};function AR(){}
function zR(a){if(Array.isArray(a)&&a.gc===AR){return O0.Mc(a)}return a.toString()}
function yR(a,b){var c=$wnd;if(a===''){return c}var d=a.split('.');!(d[0] in c)&&c.execScript&&c.execScript('var '+d[0]);if(b){var e=b.prototype.ec;e.e=b;}for(var f;d.length&&(f=d.shift());){c=c[f]=c[f]||!d.length&&b||{};}return c}
N0.xR=function xR(a){function b(){}
b.prototype=a||{};return new b};N0.wR=function wR(a){return a instanceof Array?a[0]:null};function vR(a,b,c){var d=function(){return a.apply(d,arguments)};b.apply(d,c);return d}
function uR(){}
function tR(a,b){for(var c in b){b[c]['configurable']=true;}Object.defineProperties(a,b);}
function sR(a,b,c){var d=pR;var e=d[a];var f=N0.wR(e);if(e&&!f){_=e;}else {_=N0.rR(b);_.fc=c;!b&&(_.gc=AR);d[a]=_;}for(var g=3;g<arguments.length;++g){arguments[g].prototype=_;}f&&(_.ec=f);}
N0.rR=function rR(a){var b=a&&a.prototype;!b&&(b=pR[a]);return N0.xR(b)};N0.qR=function qR(){};$wnd.goog=$wnd.goog||{};$wnd.goog.global=$wnd.goog.global||$wnd;pR={};O0.Bc=function Bc(a,b){return bN(a)===bN(b)};O0.Cc=function Cc(a){return a.ec};O0.Dc=function Dc(a){return R0.t0(a)};function Ec(){}
O0.Gc=function Gc(a,b){return $M(a)?O0.eU(a,b):XM(a)?O0.gT(a,b):WM(a)?O0.mS(a,b):UM(a)?a.ib(b):QL(a)?O0.Bc(a,b):P0.YJ(a,b)};O0.Ic=function Ic(a){return $M(a)?O0.gU():XM(a)?O0.hT():WM(a)?O0.nS():UM(a)?a.ec:QL(a)?O0.Cc(a):P0.ZJ(a)};O0.Kc=function Kc(a){return $M(a)?O0.hU(a):XM(a)?O0.iT(a):WM(a)?O0.oS(a):UM(a)?a.kb():QL(a)?O0.Dc(a):P0.$J(a)};O0.Mc=function Mc(a){var b;return O0.FS(O0.Ic(a))+'@'+(b=R0.I0(R0.H0(O0.Kc(a))),b.toString(16))};sR(1,null,{},Ec);_.ib=function Fc(a){return O0.Bc(this,a)};_.jb=function Hc(){return O0.Cc(this)};_.kb=function Jc(){return O0.Dc(this)};_.lb=function Lc(){var a;return O0.FS(O0.Ic(this))+'@'+(a=R0.I0(R0.H0(O0.Kc(this))),a.toString(16))};_.equals=function(a){return this.ib(a)};_.hashCode=function(){return this.kb()};_.toString=function(){return this.lb()};P0.YJ=function YJ(a,b){return P0.cK(a)?P0._J(a,b):bN(a)===bN(b)};P0.ZJ=function ZJ(a){return a.ec||Array.isArray(a)&&IL(N0.KO,1)||N0.KO};P0.$J=function $J(a){return P0.dK(a)?P0.aK(a):R0.t0(a)};P0._J=function _J(a,b){return a.equals(b)};P0.aK=function aK(a){return a.hashCode()};P0.bK=function bK(){return []};P0.cK=function cK(a){return !!a&&!!a.equals};P0.dK=function dK(a){return !!a&&!!a.hashCode};P0.eK=function eK(a){return a.toString?a.toString():'[JavaScriptObject]'};Q0.JK=function JK(){Q0.JK=uR;var a,b;b=!Q0.SK();a=new Q0._K;Q0.IK=b?new Q0.TK:a;};Q0.KK=function KK(a){Q0.JK();Q0.IK.Nb(a);};Q0.LK=function LK(a){Q0.JK();var b;b=Q0.IK.Ob(a);return Q0.MK(b)};Q0.MK=function MK(a){var b,c,d,e;b='KK';c='AJ';e=$wnd.Math.min(a.length,5);for(d=e-1;d>=0;d--){if(O0.eU(a[d].d,b)||O0.eU(a[d].d,c)){a.length>=d+1&&R0.I0(a).splice(0,d+1);break}}return a};Q0.NK=function NK(a){var b=/function(?:\s+([\w$]+))?\s*\(/;var c=b.exec(a);return c&&c[1]||m1};Q0.OK=function OK(a){Q0.JK();return a&&a[n1]?a[n1]:[]};Q0.PK=function PK(a){Q0.JK();return a.name||(a.name=Q0.NK(a.toString()))};Q0.QK=function QK(a){Q0.JK();return parseInt(a)||-1};Q0.RK=function RK(a){Q0.JK();var b=a.backingJsObject;if(b&&b.stack){var c=b.stack;var d=b+o1;c.substring(0,d.length)==d&&(c=c.substring(d.length));return c.split(o1)}return []};Q0.SK=function SK(){if(Error.stackTraceLimit>0){$wnd.Error.stackTraceLimit=Error.stackTraceLimit=64;return true}return 'stack' in new Error};sR(198,1,{});Q0.TK=function TK(){};sR(148,198,{},Q0.TK);_.Nb=function UK(a){var b={};var c=[];a[n1]=c;var d=arguments.callee.caller;while(d){var e=Q0.PK(d);c.push(e);var f=':'+e;var g=b[f];if(g){var h,i;for(h=0,i=g.length;h<i;h++){if(g[h]===d){return}}}(g||(b[f]=[])).push(d);d=d.caller;}};_.Ob=function VK(a){var b,c,d,e;d=Q0.OK(a);c=P0.jK(d);e=OL(N0.yP,p1,47,c,0,1);for(b=0;b<c;b++){e[b]=new O0.WT(P0.iK(d,b),null,-1);}return e};Q0.WK=function WK(a,b){var c,d,e,f,g,h,i,j,k;j='';if(R0.I0(b).length==0){return a.Pb(q1,m1,-1,-1)}k=O0.rU(b);O0.eU(R0.I0(k).substr(0,3),'at ')&&(k=(R0.F0(3,R0.I0(k).length+1),R0.I0(k).substr(3)));k=Q0.XK(k);g=R0.I0(k).indexOf('(');if(g==-1){g=R0.I0(k).indexOf('@');if(g==-1){j=k;k='';}else {j=O0.rU((R0.F0(g+1,R0.I0(k).length+1),R0.I0(k).substr(g+1)));k=O0.rU((R0.E0(0,g,R0.I0(k).length),R0.I0(k).substr(0,g)));}}else {c=R0.I0(k).indexOf(')',g);j=(R0.E0(g+1,c,R0.I0(k).length),R0.I0(k).substr(g+1,c-(g+1)));k=O0.rU((R0.E0(0,g,R0.I0(k).length),R0.I0(k).substr(0,g)));}g=O0.iU(k,tU(46));g!=-1&&(k=(R0.F0(g+1,R0.I0(k).length+1),R0.I0(k).substr(g+1)));(R0.I0(k).length==0||O0.eU(k,'Anonymous function'))&&(k=m1);h=O0.lU(j,tU(58));e=O0.mU(j,tU(58),h-1);i=-1;d=-1;f=q1;if(h!=-1&&e!=-1){f=(R0.E0(0,e,R0.I0(j).length),R0.I0(j).substr(0,e));i=Q0.QK((R0.E0(e+1,h,R0.I0(j).length),R0.I0(j).substr(e+1,h-(e+1))));d=Q0.QK((R0.F0(h+1,R0.I0(j).length+1),R0.I0(j).substr(h+1)));}return a.Pb(f,k,i,d)};Q0.XK=function XK(a){return a.replace(/\[.*?\]/g,'')};sR(199,198,{});_.Nb=function YK(a){};_.Pb=function ZK(a,b,c,d){return new O0.WT(b,a+'@'+d,c<0?-1:c)};_.Ob=function $K(a){var b,c,d,e,f,g;e=Q0.RK(a);f=OL(N0.yP,p1,47,0,0,1);b=0;d=P0.jK(e);if(d==0){return f}g=Q0.WK(this,P0.iK(e,0));O0.eU(g.d,m1)||(f[b++]=g);for(c=1;c<d;c++){f[b++]=Q0.WK(this,P0.iK(e,c));}return f};Q0._K=function _K(){};sR(149,199,{},Q0._K);_.Pb=function aL(a,b,c,d){return new O0.WT(b,a,-1)};N0.HL=function HL(a){return a};function IL(a,b){return N0.JL(a,b)}
N0.JL=function JL(a,b){return O0.PS(a,b)};N0.KL=function KL(a){return a.__elementTypeCategory$==null?10:a.__elementTypeCategory$};N0.LL=function LL(a){return a.__elementTypeId$};function ML(a,b,c,d,e,f){return N0.NL(a,b,c,d,e,0,f)}
N0.NL=function NL(a,b,c,d,e,f,g){var h,i,j,k,l;k=e[f];j=f==g-1;h=j?d:0;l=N0.PL(h,k);d!=10&&WL(IL(a,g-f),b[f],c[f],h,l);if(!j){++f;for(i=0;i<k;++i){N0.RL(l,i,N0.NL(a,b,c,d,e,f,g));}}return l};function OL(a,b,c,d,e,f){var g;g=N0.PL(e,d);e!=10&&WL(IL(a,f),b,c,e,g);return g}
N0.PL=function PL(a,b){var c=new Array(b);var d;switch(a){case 14:case 15:d=0;break;case 16:d=false;break;default:return c;}for(var e=0;e<b;++e){c[e]=d;}return c};function QL(a){return Array.isArray(a)&&a.gc===AR}
N0.RL=function RL(a,b,c){return a[b]=c};function SL(a,b,c){return N0.RL(a,b,c)}
N0.TL=function TL(a,b){a.ec=b;};N0.UL=function UL(a,b){a.__elementTypeCategory$=b;};N0.VL=function VL(a,b){a.__elementTypeId$=b;};function WL(a,b,c,d,e){N0.TL(e,a);e.fc=b;e.gc=AR;N0.VL(e,c);N0.UL(e,d);return e}
N0.XL=function XL(a,b){N0.KL(b)!=10&&WL(O0.Ic(b),b.fc,N0.LL(b),N0.KL(b),a);return N0.HL(a)};function TM(a,b){if($M(a)){return !!SM[b]}else if(a.fc){return !!a.fc[b]}else if(XM(a)){return !!RM[b]}else if(WM(a)){return !!QM[b]}return false}
function UM(a){return !Array.isArray(a)&&a.gc===AR}
function VM(a,b){return a!=null&&TM(a,b)}
function WM(a){return typeof a===r1}
function XM(a){return typeof a===s1}
function YM(a){return a!=null&&N0._M(a)&&!(a.gc===AR)}
function ZM(a,b){return N0.aN(a,b)}
function $M(a){return typeof a===t1}
N0._M=function _M(a){return typeof a===l1||typeof a==='function'};N0.aN=function aN(a,b){return a&&b&&a instanceof b};function bN(a){return a==null?null:a}
function cN(a){return Math.max(Math.min(a,u1),-2147483648)|0}
var QM;var RM;var SM;N0.AQ=function AQ(a){return a&&a.__java$exception};function BQ(a){var b;if(VM(a,18)){return a}b=N0.AQ(a);if(!b){b=new P0.SJ(a);Q0.KK(b);}return b}
function CQ(a){return a.backingJsObject}
function SR(a){var b;if(a==null){return false}b=typeof(a);return O0.eU(b,r1)||O0.eU(b,s1)||O0.eU(b,t1)||a.$implements__java_io_Serializable||Array.isArray(a)}
function $S(a){var b;b=typeof(a);if(O0.eU(b,r1)||O0.eU(b,s1)||O0.eU(b,t1)){return true}return a!=null&&a.$implements__java_lang_Comparable}
O0.jS=function jS(){O0.jS=uR;iS=R0.I0(false);R0.I0(true);};O0.kS=function kS(a,b){return qS(R0.J0((R0.z0(a),a)),R0.J0((R0.z0(b),b)))};O0.lS=function lS(a,b){return O0.kS(a,b)};O0.mS=function mS(a,b){return R0.z0(a),bN(a)===bN(b)};O0.nS=function nS(){return N0.iP};O0.oS=function oS(a){return R0.J0((R0.z0(a),a))?1231:1237};function pS(a){O0.jS();return O0.eU(r1,typeof(a))}
function qS(a,b){O0.jS();return a==b?0:a?1:-1}
O0.rS=function rS(a,b){O0.jS();return $M(a)?O0._T(a,b):XM(a)?O0.eT(a,b):WM(a)?O0.lS(a,b):a.qb(b)};QM={4:1,145:1,27:1};var iS;function sS(a){if(O0.eU(typeof(a),t1)){return true}return a!=null&&a.$implements__java_lang_CharSequence}
O0.DS=function DS(a){a.i=CS++;};O0.ES=function ES(a){if(a.n!=null){return}O0.TS(a);};O0.FS=function FS(a){O0.ES(a);return a.n};O0.GS=function GS(a){return (a.f&4)!=0};O0.HS=function HS(a){return (a.f&1)!=0};O0.IS=function IS(){O0.DS(this);this.n=null;this.j=null;this.g=null;this.d=null;this.b=null;this.k=null;this.a=null;};O0.KS=function KS(a){var b;b=new O0.IS;b.n='Class$'+(a?'S'+a:''+b.i);b.b=b.n;b.j=b.n;return b};function LS(a){var b;b=O0.KS(a);O0.XS(a,b);return b}
function MS(a,b){var c;c=O0.KS(a);O0.XS(a,c);c.f=b?8:0;return c}
function NS(a){var b;b=O0.KS(a);b.k=a;b.f=1;return b}
O0.PS=function PS(a,b){var c=a.a=a.a||[];return c[b]||(c[b]=a.Qb(b))};function RS(a){if(a.Vb()){return null}var b=a.k;return pR[b]}
O0.TS=function TS(a){if(a.Ub()){var b=a.c;b.Vb()?(a.n='['+b.k):!b.Ub()?(a.n='[L'+b.Sb()+';'):(a.n='['+b.Sb());a.b=b.Rb()+'[]';a.j=b.Tb()+'[]';return}var c=a.g;var d=a.d;d=d.split('/');a.n=O0.WS('.',[c,O0.WS('$',d)]);a.b=O0.WS('.',[c,O0.WS('.',d)]);a.j=d[d.length-1];};O0.WS=function WS(a,b){var c=0;while(!b[c]||b[c]==''){c++;}var d=b[c++];for(;c<b.length;c++){if(!b[c]||b[c]==''){continue}d+=a+b[c];}return d};O0.XS=function XS(a,b){if(!a){return}b.k=a;var d=RS(b);if(!d){pR[a]=[b];return}d.ec=b;};sR(104,1,{},O0.IS);_.Qb=function JS(a){var b;b=new O0.IS;b.f=4;a>1?(b.c=O0.PS(this,a-1)):(b.c=this);return b};_.Rb=function OS(){O0.ES(this);return this.b};_.Sb=function QS(){return O0.FS(this)};_.Tb=function SS(){O0.ES(this);return this.j};_.Ub=function US(){return O0.GS(this)};_.Vb=function VS(){return O0.HS(this)};_.lb=function YS(){return ((this.f&2)!=0?'interface ':(this.f&1)!=0?'':'class ')+(O0.ES(this),this.n)};_.f=0;_.i=0;var CS=1;O0.aT=function aT(a){return O0.eU(s1,typeof(a))||ZM(a,$wnd.java.lang.Number$impl)};O0.bT=function bT(a){O0._S==null&&(O0._S=new RegExp('^\\s*[+-]?(NaN|Infinity|((\\d+\\.?\\d*)|(\\.\\d+))([eE][+-]?\\d+)?[dDfF]?)\\s*$'));if(!O0._S.test(a)){throw CQ(new O0.VT(v1+a+'"'))}return parseFloat(a)};O0.cT=function cT(a){var b,c,d,e,f;if(a==null){throw CQ(new O0.VT(w1))}d=R0.I0(a).length;e=d>0&&(R0.F0(0,R0.I0(a).length),R0.I0(a).charCodeAt(0)==45||(R0.F0(0,R0.I0(a).length),R0.I0(a).charCodeAt(0)==43))?1:0;for(b=e;b<d;b++){if(vS((R0.F0(b,R0.I0(a).length),R0.I0(a).charCodeAt(b)))==-1){throw CQ(new O0.VT(v1+a+'"'))}}f=parseInt(a,10);c=f<x1;if(isNaN(f)){throw CQ(new O0.VT(v1+a+'"'))}else if(c||f>u1){throw CQ(new O0.VT(v1+a+'"'))}return f};sR(72,1,{4:1,72:1});O0.dT=function dT(a,b){return kT(R0.K0((R0.z0(a),a)),R0.K0((R0.z0(b),b)))};O0.eT=function eT(a,b){return O0.dT(a,b)};O0.fT=function fT(a){return R0.K0((R0.z0(a),a))};O0.gT=function gT(a,b){return R0.z0(a),bN(a)===bN(b)};O0.hT=function hT(){return N0.kP};O0.iT=function iT(a){return cN(R0.K0((R0.z0(a),a)))};function jT(a){return O0.eU(s1,typeof(a))}
function kT(a,b){if(a<b){return -1}if(a>b){return 1}if(a==b){return a==0?kT(1/a,1/b):0}return isNaN(a)?isNaN(b)?0:1:-1}
function lT(a){if(isNaN(a)){return {l:0,m:0,h:524160}}return R0.G0(a)}
RM={4:1,27:1,146:1,72:1};O0.hJ=function hJ(a){a.g=OL(N0.yP,p1,47,0,0,1);};O0.iJ=function iJ(a){Q0.KK(a);};O0.jJ=function jJ(a){return Q0.LK(a)};O0.kJ=function kJ(a){if(a.j){a.backingJsObject!==y1&&a.Lb();a.g=null;}return a};O0.lJ=function lJ(a){return a.e};O0.mJ=function mJ(d,b){if(b instanceof Object){try{b.__java$exception=d;if(navigator.userAgent.toLowerCase().indexOf('msie')!=-1&&$doc.documentMode<9){return}var c=d;Object.defineProperties(b,{cause:{get:function(){var a=c.Jb();return a&&a.Hb()}},suppressed:{get:function(){return c.Ib()}}});}catch(a){}}};O0.nJ=function nJ(a,b,c){var d,e,f,g,h;O0.oJ(a);for(e=(a.i==null&&(a.i=OL(N0.DP,p1,18,0,0,1)),a.i),f=0,g=e.length;f<g;++f){d=e[f];O0.nJ(d,b,'\t'+c);}h=a.e;!!h&&O0.nJ(h,b,c);};O0.oJ=function oJ(a){var b,c,d;for(b=(a.g==null&&(a.g=O0.jJ(a)),a.g),c=0,d=b.length;c<d;++c){}};O0.pJ=function pJ(a,b){a.backingJsObject=b;O0.mJ(a,b);};O0.qJ=function qJ(a){return O0.rJ(a,a.Kb())};O0.rJ=function rJ(a,b){var c;c=O0.FS(a.ec);return b==null?c:c+': '+b};O0.sJ=function sJ(){O0.hJ(this);O0.kJ(this);this.Lb();};O0.tJ=function tJ(a){O0.hJ(this);this.f=a;O0.kJ(this);this.Lb();};O0.vJ=function vJ(b){if(!('stack' in b)){try{throw b}catch(a){}}return b};function BJ(a){var b;if(a!=null){b=a.__java$exception;if(b){return b}}return ZM(a,TypeError)?new O0.ST(a):new O0.KJ(a)}
sR(18,1,{4:1,18:1});_.Gb=function uJ(a){return new Error(a)};_.Hb=function wJ(){return this.backingJsObject};_.Ib=function xJ(){var a,b,c;c=(this.i==null&&(this.i=OL(N0.DP,p1,18,0,0,1)),this.i);b=OL(N0.wP,z1,1,c.length,5,1);for(a=0;a<c.length;a++){b[a]=c[a].backingJsObject;}return b};_.Jb=function yJ(){return O0.lJ(this)};_.Kb=function zJ(){return this.f};_.Lb=function AJ(){O0.pJ(this,O0.vJ(this.Gb(O0.rJ(this,this.f))));O0.iJ(this);};_.lb=function CJ(){return O0.qJ(this)};_.backingJsObject=y1;_.j=true;O0.DJ=function DJ(){O0.sJ.call(this);};O0.EJ=function EJ(a){O0.hJ(this);O0.kJ(this);this.backingJsObject=a;O0.mJ(this,a);this.f=a==null?w1:zR(a);};O0.FJ=function FJ(a){O0.tJ.call(this,a);};sR(13,18,A1,O0.FJ);O0.GJ=function GJ(){O0.DJ.call(this);};O0.HJ=function HJ(a){O0.EJ.call(this,a);};O0.IJ=function IJ(a){O0.FJ.call(this,a);};sR(37,13,A1);O0.eS=function eS(){O0.GJ.call(this);};O0.fS=function fS(a){O0.IJ.call(this,a);};sR(53,37,A1,O0.eS,O0.fS);O0.JJ=function JJ(){O0.GJ.call(this);};O0.KJ=function KJ(a){O0.HJ.call(this,a);};O0.LJ=function LJ(a){O0.IJ.call(this,a);};sR(66,37,A1,O0.KJ);O0.RT=function RT(){O0.JJ.call(this);};O0.ST=function ST(a){O0.KJ.call(this,a);};O0.TT=function TT(a){O0.LJ.call(this,a);};sR(90,66,A1,O0.RT,O0.ST,O0.TT);_.Gb=function UT(a){return new TypeError(a)};O0.$T=function $T(a,b){R0.F0(b,R0.I0(a).length);return R0.I0(a).charCodeAt(b)};O0._T=function _T(a,b){return O0.aU(a,b)};O0.aU=function aU(a,b){var c,d;c=O0.fT(R0.I0(a));d=O0.fT(R0.I0(b));return c==d?0:c<d?-1:1};O0.bU=function bU(a,b){return O0.aU(R0.I0(a).toLowerCase(),R0.I0(b).toLowerCase())};O0.cU=function cU(a,b){return R0.z0(a),a+(''+(R0.z0(b),b))};O0.dU=function dU(a){var b;return O0.vU(R0.l0(a,0,(b=a.length,R0.i0(),b)))};O0.eU=function eU(a,b){return R0.z0(a),bN(a)===bN(b)};O0.fU=function fU(a,b){R0.z0(a);if(b==null){return false}if(O0.eU(a,b)){return true}return R0.I0(a).length==R0.I0(b).length&&O0.eU(R0.I0(a).toLowerCase(),R0.I0(b).toLowerCase())};O0.gU=function gU(){return N0.CP};O0.hU=function hU(a){var b,c;b=0;for(c=0;c<R0.I0(a).length;c++){b=(b<<5)-b+(R0.F0(c,R0.I0(a).length),R0.I0(a).charCodeAt(c))|0;}return b};O0.iU=function iU(a,b){return R0.I0(a).indexOf(b)};O0.jU=function jU(a,b,c){return R0.I0(a).indexOf(b,c)};function kU(a){return O0.eU(t1,typeof(a))}
O0.lU=function lU(a,b){return R0.I0(a).lastIndexOf(b)};O0.mU=function mU(a,b,c){return R0.I0(a).lastIndexOf(b,c)};O0.nU=function nU(a,b){b=O0.uU(b);return R0.I0(a).replace(new RegExp('width="\\d+px" height="\\d+px" viewBox="0 0 \\d+ \\d+"','g'),b)};O0.oU=function oU(a){var b,c,d,e,f,g,h,i;b=new RegExp(' ','g');h=OL(N0.CP,B1,2,0,6,1);c=0;i=a;e=null;while(true){g=b.exec(i);if(g==null||i==''){h[c]=i;break}else {f=g.index;h[c]=(R0.E0(0,f,R0.I0(i).length),R0.I0(i).substr(0,f));i=O0.qU(i,f+R0.I0(R0.I0(g)[0]).length,R0.I0(i).length);b.lastIndex=0;if(e==i){h[c]=(R0.E0(0,1,R0.I0(i).length),R0.I0(i).substr(0,1));i=(R0.F0(1,R0.I0(i).length+1),R0.I0(i).substr(1));}e=i;++c;}}if(R0.I0(a).length>0){d=h.length;while(d>0&&h[d-1]==''){--d;}d<h.length&&(R0.I0(h).length=d);}return h};O0.pU=function pU(a,b){R0.F0(b,R0.I0(a).length+1);return R0.I0(a).substr(b)};O0.qU=function qU(a,b,c){R0.E0(b,c,R0.I0(a).length);return R0.I0(a).substr(b,c-b)};O0.rU=function rU(a){var b,c,d;c=R0.I0(a).length;d=0;while(d<c&&(R0.F0(d,R0.I0(a).length),R0.I0(a).charCodeAt(d)<=32)){++d;}b=c;while(b>d&&(R0.F0(b-1,R0.I0(a).length),R0.I0(a).charCodeAt(b-1)<=32)){--b;}return d>0||b<c?(R0.E0(d,b,R0.I0(a).length),R0.I0(a).substr(d,b-d)):a};O0.sU=function sU(a){return String.fromCharCode.apply(null,a)};function tU(a){var b,c;if(a>=C1){b=55296+(a-C1>>10&1023)&D1;c=56320+(a-C1&1023)&D1;return String.fromCharCode(b)+(''+String.fromCharCode(c))}else {return String.fromCharCode(a&D1)}}
O0.uU=function uU(a){var b;b=0;while(0<=(b=R0.I0(a).indexOf('\\',b))){R0.F0(b+1,R0.I0(a).length);R0.I0(a).charCodeAt(b+1)==36?(a=(R0.E0(0,b,R0.I0(a).length),R0.I0(a).substr(0,b)+'$'+O0.pU(a,++b))):(a=(R0.E0(0,b,R0.I0(a).length),R0.I0(a).substr(0,b)+(''+O0.pU(a,++b))));}return a};O0.vU=function vU(a){return O0.wU(a,0,a.length)};O0.wU=function wU(a,b,c){var d,e,f,g;f=b+c;R0.E0(b,f,a.length);g='';for(e=b;e<f;){d=$wnd.Math.min(e+E1,f);g+=O0.sU(R0.I0(a).slice(e,d));e=d;}return g};SM={4:1,106:1,27:1,2:1};O0.NU=function NU(a){O0.fS.call(this,a);};sR(121,53,A1,O0.NU);R0.__=function __(a){var b;b=R0.I0(a).slice();return R0.h0(b,a)};R0.a0=function a0(a,b,c,d,e,f){var g,h,i,j,k;if(e==0){return}if(bN(a)===bN(c)){a=R0.I0(a).slice(b,b+e);b=0;}i=R0.I0(c);for(h=b,j=b+e;h<j;){g=$wnd.Math.min(h+E1,j);e=g-h;k=R0.I0(a).slice(h,g);R0.I0(k).splice(0,0,R0.I0(d),R0.I0(f?e:0));Array.prototype.splice.apply(i,k);h=g;d+=e;}};R0.b0=function b0(a,b,c){R0.I0(a).splice(b,0,c);};R0.c0=function c0(a,b,c){R0.a0(c,0,a,b,c.length,false);};R0.d0=function d0(a,b){R0.I0(a).push(b);};R0.e0=function e0(a,b){R0.I0(a).push(b);};R0.f0=function f0(a,b,c){R0.I0(a).splice(b,c);};R0.g0=function g0(a,b){R0.I0(a).sort(b);};sR(241,1,{});R0.q0=function q0(){};R0.r0=function r0(a){switch(typeof(a)){case t1:return O0.hU(R0.I0(a));case s1:return O0.iT(R0.I0(a));case r1:return O0.oS(R0.I0(a));default:return a==null?0:R0.t0(a);}};R0.s0=function s0(){return ++R0.p0};R0.t0=function t0(a){return a.$H||(a.$H=R0.s0())};sR(196,1,{},R0.q0);R0.p0=0;R0.u0=function u0(a){if(!a){throw CQ(new O0.yT)}};R0.v0=function v0(a,b){if(0>a){throw CQ(new O0.zT('fromIndex: 0 > toIndex: '+a))}if(a>b){throw CQ(new O0.hS('fromIndex: 0, toIndex: '+a+F1+b))}};R0.w0=function w0(a){if(a<0){throw CQ(new O0.QT('Negative array size: '+a))}};R0.x0=function x0(a){if(!a){throw CQ(new T0.$Z)}};R0.y0=function y0(a,b){if(a<0||a>=b){throw CQ(new O0.fS(G1+a+H1+b))}};R0.z0=function z0(a){if(a==null){throw CQ(new O0.RT)}return a};R0.A0=function A0(a,b){if(a==null){throw CQ(new O0.TT(b))}};R0.B0=function B0(a,b){if(a<0||a>b){throw CQ(new O0.fS(G1+a+H1+b))}};R0.C0=function C0(a,b,c){if(a<0||b>c){throw CQ(new O0.fS(I1+a+J1+b+', size: '+c))}if(a>b){throw CQ(new O0.zT(I1+a+' > toIndex: '+b))}};R0.D0=function D0(a){if(!a){throw CQ(new O0.AT)}};R0.E0=function E0(a,b,c){if(a<0||b>c||b<a){throw CQ(new O0.NU(I1+a+J1+b+F1+c))}};R0.F0=function F0(a,b){if(a<0||a>=b){throw CQ(new O0.NU(G1+a+H1+b))}};R0.G0=function G0(a){var b,c;b=new ArrayBuffer(8);R0.I0(new Float64Array(b))[0]=a;c=R0.I0(new Uint32Array(b));return R0.L0(c[0]|0,c[1]|0)};R0.H0=function H0(a){return a>>>0};R0.I0=function I0(a){return a};R0.J0=function J0(a){return a};R0.K0=function K0(a){return a};sR(197,1,{});N0.wP=LS(1);N0.KO=LS(0);N0.RO=LS(198);N0.OO=LS(148);N0.QO=LS(199);N0.PO=LS(149);N0.iP=LS(145);N0.jP=LS(104);N0.vP=LS(72);N0.kP=LS(146);N0.DP=LS(18);N0.mP=LS(13);N0.xP=LS(37);N0.pP=LS(53);N0.rP=LS(66);N0.tP=LS(90);N0.CP=LS(2);N0.BP=LS(121);N0.uQ=LS(196);N0.vQ=LS(197);S0.Oc=function Oc(){S0.Oc=uR;S0.Nc=WL(IL(N0.hN,1),K1,5,15,[0,L1,14286847,13402367,12779264,16758197,9474192,3166456,16715021,9494608,11789301,11230450,9109248,12560038,15780000,16744448,16777008,2093087,8442339,9388244,4062976,15132390,12567239,10921643,9083335,10255047,14706227,15765664,5296208,13140019,8224944,12750735,6721423,12419299,16752896,10889513,6076625,7351984,M1,9764863,9756896,7586505,5551541,3907230,2396047,687500,27013,12632256,16767375,10909043,6717568,10380213,13924864,9699476,4366000,5707663,51456,7394559,16777159,14286791,13107143,10747847,9437127,6422471,4587463,3211207,2097095,65436,58997,54354,48952,43812,5096191,5089023,2200790,2522539,2516630,1528967,13684960,16765219,12105936,10900557,5724513,10375093,11230208,7688005,4358806,4325478,32000,7384058,47871,41471,36863,33023,27647,5528818,7888099,9064419,10565332,11739092,11739066,11734438,12389767,13041766,13369433,13697103,14221381,14680120,15073326,15400998,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13158600,1334015,56540,15075850,15132160,56540,15075850,15461355,8553170,1016335,1016335,1334015,15132160,3289770,14456450,16422400,16422400,11819700,3289770,1016335]);};S0.Pc=function Pc(a){a.u=new Z0.Tw;};S0.Qc=function Qc(a){var b,c;if((a.D&32)!=0)return;c=S0.Os(a.J);if(c!=null){if(a.v.a==0&&a.v.b==0){b=a.P.c*S0.Qj(a.J);a.u=S0.Kd(a);S0._c(a,b);S0.Hd(a,null,b,0);}S0.Ur(a,cN(a.w));a.J.M!=1&&S0.Id(a,448);S0.Or(a,c,a.v.a,a.v.b+N1*a.w);}};S0.Rc=function Rc(a,b){return a==null?b:b==null?a:a+','+b};S0.Sc=function Sc(a){var b;b=a.P.c*S0.Qj(a.J);a.W=b*0.06;a.R=b*0.15;a.Q=b*0.38;a.U=b*0.47;a.V=cN(b*a.H*0.6+0.5);a.T=b*0.12;a.X=b*0.4;a.w=b*0.5+0.5;};S0.Tc=function Tc(a){var b,c;a=EQ(a,O1);for(c=0;c<(Y0.Jw(),Y0.Iw).length;c++)if(OQ(a,Y0.Iw[c]))return Y0.Hw[c];b=new O0.MU('R');ZQ(EQ(a,P1),0)&&(b.a+='0',b);ZQ(EQ(a,Q1),0)&&(b.a+='3',b);ZQ(EQ(a,R1),0)&&(b.a+='4',b);ZQ(EQ(a,S1),0)&&(b.a+='5',b);ZQ(EQ(a,T1),0)&&(b.a+='6',b);ZQ(EQ(a,U1),0)&&(b.a+='7',b);ZQ(EQ(a,V1),0)&&(b.a+='8',b);return b.a};S0.Uc=function Uc(a,b,c,d){var e,f,g;e=new S0.Qd;f=new S0.Qd;e.a=b.a;e.c=b.c;e.b=(b.a+b.b)/2;e.d=(b.c+b.d)/2;f.a=e.b;f.c=e.d;f.b=b.b;f.d=b.d;if(S0.Ed(a,e)){S0.Id(a,a.p[c]);g=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,g);}if(S0.Ed(a,f)){S0.Id(a,a.p[d]);g=W1+O0.bT(i1.gV(i1.dV(new i1.hV(f.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(f.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(f.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(f.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,g);}S0.Id(a,a.O);};S0.Vc=function Vc(a,b,c,d){var e,f,g,h,i,j,k,l,m;l=(b.b-b.a)/10;m=(b.d-b.c)/10;e=new S0.Qd;if(S0.xk(a.J,S0.Nm(a.J,c,d))){f=-3;g=-3;}else {f=a.p[c];g=a.p[d];}S0.Id(a,f);e.a=b.a;e.c=b.c;e.b=b.a+l*2;e.d=b.c+m*2;i=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,i);e.a=b.a+l*4;e.c=b.c+m*4;e.b=b.a+l*5;e.d=b.c+m*5;j=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),i1.XW)))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,j);S0.Id(a,g);e.a=b.a+l*5;e.c=b.c+m*5;e.b=b.a+l*6;e.d=b.c+m*6;k=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),i1.XW)))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,k);e.a=b.a+l*8;e.c=b.c+m*8;e.b=b.b;e.d=b.d;h=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),i1.XW)))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,h);S0.Id(a,a.O);};S0.Wc=function Wc(a,b,c){S0.Pr(a,b-a.T/2,c-a.T/2,a.T);};S0.Xc=function Xc(a,b,c,d){var e;if(S0.xk(a.J,S0.Nm(a.J,c,d))){S0.Id(a,-3);e=W1+O0.bT(i1.gV(i1.dV(new i1.hV(b.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(b.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(b.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(b.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,e);S0.Id(a,a.O);}else if(a.p[c]!=a.p[d]){S0.Uc(a,b,c,d);}else if(a.p[c]!=0){S0.Id(a,a.p[c]);e=W1+O0.bT(i1.gV(i1.dV(new i1.hV(b.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(b.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(b.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(b.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,e);S0.Id(a,a.O);}else {e=W1+O0.bT(i1.gV(i1.dV(new i1.hV(b.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(b.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(b.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(b.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,e);}};S0.Yc=function Yc(a,b,c,d,e,f,g){g.a=b.a+e;g.c=b.c+f;g.b=b.b+e;g.d=b.d+f;S0.Xc(a,g,c,d);};S0.Zc=function Zc(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p;l=b.b-b.a;o=b.d-b.c;i=$wnd.Math.sqrt(l*l+o*o);j=2*gR(PQ($wnd.Math.round(i/(4*a.W))));m=l/(j-1);p=o/(j-1);if(S0.xk(a.J,S0.Nm(a.J,c,d))){e=-3;f=-3;}else {e=a.p[c];f=a.p[d];}k=b.a-a.W/2;n=b.c-a.W/2;S0.Id(a,e);for(h=0;h<(j/2|0);h++){S0.Pr(a,k,n,a.W);k+=m;n+=p;}S0.Id(a,f);for(g=0;g<(j/2|0);g++){S0.Pr(a,k,n,a.W);k+=m;n+=p;}S0.Id(a,a.O);};S0.$c=function $c(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r;i=(b.c-b.d)/9;n=(b.b-b.a)/9;j=b.b+i;o=b.d+n;k=b.b-i;p=b.d-n;l=(b.a+j)/2;q=(b.c+o)/2;m=(b.a+k)/2;r=(b.c+p)/2;g=new Z0.Ow(3);h=new Z0.Ow(4);Z0.Nw(g,b.a,b.c);Z0.Nw(g,l,q);Z0.Nw(g,m,r);Z0.Nw(h,m,r);Z0.Nw(h,l,q);Z0.Nw(h,j,o);Z0.Nw(h,k,p);if(S0.xk(a.J,S0.Nm(a.J,c,d))){e=-3;f=-3;}else {e=a.p[c];f=a.p[d];if(a.J.M!=1){f=S0.cd(a,c);e==S0.zj(a.J,c)&&(e=f);}}S0.Id(a,e);S0.Nr(a,g);S0.Id(a,f);S0.Nr(a,h);S0.Id(a,a.O);};S0._c=function _c(a,b){var c,d;for(d=0;d<a.Y.a.length;d++)a.u=Z0.Sw(a.u,T0.Yh(a.Y,d));S0.ad(a,b);c=0.1*b;a.u.c-=c;a.u.d-=c;a.u.b+=2*c;a.u.a+=2*c;};S0.ad=function ad(a,b){var c,d,e,f,g,h,i;e=OL(N0.xQ,c2,5,a.J.o,16,1);for(d=0;d<a.J.p;d++){if(S0.vk(a.J,d)){e[S0.Uj(a.J,0,d)]=true;e[S0.Uj(a.J,1,d)]=true;}}g=new Z0.Tw;for(c=0;c<a.J.o;c++){f=ZQ(EQ(S0.Kj(a.J,c),d2),0)?b*0.47:e[c]?b*0.38:0;if(f!=0){h=S0.hh(a.P,S0.Mj(a.J,c));i=S0.ih(a.P,S0.Nj(a.J,c));Z0.Rw(g,h-f,i-f,f*2,f*2);a.u=Z0.Sw(a.u,g);}}};S0.bd=function bd(a,b){var c;c=a.K!=0?a.K:a.B!=0?a.B:-1;return _0.YI(b,c)};S0.cd=function cd(a,b){var c,d;if((a.D&4224)!=0)return a.p[b];d=S0.dd(a,b);if(d==-1){c=S0.vm(a.J,b);if(c!=-1){b=c;d=S0.dd(a,b);}}if(d==-1)return a.p[b];switch(d&255){case 1:return 384;case 2:return 64;default:return 448;}};
S0.dd=function dd(a,b){var c,d,e;e=-1;d=-1;if((a.D&128)!=0)return e;if(S0.tk(a.J,b)){e=S0.Dj(a.J,b);d=S0.Cj(a.J,b);}c=S0.xm(a.J,b);if(c!=-1){e=S0.Zj(a.J,c);d=S0.Yj(a.J,c);}e!=-1&&e!=0&&(e|=d<<8);return e};S0.ed=function ed(a){var b,c,d,e,f;S0.Sr(a,2*a.Q);e=new S0.Qd;for(d=0;d<a.J.p;d++){b=S0.Uj(a.J,0,d);c=S0.Uj(a.J,1,d);if(S0.vk(a.J,d)){e.a=S0.hh(a.P,S0.Mj(a.J,b));e.c=S0.ih(a.P,S0.Nj(a.J,b));e.b=S0.hh(a.P,S0.Mj(a.J,c));e.d=S0.ih(a.P,S0.Nj(a.J,c));S0.Id(a,-2);f=W1+O0.bT(i1.gV(i1.dV(new i1.hV(e.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(e.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(e.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,f);}}};S0.fd=function fd(a){var b,c,d,e,f,g,h;if(a.J.I){g=a.U;S0.Id(a,-7);for(b=0;b<a.J.d;b++)ZQ(EQ(S0.Kj(a.J,b),d2),0)&&S0.Pr(a,S0.hh(a.P,S0.Mj(a.J,b))-g,S0.ih(a.P,S0.Nj(a.J,b))-g,2*g);S0.Sr(a,2*a.U);f=new S0.Qd;for(e=0;e<a.J.p;e++){c=S0.Uj(a.J,0,e);d=S0.Uj(a.J,1,e);if(ZQ(EQ(EQ(S0.Kj(a.J,c),S0.Kj(a.J,d)),d2),0)){f.a=S0.hh(a.P,S0.Mj(a.J,c));f.c=S0.ih(a.P,S0.Nj(a.J,c));f.b=S0.hh(a.P,S0.Mj(a.J,d));f.d=S0.ih(a.P,S0.Nj(a.J,d));h=W1+O0.bT(i1.gV(i1.dV(new i1.hV(f.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(f.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(f.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(f.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,h);}}}};S0.gd=function gd(a){var b,c,d,e;if(a.J.I){S0.Id(a,320);if((a.D&8)!=0)for(b=0;b<a.J.d;b++)ZQ(EQ(S0.Kj(a.J,b),-536870913),0)&&S0.Pr(a,S0.hh(a.P,S0.Mj(a.J,b))-a.X/2,S0.ih(a.P,S0.Nj(a.J,b))-a.X/2,a.X);for(e=0;e<a.J.e;e++){if(S0.ck(a.J,e)!=0){c=S0.Uj(a.J,0,e);d=S0.Uj(a.J,1,e);S0.Pr(a,(S0.hh(a.P,S0.Mj(a.J,c))+S0.hh(a.P,S0.Mj(a.J,d))-a.X)/2,(S0.ih(a.P,S0.Nj(a.J,c))+S0.ih(a.P,S0.Nj(a.J,d))-a.X)/2,a.X);}}}};S0.hd=function hd(a){a.H=1;a.P=new S0.jh;a.Y=new T0.ki;a.S=new T0.ki;a.r=OL(N0.xQ,c2,5,a.J.o,16,1);a.v=new Z0.Kw;a.O=0;a.A=-1;S0.Md(a);};S0.jd=function jd(a,b){var c;if(S0.Bm(a.J,b)==0)return false;for(c=0;c<S0.Bm(a.J,b);c++)if(!S0.xk(a.J,S0.Rm(a.J,b,c)))return false;return true};S0.kd=function kd(a){var b;a.q=OL(N0.xQ,c2,5,a.J.o,16,1);for(b=0;b<a.J.p;b++){a.q[S0.Uj(a.J,0,b)]=true;a.q[S0.Uj(a.J,1,b)]=true;}};S0.ld=function ld(a,b){var c;if(S0.Qm(a.J,b)!=2)return false;for(c=0;c<2;c++)if(S0.Sm(a.J,b,c)!=2)return false;return true};S0.md=function md(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o;m=false;e.a=0;e.b=0;d>0?(f=e2):(f=f2);o=S0.Tj(a.J,b,c);for(k=0;k<S0.Qm(a.J,b);k++){g=S0.Rm(a.J,b,k);h=o;S0.Uj(a.J,0,g)==b?(l=S0.Uj(a.J,1,g)):(l=S0.Uj(a.J,0,g));if(l==c)continue;n=S0.Tj(a.J,b,l);h<n&&(h+=g2);i=h-n;if(d>0){i<h2&&(m=true);i>e2&&(i=e2);i<0.523598776&&(i=0.523598776);if(i<=f){f=i;j=a.R*$wnd.Math.tan(f-i2)/2;e.a=-(j*$wnd.Math.sin(h));e.b=-(j*$wnd.Math.cos(h));}}else {i>=h2&&(m=true);i<f2&&(i=f2);i>5.759586531&&(i=5.759586531);if(i>=f){f=i;j=a.R*$wnd.Math.tan(4.712388981-f)/2;e.a=-(j*$wnd.Math.sin(h));e.b=-(j*$wnd.Math.cos(h));}}}return m};S0.nd=function nd(a,b,c,d){var e;if(b==0){c<0?(d.a=a.R):(d.a=-a.R);d.b=0;return}e=$wnd.Math.atan(c/b);b<0&&(e+=h2);d.a=-(a.R*$wnd.Math.sin(e));d.b=a.R*$wnd.Math.cos(e);};S0.od=function od(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p;e=new S0.Qd;i=new S0.Qd;k=new Z0.Kw;j=new Z0.Kw;g=S0.Uj(a.J,0,c);h=S0.Uj(a.J,1,c);if(d){m=b.a;b.a=b.b;b.b=m;m=b.c;b.c=b.d;b.d=m;n=g;g=h;h=n;}if(!S0.Ed(a,b))return;if(S0.Sn(a.J,c)){e.a=b.a;e.c=b.c;e.b=b.b;e.d=b.d;l=d?-S0.on(a.J,c):S0.on(a.J,c);l==0&&(l=1);S0.nd(a,b.b-b.a,b.d-b.c,k);if(l>0){i.a=b.a+k.a;i.c=b.c+k.b;i.b=b.b+k.a;i.d=b.d+k.b;if(S0.md(a,g,h,1,j)||S0.Qm(a.J,g)>1){i.a+=j.a+k.b;i.c+=j.b-k.a;}}else {i.a=b.a-k.a;i.c=b.c-k.b;i.b=b.b-k.a;i.d=b.d-k.b;if(S0.md(a,g,h,-1,j)||S0.Qm(a.J,g)>1){i.a+=j.a+k.b;i.c+=j.b-k.a;}}S0.dk(a.J,c)==386&&S0.Dd(e,i);S0.Ed(a,e)&&S0.Xc(a,e,g,h);S0.dk(a.J,c)==64?S0.Ed(a,i)&&S0.Vc(a,i,g,h):S0.Ed(a,i)&&S0.Xc(a,i,g,h);}else {S0.nd(a,b.b-b.a,b.d-b.c,k);o=k.a/2;p=k.b/2;f=false;e.a=b.a+o;e.c=b.c+p;e.b=b.b+o;e.d=b.d+p;if(S0.Qm(a.J,g)>1){if(S0.md(a,g,h,1,j)){e.a+=j.a;e.c+=j.b;if(S0.Qm(a.J,g)==2){if(j.a!=0||j.b!=0){e.a+=k.b;e.c-=k.a;}}}else {a.o[g]=new Z0.Lw(e.a,e.c);}}i.a=b.a-o;i.c=b.c-p;i.b=b.b-o;i.d=b.d-p;if(S0.Qm(a.J,g)>1){if(S0.md(a,g,h,0,j)){i.a+=j.a;i.c+=j.b;if(S0.Qm(a.J,g)==2){if(j.a!=0||j.b!=0){i.a+=k.b;i.c-=k.a;}}}else {a.o[g]=new Z0.Lw(i.a,i.c);f=true;}}S0.dk(a.J,c)==386&&S0.Dd(e,i);if(S0.dk(a.J,c)==64){if(f){S0.Vc(a,e,g,h);S0.Xc(a,i,g,h);}else {S0.Xc(a,e,g,h);S0.Vc(a,i,g,h);}}else {S0.Xc(a,e,g,h);S0.Xc(a,i,g,h);}}};S0.pd=function pd(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;k=a.O;l=a.C;if((a.D&j2)!=0){a.O=-6;a.C=-8355712;S0.Id(a,1);}a.o=OL(N0.uO,z1,35,a.J.o,0,1);for(i=0;i<a.J.p;i++)(S0.dk(a.J,i)==2||S0.dk(a.J,i)==386||S0.dk(a.J,i)==64)&&S0.sd(a,i);for(j=0;j<a.J.p;j++)S0.dk(a.J,j)!=2&&S0.dk(a.J,j)!=386&&S0.dk(a.J,j)!=64&&S0.sd(a,j);if((a.D&64)==0){for(h=0;h<a.J.p;h++){if(S0.Xj(a.J,h)!=0){e=null;S0.Xj(a.J,h)==1||S0.Xj(a.J,h)==2?(S0.ak(a.J,h)==2||S0.Zj(a.J,h)==0||b[S0.Zj(a.J,h)][S0.Yj(a.J,h)]>1)&&(S0.Xj(a.J,h)==1?(e=S0.ak(a.J,h)==2?'E':S0.zk(a.J,h)?'p':'P'):(e=S0.ak(a.J,h)==2?'Z':S0.zk(a.J,h)?'m':'M')):(e='?');if(e!=null){S0.Ur(a,(a.V*2+1)/3|0);S0.Id(a,S0.xk(a.J,h)?-3:a.J.M==1||(a.D&k2)!=0?a.O:448);c=S0.Uj(a.J,0,h);d=S0.Uj(a.J,1,h);n=(S0.hh(a.P,S0.Mj(a.J,c))+S0.hh(a.P,S0.Mj(a.J,d)))/2;o=(S0.ih(a.P,S0.Nj(a.J,c))+S0.ih(a.P,S0.Nj(a.J,d)))/2;f=(S0.hh(a.P,S0.Mj(a.J,c))-S0.hh(a.P,S0.Mj(a.J,d)))/3;g=(S0.ih(a.P,S0.Nj(a.J,c))-S0.ih(a.P,S0.Nj(a.J,d)))/3;S0.vd(a,n+g,o-f,e,true);S0.Id(a,a.O);S0.Ur(a,a.V);}}}}if((a.D&4)!=0){S0.Ur(a,(a.V*2+1)/3|0);S0.Id(a,384);for(h=0;h<a.J.p;h++){c=S0.Uj(a.J,0,h);d=S0.Uj(a.J,1,h);m=S0.Jn(a.J,h)?'d':S0.Fn(a.J,h)?'a':'';n=(S0.hh(a.P,S0.Mj(a.J,c))+S0.hh(a.P,S0.Mj(a.J,d)))/2;o=(S0.ih(a.P,S0.Nj(a.J,c))+S0.ih(a.P,S0.Nj(a.J,d)))/2;S0.vd(a,n,o,m+(''+h),true);}S0.Id(a,a.O);S0.Ur(a,a.V);}if((a.D&j2)!=0){a.O=k;a.C=l;}};S0.qd=function qd(a){var b,c;for(c=new T0.iZ(a.S);c.a<c.c.a.length;){b=T0.hZ(c);S0.Id(a,b.a);S0.Wc(a,b.b,b.c);}S0.Id(a,a.O);};S0.rd=function rd(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$;a.I||S0.Qr(a,b,(S0.Ej(a.J,b),S0.hh(a.P,S0.Mj(a.J,b))),S0.ih(a.P,S0.Nj(a.J,b)));M=null;if(S0.yj(a.J,b)!=0){U=$wnd.Math.abs(S0.yj(a.J,b))==1?'':''+$wnd.Math.abs(S0.yj(a.J,b));M=S0.yj(a.J,b)<0?U+'-':U+'+';}D=null;N=S0.Kj(a.J,b);if(JQ(N,0)!=0){ZQ(EQ(N,l2),0)&&(D=D==null?'*':D+','+'*');ZQ(EQ(N,m2),0)&&(D=D==null?'!*':D+','+'!*');ZQ(EQ(N,n2),0)?(D=D==null?'ha':D+','+'ha'):ZQ(EQ(N,2),0)?(D=D==null?'a':D+','+'a'):ZQ(EQ(N,4),0)&&(D=D==null?'!a':D+','+'!a');ZQ(EQ(N,k2),0)&&(D=D==null?'s':D+','+'s');if(ZQ(EQ(N,o2),0)){w=EQ(N,o2);JQ(w,1792)==0?(D=D==null?'h0':D+','+'h0'):JQ(w,1664)==0?(D=D==null?'h1':D+','+'h1'):JQ(w,1408)==0?(D=D==null?'h2':D+','+'h2'):JQ(w,128)==0?(D=D==null?'h>0':D+','+'h>0'):JQ(w,384)==0?(D=D==null?'h>1':D+','+'h>1'):JQ(w,896)==0?(D=D==null?'h>2':D+','+'h>2'):JQ(w,p2)==0?(D=D==null?'h<3':D+','+'h<3'):JQ(w,1536)==0&&(D=D==null?'h<2':D+','+'h<2');}if(ZQ(EQ(N,q2),0)){i=EQ(N,q2);JQ(i,r2)==0?(D=D==null?'c0':D+','+'c0'):JQ(i,s2)==0?(D=D==null?'c+':D+','+'c+'):JQ(i,t2)==0&&(D=D==null?'c-':D+','+'c-');}if(ZQ(EQ(N,u2),0)){L=EQ(N,u2);JQ(L,98304)==0?(D=D==null?'pi0':D+','+'pi0'):JQ(L,81920)==0?(D=D==null?'pi1':D+','+'pi1'):JQ(L,49152)==0?(D=D==null?'pi2':D+','+'pi2'):JQ(L,j2)==0&&(D=D==null?'pi>0':D+','+'pi>0');}if(ZQ(EQ(N,v2),0)){K=EQ(N,v2);JQ(K,3801088)==0?(D=D==null?'n1':D+','+'n1'):JQ(K,3538944)==0?(D=D==null?'n2':D+','+'n2'):JQ(K,3014656)==0?(D=D==null?'n3':D+','+'n3'):JQ(K,3145728)==0?(D=D==null?'n<3':D+','+'n<3'):JQ(K,w2)==0?(D=D==null?'n<4':D+','+'n<4'):JQ(K,x2)==0?(D=D==null?'n>1':D+','+'n>1'):JQ(K,y2)==0?(D=D==null?'n>2':D+','+'n>2'):JQ(K,z2)==0&&(D=D==null?'n>3':D+','+'n>3');}if(ZQ(EQ(N,A2),0)){o=EQ(N,A2);JQ(o,B2)==0?(D=D==null?'e0':D+','+'e0'):JQ(o,C2)==0?(D=D==null?'e1':D+','+'e1'):JQ(o,D2)==0?(D=D==null?'e2':D+','+'e2'):JQ(o,E2)==0?(D=D==null?'e3':D+','+'e3'):JQ(o,15393162788864)==0?(D=D==null?'e<2':D+','+'e<2'):JQ(o,13194139533312)==0?(D=D==null?'e<3':D+','+'e<3'):JQ(o,F2)==0?(D=D==null?'e<4':D+','+'e<4'):JQ(o,G2)==0?(D=D==null?'e>0':D+','+'e>0'):JQ(o,H2)==0?(D=D==null?'e>1':D+','+'e>1'):JQ(o,I2)==0?(D=D==null?'e>2':D+','+'e>2'):JQ(o,J2)==0?(D=D==null?'e>3':D+','+'e>3'):JQ(o,4947802324992)==0?(D=D==null?'e1-2':D+','+'e1-2'):JQ(o,9345848836096)==0?(D=D==null?'e1-3':D+','+'e1-3'):JQ(o,10445360463872)==0&&(D=D==null?'e2-3':D+','+'e2-3');}if(ZQ(EQ(N,120),0)){Q=EQ(N,120);JQ(Q,112)==0?(D=D==null?'!r':D+','+'!r'):JQ(Q,8)==0?(D=D==null?'r':D+','+'r'):JQ(Q,96)==0?(D=D==null?'rb<3':D+','+'rb<3'):JQ(Q,104)==0?(D=D==null?'rb2':D+','+'rb2'):JQ(Q,88)==0?(D=D==null?'rb3':D+','+'rb3'):JQ(Q,56)==0&&(D=D==null?'rb4':D+','+'rb4');}ZQ(EQ(N,K2),0)&&(D=D==null?'r'+hR(bR(EQ(N,K2),22)):D+','+('r'+hR(bR(EQ(N,K2),22))));ZQ(EQ(N,O1),0)&&(D=S0.Rc(D,S0.Tc(N)));ZQ(EQ(N,L2),0)&&(D=D==null?'f':D+','+'f');}S0.Ij(a.J,b)!=0&&(D=S0.Rc(D,''+S0.Ij(a.J,b)));T=0;if(S0.Lj(a.J,b)!=0){switch(S0.Lj(a.J,b)){case 16:M=M==null?'|':M+','+'|';break;case 32:T=1;break;case 48:T=2;}}l=null;if((a.D&64)==0){if(S0.qk(a.J,b))l='?';else if(S0.xj(a.J,b)!=0){if(S0.Dj(a.J,b)==0||c==null||c[S0.Dj(a.J,b)][S0.Cj(a.J,b)]>1){if(S0.Qm(a.J,b)==2){switch(S0.xj(a.J,b)){case 2:l=S0.sk(a.J,b)?'p':'P';break;case 1:l=S0.sk(a.J,b)?'m':'M';break;default:l='*';}}else {switch(S0.xj(a.J,b)){case 1:l=S0.sk(a.J,b)?'r':'R';break;case 2:l=S0.sk(a.J,b)?'s':'S';break;default:l='*';}}}}}(a.D&768)!=0&&(l=S0.Rc(l,''+S0.Ws(a.J,b)));I=null;(a.D&16)!=0&&S0.Hj(a.J,b)!=0&&(I=''+S0.Hj(a.J,b));q=null;if(S0.tn(a.J,b)!=-1){p=S0.dd(a,b);p!=-1&&(q=p==0?'abs':((p&255)==1?'&':'or')+(1+(p>>8)));}A=0;(a.D&M2)==0&&(a.J.I?ZQ(EQ(S0.Kj(a.J,b),N2),0)&&(A=S0.bn(a.J,b)):(S0.Pj(a.J,b)!=6||S0.Ij(a.J,b)!=0||!a.q[b]||S0.Lj(a.J,b)!=0)&&(A=S0.bn(a.J,b)));H=false;f=S0.Aj(a.J,b);if(f!=null&&O0.eU(R0.I0(f).substr(0,1),']')){D=S0.Rc((R0.F0(1,R0.I0(f).length+1),R0.I0(f).substr(1)),D);f=null;H=true;}if(f!=null){A=0;}else if(S0.Fj(a.J,b)!=null){e=ZQ(EQ(S0.Kj(a.J,b),1),0)?'[!':'[';f=e+S0.Gj(a.J,b)+']';R0.I0(f).length>5&&(f=e+S0.Fj(a.J,b).length+']');ZQ(EQ(S0.Kj(a.J,b),N2),0)&&(A=-1);}else if(ZQ(EQ(S0.Kj(a.J,b),1),0)){f='?';ZQ(EQ(S0.Kj(a.J,b),N2),0)&&(A=-1);}else (S0.Pj(a.J,b)!=6||M!=null||D!=null||A>0||!a.q[b])&&(f=S0.Ej(a.J,b));G=0;!S0.Ik(a.J,b)&ZQ(EQ(S0.Kj(a.J,b),d2),0)&&S0.Id(a,-8);if(f!=null){G=(O=(V=f1.HR(a.e,f),new g1.NR(V)).b,O);S0.vd(a,S0.hh(a.P,S0.Mj(a.J,b)),S0.ih(a.P,S0.Nj(a.J,b)),f,true);a.r[b]=true;}else S0.ld(a,b)&&S0.ud(a,S0.hh(a.P,S0.Mj(a.J,b)),S0.ih(a.P,S0.Nj(a.J,b)),b);if(M!=null){S0.Ur(a,(a.V*2+1)/3|0);X=S0.hh(a.P,S0.Mj(a.J,b))+((G+(O=(V=f1.HR(a.e,M),new g1.NR(V)).b,O))/2+1);Z=S0.ih(a.P,S0.Nj(a.J,b))-((a.k*4-4)/8|0);S0.vd(a,X,Z,M,true);S0.Ur(a,a.V);}(a.D&2)!=0&&(D=''+b);if(D!=null){H?S0.Ur(a,(a.V*5+1)/6|0):S0.Ur(a,(a.V*2+1)/3|0);X=S0.hh(a.P,S0.Mj(a.J,b))-(G+(O=(V=f1.HR(a.e,D),new g1.NR(V)).b,O))/2;Z=S0.ih(a.P,S0.Nj(a.J,b))-((a.k*4-4)/8|0);S0.vd(a,X,Z,D,true);S0.Ur(a,a.V);}if(l!=null){S0.Ur(a,(a.V*2+1)/3|0);X=S0.hh(a.P,S0.Mj(a.J,b))-(G+(O=(V=f1.HR(a.e,l),new g1.NR(V)).b,O))/2;Z=S0.ih(a.P,S0.Nj(a.J,b))+((a.k*4+4)/8|0);S=a.A;a.J.M!=1&&(a.D&k2)==0&&S0.Id(a,448);S0.vd(a,X,Z,l,false);S0.Id(a,S);S0.Ur(a,a.V);}if(I!=null){S0.Ur(a,(a.V*2+1)/3|0);X=S0.hh(a.P,S0.Mj(a.J,b))+((G+(O=(V=f1.HR(a.e,I),new g1.NR(V)).b,O))/2+1);Z=S0.ih(a.P,S0.Nj(a.J,b))+((a.k*4+4)/8|0);S=a.A;S0.Id(a,S0.uk(a.J,b)?384:448);S0.vd(a,X,Z,I,true);S0.Id(a,S);S0.Ur(a,a.V);}if(q!=null){d=S0.zd(a,b);S0.Ur(a,(a.V*2+1)/3|0);X=S0.hh(a.P,S0.Mj(a.J,b))+0.7*a.k*$wnd.Math.sin(d);Z=S0.ih(a.P,S0.Nj(a.J,b))+0.7*a.k*$wnd.Math.cos(d);S=a.A;!a.I&&a.J.M!=1&&S0.Id(a,S0.cd(a,b));S0.vd(a,X,Z,q,false);S0.Id(a,S);S0.Ur(a,a.V);}if(A==0&&T==0){a.A==-8&&S0.Id(a,-9);return}u=OL(N0.fN,O2,5,4,15,1);for(C=0;C<S0.Cm(a.J,b);C++){h=S0.Rm(a.J,b,C);for(F=0;F<2;F++){if(S0.Uj(a.J,F,h)==b){R=S0.Tj(a.J,S0.Uj(a.J,F,h),S0.Uj(a.J,1-F,h));if(R<P2){u[0]-=R+i2;u[3]+=R+h2;}else if(R<0){u[2]+=R+i2;u[3]-=R;}else if(R<i2){u[1]+=R;u[2]+=i2-R;}else {u[0]+=R-i2;u[1]+=h2-R;}}}}S0.Qm(a.J,b)==0?S0.Bk(a.J,b)?(u[3]-=0.2):(u[1]-=0.2):(u[1]-=0.1);(M!=null||I!=null)&&(u[1]+=10);(D!=null||l!=null)&&(u[3]+=10);s='';if(A!=0){v=(P=(W=f1.HR(a.e,'H'),new g1.NR(W)).b,P);t=0;r=a.k;if(A==-1){s='n';S0.Ur(a,(a.V*2+1)/3|0);t=(O=(V=f1.HR(a.e,s),new g1.NR(V)).b,O);}else if(A>1){s=''+A;S0.Ur(a,(a.V*2+1)/3|0);t=(O=(V=f1.HR(a.e,s),new g1.NR(V)).b,O);}if(u[1]<0.6||u[3]<0.6){k=S0.ih(a.P,S0.Nj(a.J,b));if(u[1]<=u[3]){u[1]+=10;j=S0.hh(a.P,S0.Mj(a.J,b))+(G+v)/2;}else {u[3]+=10;j=S0.hh(a.P,S0.Mj(a.J,b))-(G+v)/2-t;}}else {j=S0.hh(a.P,S0.Mj(a.J,b));if(u[0]<u[2]){u[0]+=10;k=S0.ih(a.P,S0.Nj(a.J,b))-r;}else {u[2]+=10;k=S0.ih(a.P,S0.Nj(a.J,b))+r;}}if(t>0){X=j+(v+t)/2;Z=k+((a.k*4+4)/8|0);S0.vd(a,X,Z,s,true);S0.Ur(a,a.V);}S0.vd(a,j,k,'H',true);}g=0;if(T!=0){J=50;m=0;for(B=0;B<4;B++){n=B>1?B-2:B+2;if(u[B]<J){g=B;J=u[B];m=u[n];}else if(u[B]==J){if(u[n]>m){g=B;m=u[n];}}}switch(g){case 0:j=S0.hh(a.P,S0.Mj(a.J,b));k=S0.ih(a.P,S0.Nj(a.J,b))-a.T-G/2;break;case 1:j=S0.hh(a.P,S0.Mj(a.J,b))+a.T+G/2;k=S0.ih(a.P,S0.Nj(a.J,b));break;case 2:j=S0.hh(a.P,S0.Mj(a.J,b));k=S0.ih(a.P,S0.Nj(a.J,b))+a.T+G/2;break;default:j=S0.hh(a.P,S0.Mj(a.J,b))-a.T-G/2;k=S0.ih(a.P,S0.Nj(a.J,b));}if(T==1){T0.Th(a.Y,new Z0.Uw(j-a.T,k-a.T,2*a.T,2*a.T));a.I||T0.Th(a.S,new S0.Pd(j,k,S0.jd(a,b)?-3:a.p[b]));}else {switch(g){case 2:case 0:Y=2*a.T;$=0;j-=a.T;break;case 1:Y=0;$=2*a.T;k-=a.T;break;default:Y=0;$=2*a.T;k-=a.T;}T0.Th(a.Y,new Z0.Uw(j-a.T,k-a.T,2*a.T,2*a.T));a.I||T0.Th(a.S,new S0.Pd(j,k,S0.jd(a,b)?-3:a.p[b]));T0.Th(a.Y,new Z0.Uw(j+Y-a.T,k+$-a.T,2*a.T,2*a.T));a.I||T0.Th(a.S,new S0.Pd(j+Y,k+$,S0.jd(a,b)?-3:a.p[b]));}}a.A==-8&&S0.Id(a,-9);};S0.sd=function sd(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;u=new S0.Qd;c=new S0.Qd;g=new S0.Qd;q=new Z0.Kw;p=new Z0.Kw;e=S0.Uj(a.J,0,b);f=S0.Uj(a.J,1,b);S0.Rr(a,b,S0.hh(a.P,S0.Mj(a.J,e)),S0.ih(a.P,S0.Nj(a.J,e)),S0.hh(a.P,S0.Mj(a.J,f)),S0.ih(a.P,S0.Nj(a.J,f)));!S0.Ik(a.J,e)&&!S0.Ik(a.J,f)&&ZQ(EQ(_Q(S0.Kj(a.J,e),S0.Kj(a.J,f)),d2),0)&&S0.Id(a,-8);if(!a.o[e]){u.a=S0.hh(a.P,S0.Mj(a.J,e));u.c=S0.ih(a.P,S0.Nj(a.J,e));}else {u.a=a.o[e].a;u.c=a.o[e].b;}if(!a.o[f]){u.b=S0.hh(a.P,S0.Mj(a.J,f));u.d=S0.ih(a.P,S0.Nj(a.J,f));}else {u.b=a.o[f].a;u.d=a.o[f].b;}if((S0.ck(a.J,b)&Q2)!=0){S0.Ed(a,u)&&S0.Mr(a,u);S0.Id(a,-9);return}h=S0.dk(a.J,b)==64?0:S0.dk(a.J,b)==32?1:S0.ak(a.J,b);switch(h){case 1:i=S0.dk(a.J,b);if((a.D&128)!=0&&(i==257||i==129)){t=S0.Uj(a.J,0,b);n=S0.Dj(a.J,t);if(n!=0){m=S0.Cj(a.J,t);l=0;for(d=0;d<a.J.d;d++)S0.Dj(a.J,d)==n&&S0.Cj(a.J,d)==m&&++l;l==1&&(i=1);}}switch(i){case 1:S0.Ed(a,u)&&S0.Xc(a,u,e,f);break;case 257:S0.Bd(a,u,e,f);break;case 129:v=u.b-u.a;w=u.d-u.c;if(S0.xk(a.J,S0.Nm(a.J,e,f))){j=-3;k=-3;}else {j=a.p[e];k=S0.cd(a,e);j==S0.zj(a.J,e)&&(j=k);}for(o=2;o<17;o+=2){c.a=u.a+o*v/17-o*w/128;c.c=u.c+o*w/17+o*v/128;c.b=u.a+o*v/17+o*w/128;c.d=u.c+o*w/17-o*v/128;if(S0.Ed(a,c)){S0.Id(a,o<9?j:k);r=W1+O0.bT(i1.gV(i1.dV(new i1.hV(c.a),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(c.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(c.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(c.d),i1.XW)))+X1+_1+a.d+X1+a2+a.j+b2;S0.Xr(a,r);S0.Id(a,a.O);}}break;case 32:S0.Ed(a,u)&&S0.Zc(a,u,e,f);}break;case 0:case 2:if((a.r[e]||S0.Gm(a.J,e)==2)&&(a.r[f]||S0.Gm(a.J,f)==2)&&!S0.Sn(a.J,b)&&h==2){if(!S0.Ed(a,u))break;S0.nd(a,u.b-u.a,u.d-u.c,q);v=q.a/2;w=q.b/2;c.a=u.a+v;c.c=u.c+w;c.b=u.b+v;c.d=u.d+w;g.a=u.a-v;g.c=u.c-w;g.b=u.b-v;g.d=u.d-w;S0.dk(a.J,b)==386&&S0.Dd(c,g);S0.Xc(a,c,e,f);h==2?S0.Xc(a,g,e,f):S0.Vc(a,g,e,f);}else if((a.r[f]||S0.Gm(a.J,f)==2)&&h==2){S0.od(a,u,b,false);}else if((a.r[e]||S0.Gm(a.J,e)==2)&&h==2){S0.od(a,u,b,true);}else {s=S0.on(a.J,b);s==0&&(s=1);c.a=u.a;c.c=u.c;c.b=u.b;c.d=u.d;S0.nd(a,u.b-u.a,u.d-u.c,q);if(s>0){g.a=u.a+q.a;g.c=u.c+q.b;g.b=u.b+q.a;g.d=u.d+q.b;if(S0.md(a,e,f,1,p)||S0.Qm(a.J,e)>1){g.a+=p.a+q.b;g.c+=p.b-q.a;}if(S0.md(a,f,e,-1,p)||S0.Qm(a.J,f)>1){g.b+=p.a-q.b;g.d+=p.b+q.a;}}else {g.a=u.a-q.a;g.c=u.c-q.b;g.b=u.b-q.a;g.d=u.d-q.b;if(S0.md(a,e,f,-1,p)||S0.Qm(a.J,e)>1){g.a+=p.a+q.b;g.c+=p.b-q.a;}if(S0.md(a,f,e,1,p)||S0.Qm(a.J,f)>1){g.b+=p.a-q.b;g.d+=p.b+q.a;}}S0.dk(a.J,b)==386&&S0.Dd(c,g);S0.Ed(a,c)&&S0.Xc(a,c,e,f);h==2?S0.Ed(a,g)&&S0.Xc(a,g,e,f):S0.Ed(a,g)&&S0.Vc(a,g,e,f);}break;case 3:if(S0.Ed(a,u)){S0.Xc(a,u,e,f);S0.nd(a,u.b-u.a,u.d-u.c,q);S0.Yc(a,u,e,f,q.a,q.b,c);S0.Yc(a,u,e,f,-q.a,-q.b,c);}break;case 4:if(S0.Ed(a,u)){S0.nd(a,u.b-u.a,u.d-u.c,q);S0.Yc(a,u,e,f,1.5*q.a,1.5*q.b,c);S0.Yc(a,u,e,f,0.5*q.a,0.5*q.b,c);S0.Yc(a,u,e,f,-0.5*q.a,-0.5*q.b,c);S0.Yc(a,u,e,f,-1.5*q.a,-1.5*q.b,c);}break;case 5:if(S0.Ed(a,u)){S0.Xc(a,u,e,f);S0.nd(a,u.b-u.a,u.d-u.c,q);S0.Yc(a,u,e,f,2*q.a,2*q.b,c);S0.Yc(a,u,e,f,q.a,q.b,c);S0.Yc(a,u,e,f,-q.a,-q.b,c);S0.Yc(a,u,e,f,-2*q.a,-2*q.b,c);}}a.A==-8&&S0.Id(a,-9);};S0.td=function td(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;o=false;for(d=0;d<a.J.e;d++){j=null;if(S0.wk(a.J,d)){l=S0.Wj(a.J,d);k=S0.Vj(a.J,d);j=l==k?'['+l+']':'['+l+':'+k+']';}else (S0.ck(a.J,d)&R2)!=0?(j=(S0.ck(a.J,d)&R2)==w2?'a':(S0.ck(a.J,d)&384)==256?'r!a':'!a'):(S0.ck(a.J,d)&384)!=0&&(j=(S0.ck(a.J,d)&384)==256?'r':'!r');n=(S0.ck(a.J,d)&y2)>>17;n!=0&&(j=(j==null?'':j)+n);if(j!=null){b=S0.Uj(a.J,0,d);c=S0.Uj(a.J,1,d);if(!o){S0.Ur(a,(a.V*2+1)/3|0);o=true;}q=(S0.hh(a.P,S0.Mj(a.J,b))+S0.hh(a.P,S0.Mj(a.J,c)))/2;r=(S0.ih(a.P,S0.Nj(a.J,b))+S0.ih(a.P,S0.Nj(a.J,c)))/2;f=S0.hh(a.P,S0.Mj(a.J,c))-S0.hh(a.P,S0.Mj(a.J,b));g=S0.ih(a.P,S0.Nj(a.J,c))-S0.ih(a.P,S0.Nj(a.J,b));e=$wnd.Math.sqrt(f*f+g*g);i=(m=(p=f1.HR(a.e,j),new g1.NR(p)).b,0.6*m);h=0.55*a.k;e!=0&&(f>0?S0.vd(a,q+i*g/e,r-h*f/e,j,true):S0.vd(a,q-i*g/e,r+h*f/e,j,true));}}o&&S0.Ur(a,a.V);};S0.ud=function ud(a,b,c,d){T0.Th(a.Y,new Z0.Uw(b-a.T,c-a.T,2*a.T,2*a.T));a.I||T0.Th(a.S,new S0.Pd(b,c,S0.jd(a,d)?-3:a.p[d]));};S0.vd=function vd(a,b,c,d,e){var f,g,h,i,j;if(e){g=(f=(h=f1.HR(a.e,d),new g1.NR(h)).b,f);i=g/2+(a.k/8|0);j=a.k/2|0;(d=='+'||d=='-')&&(j=j*2/3);T0.Th(a.Y,new Z0.Uw(b-i,c-j,2*i,2*j));}a.I||S0.Or(a,d,b,c);};S0.wd=function wd(a){var b;b=a.a;a.a=a.b;a.b=b;b=a.c;a.c=a.d;a.d=b;};S0.xd=function xd(a,b,c){var d;d=b==0?g2+a[0]-a[a.length-1]:a[b]-a[b-1];c>-2.0943951023931953&&c<S2?(d-=2*$wnd.Math.cos(c+T2)):(d-=0.5*$wnd.Math.cos(c+T2));return d};S0.yd=function yd(a){var b;b=new Z0.Tw;if(a.a<=a.b){b.c=a.a;b.b=a.b-a.a;}else {b.c=a.b;b.b=a.a-a.b;}if(a.c<=a.d){b.d=a.c;b.a=a.d-a.c;}else {b.d=a.d;b.a=a.c-a.d;}return b};S0.zd=function zd(a,b){var c,d,e,f,g,h,i;c=OL(N0.fN,O2,5,S0.Bm(a.J,b),15,1);for(e=0;e<S0.Bm(a.J,b);e++)c[e]=S0.Tj(a.J,b,S0.Pm(a.J,b,e));R0.g0(c,R0.I0(vR(T0.GZ.prototype.ac,T0.GZ,[])));f=S0.Ad(c,0);g=S0.xd(c,0,f);for(d=1;d<c.length;d++){h=S0.Ad(c,d);i=S0.xd(c,d,h);if(g<i){g=i;f=h;}}return f};S0.Ad=function Ad(a,b){var c;if(b>0)return (a[b]+a[b-1])/2;c=h2+(a[0]+a[a.length-1])/2;return c>h2?c-g2:c};S0.Bd=function Bd(a,b,c,d){var e,f,g,h;h=new S0.Qd;if(b.a==b.b&&b.c==b.d)return;h.a=b.a;h.c=b.c;h.b=b.b;h.d=b.d;g=S0.yd(h);for(e=0;e<a.Y.a.length;e++){f=T0.Yh(a.Y,e);if(f.c>g.c+g.b||f.d>g.d+g.a||g.c>f.c+f.b||g.d>f.d+f.a)continue;if(S0.Cd(a,h.a,h.c,e)){if(S0.Cd(a,h.b,h.d,e))return;S0.Fd(a,h,0,e);S0.Bd(a,h,c,d);return}if(S0.Cd(a,h.b,h.d,e)){S0.Fd(a,h,1,e);S0.Bd(a,h,c,d);return}}S0.$c(a,h,c,d);};S0.Cd=function Cd(a,b,c,d){var e;if((a.D&1)!=0)return false;e=T0.Yh(a.Y,d);return b>e.c&&b<e.c+e.b&&c>e.d&&c<e.d+e.a};S0.Dd=function Dd(a,b){var c;c=a.b;a.b=b.b;b.b=c;c=a.d;a.d=b.d;b.d=c;};S0.Ed=function Ed(a,b){var c,d,e,f,g,h;if(b.a==b.b&&b.c==b.d){for(g=new T0.iZ(a.Y);g.a<g.c.a.length;){f=T0.hZ(g);if(Z0.Pw(f,b.a,b.c))return false}return true}h=S0.yd(b);c=false;if(b.a>b.b){S0.wd(b);c=true;}for(d=0;d<a.Y.a.length;d++){f=T0.Yh(a.Y,d);if(f.c>h.c+h.b||f.d>h.d+h.a||h.c>f.c+f.b||h.d>f.d+f.a)continue;if(S0.Cd(a,b.a,b.c,d)){if(S0.Cd(a,b.b,b.d,d)){c&&S0.wd(b);return false}S0.Fd(a,b,0,d);e=S0.Ed(a,b);c&&S0.wd(b);return e}if(S0.Cd(a,b.b,b.d,d)){S0.Fd(a,b,1,d);e=S0.Ed(a,b);c&&S0.wd(b);return e}}c&&S0.wd(b);return true};S0.Fd=function Fd(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o;if(c==0){l=b.a;n=b.c;m=b.b;o=b.d;}else {l=b.b;n=b.d;m=b.a;o=b.c;}k=T0.Yh(a.Y,d);i=m>l?k.c+k.b:k.c;j=o>n?k.d+k.a:k.d;e=m-l;f=o-n;if($wnd.Math.abs(e)>$wnd.Math.abs(f)){if(n==o){g=i;h=n;}else {g=l+e*(j-n)/f;if(m>l==i>g){h=j;}else {g=i;h=n+f*(i-l)/e;}}}else {if(l==m){g=l;h=j;}else {h=n+f*(i-l)/e;if(o>n==j>h){g=i;}else {g=l+e*(j-n)/f;h=j;}}}if(c==0){b.a=g;b.c=h;}else {b.b=g;b.d=h;}};S0.Gd=function Gd(a){var b,c,d,e;if(a.J.o==0)return;S0.Ls(a.J,(a.D&256)!=0?63:(a.D&512)!=0?95:31);S0.Sc(a);c=S0.Qs(a.J);d=false;a.p=OL(N0.hN,K1,5,a.J.o,15,1);for(b=0;b<a.J.o;b++){a.p[b]=S0.zj(a.J,b);a.p[b]!=0&&(d=true);S0.Ik(a.J,b)&&(a.p[b]=128);S0.lk(a.J,b)&&(a.D&N2)==0&&(a.p[b]=256);}S0.Id(a,-10);S0.fd(a);S0.ed(a);S0.gd(a);S0.Qc(a);S0.Ur(a,a.V);S0.Sr(a,a.W);S0.Id(a,a.O);S0.kd(a);R0.I0(a.S.a).length=0;R0.I0(a.Y.a).length=0;if((a.D&1)!=0){S0.pd(a,c);S0.qd(a);S0.td(a);}for(e=0;e<a.J.o;e++){if(S0.jd(a,e)){S0.Id(a,-3);S0.rd(a,e,c);S0.Id(a,a.O);}else if(a.p[e]!=0){S0.Id(a,a.p[e]);S0.rd(a,e,c);S0.Id(a,a.O);}else if(!d&&a.J.M!=1&&S0.Pj(a.J,e)!=1&&S0.Pj(a.J,e)!=6&&(a.D&p2)==0&&S0.Fj(a.J,e)==null&&S0.Pj(a.J,e)<S0.Nc.length){S0.Jd(a,S0.bd(a,S0.Nc[S0.Pj(a.J,e)]));S0.rd(a,e,c);S0.Id(a,a.O);}else {S0.rd(a,e,c);}}if((a.D&1)==0){S0.qd(a);S0.td(a);S0.pd(a,c);}};S0.Hd=function Hd(a,b,c,d){var e;e=c/2;switch(d&U2){case U2:if(b){a.v.a=b.c+b.b/2;a.v.b=b.d+b.a-e;break}case 0:a.v.a=a.u.c+a.u.b/2;a.v.b=a.u.d+a.u.a+e;!!b&&a.v.b>b.d+b.a-e&&(a.v.b=b.d+b.a-e);break;case V2:if(b){a.v.a=b.c+b.b/2;a.v.b=b.d+e;break}case W2:a.v.a=a.u.c+a.u.b/2;a.v.b=a.u.d-e;!!b&&a.v.b<b.d+e&&(a.v.b=b.d+e);}};S0.Id=function Id(a,b){if(a.I)return;if(b==-10){a.A=-999;b=a.O;}b!=-2&&b!=-7&&a.L!=0&&(b=-4);if(b==a.A)return;if(a.A==-8&&b!=-9)return;b==-8&&(a.M=a.A);b==-9&&(b=a.M);a.A=b;switch(b){case 0:S0.Tr(a,a.C==0?X2:a.C);break;case -6:S0.Tr(a,a.C);break;case -4:S0.Tr(a,a.L);break;case -2:S0.Tr(a,a.s);break;case -3:S0.Tr(a,a.t);break;case -7:S0.Tr(a,a.F);break;case -8:S0.Tr(a,a.G);break;case -5:S0.Tr(a,a.N);break;case 64:a.d='rgb(32,96,255)';break;case 128:a.d='rgb(255,0,0)';break;case 256:a.d='rgb(192,0,255)';break;case 192:a.d='rgb(0,255,0)';break;case 320:a.d='rgb(255,160,0)';break;case 384:a.d='rgb(0,128,0)';break;case 448:a.d='rgb(160,0,0)';break;case 1:a.d='rgb(128,128,128)';break;default:a.d='rgb(0,0,0)';}};S0.Jd=function Jd(a,b){if(a.L!=0){if(a.A!=-4){a.A=-4;S0.Tr(a,a.L);}return}a.A=-5;a.N=b;a.d='rgb('+((b&Y2)>>16)+','+((b&M1)>>8)+','+(b&255)+')';};S0.Kd=function Kd(a){var b,c,d,e,f;e=S0.hh(a.P,S0.Mj(a.J,0));c=S0.hh(a.P,S0.Mj(a.J,0));f=S0.ih(a.P,S0.Nj(a.J,0));d=S0.ih(a.P,S0.Nj(a.J,0));for(b=0;b<a.J.o;b++){e>S0.hh(a.P,S0.Mj(a.J,b))&&(e=S0.hh(a.P,S0.Mj(a.J,b)));c<S0.hh(a.P,S0.Mj(a.J,b))&&(c=S0.hh(a.P,S0.Mj(a.J,b)));f>S0.ih(a.P,S0.Nj(a.J,b))&&(f=S0.ih(a.P,S0.Nj(a.J,b)));d<S0.ih(a.P,S0.Nj(a.J,b))&&(d=S0.ih(a.P,S0.Nj(a.J,b)));}return new Z0.Uw(e,f,c-e,d-f)};S0.Ld=function Ld(a,b){var c,d;if(a.J.o==0)return null;a.u=S0.Kd(a);c=a.P.c*S0.Qj(a.J);d=new S0.kh(a.u,b,c);if(d.c==1&&d.a==0&&d.b==0){d=null;}else {S0.dh(d,a.P);S0.fh(d,a.u);}S0.Hd(a,b,c,C1);return d};S0.Md=function Md(a){var b;b=a.K!=0?a.K:a.B!=0?a.B:-1;a.s=_0.ZI(b);a.t=_0.YI(-32768,b);a.F=-24321;a.G=-6291392;};S0.Nd=function Nd(a,b){var c,d,e,f;if(a.J.o==0)return null;e=S0.Vr(a,b);S0.Ls(a.J,(a.D&256)!=0?63:(a.D&512)!=0?95:31);S0.kd(a);R0.I0(a.S.a).length=0;R0.I0(a.Y.a).length=0;S0.Sc(a);S0.Ur(a,a.V);a.I=true;for(d=0;d<a.J.o;d++)S0.rd(a,d,null);a.I=false;c=a.P.c*S0.Qj(a.J);S0._c(a,c);S0.Hd(a,b,c,C1);if(Z0.Qw(b,a.u))return e;f=new S0.kh(a.u,b,c);S0.dh(f,a.P);S0.fh(f,a.u);S0.eh(f,a.v);if(!e)return f;S0.dh(f,e);return e};S0.Od=function Od(a,b){S0.Pc(this);this.J=a;this.D=b;S0.hd(this);};sR(156,1,{});_.s=0;_.t=0;_.w=0;_.A=0;_.B=0;_.C=0;_.D=0;_.F=0;_.G=0;_.H=0;_.I=false;_.K=0;_.L=0;_.M=0;_.N=0;_.O=0;_.Q=0;_.R=0;_.T=0;_.U=0;_.V=0;_.W=0;_.X=0;N0.lN=LS(156);S0.Pd=function Pd(a,b,c){this.b=a;this.c=b;this.a=c;};sR(74,1,{74:1},S0.Pd);_.a=0;_.b=0;_.c=0;N0.jN=LS(74);S0.Qd=function Qd(){};sR(43,1,{},S0.Qd);_.a=0;_.b=0;_.c=0;_.d=0;N0.kN=LS(43);S0.Rd=function Rd(a){return Z2+a.ob()+'"'+a.nb()+$2};sR(102,1,{102:1});_.lb=function Sd(){var a;a=new O0.AU;O0.zU(a,Z2+this.ob()+'"'+this.nb()+$2);return a.a};_.d=false;N0.mN=LS(102);S0.Td=function Td(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X;J=OL(N0.xQ,c2,5,b.i.a.length,16,1);A=OL(N0.hN,K1,5,a.f.d,15,1);for(T=0;T<b.i.a.length;T++){J[T]=true;for(q=T0.Yh(b.j,T),r=0,s=q.length;r<s;++r){t=q[r];if(!a.e[t]){J[T]=false;break}}if(J[T])for(d=T0.Yh(b.i,T),g=0,j=d.length;g<j;++g){c=d[g];++A[c];}}I=OL(N0.xQ,c2,5,a.f.d,16,1);for(U=0;U<b.i.a.length;U++){V=T0.Yh(b.j,U).length;if(V==3||V==5||V==6||V==7){if(J[U]){for(e=T0.Yh(b.i,U),h=0,k=e.length;h<k;++h){c=e[h];I[c]=true;}Q=true;M=-1;N=0;for(f=T0.Yh(b.i,U),i=0,l=f.length;i<l;++i){c=f[i];if(V==6||A[c]>1){if(!S0.Xd(a,c,false)){Q=false;break}}else {S=V==5?S0.Ud(a,c,false):S0.Vd(a,c,false);if(S0.Xd(a,c,false)){if(N<S){N=S;M=c;}}else {if(N==10){Q=false;break}M=c;N=20;}}}if(Q){for(d=T0.Yh(b.i,U),g=0,j=d.length;g<j;++g){c=d[g];if(c==M){V==5?S0.Ud(a,c,true):S0.Vd(a,c,true);S0.ge(a,c);}else {S0.Xd(a,c,true);}}}}}}w=OL(N0.hN,K1,5,a.f.d,15,1);C=OL(N0.xQ,c2,5,a.f.d,16,1);for(p=0;p<a.f.e;p++){m=S0.Uj(a.f,0,p);n=S0.Uj(a.f,1,p);if(!I[m]&&!I[n]){if(a.e[p]){++w[m];++w[n];}if(S0.dk(a.f,p)==32){C[m]=true;C[n]=true;}}}R=OL(N0.hN,K1,5,a.f.d,15,1);B=OL(N0.hN,K1,5,a.f.d,15,1);for(X=0;X<a.f.d;X++){if(w[X]==1){B[0]=X;v=0;D=0;while(v<=D){for(F=0;F<S0.Qm(a.f,B[v]);F++){if(a.e[S0.Rm(a.f,B[v],F)]){u=S0.Pm(a.f,B[v],F);if((v==0||u!=B[v-1])&&w[u]!=0){B[++D]=u;if((w[u]&1)!=0){for(L=1;L<D;L+=2)R[B[L]]=-1;D=0;}break}}}++v;}}}o=OL(N0.xQ,c2,5,a.f.d,16,1);for(W=0;W<a.f.d;W++){if(!o[W]&&w[W]!=0){B[0]=W;o[W]=true;v=0;D=0;while(v<=D){for(F=0;F<S0.Qm(a.f,B[v]);F++){if(a.e[S0.Rm(a.f,B[v],F)]){u=S0.Pm(a.f,B[v],F);if(!o[u]){B[++D]=u;o[u]=true;}}}++v;}if((D&1)==0){for(G=0;G<=D;G++)R[B[G]]==0&&(R[B[G]]=S0.Wd(a,B[G],false));K=true;for(H=0;H<=D;H++){if(R[B[H]]<=0){if(!S0.Xd(a,B[H],false)){K=false;break}}}if(K){P=0;O=-1;for(F=0;F<=D;F++){if(P<R[B[F]]){P=R[B[F]];O=B[F];}}if(P>0){S0.Wd(a,O,true);S0.ge(a,O);}}}}}};S0.Ud=function Ud(a,b,c){if(S0.Pj(a.f,b)==7){if(S0.Bm(a.f,b)==3)return 6;else if(S0.Qm(a.f,b)==2)return 4}else if(S0.Pj(a.f,b)==8){return 10}else if(S0.Pj(a.f,b)==15||S0.Pj(a.f,b)==33){if(S0.Qm(a.f,b)==3)return 8}else if(S0.Pj(a.f,b)==16||S0.Pj(a.f,b)==34||S0.Pj(a.f,b)==52){if(S0.Qm(a.f,b)==2)return 12}else if(S0.Pj(a.f,b)==6){c&&S0.bl(a.f,b,-1);return S0.Bm(a.f,b)!=S0.Cm(a.f,b)?2:3}return 0};S0.Vd=function Vd(a,b,c){if(a.a){if(S0.Bm(a.f,b)!=3)return 0}else {if(S0.Bm(a.f,b)>3)return 0}if(S0.Pj(a.f,b)==6){c&&S0.bl(a.f,b,1);return 2}if(S0.Pj(a.f,b)==5){return 4}return 0};S0.Wd=function Wd(a,b,c){if(S0.yj(a.f,b)!=0)return 0;if(a.a){if(S0.Pj(a.f,b)==5){if(S0.gn(a.f,b)!=2)return 0;c&&S0.bl(a.f,b,1);return 1}if(S0.Pj(a.f,b)==7){if(S0.gn(a.f,b)!=2)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?6:3}if(S0.Pj(a.f,b)==8){if(S0.gn(a.f,b)!=1)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?7:4}if(S0.Pj(a.f,b)==16){if(S0.gn(a.f,b)!=1)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?5:2}if(S0.Pj(a.f,b)==34){if(S0.gn(a.f,b)!=1)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?4:1}}else {if(S0.Pj(a.f,b)==5){if(S0.gn(a.f,b)>2)return 0;c&&S0.bl(a.f,b,1);return 1}if(S0.Pj(a.f,b)==7){if(S0.gn(a.f,b)>2)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?5:3}if(S0.Pj(a.f,b)==8){if(S0.gn(a.f,b)>1)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?7:4}if(S0.Pj(a.f,b)==16){if(S0.gn(a.f,b)>1)return 0;c&&S0.bl(a.f,b,-1);return S0.Zd(a,b)?5:2}}return 0};S0.Xd=function Xd(a,b,c){var d,e,f;d=S0.Pj(a.f,b);if(d>=5&&d<=8||d==15||d==16||d==33||d==34||d==52){f=S0.cn(a.f,b);if(f!=0)return true;e=S0.yj(a.f,b);if(d==5&&e>=0){c&&S0.bl(a.f,b,e-1);return true}if(d!=5&&e<=0){c&&S0.bl(a.f,b,e+1);return true}}return false};S0.Yd=function Yd(a,b,c,d){var e;for(e=0;e<S0.Qm(a.f,b);e++)if(d[S0.Rm(a.f,b,e)]==1&&S0.Pm(a.f,b,e)!=c)return e;return -1};S0.Zd=function Zd(a,b){var c;for(c=0;c<S0.Qm(a.f,b);c++)if(S0.Ek(a.f,S0.Pm(a.f,b,c)))return true;return false};S0.$d=function $d(a,b,c){var d;for(d=0;d<S0.Qm(a.f,b);d++)if(c[S0.Rm(a.f,b,d)]>1)return true;return false};S0._d=function _d(a,b){var c;for(c=0;c<S0.Qm(a.f,b);c++)if(a.e[S0.Rm(a.f,b,c)])return true;return false};S0.ae=function ae(a,b,c){var d,e,f,g,h,i,j,k,l,m;S0.Ls(a.f,1);if(b!=null){a.e=b;}else {a.e=OL(N0.xQ,c2,5,a.f.e,16,1);for(e=0;e<a.f.e;e++){if(S0.dk(a.f,e)==64){a.e[e]=true;S0.El(a.f,e,1);}}}a.g=0;a.d=OL(N0.xQ,c2,5,a.f.d,16,1);for(f=0;f<a.f.e;f++){if(a.e[f]){++a.c;for(h=0;h<2;h++){if(!a.d[S0.Uj(a.f,h,f)]){a.d[S0.Uj(a.f,h,f)]=true;++a.b;}}}}if(a.c==0)return true;a.a=false;S0.ie(a,c);a.f.I&&S0.ce(a);m=new S0.Nq(a.f,1);c&&S0.Td(a,m);S0.je(a,m);S0.fe(a,m);S0.he(a);S0.de(a);while(S0.ee(a,m))S0.de(a);while(a.c!=0){g=false;if(!g){for(k=0;k<m.i.a.length;k++){if(T0.Yh(m.j,k).length==6){j=true;l=T0.Yh(m.j,k);for(i=0;i<6;i++){if(!a.e[l[i]]){j=false;break}}if(j){for(h=0;h<6;h+=2)S0.be(a,l[h]);g=true;break}}}}if(!g){for(d=0;d<a.f.e;d++){if(a.e[d]){S0.be(a,d);S0.de(a);g=true;break}}}}return a.b==a.g};S0.be=function be(a,b){var c,d,e,f;if(S0.dk(a.f,b)==1){S0.El(a.f,b,2);a.g+=2;}for(e=0;e<2;e++){c=S0.Uj(a.f,e,b);a.d[c]=false;for(f=0;f<S0.Qm(a.f,c);f++){d=S0.Rm(a.f,c,f);if(a.e[d]){a.e[d]=false;--a.c;}}}};S0.ce=function ce(a){var b,c,d,e,f,g,h,i;for(c=0;c<a.f.e;c++){if(a.e[c]){for(e=0;e<2;e++){h=S0.Uj(a.f,e,c);b=false;for(g=0;g<S0.Qm(a.f,h);g++){if(c!=S0.Rm(a.f,h,g)&&a.e[S0.Rm(a.f,h,g)]){b=true;break}}if(!b){i=c;d=S0.Uj(a.f,1-e,c);while(i!=-1){a.e[i]=false;--a.c;S0.El(a.f,i,64);i=-1;h=d;for(f=0;f<S0.Qm(a.f,h);f++){if(a.e[S0.Rm(a.f,h,f)]){if(i==-1){i=S0.Rm(a.f,h,f);d=S0.Pm(a.f,h,f);}else {h=-1;i=-1;break}}}}break}}}}};S0.de=function de(a){var b,c,d,e,f,g,h;do{h=false;for(c=0;c<a.f.e;c++){if(a.e[c]){f=false;for(e=0;e<2;e++){d=S0.Uj(a.f,e,c);b=false;for(g=0;g<S0.Qm(a.f,d);g++){if(c!=S0.Rm(a.f,d,g)&&a.e[S0.Rm(a.f,d,g)]){b=true;break}}if(!b){f=true;break}}if(f){h=true;S0.be(a,c);}}}}while(h)};S0.ee=function ee(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;o=OL(N0.hN,K1,5,a.f.e,15,1);for(m=0;m<b.i.a.length;m++){n=T0.Yh(b.j,m);l=true;for(k=0;k<n.length;k++){if(!a.e[n[k]]){l=false;break}}if(l)for(j=0;j<n.length;j++)++o[n[j]];}i=a.c;for(f=0;f<a.f.e;f++){if(o[f]==1){for(j=0;j<2&&a.e[f];j++){c=S0.Uj(a.f,j,f);d=S0.Uj(a.f,1-j,f);if(S0.$d(a,c,o)&&!S0.$d(a,d,o)){while(-1!=(h=S0.Yd(a,d,c,o))){e=S0.Pm(a.f,d,h);g=S0.Rm(a.f,d,h);if(!a.e[g])break;S0.be(a,g);h=S0.Yd(a,e,d,o);if(h==-1)break;c=e;d=S0.Pm(a.f,e,h);}}}}}return i!=a.c};S0.fe=function fe(a,b){var c;for(c=0;c<a.f.e;c++){if(a.e[c]&&S0.Gq(b,c)){S0.ge(a,S0.Uj(a.f,0,c));S0.ge(a,S0.Uj(a.f,1,c));}}};
S0.ge=function ge(a,b){var c,d;if(a.d[b]){a.d[b]=false;--a.b;}for(d=0;d<S0.Qm(a.f,b);d++){c=S0.Rm(a.f,b,d);if(a.e[c]){a.e[c]=false;--a.c;}}};S0.he=function he(a){var b,c,d,e,f;for(c=0;c<a.f.e;c++){if(S0.ak(a.f,c)==2){for(e=0;e<2;e++){b=S0.Uj(a.f,e,c);if(S0.Pj(a.f,b)<=8){for(f=0;f<S0.Qm(a.f,b);f++){d=S0.Rm(a.f,b,f);if(a.e[d]){S0.ge(a,b);break}}}}}}};S0.ie=function ie(a,b){var c;for(c=0;c<a.f.d;c++)a.d[c]&&S0.cn(a.f,c)==0&&(!b||S0.Pj(a.f,c)==5&&S0.yj(a.f,c)<0||S0.Pj(a.f,c)==6||S0.Pj(a.f,c)==14||S0.Bk(a.f,c)&&S0.yj(a.f,c)>0)&&S0.ge(a,c);};S0.je=function je(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;for(k=0;k<b.i.a.length;k++){n=T0.Yh(b.j,k).length;if(n==3||n==5||n==7){l=T0.Yh(b.i,k);for(d=0;d<n;d++){c=l[d];S0._d(a,c)&&(n==5?(S0.Pj(a.f,c)==6&&S0.yj(a.f,c)==-1&&S0.Bm(a.f,c)==3||S0.Pj(a.f,c)==7&&S0.yj(a.f,c)==0&&S0.Bm(a.f,c)==3||S0.Pj(a.f,c)==8&&S0.yj(a.f,c)==0&&S0.Qm(a.f,c)==2||S0.Pj(a.f,c)==16&&S0.yj(a.f,c)==0&&S0.Qm(a.f,c)==2||S0.Pj(a.f,c)==34&&S0.yj(a.f,c)==0&&S0.Qm(a.f,c)==2)&&S0.ge(a,c):(S0.Pj(a.f,c)==5&&S0.yj(a.f,c)==0&&S0.Bm(a.f,c)==3||S0.Pj(a.f,c)==6&&S0.yj(a.f,c)==1)&&S0.ge(a,c));}}}for(j=0;j<b.i.a.length;j++){if(T0.Yh(b.j,j).length==5){m=T0.Yh(b.j,j);f=true;for(e=0;e<m.length;e++){if(!a.e[m[e]]){f=false;break}}if(f){l=T0.Yh(b.i,j);h=0;g=-1;for(d=0;d<m.length;d++){if(S0.yj(a.f,l[d])==-1&&S0.Pj(a.f,l[d])==6){i=S0.Bm(a.f,l[d])==3?3:S0.Cm(a.f,l[d])==3?2:1;if(h<i){h=i;g=l[d];}}}g!=-1&&S0.ge(a,g);}}}};S0.ke=function ke(a){this.f=a;};sR(71,1,{},S0.ke);_.a=false;_.b=0;_.c=0;_.g=0;N0.nN=LS(71);S0.le=function le(a,b,c,d,e,f){var g,h,i,j;i=0;for(h=0;h<a.P.d;h++)ZQ(EQ(S0.Kj(a.P,a.w[h]),d),0)&&++i;if(i==0)return;S0.jf(a,b);S0.df(a,N0.MQ(i),c);for(g=0;g<a.P.d;g++){j=EQ(S0.Kj(a.P,a.w[g]),d);if(JQ(j,0)!=0){S0.df(a,N0.MQ(g),c);e!=1&&S0.df(a,bR(j,f),e);}}};S0.me=function me(a,b,c,d,e,f){var g,h,i,j;i=0;for(h=0;h<a.P.e;h++)(S0.ck(a.P,a.A[h])&d)!=0&&++i;if(i==0)return;S0.jf(a,b);S0.df(a,N0.MQ(i),c);for(g=0;g<a.P.e;g++){j=S0.ck(a.P,a.A[g])&d;if(j!=0){S0.df(a,N0.MQ(g),c);e!=1&&S0.df(a,N0.MQ(j>>f),e);}}};S0.ne=function ne(a){var b,c,d,e,f,g;while(true){f=OL(N0.xQ,c2,5,a.S+1,16,1);d=-1;for(c=0;c<a.P.d;c++){if(S0.cn(a.P,c)!=0){f[a.d[c]]&&d<a.d[c]&&(d=a.d[c]);f[a.d[c]]=true;}}if(d==-1)break;e=0;for(b=0;b<a.P.d;b++){g=0;a.d[b]==d&&(g=++e);S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));S0.bg(a.c[b],8,N0.MQ(g));}a.S=S0.Oe(a);}};S0.oe=function oe(a){var b,c,d,e;for(c=0;c<a.P.d;c++){S0.eg(a.c[c],c);S0.bg(a.c[c],2*a.b+4,aR(QQ(a.d[c]),a.b+4));}e=false;for(b=0;b<a.P.d;b++)e=e|S0.Be(a,b,3);for(d=0;d<a.P.e;d++)e=e|S0.we(a,d,3);if(!e)return false;while(a.S<a.P.d){e=S0.Le(a);if(!e)break;S0.Ne(a);!!a.N&&S0.ug(a.N,a.d);}return true};S0.pe=function pe(a){var b,c,d,e,f;for(c=0;c<a.P.d;c++){S0.eg(a.c[c],c);S0.bg(a.c[c],a.b+1,QQ(2*a.d[c]));}f=OL(N0.hN,K1,5,a.S+1,15,1);for(d=0;d<a.P.d;d++)++f[a.d[d]];e=1;while(f[e]==1)++e;for(b=0;b<a.P.d;b++){if(a.d[b]==e){S0.cg(a.c[b],1);break}}a.S=S0.Oe(a);};S0.qe=function qe(a,b,c){var d,e,f,g,h;if(S0.Pj(a.P,b)!=6&&S0.Pj(a.P,b)!=7)return false;e=S0.Pm(a.P,b,0);f=S0.Pm(a.P,b,1);if(S0.Gm(a.P,e)!=1||S0.Gm(a.P,f)!=1)return false;if(S0.Qm(a.P,e)==1||S0.Qm(a.P,f)==1)return false;if(S0.Bm(a.P,e)>3||S0.Bm(a.P,f)>3)return false;g=new S0.Ji(a.P,a.d,b,e);if(g.f&&c==1)return false;h=new S0.Ji(a.P,a.d,b,f);if(h.f&&c==1)return false;if(g.f&&h.f)return false;if(c==3){g.f&&g.c&&(a.U[b]=true);h.f&&h.c&&(a.U[b]=true);}d=a.hb?S0.se(a,g,h):S0.re(g,h);if(c==1){a.bb[b]=d;}else if(c==2){g.f&&(d==1?S0.cg(a.c[g.b],QQ(a.d[e])):S0.cg(a.c[g.d],QQ(a.d[e])));h.f&&(d==2?S0.cg(a.c[h.b],QQ(a.d[f])):S0.cg(a.c[h.d],QQ(a.d[f])));}return true};S0.re=function re(a,b){var c,d,e;d=S0.Ii(a);e=S0.Ii(b);if(d==-1||e==-1||(d+e&1)==0)return 3;c=0;switch(d+e){case 3:case 7:c=2;break;case 5:c=1;}return c};S0.se=function se(a,b,c){var d,e;d=OL(N0.hN,K1,5,4,15,1);d[0]=b.b;d[1]=b.a;d[2]=c.a;d[3]=c.b;e=S0.cj(a.P,d);if($wnd.Math.abs(e)<0.3||$wnd.Math.abs(e)>_2)return 3;return e<0?2:1};S0.te=function te(a,b,c){var d,e,f,g,h;if(!S0.Gn(a.P,b))return false;d=S0.Uj(a.P,0,b);e=S0.Uj(a.P,1,b);g=new S0.Ji(a.P,a.d,d,e);if(g.f&&c==1)return false;h=new S0.Ji(a.P,a.d,e,d);if(h.f&&c==1)return false;if(g.f&&h.f)return false;if(c==3){g.f&&(a.T[b]=S0.zf(a,e));h.f&&(a.T[b]=S0.zf(a,d));}f=a.hb?S0.ve(a,g,h):S0.ue(g,h);if(c==1){a.k[b]=f;}else if(c==2){g.f&&(f==2?S0.cg(a.c[g.b],QQ(a.d[e])):S0.cg(a.c[g.d],QQ(a.d[e])));h.f&&(f==2?S0.cg(a.c[h.b],QQ(a.d[d])):S0.cg(a.c[h.d],QQ(a.d[d])));}return true};S0.ue=function ue(a,b){var c,d,e;d=S0.Ii(a);e=S0.Ii(b);if(d==-1||e==-1||(d+e&1)==0)return 3;c=0;switch(d+e){case 3:case 7:c=1;break;case 5:c=2;}return c};S0.ve=function ve(a,b,c){var d,e;d=OL(N0.hN,K1,5,4,15,1);d[0]=b.b;d[1]=b.a;d[2]=c.a;d[3]=c.b;e=S0.cj(a.P,d);if($wnd.Math.abs(e)<0.3||$wnd.Math.abs(e)>_2)return 3;return e<0?1:2};S0.we=function we(a,b,c){var d,e,f,g,h;if(a.k[b]!=0)return false;if(S0.ak(a.P,b)==1)return S0.te(a,b,c);if(S0.ak(a.P,b)!=2)return false;if(S0.Fn(a.P,b))return false;e=S0.Uj(a.P,0,b);f=S0.Uj(a.P,1,b);if(S0.Qm(a.P,e)==1||S0.Qm(a.P,f)==1)return false;if(S0.Qm(a.P,e)>3||S0.Qm(a.P,f)>3)return false;if(S0.Gm(a.P,e)==2||S0.Gm(a.P,f)==2)return false;g=new S0.Ji(a.P,a.d,f,e);if(g.f&&c==1)return false;h=new S0.Ji(a.P,a.d,e,f);if(h.f&&c==1)return false;if(g.f&&h.f)return false;if(c==3){g.f&&g.c&&(a.T[b]=true);h.f&&h.c&&(a.T[b]=true);}d=S0.Ak(a.P,b)?3:a.hb?S0.ye(a,g,h):S0.xe(g,h);if(c==1){a.k[b]=d;}else if(c==2){g.f&&(d==1?S0.cg(a.c[g.b],QQ(a.d[e])):d==2&&S0.cg(a.c[g.d],QQ(a.d[e])));h.f&&(d==1?S0.cg(a.c[h.b],QQ(a.d[f])):d==2&&S0.cg(a.c[h.d],QQ(a.d[f])));}return true};S0.xe=function xe(a,b){if(S0.Ii(a)==-1||S0.Ii(b)==-1)return 3;if(((S0.Ii(a)|S0.Ii(b))&1)!=0)return 3;return S0.Ii(a)==S0.Ii(b)?1:2};S0.ye=function ye(a,b,c){var d,e,f,g,h,i,j;f=OL(N0.fN,O2,5,3,15,1);f[0]=S0.Mj(a.P,c.a)-S0.Mj(a.P,b.a);f[1]=S0.Nj(a.P,c.a)-S0.Nj(a.P,b.a);f[2]=S0.Oj(a.P,c.a)-S0.Oj(a.P,b.a);i=OL(N0.fN,O2,5,3,15,1);i[0]=S0.Mj(a.P,b.b)-S0.Mj(a.P,b.a);i[1]=S0.Nj(a.P,b.b)-S0.Nj(a.P,b.a);i[2]=S0.Oj(a.P,b.b)-S0.Oj(a.P,b.a);j=OL(N0.fN,O2,5,3,15,1);j[0]=S0.Mj(a.P,c.b)-S0.Mj(a.P,c.a);j[1]=S0.Nj(a.P,c.b)-S0.Nj(a.P,c.a);j[2]=S0.Oj(a.P,c.b)-S0.Oj(a.P,c.a);g=OL(N0.fN,O2,5,3,15,1);g[0]=f[1]*i[2]-f[2]*i[1];g[1]=f[2]*i[0]-f[0]*i[2];g[2]=f[0]*i[1]-f[1]*i[0];h=OL(N0.fN,O2,5,3,15,1);h[0]=f[1]*g[2]-f[2]*g[1];h[1]=f[2]*g[0]-f[0]*g[2];h[2]=f[0]*g[1]-f[1]*g[0];d=(i[0]*h[0]+i[1]*h[1]+i[2]*h[2])/($wnd.Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2])*$wnd.Math.sqrt(h[0]*h[0]+h[1]*h[1]+h[2]*h[2]));e=(j[0]*h[0]+j[1]*h[1]+j[2]*h[2])/($wnd.Math.sqrt(j[0]*j[0]+j[1]*j[1]+j[2]*j[2])*$wnd.Math.sqrt(h[0]*h[0]+h[1]*h[1]+h[2]*h[2]));return d<0^e<0?1:2};S0.ze=function ze(a,b){var c,d,e,f;c=S0.wj(a.P,b);d=S0.an(a.P,b,false);e=S0.an(a.P,b,true);f=-1;if(d!=e){c!=-1&&c>d?(f=c<<24>>24):(f=d<<24>>24);}else if(c!=-1){(c>e||c<e&&c>=S0.gn(a.P,b))&&(f=c<<24>>24);}else if(!S0.jo(a.P,b)&&S0.Um(a.P,b)!=0){f=S0.gn(a.P,b);f-=S0.hk(a.P,b,f);}S0.Ve(a,b,f);return f};S0.Ae=function Ae(a){var b,c,d,e,f,g,h,i,j,k,l;d=OL(N0.hN,K1,5,a.M,15,1);for(b=0;b<a.P.d;b++){k=S0.Qm(a.P,b)+S0.dn(a.P,b);j=0;for(f=0;f<S0.Cm(a.P,b);f++){if(f<S0.Qm(a.P,b)||f>=S0.Bm(a.P,b)){l=2*a.d[S0.Pm(a.P,b,f)];c=S0.Rm(a.P,b,f);S0.ak(a.P,c)==2&&(S0.Fn(a.P,c)||++l);for(h=0;h<j;h++)if(l<d[h])break;for(i=j;i>h;i--)d[i]=d[i-1];d[h]=l;++j;}}S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));for(g=k;g<a.M;g++)S0.bg(a.c[b],a.b+1,0);for(e=0;e<k;e++)S0.bg(a.c[b],a.b+1,N0.MQ(d[e]));}};S0.Be=function Be(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;if(a.bb[b]!=0)return false;if(S0.Pj(a.P,b)!=5&&S0.Pj(a.P,b)!=6&&S0.Pj(a.P,b)!=7&&S0.Pj(a.P,b)!=14&&S0.Pj(a.P,b)!=15&&S0.Pj(a.P,b)!=16)return false;if(S0.Gm(a.P,b)!=0){if(S0.Hn(a.P,b))return S0.qe(a,b,c);if(S0.Pj(a.P,b)!=15&&S0.Pj(a.P,b)!=16)return false}if(S0.Qm(a.P,b)<3||S0.Bm(a.P,b)>4)return false;if(S0.yj(a.P,b)>0&&S0.Pj(a.P,b)==6)return false;if(S0.Pj(a.P,b)==5&&S0.Bm(a.P,b)!=4)return false;if(S0.Pj(a.P,b)==7&&!a.Q[b])return false;n=OL(N0.hN,K1,5,4,15,1);o=OL(N0.hN,K1,5,4,15,1);j=OL(N0.xQ,c2,5,4,16,1);for(h=0;h<S0.Bm(a.P,b);h++){f=-1;e=0;for(i=0;i<S0.Bm(a.P,b);i++){if(!j[i]){if(f<a.d[S0.Pm(a.P,b,i)]){f=a.d[S0.Pm(a.P,b,i)];e=i;}}}n[h]=e;o[h]=f;j[e]=true;}if(S0.Bm(a.P,b)==4&&o[0]==o[1]&&o[2]==o[3])return false;if(S0.Bm(a.P,b)==4&&(o[0]==o[2]||o[1]==o[3]))return false;if(S0.Bm(a.P,b)==3&&o[0]==o[2])return false;k=0;l=0;m=false;for(g=1;g<S0.Bm(a.P,b);g++){if(o[g-1]==o[g]){if(c==1||o[g]==0)return false;k=S0.Pm(a.P,b,n[g-1]);l=S0.Pm(a.P,b,n[g]);c==3&&S0.Sn(a.P,S0.Rm(a.P,b,n[g]))&&(a.U[b]=true);m=true;}}if(c!=1&&!m)return false;d=a.hb?S0.De(a,b,n):S0.Ce(a,b,n);c==1?(a.bb[b]=d):c==2&&(d==1?S0.cg(a.c[k],QQ(a.d[b])):d==2&&S0.cg(a.c[l],QQ(a.d[b])));return true};S0.Ce=function Ce(a,b,c){var d,e,f,g,h,i,j,k,l,m;m=WL(IL(N0.hN,2),a3,6,0,[WL(IL(N0.hN,1),K1,5,15,[2,1,2,1]),WL(IL(N0.hN,1),K1,5,15,[1,2,2,1]),WL(IL(N0.hN,1),K1,5,15,[1,1,2,2]),WL(IL(N0.hN,1),K1,5,15,[2,1,1,2]),WL(IL(N0.hN,1),K1,5,15,[2,2,1,1]),WL(IL(N0.hN,1),K1,5,15,[1,2,1,2])]);d=OL(N0.fN,O2,5,S0.Bm(a.P,b),15,1);for(g=0;g<S0.Bm(a.P,b);g++)d[g]=S0.Tj(a.P,S0.Pm(a.P,b,c[g]),b);j=S0.Wm(a.P,b,c,d,null)<<24>>24;if(j!=3)return j;k=0;l=0;for(h=0;h<S0.Bm(a.P,b);h++){e=S0.Rm(a.P,b,c[h]);if(S0.Uj(a.P,0,e)==b){if(S0.dk(a.P,e)==129){l!=0&&S0.Nl(a.P,b);k=h;l=1;}if(S0.dk(a.P,e)==257){l!=0&&S0.Nl(a.P,b);k=h;l=2;}}}if(l==0)return 3;for(f=1;f<S0.Bm(a.P,b);f++)d[f]<d[0]&&(d[f]+=g2);if(S0.Bm(a.P,b)==3){switch(k){case 0:(d[1]<d[2]&&d[2]-d[1]<h2||d[1]>d[2]&&d[1]-d[2]>h2)&&(l=3-l);break;case 1:d[2]-d[0]>h2&&(l=3-l);break;case 2:d[1]-d[0]<h2&&(l=3-l);}return l==1?2:1}i=0;d[1]<=d[2]&&d[2]<=d[3]?(i=0):d[1]<=d[3]&&d[3]<=d[2]?(i=1):d[2]<=d[1]&&d[1]<=d[3]?(i=2):d[2]<=d[3]&&d[3]<=d[1]?(i=3):d[3]<=d[1]&&d[1]<=d[2]?(i=4):d[3]<=d[2]&&d[2]<=d[1]&&(i=5);return m[i][k]==l?2:1};S0.De=function De(a,b,c){var d,e,f,g,h,i;d=OL(N0.hN,K1,5,4,15,1);for(h=0;h<S0.Bm(a.P,b);h++)d[h]=S0.Pm(a.P,b,c[h]);S0.Bm(a.P,b)==3&&(d[3]=b);e=ML(N0.fN,[p1,O2],[15,5],15,[3,3],2);for(g=0;g<3;g++){e[g][0]=S0.Mj(a.P,d[g+1])-S0.Mj(a.P,d[0]);e[g][1]=S0.Nj(a.P,d[g+1])-S0.Nj(a.P,d[0]);e[g][2]=S0.Oj(a.P,d[g+1])-S0.Oj(a.P,d[0]);}i=OL(N0.fN,O2,5,3,15,1);i[0]=e[0][1]*e[1][2]-e[0][2]*e[1][1];i[1]=e[0][2]*e[1][0]-e[0][0]*e[1][2];i[2]=e[0][0]*e[1][1]-e[0][1]*e[1][0];f=(e[2][0]*i[0]+e[2][1]*i[1]+e[2][2]*i[2])/($wnd.Math.sqrt(e[2][0]*e[2][0]+e[2][1]*e[2][1]+e[2][2]*e[2][2])*$wnd.Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]));return f>0?1:2};S0.Ee=function Ee(a){var b,c;b=0;T0.CZ(a.c);for(c=0;c<a.c.length;c++){(c==0||S0.dg(a.c[c],a.c[c-1])!=0)&&++b;a.d[a.c[c].a]=b;}return b};S0.Fe=function Fe(a){var b,c,d,e,f,g,h,i,j,k,l,m;if(a.v)return;a.v=new T0.ki;k=0;l=OL(N0.hN,K1,5,a.P.d,15,1);g=OL(N0.hN,K1,5,a.P.d,15,1);i=OL(N0.hN,K1,5,a.P.e,15,1);for(b=0;b<a.P.d;b++){if(l[b]==0&&(S0.Rn(a.P,b)||S0.Gm(a.P,b)==1)){g[0]=b;h=1;j=0;l[b]=++k;c=OL(N0.xQ,c2,5,a.P.e,16,1);for(f=0;f<h;f++){for(m=0;m<S0.Qm(a.P,g[f]);m++){e=S0.Rm(a.P,g[f],m);if(S0.Sn(a.P,e)||S0.ak(a.P,e)==2||S0.Gn(a.P,e)){d=S0.Pm(a.P,g[f],m);if(!c[e]){i[j++]=e;c[e]=true;}if(l[d]==0){g[h++]=d;l[d]=k;}}}}T0.Th(a.v,new S0.kg(g,h,i,j));}}};S0.Ge=function Ge(a){var b;a.Q=OL(N0.xQ,c2,5,a.P.d,16,1);for(b=0;b<a.P.d;b++){if(S0.Pj(a.P,b)==7){if(S0.Qm(a.P,b)==4){a.Q[b]=true;continue}if(S0.Qm(a.P,b)==3){if(S0.Km(a.P,b)==3){a.Q[b]=true;continue}if(S0.yj(a.P,b)==1){a.Q[b]=true;continue}if(S0.Ln(a.P,b,true))continue;if((a.O&32)!=0){a.Q[b]=true;continue}if(S0.Qn(a.P,b)){a.Q[b]=true;continue}}}}};S0.He=function He(a,b){var c,d,e,f;e=false;for(d=0;d<a.P.e;d++)if(S0.we(a,d,1)){a.o[d]=a.J;b&&S0.We(a,d);e=true;}f=false;for(c=0;c<a.P.d;c++)if(S0.Be(a,c,1)){a.gb[c]=a.J;b&&S0.Xe(a,c);f=true;}f&&(a.J=!a.J);return e||f};S0.Ie=function Ie(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;s=OL(N0.xQ,c2,5,a.P.d,16,1);t=OL(N0.xQ,c2,5,a.P.e,16,1);b=0;v=false;if((a.O&128)!=0){a.W=OL(N0.hN,K1,5,a.P.d,15,1);a.V=OL(N0.hN,K1,5,a.P.e,15,1);}for(d=0;d<a.P.d;d++){if(a.U[d]){if(!a.db[d]){if(S0.Be(a,d,1)){a.db[d]=true;s[d]=true;++b;}}}}for(f=0;f<a.P.e;f++){if(a.T[f]){if(!a.n[f]){if(S0.we(a,f,1)){a.n[f]=true;t[f]=true;++b;}}}}if(b==1){for(c=0;c<a.P.d;c++){if(s[c]){a.bb[c]=0;break}}for(e=0;e<a.P.e;e++){if(t[e]){a.k[e]=0;break}}}else if(b>1){S0.Fe(a);a.R=0;for(h=new T0.iZ(a.v);h.a<h.c.a.length;){g=T0.hZ(h);u=0;w=0;k=0;j=0;l=-1;i=-1;for(o=0;o<g.a.length;o++){if(s[g.a[o]]){++u;if(a.bb[g.a[o]]==1||a.bb[g.a[o]]==2){++w;v=true;if(l<a.d[g.a[o]]){l=a.d[g.a[o]];k=g.a[o];}}}}for(p=0;p<g.b.length;p++){if(t[g.b[p]]){++u;A=a.d[S0.Uj(a.P,0,g.b[p])];B=a.d[S0.Uj(a.P,1,g.b[p])];m=A>B?(A<<16)+B:(B<<16)+A;if(a.k[g.b[p]]==1||a.k[g.b[p]]==2){++w;v=true;if(i<m){i=m;j=g.b[p];}}}}if(u==0)continue;if(u==1){for(q=0;q<g.a.length;q++)s[g.a[q]]&&(a.bb[g.a[q]]=0);for(n=0;n<g.b.length;n++)t[g.b[n]]&&(a.k[g.b[n]]=0);}else {if(w==1){for(q=0;q<g.a.length;q++)s[g.a[q]]&&(a.bb[g.a[q]]=3);for(n=0;n<g.b.length;n++)t[g.b[n]]&&(a.k[g.b[n]]=3);}else {if((a.O&128)!=0){++a.R;for(q=0;q<g.a.length;q++)s[g.a[q]]&&(a.W[g.a[q]]=a.R);for(n=0;n<g.b.length;n++)t[g.b[n]]&&(a.V[g.b[n]]=a.R);}r=false;l!=-1?a.bb[k]==2&&(r=true):a.k[j]==2&&(r=true);if(r){for(q=0;q<g.a.length;q++){if(s[g.a[q]]){switch(a.bb[g.a[q]]){case 1:a.bb[g.a[q]]=2;break;case 2:a.bb[g.a[q]]=1;}}}for(n=0;n<g.b.length;n++){if(t[g.b[n]]){switch(a.k[g.b[n]]){case 1:a.k[g.b[n]]=2;break;case 2:a.k[g.b[n]]=1;}}}}}}}}return v};S0.Je=function Je(a,b){var c,d,e,f,g,h,i,j,k,l,m;f=ML(N0.hN,[a3,K1],[6,5],15,[2,32],2);for(g=0;g<2;g++){c=OL(N0.hN,a3,6,32,0,2);m=0;for(e=0;e<32;e++){if(b[g][e]!=null){k=b[g][e].length;c[e]=OL(N0.hN,K1,5,k,15,1);for(h=0;h<k;h++)c[e][h]=a.d[b[g][e][h]];R0.g0(c[e],R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));++m;}}for(l=m;l>0;l--){j=0;i=null;for(d=0;d<32;d++){if(c[d]!=null){if(i==null||i.length<c[d].length){i=c[d];j=d;}else if(i.length==c[d].length){for(h=i.length-1;h>=0;h--){if(i[h]<c[d][h]){i=c[d];j=d;break}}}}}f[g][j]=l;c[j]=null;}}return f};S0.Ke=function Ke(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;l=false;if(a.P.I){for(j=0;j<a.P.e;j++){if(S0.ck(a.P,j)!=0){l=true;break}}}a.M=2;for(c=0;c<a.P.d;c++)a.M=$wnd.Math.max(a.M,S0.Qm(a.P,c)+S0.dn(a.P,c));i=$wnd.Math.max(2,l?(62+a.b+a.M*(a.b+23))/63|0:(62+a.b+a.M*(a.b+5))/63|0);a.d=OL(N0.hN,K1,5,a.P.o,15,1);a.c=OL(N0.sN,b3,73,a.P.d,0,1);for(d=0;d<a.P.d;d++)a.c[d]=new S0.fg(i);h=false;for(e=0;e<a.P.d;e++){S0.eg(a.c[e],e);ZQ(EQ(S0.Kj(a.P,e),1),0)||S0.Fj(a.P,e)!=null?S0.bg(a.c[e],8,6):S0.bg(a.c[e],8,QQ(S0.Pj(a.P,e)));S0.bg(a.c[e],8,QQ(S0.Ij(a.P,e)));S0.bg(a.c[e],2,QQ(S0.Gm(a.P,e)));S0.bg(a.c[e],4,QQ(S0.Qm(a.P,e)+S0.dn(a.P,e)));ZQ(EQ(S0.Kj(a.P,e),1),0)?S0.bg(a.c[e],4,8):S0.bg(a.c[e],4,QQ(8+S0.yj(a.P,e)));S0.bg(a.c[e],5,QQ($wnd.Math.min(31,S0.Km(a.P,e))));S0.bg(a.c[e],4,QQ(S0.ze(a,e)+1));S0.bg(a.c[e],2,QQ(S0.Lj(a.P,e)>>4));if(a.P.I){S0.bg(a.c[e],46,S0.Kj(a.P,e));S0.Fj(a.P,e)!=null&&(h=true);}}a.S=S0.Oe(a);if(a.S<a.P.d){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));m=OL(N0.hN,K1,5,S0.Qm(a.P,b),15,1);for(o=0;o<S0.Qm(a.P,b);o++){m[o]=a.d[S0.Pm(a.P,b,o)]<<5;m[o]|=$wnd.Math.min(31,S0.Om(a.P,S0.Rm(a.P,b,o)));}R0.g0(m,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));for(p=a.M;p>m.length;p--)S0.bg(a.c[b],a.b+5,0);for(n=m.length-1;n>=0;n--)S0.bg(a.c[b],a.b+5,N0.MQ(m[n]));}a.S=S0.Oe(a);}if(h&&a.S<a.P.d){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));g=S0.Fj(a.P,b);s=g==null?0:$wnd.Math.min(12,g.length);for(o=12;o>s;o--)S0.bg(a.c[b],8,0);for(n=s-1;n>=0;n--)S0.bg(a.c[b],8,N0.MQ(g[n]));}a.S=S0.Oe(a);}if(l&&a.S<a.P.d){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));k=OL(N0.iN,c3,5,S0.Qm(a.P,b)+S0.dn(a.P,b),14,1);q=0;for(o=0;o<S0.Cm(a.P,b);o++){if(o<S0.Qm(a.P,b)||o>=S0.Bm(a.P,b)){k[q]=QQ(a.d[S0.Pm(a.P,b,o)]);k[q]=aR(k[q],23);k[q]=_Q(k[q],QQ(S0.ck(a.P,S0.Rm(a.P,b,o))));++q;}}R0.g0(k,R0.I0(vR(T0.JZ.prototype.bc,T0.JZ,[])));for(p=a.M;p>k.length;p--)S0.bg(a.c[b],a.b+23,0);for(n=k.length-1;n>=0;n--)S0.bg(a.c[b],a.b+23,k[n]);}a.S=S0.Oe(a);}if((a.O&8)!=0&&a.S<a.P.d){r=new S0.Js;for(f=0;f<a.P.d;f++)S0.Aj(a.P,f)!=null&&S0.Hs(r,S0.Aj(a.P,f));for(b=0;b<a.P.d;b++){t=S0.Aj(a.P,b)==null?0:1+S0.Is(r,S0.Aj(a.P,b));S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));S0.bg(a.c[b],a.b,N0.MQ(t));}a.S=S0.Oe(a);}if((a.O&16)!=0&&a.S<a.P.d){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));S0.bg(a.c[b],1,QQ(S0.Ik(a.P,b)?1:0));}a.S=S0.Oe(a);}(a.O&512)!=0&&a.P.I&&S0.ne(a);};S0.Le=function Le(a){var b,c,d,e,f,g,h,i,j;for(c=0;c<a.P.d;c++){S0.eg(a.c[c],c);S0.bg(a.c[c],2*a.b+4,aR(QQ(a.d[c]),a.b+4));}for(i=1;i<=a.S;i++){e=false;for(d=0;d<a.P.d;d++)a.d[d]==i&&(e=e|S0.Be(a,d,2));if(e){h=a.S;a.S=S0.Oe(a);if(a.S!=h)return true;for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],2*a.b+4,aR(QQ(a.d[b]),a.b+4));}}}j=OL(N0.tN,b3,95,a.P.e,0,1);for(g=0;g<j.length;g++)j[g]=new S0.ig(a.d[S0.Uj(a.P,0,g)],a.d[S0.Uj(a.P,1,g)],g);T0.AZ(j,0,j.length,null);for(f=0;f<j.length;f++){if(S0.we(a,j[f].a,2)){while(f+1<j.length&&S0.hg(j[f],j[f+1])==0)S0.we(a,j[++f].a,2);h=a.S;a.S=S0.Oe(a);if(a.S!=h)return true;for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],2*a.b+4,aR(QQ(a.d[b]),a.b+4));}}}return false};S0.Me=function Me(a){var b,c,d,e,f,g,h,i,j,k;f=0;for(c=0;c<a.P.d;c++)a._[c]!=0&&(a._[c]!=2||(a.O&256)==0)&&++f;if(f==0)return;k=OL(N0.hN,K1,5,f,15,1);f=0;for(d=0;d<a.P.d;d++){if(a._[d]!=0&&(a._[d]!=2||(a.O&256)==0)){k[f]=a._[d]<<29|a.$[d]<<24|a.d[d]<<12|d;++f;}}R0.g0(k,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));g=0;j=0;h=k[0]&X2;while(true){++j;if(j==k.length||h!=(k[j]&X2)){e=OL(N0.hN,K1,5,j-g,15,1);for(i=g;i<j;i++){b=k[i]&4095;e[i-g]=b;a.eb[b]=true;}T0.Th(a.fb,e);if(j==k.length)break;h=k[j]&X2;g=j;}}};S0.Ne=function Ne(a){var b,c,d,e,f,g,h,i,j,k,l,m,n;h=false;for(i=0;i<a.fb.a.length;i++){g=T0.Yh(a.fb,i);b=true;n=-1;j=false;for(l=0;l<g.length;l++){c=g[l];if(a.bb[c]==0){b=false;break}if(a.bb[c]!=3){k=true;for(m=0;m<g.length;m++){if(m!=l&&a.d[c]==a.d[g[m]]){k=false;break}}if(k&&n<a.d[c]){n=a.d[c];j=a.bb[c]==1;}}}if(b&&n!=-1){for(d=g,e=0,f=d.length;e<f;++e){c=d[e];(a.bb[c]==1||a.bb[c]==2)&&(a.cb[c]=j);a.eb[c]=false;}T0.di(a.fb,g);h=true;--i;}}return h};S0.Oe=function Oe(a){var b,c;b=S0.Ee(a);do{c=b;S0.Ae(a);b=S0.Ee(a);}while(c!=b);return b};S0.Pe=function Pe(a){(a.O&1)!=0&&(a.O&2)==0&&(a.e=T0.oZ(a.d,a.P.d));if((a.O&N2)==0){a.U=OL(N0.xQ,c2,5,a.P.d,16,1);a.T=OL(N0.xQ,c2,5,a.P.e,16,1);if(a.S<a.P.d){S0.oe(a);if((a.O&N2)==0){S0.Ne(a);!!a.N&&S0.ug(a.N,a.d);}}}a.e==null&&(a.O&1)!=0&&(a.O&2)!=0&&(a.e=T0.oZ(a.d,a.P.d));while(a.S<a.P.d){S0.pe(a);if((a.O&N2)==0){S0.Ne(a);!!a.N&&S0.ug(a.N,a.d);}}if((a.O&N2)==0){S0.Ne(a);S0.Ie(a);S0.mf(a);}};S0.Qe=function Qe(a){var b,c,d,e,f;f=a.S;e=T0.oZ(a.d,a.P.d);if(!a.P.I){S0.Se(a);S0.Ef(a,f,e);}a._=OL(N0.dN,d3,5,a.P.d,15,1);a.$=OL(N0.dN,d3,5,a.P.d,15,1);for(c=0;c<a.P.d;c++){a._[c]=S0.Dj(a.P,c)<<24>>24;a.$[c]=S0.Cj(a.P,c)<<24>>24;}a.j=OL(N0.dN,d3,5,a.P.e,15,1);a.i=OL(N0.dN,d3,5,a.P.e,15,1);for(d=0;d<a.P.e;d++){a.j[d]=S0.Zj(a.P,d)<<24>>24;a.i[d]=S0.Yj(a.P,d)<<24>>24;}S0.Re(a);a.X=false;a.K=OL(N0.xQ,c2,5,a.P.d,16,1);for(b=0;b<a.P.d;b++){if(a.bb[b]!=0){a.K[b]=true;a.X=true;}}S0.Ue(a);a.N=null;a.ab=OL(N0.xQ,c2,5,a.P.d,16,1);if(a.X){a.N=new S0.Ag(a.P,e,a.K,a.bb,a.k,a._,a.$,a.gb,a.o,a.ab);S0.vg(a.N);}a.cb=OL(N0.xQ,c2,5,a.P.d,16,1);a.eb=OL(N0.xQ,c2,5,a.P.d,16,1);a.fb=new T0.ki;!!a.N&&S0.ug(a.N,a.d);S0.Me(a);S0.Ef(a,f,e);S0.Te(a);!!a.N&&(a.I=S0.rg(a.N));S0.cf(a);};S0.Re=function Re(a){var b,c,d,e,f,g;a.J=true;f=S0.He(a,false);while(a.S<a.P.d&&f){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));g=a.bb[b]<<7;if((a.bb[b]==1||a.bb[b]==2)&&a._[b]!=0){g|=a._[b]<<5;g|=a.$[b];}S0.bg(a.c[b],18,N0.MQ(g<<9));}for(c=0;c<a.P.e;c++){d=a.k[c]<<7;if((a.k[c]==1||a.k[c]==2)&&S0.dk(a.P,c)==1&&a.j[c]!=0){d|=a.j[c]<<5;d|=a.i[c];}S0.cg(a.c[S0.Uj(a.P,0,c)],N0.MQ(d));S0.cg(a.c[S0.Uj(a.P,1,c)],N0.MQ(d));}e=S0.Oe(a);if(a.S==e)break;a.S=e;f=S0.He(a,false);}};S0.Se=function Se(a){var b,c,d,e;a.J=true;a.Y=OL(N0.dN,d3,5,a.P.d,15,1);a.f=OL(N0.dN,d3,5,a.P.e,15,1);e=S0.He(a,true);while(a.S<a.P.d&&e){for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b+4,QQ(a.d[b]<<4|a.bb[b]<<2));}for(c=0;c<a.P.e;c++){S0.cg(a.c[S0.Uj(a.P,0,c)],QQ(a.k[c]));S0.cg(a.c[S0.Uj(a.P,1,c)],QQ(a.k[c]));}d=S0.Oe(a);if(a.S==d)break;a.S=d;e=S0.He(a,true);}};S0.Te=function Te(a){var b,c,d,e,f,g,h;a.J=true;d=S0.bf(a);!!a.N&&S0.ug(a.N,a.d)&&(d=S0.bf(a));S0.He(a,false)&&S0.Ne(a);g=true;while(a.S<a.P.d&&g){e=S0.Je(a,d);for(b=0;b<a.P.d;b++){S0.eg(a.c[b],b);S0.bg(a.c[b],a.b,QQ(a.d[b]));S0.bg(a.c[b],20,0);!a.ab[b]&&a._[b]!=0&&S0.cg(a.c[b],QQ((a._[b]<<18)+(e[a._[b]==1?0:1][a.$[b]]<<8)));h=a.bb[b];a.cb[b]&&(h==1?(h=2):h==2&&(h=1));S0.cg(a.c[b],N0.MQ(h<<4));}for(c=0;c<a.P.e;c++){S0.cg(a.c[S0.Uj(a.P,0,c)],QQ(a.k[c]));S0.cg(a.c[S0.Uj(a.P,1,c)],QQ(a.k[c]));}f=S0.Oe(a);if(a.S==f)break;a.S=f;g=false;if(!!a.N&&S0.ug(a.N,a.d)){g=true;d=S0.bf(a);}if(S0.He(a,false)){g=true;S0.Ne(a);}}};S0.Ue=function Ue(a){var b,c;for(b=0;b<a.P.d;b++)(!a.K[b]||a.bb[b]==3)&&(a._[b]=0);for(c=0;c<a.P.e;c++)(S0.dk(a.P,c)!=1||a.k[c]==0||a.k[c]==3)&&(a.j[c]=0);};S0.Ve=function Ve(a,b,c){if(a.a==null){a.a=OL(N0.dN,d3,5,a.P.d,15,1);T0.qZ(a.a);}a.a[b]=c<<24>>24;};S0.We=function We(b,c){var d,e,f,g,h,i;if((b.k[c]==1||b.k[c]==2)&&!S0.Vn(b.P,c)){h=false;try{for(g=0;g<2;g++){d=S0.Uj(b.P,g,c);if(S0.Qm(b.P,d)==3){e=OL(N0.hN,K1,5,2,15,1);f=0;for(i=0;i<S0.Qm(b.P,d);i++)S0.Rm(b.P,d,i)!=c&&(e[f++]=S0.Pm(b.P,d,i));b.d[e[0]]>b.d[e[1]]^S0.Ye(b,d,e[0],e[1])&&(h=!h);}}}catch(a){a=BQ(a);if(VM(a,13)){b.f[c]=3;return}else throw CQ(a)}b.k[c]==1^h?(b.f[c]=1):(b.f[c]=2);}};S0.Xe=function Xe(b,c){var d,e,f,g,h,i,j;if(b.bb[c]==1||b.bb[c]==2){i=false;if(S0.Gm(b.P,c)==2){try{for(h=0;h<2;h++){d=S0.Pm(b.P,c,h);if(S0.Qm(b.P,d)==3){f=OL(N0.hN,K1,5,2,15,1);g=0;for(j=0;j<S0.Qm(b.P,d);j++)S0.Sm(b.P,d,j)==1&&(f[g++]=S0.Pm(b.P,d,j));b.d[f[0]]>b.d[f[1]]^S0.Ye(b,d,f[0],f[1])&&(i=!i);}}}catch(a){a=BQ(a);if(VM(a,13)){b.Y[c]=3;return}else throw CQ(a)}}else {try{e=S0.$e(b,c);}catch(a){a=BQ(a);if(VM(a,13)){b.Y[c]=3;return}else throw CQ(a)}for(h=1;h<e.length;h++)for(j=0;j<h;j++)b.d[e[h]]<b.d[e[j]]&&(i=!i);}b.bb[c]==1^i?(b.Y[c]=1):(b.Y[c]=2);}};S0.Ye=function Ye(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L;if(S0.Pj(a.P,c)!=S0.Pj(a.P,d))return S0.Pj(a.P,c)>S0.Pj(a.P,d);if(S0.Ij(a.P,c)!=S0.Ij(a.P,d)){H=S0.Fk(a.P,c)?(S0.Ri(),S0.Pi)[S0.Pj(a.P,c)]:S0.Ij(a.P,c);I=S0.Fk(a.P,d)?(S0.Ri(),S0.Pi)[S0.Pj(a.P,d)]:S0.Ij(a.P,d);return H>I}w=a.P.d;s=OL(N0.hN,K1,5,w,15,1);u=OL(N0.hN,K1,5,w,15,1);v=OL(N0.hN,K1,5,w,15,1);t=OL(N0.xQ,c2,5,w,16,1);i=OL(N0.xQ,c2,5,a.P.o,16,1);s[0]=b;s[1]=c;s[2]=d;u[0]=-1;u[1]=0;u[2]=0;i[b]=true;i[c]=true;i[d]=true;m=1;A=2;G=OL(N0.hN,K1,5,64,15,1);G[1]=1;G[2]=3;o=2;while(m<=A){while(m<G[o]){n=s[m];if(!t[m]){p=0;q=0;for(C=0;C<S0.Qm(a.P,n);C++){k=S0.Pm(a.P,n,C);if(A+S0.Sm(a.P,n,C)+1>=w){w+=a.P.d;s=S0.Hf(s,w);u=S0.Hf(u,w);v=S0.Hf(v,w);t=S0.If(t,w);}if(S0.Jn(a.P,S0.Rm(a.P,n,C))){++p;q+=S0.Pj(a.P,k);}else {for(F=1;F<S0.Sm(a.P,n,C);F++){++A;s[A]=k;u[A]=m;t[A]=true;}}K=u[m];if(k==s[K])continue;h=false;if(i[k]){J=u[K];while(J!=-1){if(k==s[J]){h=true;break}J=u[J];}}if(h){++A;s[A]=k;u[A]=m;t[A]=true;}else {++A;s[A]=k;u[A]=m;i[k]=true;}}if(p!=0){++A;v[A]=(q<<2)/p|0;u[A]=m;t[A]=true;}}++m;if(m==E1){throw CQ(new O0.FJ('Emergency break in while loop.'))}}G.length==o+1&&(G=S0.Hf(G,G.length+64));G[o+1]=A+1;for(B=G[o];B<G[o+1];B++){v[B]==0&&(v[B]=(S0.Pj(a.P,s[B])==151?1:S0.Pj(a.P,s[B])==152?1:S0.Pj(a.P,s[B]))<<2);v[B]+=v[u[B]]<<16;}S0.af(a,t,v,u,s,G,o);if(v[1]!=v[2])return v[1]>v[2];o>1&&S0.Ze(v,u,G,o);++o;}l=OL(N0.hN,K1,5,a.P.d,15,1);D=false;for(f=0;f<a.P.d;f++){if(i[f]&&!S0.Fk(a.P,f)){D=true;break}}if(D){for(g=0;g<a.P.d;g++)l[g]=S0.Fk(a.P,g)?(S0.Ri(),S0.Pi)[S0.Pj(a.P,g)]:S0.Ij(a.P,g);if(S0._e(a,t,v,u,s,l,G,o))return v[1]>v[2]}T0.uZ(l,l.length,0);r=false;for(j=0;j<a.P.e;j++){if(i[S0.Uj(a.P,0,j)]||i[S0.Uj(a.P,1,j)]){if(a.f[j]==1){l[S0.Uj(a.P,0,j)]=1;l[S0.Uj(a.P,1,j)]=1;r=true;}else if(a.f[j]==2){l[S0.Uj(a.P,0,j)]=2;l[S0.Uj(a.P,1,j)]=2;r=true;}}}if(r&&S0._e(a,t,v,u,s,l,G,o))return v[1]>v[2];T0.uZ(l,l.length,0);L=false;for(e=0;e<a.P.d;e++){if(i[e]){if(a.Y[e]==2){l[e]=1;L=true;}else if(a.Y[e]==1){l[e]=2;L=true;}}}if(L&&S0._e(a,t,v,u,s,l,G,o))return v[1]>v[2];throw CQ(new O0.FJ('no distinction applying CIP rules'))};S0.Ze=function Ze(a,b,c,d){var e,f,g,h,i,j,k,l,m;l=c[d];g=c[d+1]-l;m=OL(N0.qN,z1,97,g,0,1);for(i=0;i<g;i++){m[i]=new S0.ag;m[i].c=a[i+l];m[i].b=b[i+l];m[i].a=i+l;}e=new S0.Zf;for(k=d;k>1;k--){for(j=0;j<g;j++){m[j].c+=a[m[j].b]<<16;m[j].b=b[m[j].b];}T0.AZ(m,0,m.length,e);f=1;for(h=0;h<g;h++){a[m[h].a]=f;h!=g-1&&S0.Yf(m[h],m[h+1])!=0&&++f;}}};S0.$e=function $e(a,b){var c,d,e,f,g,h,i;g=S0.Bm(a.P,b);h=OL(N0.hN,K1,5,g,15,1);for(e=0;e<g;e++)h[e]=S0.Pm(a.P,b,e);for(d=g;d>1;d--){c=false;for(f=1;f<d;f++){if(S0.Ye(a,b,h[f-1],h[f])){c=true;i=h[f-1];h[f-1]=h[f];h[f]=i;}}if(!c)break}return h};S0._e=function _e(a,b,c,d,e,f,g,h){var i,j;for(j=1;j<h;j++){for(i=g[j];i<g[j+1];i++)c[i]=f[e[i]]+(c[d[i]]<<8);S0.af(a,b,c,d,e,g,j);if(c[1]!=c[2])return true;j>1&&S0.Ze(c,d,g,j);}return false};S0.af=function af(a,b,c,d,e,f,g){var h,i,j,k,l,m,n,o,p,q,r;for(l=g;l>1;l--){p=f[l]-f[l-1];r=OL(N0.oN,z1,96,p,0,1);h=f[l];for(o=0;o<p;o++){q=f[l-1]+o;m=h;while(m<f[l+1]&&d[m]==q)++m;r[o]=new S0.Wf;r[o].c=q;r[o].d=c[q];r[o].b=b[q]?0:S0.nn(a.P,e[q]);r[o].a=OL(N0.hN,K1,5,m-h,15,1);for(k=h;k<m;k++)r[o].a[k-h]=c[k];R0.g0(r[o].a,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));h=m;}i=new S0.Tf;T0.AZ(r,0,r.length,i);j=1;for(n=0;n<p;n++){c[r[n].c]=j;n!=p-1&&S0.Sf(r[n],r[n+1])!=0&&++j;}}};S0.bf=function bf(a){var b,c;c=ML(N0.hN,[p1,a3],[23,6],0,[2,32],2);for(b=0;b<a.P.d;b++){a.K[b]&&(a._[b]==1?(c[0][a.$[b]]=S0.Bg(c[0][a.$[b]],b)):a._[b]==2&&(c[1][a.$[b]]=S0.Bg(c[0][a.$[b]],b)));}return c};S0.cf=function cf(a){var b,c,d,e,f,g,h,i,j,k,l,m;f=0;k=0;g=0;h=0;i=0;j=0;l=0;m=false;b=OL(N0.xQ,c2,5,32,16,1);for(c=0;c<a.P.d;c++){if(a.bb[c]!=0){++f;if(a.bb[c]==3){++k;}else {if(a._[c]==0){++g;!!a.N&&S0.qg(a.N,c)&&++h;}else if(a._[c]==2){a.$[c]==0&&++j;}else if(a._[c]==1){e=a.$[c];if(!b[e]){++l;b[e]=true;}a.$[c]==0&&++i;!!a.N&&S0.qg(a.N,c)&&(m=true);}}}}for(d=0;d<a.P.e;d++){if(a.k[d]!=0&&S0.dk(a.P,d)==1){++f;if(a.k[d]==3){++k;}else {if(a.j[d]==0){++g;!!a.N&&S0.qg(a.N,S0.Uj(a.P,0,d))&&S0.qg(a.N,S0.Uj(a.P,1,d))&&++h;}else if(a.j[d]==2){a.i[d]==0&&++j;}else if(a.j[d]==1){e=a.i[d];if(!b[e]){++l;b[e]=true;}a.i[d]==0&&++i;!!a.N&&S0.qg(a.N,S0.Uj(a.P,0,d))&&S0.qg(a.N,S0.Uj(a.P,1,d))&&(m=true);}}}}if(f==0){S0.Fl(a.P,C1);return}if(k!=0){S0.Fl(a.P,0);return}if(a.I){S0.Fl(a.P,e3+(1<<l));return}i+h==f&&!m?S0.Fl(a.P,196608):g==f?S0.Fl(a.P,W2):j==f?S0.Fl(a.P,327680):g==f-1&&i==1?S0.Fl(a.P,x2):S0.Fl(a.P,458752+(1<<l));};S0.df=function df(a,b,c){while(c!=0){if(a.r==0){(!a.p||a.t!=63)&&(a.t+=64);O0.DU(a.s,a.t&D1);a.r=6;a.t=0;}a.t<<=1;a.t=gR(_Q(QQ(a.t),EQ(b,1)));b=bR(b,1);--c;--a.r;}};S0.ef=function ef(a){a.t<<=a.r;(!a.p||a.t!=63)&&(a.t+=64);O0.DU(a.s,a.t&D1);return a.s.a};S0.ff=function ff(a,b){a.s=new O0.KU;a.r=6;a.t=0;a.p=b;};S0.gf=function gf(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q;if(a.P.d==0){a.q='';return}l=false;if(a.hb&&a.P.o>a.P.d&&!a.P.I){l=true;for(i=0;i<a.P.d;i++){if(S0.bn(a.P,i)!=0){l=false;break}}}q=a.hb?16:8;S0.ff(a,true);O0.DU(a.s,l?35:33);S0.df(a,QQ(a.hb?1:0),1);S0.df(a,N0.MQ(b?1:0),1);S0.df(a,N0.MQ(q/2|0),4);o=0;for(j=1;j<a.P.d;j++)o=S0.uf(a,a.w[j],a.C[j]==-1?-1:a.w[a.C[j]],o,c);if(l){for(i=0;i<a.P.d;i++){d=a.w[i];for(n=S0.Qm(a.P,d);n<S0.Bm(a.P,d);n++)o=S0.uf(a,S0.Pm(a.P,d,n),d,o,c);}}if(a.P.d>1&&o==0){a.q='';return}g=1<<q;m=o/(g/2-1);p=o+m/2;for(k=1;k<a.P.d;k++)S0.hf(a,a.w[k],a.C[k]==-1?-1:a.w[a.C[k]],p,m,q,c);if(l){for(h=0;h<a.P.d;h++){d=a.w[h];for(n=S0.Qm(a.P,d);n<S0.Bm(a.P,d);n++)S0.hf(a,S0.Pm(a.P,d,n),d,p,m,q,c);}}if(b){f=a.hb?1.5:(S0.Ri(),S0.Ri(),S0.Qi);e=S0.Sj(a.P,l?a.P.o:a.P.d,l?a.P.p:a.P.e,f,c);S0.df(a,QQ($wnd.Math.min(g-1,$wnd.Math.max(0,cN(0.5+$wnd.Math.log(e/0.1)*$wnd.Math.LOG10E/($wnd.Math.log(2000)*$wnd.Math.LOG10E)*(g-1))))),q);S0.df(a,QQ(S0.lf(c[a.w[0]].a/e,g)),q);S0.df(a,QQ(S0.lf(c[a.w[0]].b/e,g)),q);a.hb&&S0.df(a,QQ(S0.lf(c[a.w[0]].c/e,g)),q);}a.q=S0.ef(a);};S0.hf=function hf(a,b,c,d,e,f,g){var h,i,j;h=c==-1?(g[b].a-g[a.w[0]].a)/8:g[b].a-g[c].a;i=c==-1?(g[b].b-g[a.w[0]].b)/8:g[b].b-g[c].b;S0.df(a,QQ(cN((d+h)/e)),f);S0.df(a,QQ(cN((d+i)/e)),f);if(a.hb){j=c==-1?(g[b].c-g[a.w[0]].c)/8:g[b].c-g[c].c;S0.df(a,QQ(cN((d+j)/e)),f);}};S0.jf=function jf(a,b){var c;for(c=0;c<a.u;c++)b-=16;b<0&&(O0.PU(),String.fromCharCode(10));while(b>15){S0.df(a,1,1);S0.df(a,15,4);b-=16;++a.u;}S0.df(a,1,1);S0.df(a,N0.MQ(b),4);};S0.kf=function kf(a){var b,c,d,e,f,g;if(a.P.d==0){a.L='';return}f=0;d=false;e=false;for(c=0;c<a.P.d;c++){f<S0.Hj(a.P,c)&&(f=S0.Hj(a.P,c));S0.uk(a.P,c)?(d=true):(e=true);}if(f==0){a.L='';return}g=S0.Qf(f);S0.ff(a,true);S0.df(a,N0.MQ(g),4);S0.df(a,N0.MQ(d?1:0),1);S0.df(a,N0.MQ(e?1:0),1);for(b=0;b<a.P.d;b++){S0.df(a,QQ(S0.Hj(a.P,a.w[b])),g);d&&e&&S0.df(a,QQ(S0.uk(a.P,a.w[b])?1:0),1);}a.L=S0.ef(a);};S0.lf=function lf(a,b){var c,d,e,f;c=b/2|0;e=a<0;a=$wnd.Math.abs(a);f=b/32|0;d=$wnd.Math.min(c-1,gR(PQ($wnd.Math.round(a*c/(a+f)))));return e?c+d:d};S0.mf=function mf(a){var b,c,d;for(b=0;b<a.P.d;b++){a.bb[b]==3&&!S0.qk(a.P,b)&&S0.Nl(a.P,b);(S0.Dj(a.P,b)==1||S0.Dj(a.P,b)==2)&&a.bb[b]==3&&S0.Nl(a.P,b);S0.qk(a.P,b)&&a.bb[b]!=3&&!S0.Gf(a,b)&&S0.Nl(a.P,b);}for(d=0;d<a.P.p;d++)S0.Kk(a.P,d)&&!S0.Ff(a,d)&&S0.Nl(a.P,S0.Uj(a.P,0,d));for(c=0;c<a.P.e;c++){if(S0.ak(a.P,c)==2){if(S0.Ak(a.P,c)&&(a.k[c]==1||a.k[c]==2)){a.k[c]=3;S0.El(a.P,c,386);}if(a.k[c]==3&&!a.n[c]){if(S0.dk(a.P,c)!=386){S0.Nl(a.P,S0.Uj(a.P,0,c));S0.Nl(a.P,S0.Uj(a.P,1,c));}}}if(S0.dk(a.P,c)==1&&a.k[c]==3&&!S0.qk(a.P,S0.Uj(a.P,0,c))&&!S0.qk(a.P,S0.Uj(a.P,1,c))){S0.Nl(a.P,S0.Uj(a.P,0,c));S0.Nl(a.P,S0.Uj(a.P,1,c));}if((S0.Zj(a.P,c)==1||S0.Zj(a.P,c)==2)&&(S0.dk(a.P,c)!=1||a.k[c]!=1&&a.k[c]!=2)){S0.Nl(a.P,S0.Uj(a.P,0,c));S0.Nl(a.P,S0.Uj(a.P,1,c));}}};
S0.nf=function nf(a){var b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;if(a.P.d==0)return;if(a.D)return;a.G=0;v=0;for(c=1;c<a.P.d;c++)a.d[c]>a.d[v]&&(v=c);d=OL(N0.xQ,c2,5,a.P.d,16,1);g=OL(N0.xQ,c2,5,a.P.e,16,1);a.F=OL(N0.hN,K1,5,a.P.d,15,1);a.w=OL(N0.hN,K1,5,a.P.d,15,1);a.C=OL(N0.hN,K1,5,a.P.d,15,1);a.A=OL(N0.hN,K1,5,a.P.e,15,1);a.w[0]=v;a.F[v]=0;d[v]=true;i=0;j=1;k=0;while(i<a.P.d){if(i<j){while(true){o=0;p=0;m=-1;b=a.w[i];for(q=0;q<S0.Cm(a.P,b);q++){if(q<S0.Qm(a.P,b)||q>=S0.Bm(a.P,b)){h=S0.Pm(a.P,b,q);if(!d[h]&&a.d[h]>m){o=h;p=S0.Rm(a.P,b,q);m=a.d[h];}}}if(m==-1)break;a.F[o]=j;a.C[j]=i;a.w[j++]=o;a.A[k++]=p;d[o]=true;g[p]=true;}++i;}else {n=0;m=-1;for(b=0;b<a.P.d;b++){if(!d[b]&&a.d[b]>m){n=b;m=a.d[b];}}a.F[n]=j;a.C[j]=-1;a.w[j++]=n;d[n]=true;}}a.B=OL(N0.hN,K1,5,2*(a.P.e-k),15,1);while(true){s=a.P.K;t=a.P.K;u=-1;for(f=0;f<a.P.e;f++){if(!g[f]){if(a.F[S0.Uj(a.P,0,f)]<a.F[S0.Uj(a.P,1,f)]){r=a.F[S0.Uj(a.P,0,f)];l=a.F[S0.Uj(a.P,1,f)];}else {r=a.F[S0.Uj(a.P,1,f)];l=a.F[S0.Uj(a.P,0,f)];}if(r<s||r==s&&l<t){s=r;t=l;u=f;}}}if(u==-1)break;g[u]=true;a.A[k++]=u;a.B[2*a.G]=s;a.B[2*a.G+1]=t;++a.G;}a.D=true;};S0.of=function of(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;i=null;o=S0.pn(a.P);for(l=0;l<o.i.a.length;l++){if(o.e[l]){f=0;m=T0.Yh(o.i,l);for(c=m,d=0,e=c.length;d<e;++d){b=c[d];S0.Af(a,b)&&++f;}if(f!=0){n=T0.Yh(o.j,l);i==null&&(i=OL(N0.xQ,c2,5,a.P.e,16,1));if(f==m.length){j=-1;k=u1;for(g=0;g<m.length;g++){if(k>a.w[n[g]]){k=a.w[n[g]];j=g;}}while(f>0){i[n[j]]=true;j=S0.Nf(j+2,m.length);f-=2;}}else {h=0;while(S0.Af(a,m[h]))++h;while(!S0.Af(a,m[h]))h=S0.Nf(h+1,m.length);while(f>0){i[n[h]]=true;h=S0.Nf(h+2,m.length);f-=2;while(!S0.Af(a,m[h]))h=S0.Nf(h+1,m.length);}}}}}return i};S0.pf=function pf(a,b){return a.k[b]};S0.qf=function qf(a){return S0.rf(a,a.hb)};S0.rf=function rf(a,b){if(a.q==null){S0.nf(a);S0.gf(a,b,a.P.H);}return a.q};S0.sf=function sf(a){if(a.L==null){S0.nf(a);S0.kf(a);}return a.L};S0.tf=function tf(a){if(a.H==null){S0.nf(a);if((a.O&N2)==0){S0.Cf(a);S0.Df(a,1);S0.Df(a,2);}S0.Bf(a);}return a.H};S0.uf=function uf(a,b,c,d,e){var f,g,h;f=c==-1?$wnd.Math.abs(e[b].a-e[a.w[0]].a)/8:$wnd.Math.abs(e[b].a-e[c].a);d<f&&(d=f);g=c==-1?$wnd.Math.abs(e[b].b-e[a.w[0]].b)/8:$wnd.Math.abs(e[b].b-e[c].b);d<g&&(d=g);if(a.hb){h=c==-1?$wnd.Math.abs(e[b].c-e[a.w[0]].c)/8:$wnd.Math.abs(e[b].c-e[c].c);d<h&&(d=h);}return d};S0.vf=function vf(a,b){return a.V[b]};S0.wf=function wf(a,b){return a.W[b]};S0.xf=function xf(a,b){return a.e==null?-1:a.e[b]};S0.yf=function yf(a,b){return a.bb[b]};S0.zf=function zf(a,b){var c,d,e,f,g,h,i;i=S0.pn(a.P);for(c=0;c<i.i.a.length;c++){if(i.d[c]&&S0.Bq(i,c,b)){for(e=T0.Yh(i.i,c),f=0,g=e.length;f<g;++f){d=e[f];if(d!=b)for(h=0;h<S0.Qm(a.P,d);h++)if(S0.Gn(a.P,S0.Rm(a.P,d,h)))return true}return false}}return false};S0.Af=function Af(a,b){var c,d,e;if(S0.Gm(a.P,b)<2)return false;if(S0.Qm(a.P,b)==2)return true;c=0;for(e=0;e<S0.Qm(a.P,b);e++){d=S0.Rm(a.P,b,e);S0.Fn(a.P,d)&&(c+=S0.ak(a.P,d)-1);}return c>1};S0.Bf=function Bf(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X;S0.ff(a,false);S0.df(a,9,4);T=$wnd.Math.max(S0.Qf(a.P.d),S0.Qf(a.P.e));S0.df(a,N0.MQ(T),4);if(T==0){S0.df(a,QQ(a.P.I?1:0),1);S0.df(a,0,1);a.H=S0.ef(a);return}U=W=V=H=0;for(i=0;i<a.P.d;i++){if(OQ(EQ(S0.Kj(a.P,i),1),0)){switch(S0.Pj(a.P,i)){case 6:break;case 7:++U;break;case 8:++W;break;default:++V;}S0.yj(a.P,i)!=0&&++H;}}S0.df(a,QQ(a.P.d),T);S0.df(a,QQ(a.P.e),T);S0.df(a,N0.MQ(U),T);S0.df(a,N0.MQ(W),T);S0.df(a,N0.MQ(V),T);S0.df(a,N0.MQ(H),T);for(j=0;j<a.P.d;j++)S0.Pj(a.P,a.w[j])==7&&OQ(EQ(S0.Kj(a.P,a.w[j]),1),0)&&S0.df(a,N0.MQ(j),T);for(m=0;m<a.P.d;m++)S0.Pj(a.P,a.w[m])==8&&OQ(EQ(S0.Kj(a.P,a.w[m]),1),0)&&S0.df(a,N0.MQ(m),T);for(n=0;n<a.P.d;n++)if(S0.Pj(a.P,a.w[n])!=6&&S0.Pj(a.P,a.w[n])!=7&&S0.Pj(a.P,a.w[n])!=8&&OQ(EQ(S0.Kj(a.P,a.w[n]),1),0)){S0.df(a,N0.MQ(n),T);S0.df(a,QQ(S0.Pj(a.P,a.w[n])),8);}for(o=0;o<a.P.d;o++)if(S0.yj(a.P,a.w[o])!=0&&OQ(EQ(S0.Kj(a.P,a.w[o]),1),0)){S0.df(a,N0.MQ(o),T);S0.df(a,QQ(8+S0.yj(a.P,a.w[o])),4);}S=0;v=0;for(p=1;p<a.P.d;p++){if(a.C[p]==-1){L=0;}else {L=1+a.C[p]-v;v=a.C[p];}S<L&&(S=L);}K=S0.Qf(S);S0.df(a,N0.MQ(K),4);v=0;for(q=1;q<a.P.d;q++){if(a.C[q]==-1){L=0;}else {L=1+a.C[q]-v;v=a.C[q];}S0.df(a,N0.MQ(L),K);}for(N=0;N<2*a.G;N++)S0.df(a,QQ(a.B[N]),T);for(A=0;A<a.P.e;A++){G=(S0.ck(a.P,a.A[A])&Q2)!=0||S0.dk(a.P,a.A[A])==32?1:S0.Jn(a.P,a.A[A])?0:$wnd.Math.min(3,S0.ak(a.P,a.A[A]));S0.df(a,N0.MQ(G),2);}c=0;if((a.O&N2)==0){for(r=0;r<a.P.d;r++)a.Z[a.w[r]]!=0&&a.Z[a.w[r]]!=3&&++c;}S0.df(a,N0.MQ(c),T);if((a.O&N2)==0){for(r=0;r<a.P.d;r++){if(a.Z[a.w[r]]!=0&&a.Z[a.w[r]]!=3){S0.df(a,N0.MQ(r),T);if(a._[a.w[r]]==0){S0.df(a,QQ(a.Z[a.w[r]]),3);}else {X=a.Z[a.w[r]]==1?a._[a.w[r]]==1?4:6:a._[a.w[r]]==1?5:7;S0.df(a,N0.MQ(X),3);S0.df(a,QQ(a.$[a.w[r]]),3);}}}}b=0;if((a.O&N2)==0){for(B=0;B<a.P.e;B++)a.g[a.A[B]]!=0&&a.g[a.A[B]]!=3&&(!S0.Vn(a.P,a.A[B])||S0.dk(a.P,a.A[B])==1)&&++b;}S0.df(a,N0.MQ(b),T);if((a.O&N2)==0){for(B=0;B<a.P.e;B++){if(a.g[a.A[B]]!=0&&a.g[a.A[B]]!=3&&(!S0.Vn(a.P,a.A[B])||S0.dk(a.P,a.A[B])==1)){S0.df(a,N0.MQ(B),T);if(S0.dk(a.P,a.A[B])==1){if(a.j[a.A[B]]==0){S0.df(a,QQ(a.g[a.A[B]]),3);}else {X=a.g[a.A[B]]==1?a.j[a.A[B]]==1?4:6:a.j[a.A[B]]==1?5:7;S0.df(a,N0.MQ(X),3);S0.df(a,QQ(a.i[a.A[B]]),3);}}else {S0.df(a,QQ(a.g[a.A[B]]),2);}}}}S0.df(a,QQ(a.P.I?1:0),1);I=0;for(s=0;s<a.P.d;s++)S0.Ij(a.P,a.w[s])!=0&&++I;if(I!=0){S0.jf(a,1);S0.df(a,N0.MQ(I),T);for(r=0;r<a.P.d;r++){if(S0.Ij(a.P,a.w[r])!=0){S0.df(a,N0.MQ(r),T);S0.df(a,QQ(S0.Ij(a.P,a.w[r])),8);}}}a.u=0;if(a.P.I){S0.le(a,0,T,N2,1,-1);S0.le(a,3,T,k2,1,-1);S0.le(a,4,T,120,4,3);S0.le(a,5,T,f3,2,1);S0.le(a,6,T,1,1,-1);S0.le(a,7,T,o2,4,7);I=0;for(r=0;r<a.P.d;r++)S0.Fj(a.P,a.w[r])!=null&&++I;if(I>0){S0.jf(a,8);S0.df(a,N0.MQ(I),T);for(t=0;t<a.P.d;t++){u=S0.Fj(a.P,a.w[t]);if(u!=null){S0.df(a,N0.MQ(t),T);S0.df(a,QQ(u.length),4);for(e=u,f=0,g=e.length;f<g;++f){d=e[f];S0.df(a,N0.MQ(d),8);}}}}S0.me(a,9,T,384,2,7);S0.me(a,10,T,31,5,0);S0.le(a,11,T,M2,1,-1);S0.me(a,12,T,Q2,8,9);S0.le(a,13,T,u2,3,14);S0.le(a,14,T,v2,5,17);S0.le(a,16,T,K2,3,22);}I=0;for(k=0;k<a.P.d;k++)a.a!=null&&a.a[a.w[k]]!=-1&&++I;if(I!=0){S0.jf(a,17);S0.df(a,N0.MQ(I),T);for(r=0;r<a.P.d;r++){if(a.a!=null&&a.a[a.w[r]]!=-1){S0.df(a,N0.MQ(r),T);S0.df(a,QQ(a.a[a.w[r]]),4);}}}if((a.O&8)!=0||(a.O&p2)!=0){I=0;R=0;for(r=0;r<a.P.d;r++){P=S0.Aj(a.P,a.w[r]);if(P!=null){++I;R=$wnd.Math.max(R,R0.I0(P).length);}}if(I!=0){Q=S0.Qf(R);S0.jf(a,18);S0.df(a,N0.MQ(I),T);S0.df(a,N0.MQ(Q),4);for(t=0;t<a.P.d;t++){J=S0.Aj(a.P,a.w[t]);if(J!=null){S0.df(a,N0.MQ(t),T);S0.df(a,QQ(R0.I0(J).length),Q);for(M=0;M<R0.I0(J).length;M++)S0.df(a,(R0.F0(M,R0.I0(J).length),QQ(R0.I0(J).charCodeAt(M))),7);}}}}if(a.P.I){S0.le(a,19,T,q2,3,25);S0.me(a,20,T,y2,3,17);}I=0;for(l=0;l<a.P.d;l++)S0.Lj(a.P,a.w[l])!=0&&++I;if(I!=0){S0.jf(a,21);S0.df(a,N0.MQ(I),T);for(h=0;h<a.P.d;h++){if(S0.Lj(a.P,a.w[h])!=0){S0.df(a,N0.MQ(h),T);S0.df(a,QQ(S0.Lj(a.P,a.w[h])>>4),2);}}}if(a.P.I){S0.le(a,22,T,L2,1,-1);S0.me(a,23,T,g3,1,-1);S0.me(a,24,T,R2,2,21);}if((a.O&16)!=0){for(h=0;h<a.P.d;h++){if(S0.Ik(a.P,a.w[h])){S0.jf(a,25);for(d=0;d<a.P.d;d++)S0.df(a,QQ(S0.Ik(a.P,a.w[d])?1:0),1);break}}}O=S0.of(a);if(O!=null){I=0;for(B=0;B<a.P.e;B++)O[a.A[B]]&&++I;S0.jf(a,26);S0.df(a,N0.MQ(I),T);for(C=0;C<a.P.e;C++)O[a.A[C]]&&S0.df(a,N0.MQ(C),T);}a.P.I&&S0.le(a,27,T,d2,1,-1);I=0;for(D=0;D<a.P.e;D++)S0.dk(a.P,a.A[D])==32&&++I;if(I!=0){S0.jf(a,28);S0.df(a,N0.MQ(I),T);for(B=0;B<a.P.e;B++)S0.dk(a.P,a.A[B])==32&&S0.df(a,N0.MQ(B),T);}if(a.P.I){S0.le(a,29,T,h3,2,30);S0.le(a,30,T,O1,7,32);S0.le(a,32,T,i3,2,44);S0.le(a,33,T,A2,5,39);S0.le(a,34,T,n2,1,-1);S0.me(a,35,T,j3,1,-1);S0.me(a,36,T,96,2,5);}I=0;for(F=0;F<a.P.e;F++)(S0.dk(a.P,a.A[F])==8||S0.dk(a.P,a.A[F])==16)&&++I;if(I!=0){S0.jf(a,37);S0.df(a,N0.MQ(I),T);for(w=0;w<a.P.e;w++){if(S0.dk(a.P,a.A[w])==8||S0.dk(a.P,a.A[w])==16){S0.df(a,N0.MQ(w),T);S0.df(a,QQ(S0.dk(a.P,a.A[w])==8?0:1),1);}}}S0.df(a,0,1);a.H=S0.ef(a);};S0.Cf=function Cf(a){var b,c,d,e,f,g,h,i,j,k,l;a.Z=OL(N0.dN,d3,5,a.P.d,15,1);for(b=0;b<a.P.d;b++){if(a.bb[b]==1||a.bb[b]==2){i=a.cb[b];if(S0.Hn(a.P,b)){for(h=0;h<S0.Qm(a.P,b);h++){e=S0.Pm(a.P,b,h);l=0;k=OL(N0.hN,K1,5,3,15,1);for(j=0;j<S0.Qm(a.P,e);j++){k[l]=S0.Pm(a.P,e,j);k[l]!=b&&++l;}l==2&&a.d[k[0]]>a.d[k[1]]^a.F[k[0]]<a.F[k[1]]&&(i=!i);}}else {for(h=1;h<S0.Qm(a.P,b);h++){for(j=0;j<h;j++){f=S0.Pm(a.P,b,h);g=S0.Pm(a.P,b,j);a.d[f]>a.d[g]&&(i=!i);a.F[f]<a.F[g]&&(i=!i);}}}a.Z[b]=a.bb[b]==1^i?1:2;}else {a.Z[b]=a.bb[b];}}a.g=OL(N0.dN,d3,5,a.P.e,15,1);for(c=0;c<a.P.e;c++){if(a.k[c]==1||a.k[c]==2){i=false;for(h=0;h<2;h++){d=S0.Uj(a.P,h,c);if(S0.Qm(a.P,d)==3){k=OL(N0.hN,K1,5,2,15,1);l=0;for(j=0;j<3;j++)S0.Pm(a.P,d,j)!=S0.Uj(a.P,1-h,c)&&(k[l++]=S0.Pm(a.P,d,j));a.d[k[0]]>a.d[k[1]]&&(i=!i);a.F[k[0]]<a.F[k[1]]&&(i=!i);}}a.g[c]=a.k[c]==1^i?1:2;}else {a.g[c]=a.k[c];}}};S0.Df=function Df(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;i=OL(N0.hN,K1,5,32,15,1);j=0;for(d=0;d<a.P.d;d++){if((a.Z[d]==1||a.Z[d]==2)&&a._[d]==b){h=a.$[d];if(i[h]<a.d[d]){i[h]==0&&++j;i[h]=a.d[d];}}}for(f=0;f<a.P.e;f++){if((a.g[f]==1||a.g[f]==2)&&a.j[f]==b&&S0.dk(a.P,f)==1){h=a.i[f];o=$wnd.Math.max(a.d[S0.Uj(a.P,0,f)],a.d[S0.Uj(a.P,1,f)]);if(i[h]<o){i[h]==0&&++j;i[h]=o;}}}g=OL(N0.dN,d3,5,32,15,1);for(k=0;k<j;k++){m=-1;n=0;for(l=0;l<32;l++){if(n<i[l]){n=i[l];m=l;}}i[m]=0;g[m]=k<<24>>24;}for(c=0;c<a.P.d;c++)(a.Z[c]==1||a.Z[c]==2)&&a._[c]==b&&(a.$[c]=g[a.$[c]]);for(e=0;e<a.P.e;e++)(a.g[e]==1||a.g[e]==2)&&a.j[e]==b&&S0.dk(a.P,e)==1&&(a.i[e]=g[a.i[e]]);};S0.Ef=function Ef(a,b,c){var d,e;a.S=b;for(d=0;d<a.P.d;d++){a.d[d]=c[d];a.bb[d]=0;a.gb[d]=false;}for(e=0;e<a.P.e;e++){a.k[e]=0;a.o[e]=false;}};S0.Ff=function Ff(a,b){var c,d,e;c=S0.Uj(a.P,0,b);if(c>=a.P.d)return false;if(a.bb[c]==1||a.bb[c]==2)return true;if(a.bb[c]==3)return false;d=S0.xm(a.P,c);if(d!=-1)return a.k[d]==1||a.k[d]==2;for(e=0;e<S0.Qm(a.P,c);e++){if(S0.Sm(a.P,c,e)==2){if(a.bb[S0.Pm(a.P,c,e)]==1||a.bb[S0.Pm(a.P,c,e)]==2)return true}}return false};S0.Gf=function Gf(a,b){var c;for(c=0;c<S0.Qm(a.P,b);c++)if(a.k[S0.Rm(a.P,b,c)]==3&&S0.Sm(a.P,b,c)==1)return true;return false};S0.Hf=function Hf(a,b){var c;c=OL(N0.hN,K1,5,b,15,1);O0.QU(a,0,c,0,a.length);return c};S0.If=function If(a,b){var c;c=OL(N0.xQ,c2,5,b,16,1);O0.QU(a,0,c,0,a.length);return c};S0.Jf=function Jf(a){var b,c;if(a.Y!=null)for(b=0;b<a.P.d;b++)S0.al(a.P,b,a.Y[b]);if(a.f!=null)for(c=0;c<a.P.e;c++)S0.xl(a.P,c,a.f[c]);};S0.Kf=function Kf(a){var b,c,d,e,f,g,h,i,j,k,l;for(b=0;b<a.P.d;b++){if(a.bb[b]==1||a.bb[b]==2){i=false;if(S0.Hn(a.P,b)){for(h=0;h<S0.Qm(a.P,b);h++){e=S0.Pm(a.P,b,h);l=0;k=OL(N0.hN,K1,5,3,15,1);for(j=0;j<S0.Qm(a.P,e);j++){k[l]=S0.Pm(a.P,e,j);k[l]!=b&&++l;}l==2&&a.d[k[0]]>a.d[k[1]]^k[0]<k[1]&&(i=!i);}}else {for(h=1;h<S0.Qm(a.P,b);h++){for(j=0;j<h;j++){f=S0.Pm(a.P,b,h);g=S0.Pm(a.P,b,j);a.d[f]>a.d[g]&&(i=!i);f<g&&(i=!i);}}}S0.ml(a.P,b,a.bb[b]==1^i?1:2,a.db[b]);}else {S0.ml(a.P,b,a.bb[b],a.db[b]);}}for(c=0;c<a.P.e;c++){if(a.k[c]==1||a.k[c]==2){i=false;for(h=0;h<2;h++){d=S0.Uj(a.P,h,c);if(S0.Qm(a.P,d)==3){k=OL(N0.hN,K1,5,2,15,1);l=0;for(j=0;j<3;j++)S0.Pm(a.P,d,j)!=S0.Uj(a.P,1-h,c)&&(k[l++]=S0.Pm(a.P,d,j));a.d[k[0]]>a.d[k[1]]&&(i=!i);k[0]<k[1]&&(i=!i);}}S0.Bl(a.P,c,a.k[c]==1^i?1:2,a.n[c]);}else {S0.Bl(a.P,c,a.k[c],a.n[c]);}}};S0.Lf=function Lf(a){var b;for(b=0;b<a.P.d;b++){S0.ql(a.P,b,a.K[b]);}};S0.Mf=function Mf(a){var b,c,d;for(b=0;b<a.P.d;b++)!S0.qk(a.P,b)&&a.bb[b]==3&&S0.dl(a.P,b,true);for(c=0;c<a.P.e;c++){if(a.k[c]==3){d=S0.ak(a.P,c);d==1?S0.dl(a.P,S0.Uj(a.P,0,c),true):d==2&&S0.El(a.P,c,386);}}};S0.Nf=function Nf(a,b){return a<b?a:a-b};S0.Of=function Of(a){S0.Pf.call(this,a,0);};S0.Pf=function Pf(a,b){this.P=a;this.O=b;S0.Ls(this.P,7);this.b=S0.Qf(this.P.d);(this.O&N2)==0&&S0.Ge(this);this.hb=(b&64)!=0||S0.pk(this.P);if((this.O&N2)==0){this.bb=OL(N0.dN,d3,5,this.P.d,15,1);this.db=OL(N0.xQ,c2,5,this.P.d,16,1);this.gb=OL(N0.xQ,c2,5,this.P.d,16,1);this.k=OL(N0.dN,d3,5,this.P.e,15,1);this.o=OL(N0.xQ,c2,5,this.P.e,16,1);this.n=OL(N0.xQ,c2,5,this.P.e,16,1);}S0.Ke(this);(this.O&N2)==0&&S0.Qe(this);S0.Pe(this);};S0.Qf=function Qf(a){var b;b=0;while(a>0){a>>=1;++b;}return b};sR(33,1,{},S0.Of,S0.Pf);_.b=0;_.p=false;_.r=0;_.t=0;_.u=0;_.D=false;_.G=0;_.I=false;_.J=false;_.M=0;_.O=0;_.R=0;_.S=0;_.X=false;_.hb=false;N0.yN=LS(33);S0.Rf=function Rf(a,b){var c,d,e,f;if(a.d!=b.d)return a.d>b.d?1:-1;e=a.a.length;f=b.a.length;c=$wnd.Math.min(e,f);for(d=0;d<c;d++){--e;--f;if(a.a[e]!=b.a[f])return a.a[e]>b.a[f]?1:-1}if(e!=f)return e>f?1:-1;if(a.b!=b.b)return a.b>b.b?1:-1;return 0};S0.Sf=function Sf(a,b){return S0.Rf(a,b)};S0.Tf=function Tf(){};sR(150,1,{},S0.Tf);_.pb=function Uf(a,b){return S0.Sf(a,b)};_.ib=function Vf(a){return this===a};N0.pN=LS(150);S0.Wf=function Wf(){};sR(96,1,{96:1},S0.Wf);_.b=0;_.c=0;_.d=0;N0.oN=LS(96);S0.Xf=function Xf(a,b){if(a.c!=b.c)return a.c>b.c?1:-1;return 0};S0.Yf=function Yf(a,b){return S0.Xf(a,b)};S0.Zf=function Zf(){};sR(151,1,{},S0.Zf);_.pb=function $f(a,b){return S0.Yf(a,b)};_.ib=function _f(a){return this===a};N0.rN=LS(151);S0.ag=function ag(){};sR(97,1,{97:1},S0.ag);_.a=0;_.b=0;_.c=0;N0.qN=LS(97);S0.bg=function bg(a,b,c){if(a.b==0){++a.c;a.b=63;}if(a.b==63){a.d[a.c]=_Q(a.d[a.c],c);a.b-=b;}else {if(a.b>=b){a.d[a.c]=aR(a.d[a.c],b);a.d[a.c]=_Q(a.d[a.c],c);a.b-=b;}else {a.d[a.c]=aR(a.d[a.c],a.b);a.d[a.c]=_Q(a.d[a.c],bR(c,b-a.b));b-=a.b;++a.c;a.b=63-b;a.d[a.c]=_Q(a.d[a.c],EQ(c,N0.MQ((1<<b)-1)));}}};S0.cg=function cg(a,b){a.d[a.c]=DQ(a.d[a.c],b);};S0.dg=function dg(a,b){var c;for(c=0;c<a.c;c++)if(ZQ(a.d[c],b.d[c]))return UQ(a.d[c],b.d[c])?-1:1;return OQ(a.d[a.c],b.d[a.c])?0:UQ(a.d[a.c],b.d[a.c])?-1:1};S0.eg=function eg(a,b){a.a=b;a.c=0;a.b=63;T0.sZ(a.d);};S0.fg=function fg(a){this.d=OL(N0.iN,c3,5,a,14,1);};sR(73,1,{73:1,27:1},S0.fg);_.qb=function gg(a){return S0.dg(this,a)};_.a=0;_.b=0;_.c=0;N0.sN=LS(73);S0.hg=function hg(a,b){if(a.b!=b.b)return a.b>b.b?-1:1;if(a.c!=b.c)return a.c>b.c?-1:1;return 0};S0.ig=function ig(a,b,c){this.b=$wnd.Math.max(a,b);this.c=$wnd.Math.min(a,b);this.a=c;};sR(95,1,{95:1,27:1},S0.ig);_.qb=function jg(a){return S0.hg(this,a)};_.a=0;_.b=0;_.c=0;N0.tN=LS(95);S0.kg=function kg(a,b,c,d){this.a=(R0.w0(b),T0.pZ(a,OL(N0.hN,K1,5,b,15,1),b));this.b=(R0.w0(d),T0.pZ(c,OL(N0.hN,K1,5,d,15,1),d));};sR(117,1,{117:1},S0.kg);N0.uN=LS(117);S0.lg=function lg(a,b){var c,d;for(d=0;d<a.g[b].length;d++){c=a.g[b][d];if(a.f[c]&&(a.o[c]==1||a.o[c]==2)&&a.k[c]==0)return true}return false};S0.mg=function mg(a,b,c){var d,e,f,g,h;e=0;g=0;for(h=0;h<a.g[b].length;h++){d=a.g[b][h];if(a.k[d]==c){f=1<<a.j[d];if((g&f)==0){g|=f;++e;}}}return e};S0.ng=function ng(a){var b,c,d,e,f,g,h,i,j,k,l,m;k=new T0.t_;for(l=0;l<a.i.d;l++){if(S0.Gm(a.i,l)<2||S0.Qm(a.i,l)>2){for(g=1;g<S0.Qm(a.i,l);g++){b=S0.Pm(a.i,l,g);for(h=0;h<g;h++){c=S0.Pm(a.i,l,h);S0.sg(a,b,c)&&(i=S0.zg(a,b,c),!!i&&S0.kp(i,a.f)&&T0.w$(k.a,i,(O0.jS(),iS))==null);}}}}for(m=0;m<a.i.e;m++){if(a.c[m]!=0){if(S0.ak(a.i,m)!=2||a.c[m]!=2)continue}b=S0.Uj(a.i,0,m);c=S0.Uj(a.i,1,m);S0.sg(a,b,c)&&(i=S0.zg(a,b,c),!!i&&S0.kp(i,a.f)&&T0.w$(k.a,i,(O0.jS(),iS))==null);}a.g=OL(N0.hN,a3,6,k.a.c,0,2);a.e=OL(N0.xQ,c2,5,a.i.d,16,1);f=0;for(j=(e=new T0.O$((new T0.T$((new T0.VY(k.a)).a)).b),new T0.bZ(e));T0.mX(j.a.a);){i=(d=T0.M$(j.a),d.$b());a.g[f++]=i.b;for(g=0;g<i.b.length;g++)a.e[i.b[g]]=true;}};S0.og=function og(a,b,c,d){var e,f,g,h,i,j,k;e=OL(N0.hN,K1,5,S0.Qm(a.i,c),15,1);h=0;for(g=0;g<S0.Qm(a.i,c);g++){e[h]=S0.Pm(a.i,c,g);!d[e[h]]&&S0.sg(a,b,e[h])&&++h;}if(h==0)return -1;if(h==1)return e[0];i=-1;j=u1;for(f=0;f<h;f++){k=S0.mn(a.i,b,e[f],u1,d);if(k<j){j=k;i=e[f];}}return i};S0.pg=function pg(a,b){return a.f[b]&&(a.o[b]==1||a.o[b]==2)};S0.qg=function qg(a,b){return a.e[b]};S0.rg=function rg(a){var b,c;c=true;for(b=0;b<a.i.d;b++){if(a.o[b]!=0&&!a.e[b]){c=false;break}}return c};S0.sg=function sg(a,b,c){var d,e,f,g,h;if(b==c)return false;if(a.a[b]!=a.a[c])return false;if(a.o[b]!=0){if(a.o[b]==3||a.o[c]==3)return false;if(a.p[b]^a.o[b]!==a.o[c])return false;if(a.k[b]!==a.k[c]||a.j[b]!==a.j[c])return false}d=S0.Nm(a.i,b,c);if(d!=-1){if(S0.ak(a.i,d)==1&&a.c[d]!=0)return false;if(S0.ak(a.i,d)==2&&a.c[d]==1)return false}if(S0.Gm(a.i,b)==1&&!S0.En(a.i,b)){e=-1;for(h=0;h<S0.Qm(a.i,b);h++){if(S0.Pm(a.i,b,h)!=c&&S0.Sm(a.i,b,h)==2){e=S0.Rm(a.i,b,h);break}}f=-1;for(g=0;g<S0.Qm(a.i,c);g++){if(S0.Pm(a.i,c,g)!=b&&S0.Sm(a.i,c,g)==2){f=S0.Rm(a.i,c,g);break}}if(e!=-1&&a.c[e]!=0&&a.d[e]^a.c[e]===a.c[f])return false}return true};S0.tg=function tg(a,b,c,d,e){var f,g,h,i,j,k;i=null;f=null;for(k=0;k<a.g[b].length;k++){g=a.g[b][k];a.f[g]&&(a.o[g]==1||a.o[g]==2)&&(a.k[g]==0?(f=S0.Bg(f,(e[g]<<16)+g)):a.k[g]==d&&a.j[g]==c&&(i=S0.Bg(i,(e[g]<<16)+g)));}h=S0.Pg(i,f);if(h==0)return false;if(h<0){for(j=0;j<a.g[b].length;j++){g=a.g[b][j];if(a.f[g]&&(a.o[g]==1||a.o[g]==2)){if(a.k[g]==0){a.k[g]=d<<24>>24;a.j[g]=c<<24>>24;}else if(a.k[g]==d&&a.j[g]==c){a.k[g]=0;a.j[g]=-1;}}}}return true};S0.ug=function ug(a,b){var c,d,e,f,g,h;if(!a.b)return false;e=false;for(f=a.b.a.length-1;f>=0;f--){d=false;g=T0.Yh(a.b,f);g.a==2?(d=S0.tg(a,g.b,g.c,g.d,b)):g.a==1&&(d=S0.yg(a,g.b,b));if(d){T0.di(a.b,g);for(h=0;h<a.g[g.b].length;h++){c=a.g[g.b][h];a.n[c]=false;}e=true;}}return e};S0.vg=function vg(a){var b,c,d,e,f,g,h,i;if(a.g!=null){g=new S0.Og(a);a.b=new T0.ki;for(e=0;e<a.g.length;e++){d=S0.Gg(g,e);if(d==0){S0.Cg(g,e);h=S0.mg(a,e,2);b=S0.mg(a,e,1);c=S0.lg(a,e);if(h==1&&b==1&&!c){S0.xg(a,e,g.a+g.f++);T0.Th(a.b,new S0.Hi(e,1,-1,-1));}if(h>0){if(c){S0.wg(a,e,g.i+g.g++,2);++h;}T0.Th(a.b,new S0.Hi(e,1,-1,-1));}else if(b>0){c&&S0.wg(a,e,g.a+g.f++,1);T0.Th(a.b,new S0.Hi(e,1,-1,-1));}else if(c){S0.wg(a,e,g.a+g.f++,1);T0.Th(a.b,new S0.Hi(e,1,-1,-1));}}else if(d==1){if(S0.lg(a,e)){f=S0.Fg(g,e);i=S0.Hg(g,e);T0.Th(a.b,new S0.Hi(e,2,f,i));}else {S0.Cg(g,e);T0.Th(a.b,new S0.Hi(e,1,-1,-1));}}}}};S0.wg=function wg(a,b,c,d){var e,f;for(f=0;f<a.g[b].length;f++){e=a.g[b][f];if(a.f[e]&&(a.o[e]==1||a.o[e]==2)&&a.k[e]==0){a.k[e]=d<<24>>24;a.j[e]=c<<24>>24;}}};S0.xg=function xg(a,b,c){var d,e;for(e=0;e<a.g[b].length;e++){d=a.g[b][e];if(a.k[d]==2){a.k[d]=1;a.j[d]=c<<24>>24;}}};S0.yg=function yg(a,b,c){var d,e,f,g,h,i,j,k;f=a.g[b];e=1;for(i=0;i<f.length;i++){d=f[i];if(a.f[d]&&a.k[d]==2){e=2;break}}g=OL(N0.hN,a3,6,32,0,2);for(j=0;j<f.length;j++){d=f[j];a.f[d]&&a.k[d]==e&&(g[a.j[d]]=S0.Bg(g[a.j[d]],(c[d]<<16)+d));}for(k=0;k<32;k++)g[k]!=null&&R0.g0(g[k],R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));T0.EZ(g,new S0.Qg);if(S0.Pg(g[0],g[1])==0)return false;for(h=0;h<g[0].length;h++){d=g[0][h]&D1;a.k[d]=0;a.j[d]=-1;}return true};S0.zg=function zg(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;i=OL(N0.hN,K1,5,a.i.d,15,1);r=OL(N0.hN,K1,5,a.i.d,15,1);o=OL(N0.xQ,c2,5,a.i.d,16,1);j=OL(N0.xQ,c2,5,a.i.d,16,1);s=new S0.lp(a.i.d);i[0]=b;r[b]=c;r[c]=-2;s.a[b]=true;s.a[c]=true;f=0;k=0;while(f<=k){g=i[f];if(r[g]==g){for(l=0;l<S0.Qm(a.i,g);l++){d=S0.Pm(a.i,g,l);if(!s.a[d]){if(S0.Sm(a.i,g,l)==2&&S0.Pj(a.i,d)<10){i[++k]=d;r[d]=d;j[d]=j[g]||S0.Gm(a.i,d)==2;o[d]=j[g]&&!o[g];s.a[d]=true;}else if(j[g]&&o[g]){t=S0.og(a,d,r[g],s.a);if(t==-1)return null;i[++k]=d;r[d]=t;r[t]=-2;j[d]=false;s.a[d]=true;s.a[t]=true;}else if(S0.Sn(a.i,S0.Rm(a.i,g,l))){i[++k]=d;r[d]=d;j[d]=false;s.a[d]=true;if((S0.Pj(a.i,d)==6&&S0.Gm(a.i,d)==0||S0.Pj(a.i,d)==7&&S0.yj(a.i,d)==1||S0.Pj(a.i,d)==14||S0.Pj(a.i,d)==15&&S0.Qm(a.i,d)>2||S0.Pj(a.i,d)==16&&S0.Qm(a.i,d)>2)&&S0.Qm(a.i,d)>2){h=false;for(p=1;p<S0.Qm(a.i,d);p++){u=S0.Pm(a.i,d,p);if(!s.a[u]){for(q=0;q<p;q++){v=S0.Pm(a.i,d,q);if(!s.a[v]){if(S0.sg(a,u,v)){i[++k]=u;r[u]=v;r[v]=-2;j[u]=false;s.a[u]=true;s.a[v]=true;h=true;}}}}}if(!h)return null}}}}}else {e=OL(N0.xQ,c2,5,S0.Qm(a.i,g),16,1);for(m=0;m<S0.Qm(a.i,g);m++){d=S0.Pm(a.i,g,m);if(s.a[d]){e[m]=r[d]==d;}else {for(p=0;p<S0.Qm(a.i,d);p++){if(S0.Pm(a.i,d,p)==r[g]){e[m]=true;break}}}}for(n=0;n<S0.Qm(a.i,g);n++){if(e[n]){d=S0.Pm(a.i,g,n);if(s.a[d]){if(S0.Nm(a.i,d,r[g])==-1)return null}else {i[++k]=d;r[d]=d;o[d]=false;j[d]=true;s.a[d]=true;}}}for(l=0;l<S0.Qm(a.i,g);l++){if(!e[l]){d=S0.Pm(a.i,g,l);if(!s.a[d]){t=S0.og(a,d,r[g],s.a);if(t==-1)return null;i[++k]=d;r[d]=t;r[t]=-2;j[d]=false;s.a[d]=true;s.a[t]=true;}}}}++f;}return s};S0.Ag=function Ag(a,b,c,d,e,f,g,h,i,j){this.i=a;this.a=b;this.f=c;this.o=d;this.c=e;this.k=f;this.j=g;this.p=h;this.d=i;this.n=j;S0.ng(this);};S0.Bg=function Bg(a,b){var c,d;d=OL(N0.hN,K1,5,a==null?1:a.length+1,15,1);for(c=0;c<d.length-1;c++)d[c]=a[c];d[d.length-1]=b;return d};sR(162,1,{},S0.Ag);N0.wN=LS(162);S0.Cg=function Cg(a,b){var c,d,e,f,g,h;for(e=0;e<a.b;e++){if(a.e[e][b]&&a.c[e]!=-3){for(d=0;d<=a.j.g.length;d++){if(d!=b&&a.e[e][d]){a.e[e][b]=false;h=e<a.a?e:e<a.b?e-a.a:-1;g=S0.Mg(a,e<a.a?1:e<a.b?2:0);for(f=0;f<a.j.g[b].length;f++){c=a.j.g[b][f];S0.pg(a.j,c)&&a.j.j[c]==h&&(a.j.j[c]=g<<24>>24);}}}}}};S0.Dg=function Dg(a,b,c){var d,e,f,g,h;h=false;g=1;b[c]=g;d=true;while(d){d=false;for(e=0;e<a.b;e++){if(b[e]==g){for(f=0;f<a.b;f++){if(b[f]==0&&S0.Lg(a,e,f)){if(a.c[f]==-2){b[f]=g+1;d=true;}else if(a.c[f]!=a.c[c]){b[f]=g+1;h=true;}}}}}++g;}return h};S0.Eg=function Eg(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o;for(i=d+1;i<a.j.g.length;i++){if(i!=d&&a.e[b][i]&&a.e[c][i]){g=OL(N0.hN,K1,5,2,15,1);g[0]=c;g[1]=b;return g}}o=OL(N0.hN,K1,5,a.b,15,1);k=OL(N0.hN,K1,5,a.b,15,1);j=OL(N0.hN,K1,5,a.b,15,1);f=0;l=0;j[0]=b;k[b]=1;while(f<=l){for(m=0;m<a.d[j[f]].length;m++){e=a.d[j[f]][m];if(e==c){if(f==0)continue;h=k[j[f]]+1;g=OL(N0.hN,K1,5,h,15,1);g[0]=e;g[1]=j[f];for(n=2;n<h;n++)g[n]=o[g[n-1]];return g}if(k[e]==0&&a.c[e]!=-3){k[e]=k[j[f]]+1;j[++l]=e;o[e]=j[f];}}++f;}return null};S0.Fg=function Fg(a,b){var c;for(c=0;c<a.b;c++)if(a.e[c][b]&&a.c[c]==-3)return c<a.a?c:c<a.b?c-a.a:-1;return -1};S0.Gg=function Gg(a,b){var c,d;c=0;for(d=0;d<a.b;d++)a.e[d][b]&&a.c[d]==-3&&++c;return c};S0.Hg=function Hg(a,b){var c;for(c=0;c<a.b;c++)if(a.e[c][b]&&a.c[c]==-3)return c<a.a?1:c<a.b?2:0;return -1};S0.Ig=function Ig(a,b){return b<a.a?b:b<a.b?b-a.a:-1};S0.Jg=function Jg(a,b){return b<a.a?1:b<a.b?2:0};S0.Kg=function Kg(a,b){var c,d;d=a.j.k[b];c=a.j.j[b];return d==0?a.b:d==1?c:a.a+c};S0.Lg=function Lg(a,b,c){var d;for(d=0;d<a.j.g.length;d++)if(a.e[b][d]&&a.e[c][d])return true;return false};S0.Mg=function Mg(a,b){return b==1?a.a+a.f++:a.i+a.g++};S0.Ng=function Ng(a,b){var c,d,e,f,g,h,i,j,k,l;k=u1;i=-1;l=-1;j=-1;for(d=0;d<a.j.i.d;d++){if(S0.pg(a.j,d)&&a.j.k[d]!=0){for(h=0;h<b.length;h++){e=S0.Ig(a,b[h]);f=S0.Jg(a,b[h]);if(a.j.k[d]==f&&a.j.j[d]==e){if(k>a.j.a[d]+(f==1?C1:0)){k=a.j.a[d]+(f==1?C1:0);i=e;l=f;j=b[h];}}}}}for(c=0;c<a.j.i.d;c++){if(S0.pg(a.j,c)&&a.j.k[c]==l&&a.j.j[c]==i){a.j.k[c]=0;a.j.j[c]=-1;}}for(g=0;g<a.j.g.length;g++)a.e[j][g]=false;};S0.Og=function Og(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;this.j=a;for(d=0;d<a.i.d;d++){a.f[d]&&(a.o[d]==1||a.o[d]==2)&&(a.k[d]==1?this.a<=a.j[d]&&(this.a=1+a.j[d]):a.k[d]==2&&this.i<=a.j[d]&&(this.i=1+a.j[d]));}this.b=this.a+this.i;this.e=ML(N0.xQ,[p1,c2],[11,5],16,[this.b+1,a.g.length+1],2);for(e=0;e<a.i.d;e++)a.f[e]&&(a.o[e]==1||a.o[e]==2)&&!a.e[e]&&(this.e[S0.Kg(this,e)][a.g.length]=true);for(i=0;i<a.g.length;i++){for(q=0;q<a.g[i].length;q++){c=a.g[i][q];a.f[c]&&(a.o[c]==1||a.o[c]==2)&&(this.e[S0.Kg(this,c)][i]=true);}}this.d=OL(N0.hN,a3,6,this.b,0,2);for(j=0;j<a.g.length;j++){for(n=1;n<this.b;n++){if(this.e[n][j]){for(o=0;o<n;o++){if(this.e[o][j]){this.d[n]=S0.Bg(this.d[n],o);this.d[o]=S0.Bg(this.d[o],n);}}}}}this.c=OL(N0.hN,K1,5,this.b+1,15,1);for(m=0;m<this.b;m++){this.e[m][a.g.length]?(this.c[m]=-1):(this.c[m]=-2);}for(k=0;k<a.g.length;k++){if(this.e[this.b][k]){for(l=0;l<this.b;l++){this.e[l][k]&&this.c[l]!=k&&(this.c[l]==-2?(this.c[l]=k):(this.c[l]=-3));}}}for(b=0;b<this.b;b++){if(this.c[b]>=-1){f=OL(N0.hN,K1,5,this.b,15,1);if(S0.Dg(this,f,b)){for(l=0;l<this.b;l++){f[l]!=0&&(this.c[l]=-3);}}}}for(h=0;h<a.g.length-1;h++){for(n=1;n<this.b;n++){if(this.e[n][h]&&this.c[n]!=-3){for(o=0;o<n;o++){if(this.e[o][h]&&this.c[o]!=-3){g=S0.Eg(this,n,o,h);if(g!=null){for(p=0;p<g.length;p++)this.c[g[p]]=-3;S0.Ng(this,g);break}}}}}}};sR(163,1,{},S0.Og);_.a=0;_.b=0;_.f=0;_.g=0;_.i=0;N0.vN=LS(163);S0.Pg=function Pg(a,b){var c,d;if(a==null)return b==null?0:1;if(b==null)return -1;c=$wnd.Math.min(a.length,b.length);for(d=0;d<c;d++)if((a[d]&k3)!=(b[d]&k3))return (a[d]&k3)<(b[d]&k3)?-1:1;return a.length==b.length?0:a.length<b.length?-1:1};S0.Qg=function Qg(){};sR(164,1,{},S0.Qg);_.pb=function Rg(a,b){return S0.Pg(a,b)};_.ib=function Sg(a){return this===a};N0.xN=LS(164);S0.Tg=function Tg(a,b){if(a.a!=b.a)return a.a<b.a?-1:1;if(a.b!=b.b)return a.b<b.b?-1:1;if(a.c!=b.c)return a.c<b.c?-1:1;return 0};S0.Ug=function Ug(a,b){return $wnd.Math.sqrt((b.a-a.a)*(b.a-a.a)+(b.b-a.b)*(b.b-a.b)+(b.c-a.c)*(b.c-a.c))};S0.Vg=function Vg(a,b){var c;if(b==null||!VM(b,36))return false;c=b;return $wnd.Math.abs(c.a-a.a)+$wnd.Math.abs(c.b-a.b)+$wnd.Math.abs(c.c-a.c)<1.0E-6};S0.Wg=function Wg(a,b,c,d){a.a=b;a.b=c;a.c=d;};S0.Xg=function Xg(a,b){S0.Wg(a,b.a,b.b,b.c);return a};S0.Yg=function Yg(){};S0.Zg=function Zg(a,b,c){this.a=a;this.b=b;this.c=c;};S0.$g=function $g(a){S0.Zg.call(this,a.a,a.b,a.c);};sR(36,1,{36:1,4:1,27:1},S0.Yg,S0.Zg,S0.$g);_.qb=function _g(a){return S0.Tg(this,a)};_.ib=function ah(a){return S0.Vg(this,a)};_.lb=function bh(){var a;a=new k1.jX('0.00');return '['+k1.iX(a,this.a)+', '+k1.iX(a,this.b)+', '+k1.iX(a,this.c)+']'};_.a=0;_.b=0;_.c=0;N0.zN=LS(36);S0.dh=function dh(a,b){b.c*=a.c;b.a=b.a*a.c+a.a;b.b=b.b*a.c+a.b;};S0.eh=function eh(a,b){b.a=b.a*a.c+a.a;b.b=b.b*a.c+a.b;};S0.fh=function fh(a,b){b.c=b.c*a.c+a.a;b.d=b.d*a.c+a.b;b.b*=a.c;b.a*=a.c;};S0.gh=function gh(a){a.a=0;a.b=0;a.c=1;};S0.hh=function hh(a,b){return b*a.c+a.a};S0.ih=function ih(a,b){return b*a.c+a.b};S0.jh=function jh(){S0.gh(this);};S0.kh=function kh(a,b,c){var d,e,f,g;S0.gh(this);e=b.b/a.b;g=b.a/a.a;f=0;f==0&&(f=24);d=f/c;this.c=$wnd.Math.min(d,$wnd.Math.min(e,g));this.a=b.c+b.b/2-this.c*(a.c+a.b/2);this.b=b.d+b.a/2-this.c*(a.d+a.a/2);};sR(98,1,{},S0.jh,S0.kh);_.lb=function lh(){return 'DepictorTransformation Offset: '+this.a+','+this.b+' Scaling: '+this.c};_.a=0;_.b=0;_.c=0;N0.AN=LS(98);S0.mh=function mh(a){var b,c,d,e;if(!O0.eU(R0.I0(a).substr(0,21),Z2)||(d=R0.I0($2).length,!O0.eU(R0.I0(a).substr(R0.I0(a).length-d,d),$2)))return null;c=O0.jU(a,tU(34),21);if(c==-1)return null;e=(R0.E0(21,c,R0.I0(a).length),R0.I0(a).substr(21,c-21));b=O0.qU(a,21+R0.I0(e).length+1,R0.I0(a).length-17);if(O0.eU(e,'arrow'))return new X0.yw(b);if(O0.eU(e,'text'))return new S0.ot(b);return null};T0.nh=function nh(a,b,c){var d,e;for(e=a.rb();e.Wb();){d=e.Xb();if(bN(b)===bN(d)||b!=null&&O0.Gc(b,d)){c&&e.Yb();return true}}return false};T0.oh=function oh(a,b){var c,d;R0.z0(b);for(d=b.rb();d.Wb();){c=d.Xb();if(!a.contains(c)){return false}}return true};T0.ph=function ph(a,b){var c,d,e;R0.z0(b);c=false;for(d=a.rb();d.Wb();){e=d.Xb();if(b.contains(e)){d.Yb();c=true;}}return c};T0.qh=function qh(a){var b,c,d;d=new T0.m$('[',']');for(c=a.rb();c.Wb();){b=c.Xb();T0.k$(d,bN(b)===bN(a)?'(this Collection)':b==null?w1:zR(b));}return !d.a?d.c:R0.I0(d.e).length==0?d.a.a:d.a.a+(''+d.e)};sR(200,1,{});_.add=function rh(a){throw CQ(new O0.TU('Add not supported on this collection'))};_.addAll=function sh(a){var b,c,d;R0.z0(a);b=false;for(d=a.rb();d.Wb();){c=d.Xb();b=b|this.add(c);}return b};_.clear=function th(){var a;for(a=this.rb();a.Wb();){a.Xb();a.Yb();}};_.contains=function uh(a){return T0.nh(this,a,false)};_.containsAll=function vh(a){return T0.oh(this,a)};_.isEmpty=function wh(){return this.size()==0};_.remove=function xh(a){return T0.nh(this,a,true)};_.removeAll=function yh(a){return T0.ph(this,a)};_.retainAll=function zh(a){var b,c,d;R0.z0(a);b=false;for(c=this.rb();c.Wb();){d=c.Xb();if(!a.contains(d)){c.Yb();b=true;}}return b};_.toArray=function Ah(){return this.sb(OL(N0.wP,z1,1,this.size(),5,1))};_.sb=function Bh(a){var b,c,d,e;e=this.size();a.length<e&&(a=R0.h0(new Array(e),a));d=a;c=this.rb();for(b=0;b<e;++b){SL(d,b,c.Xb());}a.length>e&&N0.RL(a,e,null);return a};_.lb=function Ch(){return T0.qh(this)};N0.LP=LS(200);T0.Dh=function Dh(a,b,c){return new T0.wX(a,b,c)};sR(201,200,{65:1});_.addAtIndex=function Eh(a,b){throw CQ(new O0.TU('Add not supported on this list'))};_.add=function Fh(a){this.addAtIndex(this.size(),a);return true};_.addAllAtIndex=function Gh(a,b){var c,d,e;R0.z0(b);c=false;for(e=b.rb();e.Wb();){d=e.Xb();this.addAtIndex(a++,d);c=true;}return c};_.clear=function Hh(){this.tb(0,this.size());};_.ib=function Ih(a){var b,c,d,e,f;if(a===this){return true}if(!VM(a,65)){return false}f=a;if(this.size()!=f.size()){return false}e=f.rb();for(c=this.rb();c.Wb();){b=c.Xb();d=e.Xb();if(!(bN(b)===bN(d)||b!=null&&O0.Gc(b,d))){return false}}return true};_.kb=function Jh(){return T0.PZ(this)};_.indexOf=function Kh(a){var b,c;for(b=0,c=this.size();b<c;++b){if(T0._Z(a,this.getAtIndex(b))){return b}}return -1};_.rb=function Lh(){return new T0.pX(this)};_.lastIndexOf=function Mh(a){var b;for(b=this.size()-1;b>-1;--b){if(T0._Z(a,this.getAtIndex(b))){return b}}return -1};_.removeAtIndex=function Nh(a){throw CQ(new O0.TU('Remove not supported on this list'))};_.tb=function Oh(a,b){var c,d;d=new T0.uX(this,a);for(c=a;c<b;++c){R0.x0(d.a<d.c.size());d.c.getAtIndex(d.b=d.a++);T0.oX(d);}};_.setAtIndex=function Ph(a,b){throw CQ(new O0.TU('Set not supported on this list'))};_.subList=function Qh(a,b){return T0.Dh(this,a,b)};N0.PP=LS(201);function ZS(a){if(a==null){return false}return a.$implements__java_lang_Cloneable||Array.isArray(a)}
T0.Rh=function Rh(a){a.a=OL(N0.wP,z1,1,0,5,1);};T0.Sh=function Sh(a,b,c){R0.B0(b,a.a.length);R0.b0(a.a,b,c);};T0.Th=function Th(a,b){R0.e0(a.a,b);return true};T0.Uh=function Uh(a,b,c){var d,e;R0.B0(b,a.a.length);d=c.toArray();e=d.length;if(e==0){return false}R0.c0(a.a,b,d);return true};T0.Vh=function Vh(a,b){var c,d;c=b.toArray();d=c.length;if(d==0){return false}R0.c0(a.a,a.a.length,c);return true};T0.Wh=function Wh(a){R0.I0(a.a).length=0;};T0.Xh=function Xh(a,b){return T0.$h(a,b,0)!=-1};T0.Yh=function Yh(a,b){R0.y0(b,a.a.length);return a.a[b]};T0.Zh=function Zh(a,b){return T0.$h(a,b,0)};T0.$h=function $h(a,b,c){for(;c<a.a.length;++c){if(T0._Z(b,a.a[c])){return c}}return -1};T0._h=function _h(a){return new T0.iZ(a)};T0.ai=function ai(a,b){return T0.bi(a,b,a.a.length-1)};T0.bi=function bi(a,b,c){for(;c>=0;--c){if(T0._Z(b,a.a[c])){return c}}return -1};T0.ci=function ci(a,b){var c;c=(R0.y0(b,a.a.length),a.a[b]);R0.f0(a.a,b,1);return c};T0.di=function di(a,b){var c;c=T0.$h(a,b,0);if(c==-1){return false}T0.ci(a,c);return true};
T0.ei=function ei(a,b,c){var d;R0.C0(b,c,a.a.length);d=c-b;R0.f0(a.a,b,d);};T0.fi=function fi(a,b,c){var d;d=(R0.y0(b,a.a.length),a.a[b]);a.a[b]=c;return d};T0.gi=function gi(a){return a.a.length};T0.hi=function hi(a,b){T0.DZ(a.a,a.a.length,b);};T0.ii=function ii(a){return R0.__(a.a)};T0.ji=function ji(a,b){var c,d;d=a.a.length;b.length<d&&(b=R0.h0(new Array(d),b));for(c=0;c<d;++c){SL(b,c,a.a[c]);}b.length>d&&N0.RL(b,d,null);return b};T0.ki=function ki(){T0.Rh(this);};sR(19,201,l3,T0.ki);_.addAtIndex=function li(a,b){T0.Sh(this,a,b);};_.add=function mi(a){return T0.Th(this,a)};_.addAllAtIndex=function ni(a,b){return T0.Uh(this,a,b)};_.addAll=function oi(a){return T0.Vh(this,a)};_.clear=function pi(){T0.Wh(this);};_.contains=function qi(a){return T0.Xh(this,a)};_.getAtIndex=function ri(a){return T0.Yh(this,a)};_.indexOf=function si(a){return T0.Zh(this,a)};_.isEmpty=function ti(){return this.a.length==0};_.rb=function ui(){return T0._h(this)};_.lastIndexOf=function vi(a){return T0.ai(this,a)};_.removeAtIndex=function wi(a){return T0.ci(this,a)};_.remove=function xi(a){return T0.di(this,a)};_.tb=function yi(a,b){T0.ei(this,a,b);};_.setAtIndex=function zi(a,b){return T0.fi(this,a,b)};_.size=function Ai(){return T0.gi(this)};_.toArray=function Bi(){return T0.ii(this)};_.sb=function Ci(a){return T0.ji(this,a)};N0.bQ=LS(19);S0.Di=function Di(a){var b,c;c=new O0.AU;for(b=0;b<a.a.length;b++)O0.zU(c,S0.Rd((R0.y0(b,a.a.length),a.a[b]))+o1);return c.a};S0.Ei=function Ei(b){var c;T0.ki.call(this);try{if(b){for(c=0;c<b.a.length;c++)T0.Th(this,(R0.y0(c,b.a.length),b.a[c]).mb());}}catch(a){a=BQ(a);if(!VM(a,13))throw CQ(a)}};S0.Fi=function Fi(a){var b,c,d;T0.ki.call(this);if(a==null||R0.I0(a).length==0)return;b=0;c=O0.iU(a,tU(10));while(c!=-1){d=S0.mh((R0.E0(b,c,R0.I0(a).length),R0.I0(a).substr(b,c-b)));!!d&&(R0.e0(this.a,d),true);b=c+1;c=O0.jU(a,tU(10),b);}};sR(107,19,l3,S0.Ei,S0.Fi);_.lb=function Gi(){return S0.Di(this)};N0.BN=LS(107);S0.Hi=function Hi(a,b,c,d){this.b=a;this.a=b;this.c=c;this.d=d;};sR(56,1,{56:1},S0.Hi);_.a=0;_.b=0;_.c=0;_.d=0;N0.CN=LS(56);S0.Ii=function Ii(a){var b,c,d,e,f,g;if(a.j!=0)return a.j;if(a.i&&S0.Pj(a.e,a.a)!=15&&S0.Pj(a.e,a.a)!=16){for(g=0;g<S0.Bm(a.e,a.a);g++){f=S0.Rm(a.e,a.a,g);if(S0.Lk(a.e,f,a.a)){S0.Pm(a.e,a.a,g)==a.b?(a.j=S0.dk(a.e,f)==257?3:1):(a.j=S0.dk(a.e,f)==257?1:3);return a.j}}}b=S0.Tj(a.e,a.a,a.g);d=S0.Tj(a.e,a.a,a.b);d<b&&(d+=g2);if(S0.Bm(a.e,a.a)==2){c=d-b;if(c>3.0915926535897933&&c<3.191592653589793){a.j=-1;return a.j}a.j=c<h2?4:2;return a.j}else {e=S0.Tj(a.e,a.a,a.d);e<b&&(e+=g2);a.j=e<d?2:4;return a.j}};S0.Ji=function Ji(a,b,c,d){var e,f,g,h;this.e=a;this.g=c;this.a=d;g=-1;for(h=0;h<S0.Bm(this.e,this.a);h++){e=S0.Pm(this.e,this.a,h);f=S0.Rm(this.e,this.a,h);if(e==this.g){S0.dk(this.e,f)==386&&(this.j=-1);continue}if(S0.Lk(this.e,f,this.a)){this.i&&(a.s[d]|=C1);this.i=true;}if(g==b[e]){this.d=e;this.f=true;this.c=S0.Sn(this.e,f);}else if(g<b[e]){g=b[e];this.d=this.b;this.b=e;}else {this.d=e;}}};sR(62,1,{},S0.Ji);_.a=0;_.b=0;_.c=false;_.d=0;_.f=false;_.g=0;_.i=false;_.j=0;N0.DN=LS(62);S0.Ri=function Ri(){S0.Ri=uR;S0.Li=WL(IL(N0.CP,1),B1,2,6,['?','H','He','Li','Be','B','C','N','O','F','Ne','Na','Mg','Al','Si','P','S','Cl','Ar','K','Ca','Sc','Ti','V','Cr','Mn','Fe','Co','Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd','In','Sn','Sb','Te','I','Xe','Cs','Ba','La','Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb','Lu','Hf','Ta','W','Re','Os','Ir','Pt','Au','Hg','Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac','Th','Pa','U','Np','Pu','Am','Cm','Bk','Cf','Es','Fm','Md','No','Lr','Rf','Db','Sg','Bh','Hs','Mt','Ds','Rg','Cn','Nh','Fl','Mc','Lv','Ts','Og',m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,'R4','R5','R6','R7','R8','R9','R10','R11','R12','R13','R14','R15','R16','R1','R2','R3','A','A1','A2','A3',m3,m3,'D','T','X','R','H2','H+','Nnn','HYD','Pol',m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,'Ala','Arg','Asn','Asp','Cys','Gln','Glu','Gly','His','Ile','Leu','Lys','Met','Phe','Pro','Ser','Thr','Trp','Tyr','Val']);S0.Pi=WL(IL(N0.wQ,1),c3,5,15,[0,1,4,7,9,11,12,14,16,19,20,23,24,27,28,31,32,35,40,39,40,45,48,51,52,55,56,59,58,63,64,69,74,75,80,79,84,85,88,89,90,93,98,0,102,103,106,107,114,115,120,121,130,127,132,133,138,139,140,141,142,0,152,153,158,159,164,165,166,169,174,175,180,181,184,187,192,193,195,197,202,205,208,209,209,210,222,223,226,227,232,231,238,237,244,243,247,247,251,252,257,258,259,262,267,268,271,270,277,276,281,281,283,285,289,289,293,294,294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,156,114,115,103,128,129,57,137,113,113,128,131,147,97,87,101,186,163,99]);S0.Oi=WL(IL(N0.dN,1),d3,5,15,[6]);S0.Ki=WL(IL(N0.dN,1),d3,5,15,[2]);S0.Mi=WL(IL(N0.dN,2),p1,7,0,[null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0,2]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[1,2,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0,2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2])]);S0.Ni=WL(IL(N0.dN,2),p1,7,0,[null,WL(IL(N0.dN,1),d3,5,15,[1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,WL(IL(N0.dN,1),d3,5,15,[-3]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),null,WL(IL(N0.dN,1),d3,5,15,[-3]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3,4]),WL(IL(N0.dN,1),d3,5,15,[2,3,4,5]),WL(IL(N0.dN,1),d3,5,15,[2,3,6]),WL(IL(N0.dN,1),d3,5,15,[2,3,4,7]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[1,2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[-3,3,5]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[6]),WL(IL(N0.dN,1),d3,5,15,[4,6,7]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[-3,3,5]),WL(IL(N0.dN,1),d3,5,15,[-2,4,6]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[5]),WL(IL(N0.dN,1),d3,5,15,[6]),WL(IL(N0.dN,1),d3,5,15,[4,6,7]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[1,3]),WL(IL(N0.dN,1),d3,5,15,[1,2]),WL(IL(N0.dN,1),d3,5,15,[1,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[-2,2,4]),WL(IL(N0.dN,1),d3,5,15,[-1,1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[4,5]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3])]);};S0.Si=function Si(a,b,c,d){var e;e=S0.Ti(a,6);S0.Wg(a.H[e],b,c,d);return e};S0.Ti=function Ti(a,b){a.o>=a.K&&S0.Jl(a,a.K*2);a.A[a.o]=0;S0.ul(a,a.o,b);a.q[a.o]=0;a.s[a.o]=0;a.w[a.o]=0;a.u[a.o]=0;S0.Wg(a.H[a.o],0,0,0);a.t!=null&&(a.t[a.o]=null);a.r!=null&&(a.r[a.o]=null);a.R=0;return a.o++};S0.Ui=function Ui(a,b,c){return S0.Vi(a,b,c,S0.Ek(a,b)||S0.Ek(a,c)?32:1)};S0.Vi=function Vi(a,b,c,d){var e;if(b==c)return -1;for(e=0;e<a.p;e++){if(a.B[0][e]==b&&a.B[1][e]==c||a.B[0][e]==c&&a.B[1][e]==b){a.F[e]<d&&(a.F[e]=d);return e}}a.p>=a.L&&S0.Kl(a,a.L*2);a.B[0][a.p]=b;a.B[1][a.p]=c;a.F[a.p]=d;a.C[a.p]=0;a.D[a.p]=0;a.R=0;return a.p++};S0.Wi=function Wi(a,b){return S0.Xi(a,b,b.o,b.p)};S0.Xi=function Xi(a,b,c,d){var e,f,g,h,i;a.I=a.I|b.I;f=OL(N0.hN,K1,5,b.o,15,1);h=S0.Xk(a,1);i=S0.Xk(a,2);for(e=0;e<c;e++){f[e]=S0.ij(b,a,e,h,i);}for(g=0;g<d;g++){S0.jj(b,a,g,h,i,f[b.B[0][g]],f[b.B[1][g]],false);}a.J=a.J&&b.J;a.G=0;a.R=0;return f};S0.Yi=function Yi(a,b,c,d,e,f,g,h){var i,j;i=S0.uj(a,b,c);if(i==-1){a.o>=a.K&&S0.Jl(a,a.K*2);i=S0.Ti(a,d);S0.Wg(a.H[i],b,c,0);a.v[i]=e;S0._k(a,i,f);S0.ol(a,i,g);S0.el(a,i,h);return true}j=S0.dj(a,i,d,e,f,g);S0.el(a,i,h);return j};S0.Zi=function Zi(a,b,c,d){var e;for(e=0;e<a.p;e++){if(a.B[0][e]==b&&a.B[1][e]==c||a.B[0][e]==c&&a.B[1][e]==b){S0.fj(a,e,d);a.R=0;return e}}a.p>=a.L&&S0.Kl(a,a.L*2);a.B[0][a.p]=b;a.B[1][a.p]=c;a.F[a.p]=d;a.C[a.p]=0;a.D[a.p]=0;a.R=0;return a.p++};S0.$i=function $i(a,b,c,d,e,f){var g,h,i;while(a.o+d>a.K)S0.Jl(a,a.K*2);while(a.p+d>a.L)S0.Kl(a,a.L*2);g=S0.uj(a,b,c);if(g!=-1)return S0._i(a,g,d,e,f);h=S0.vj(a,b,c);if(h!=-1)return S0.aj(a,h,d,e,f);g=S0.Si(a,b,c,0);i=h2*(d-2)/d;S0.Pk(a,g,d,g,e,0,h2-i,f);a.R=0;return true};S0._i=function _i(a,b,c,d,e){var f,g,h,i,j,k;if(d&&S0.gn(a,b)>1||!d&&S0.gn(a,b)>2)return false;g=0;f=OL(N0.fN,O2,5,4,15,1);for(i=0;i<a.p;i++){for(j=0;j<2;j++){if(a.B[j][i]==b){if(g==2){g=3;break}f[g++]=S0.Tj(a,b,a.B[1-j][i]);}}if(g==3)break}if(g==3)return false;k=g==1?f[0]+h2:$wnd.Math.abs(f[0]-f[1])>h2?(f[0]+f[1])/2:(f[0]+f[1])/2+h2;h=h2*(c-2)/c;S0.Pk(a,b,c,b,d,k-h/2,h2-h,e);a.R=0;return true};S0.aj=function aj(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p;j=OL(N0.hN,K1,5,2,15,1);i=OL(N0.fN,O2,5,2,15,1);j[0]=a.B[0][b];j[1]=a.B[1][b];if(S0.gn(a,j[0])>3)return false;if(S0.gn(a,j[1])>3)return false;g=0;f=OL(N0.fN,O2,5,4,15,1);for(m=0;m<a.p;m++){if(m==b)continue;for(n=0;n<2;n++){for(o=0;o<2;o++){if(a.B[n][m]==j[o]){if(g==4){g=5;break}f[g++]=S0.Tj(a,j[o],a.B[1-n][m]);}}if(g==5)break}if(g==5)break}if(g==5)return false;i[0]=S0.Tj(a,j[0],j[1]);if(i[0]<0){i[1]=i[0]+h2;h=0;}else {i[1]=i[0];i[0]=i[1]-h2;h=1;}p=0;for(l=0;l<g;l++){f[l]>i[0]&&f[l]<i[1]?--p:++p;}h=p>0?1-h:h;k=h2*(c-2)/c;S0.Pk(a,j[h],c-1,j[1-h],d,i[p>0?0:1]+h2-k,h2-k,e);a.R=0;return true};S0.bj=function bj(a,b,c){var d,e,f,g,h;e=OL(N0.hN,K1,5,b.o,15,1);g=S0.Xk(a,1);h=S0.Xk(a,2);for(d=0;d<b.o;d++){b.A[d]!=0?(e[d]=S0.ij(b,a,d,g,h)):(e[d]=c);}for(f=0;f<b.p;f++){S0.jj(b,a,f,g,h,e[b.B[0][f]],e[b.B[1][f]],false);}a.J=a.J&&b.J;a.G=0;a.R=0;return e};S0.cj=function cj(a,b){var c,d,e,f,g,h,i,j,k;c=a.H[b[0]];d=a.H[b[1]];e=a.H[b[2]];f=a.H[b[3]];i=new S0.Zg(d.a-c.a,d.b-c.b,d.c-c.c);j=new S0.Zg(e.a-d.a,e.b-d.b,e.c-d.c);k=new S0.Zg(f.a-e.a,f.b-e.b,f.c-e.c);g=new S0.Zg(i.b*j.c-i.c*j.b,-(i.a*j.c-i.c*j.a),i.a*j.b-i.b*j.a);h=new S0.Zg(j.b*k.c-j.c*k.b,-(j.a*k.c-j.c*k.a),j.a*k.b-j.b*k.a);return -$wnd.Math.atan2($wnd.Math.sqrt(j.a*j.a+j.b*j.b+j.c*j.c)*(i.a*h.a+i.b*h.b+i.c*h.c),g.a*h.a+g.b*h.b+g.c*h.c)};S0.dj=function dj(a,b,c,d,e,f){if((c==1||c==151||c==152)&&S0.gn(a,b)>1)return false;a.w[b]=EQ(a.w[b],-2);a.t!=null&&(a.t[b]=null);a.r!=null&&(a.r[b]=null);if(c==a.A[b]&&d==a.v[b]&&e==((a.s[b]&n3)>>>27)-1&&f==(a.s[b]&48))return false;if(c==151||c==152){d=c-149;c=1;}a.s[b]&=960;a.A[b]=c;a.v[b]=d;a.q[b]=0;a.w[b]=0;S0._k(a,b,e);S0.ol(a,b,f);S0.Vk(a,a.u[b]);a.R=0;return true};S0.ej=function ej(a,b,c){if(c){if(a.q[b]>8)return false;++a.q[b];}else {if(a.q[b]<-8)return false;--a.q[b];}a.R=0;return true};S0.fj=function fj(a,b,c){var d,e,f,g,h;f=false;g=a.F[b];if(c==511){f=S0.mk(a,b);}else if(S0.lo(a,b,c)){if(c==257||c==129){d=S0.Qk(a,b,a.B[0][b]);e=S0.Qk(a,b,a.B[1][b]);if(c==g){if(d==e||e){h=a.B[0][b];a.B[0][b]=a.B[1][b];a.B[1][b]=h;f=true;}}else {if(!d&&e){h=a.B[0][b];a.B[0][b]=a.B[1][b];a.B[1][b]=h;}a.F[b]=c;f=true;}}else {a.F[b]=c;f=true;}}if(f){a.R=(g&127)==(c&127)?a.R&7:0;a.D[b]=0;}return f};S0.gj=function gj(a){a.o=0;a.p=0;a.I=false;a.J=false;a.G=0;a.t=null;a.r=null;a.N=null;a.R=0;};S0.hj=function hj(a){var b,c,d,e,f,g,h,i;for(g=0;g<a.p;g++){if(a.F[g]==512){c=a.B[0][g];d=a.B[1][g];if(a.A[c]==-1^a.A[d]==-1){if(a.q[c]!=0&&a.q[d]!=0){if(a.q[c]<0^a.q[d]<0){if(a.q[c]<0){++a.q[c];--a.q[d];}else {--a.q[c];++a.q[d];}}}}}}i=OL(N0.hN,K1,5,a.o,15,1);e=0;for(b=0;b<a.o;b++){if(a.A[b]==-1){i[b]=-1;continue}if(e<b){a.A[e]=a.A[b];a.q[e]=a.q[b];a.v[e]=a.v[b];a.s[e]=a.s[b];a.w[e]=a.w[b];a.u[e]=a.u[b];S0.Xg(a.H[e],a.H[b]);a.t!=null&&(a.t[e]=a.t[b]);a.r!=null&&(a.r[e]=a.r[b]);}i[b]=e;++e;}a.o=e;h=0;for(f=0;f<a.p;f++){if(a.F[f]==512)continue;a.F[h]=a.F[f];a.C[h]=a.C[f];a.D[h]=a.D[f];a.B[0][h]=i[a.B[0][f]];a.B[1][h]=i[a.B[1][f]];++h;}a.p=h;return i};S0.ij=function ij(a,b,c,d,e){var f,g,h;f=b.o;f>=b.K&&S0.Jl(b,b.K*2);h=(a.s[c]&U2)>>18;g=-1;h==1?d==-1?(g=S0.Xk(b,h)):(g=$wnd.Math.min(31,d+((a.s[c]&U2)>>18!=1&&(a.s[c]&U2)>>18!=2?-1:(a.s[c]&o3)>>20))):h==2&&(e==-1?(g=S0.Xk(b,h)):(g=$wnd.Math.min(31,e+((a.s[c]&U2)>>18!=1&&(a.s[c]&U2)>>18!=2?-1:(a.s[c]&o3)>>20))));b.A[f]=a.A[c];b.q[f]=a.q[c];b.v[f]=a.v[c];b.s[f]=a.s[c];b.w[f]=b.I?a.w[c]:0;S0.Xg(b.H[f],a.H[c]);b.u[f]=a.u[c];b.t!=null&&(b.t[f]=null);if(a.t!=null&&a.t[c]!=null&&b.I){b.t==null&&(b.t=OL(N0.hN,a3,6,b.A.length,0,2));b.t[f]=T0.oZ(a.t[c],a.t[c].length);}b.r!=null&&(b.r[f]=null);if(a.r!=null&&a.r[c]!=null){b.r==null&&(b.r=OL(N0.dN,p1,7,b.A.length,0,2));b.r[f]=T0.mZ(a.r[c],a.r[c].length);}if(g!=-1){b.s[f]&=-32505857;b.s[f]|=g<<20;}++b.o;b.R=0;return f};S0.jj=function jj(a,b,c,d,e,f,g,h){var i,j,k,l;j=b.p;j>=b.L&&S0.Kl(b,b.L*2);l=(a.C[c]&768)>>8;k=-1;l==1&&(d==-1?(k=S0.Xk(b,l)):(k=$wnd.Math.min(32,d+((a.C[c]&768)>>8!=1&&(a.C[c]&768)>>8!=2?-1:(a.C[c]&p3)>>10))));l==2&&(e==-1?(k=S0.Xk(b,l)):(k=$wnd.Math.min(32,e+((a.C[c]&768)>>8!=1&&(a.C[c]&768)>>8!=2?-1:(a.C[c]&p3)>>10))));b.B[0][j]=f;b.B[1][j]=g;i=h&&a.vb(c)?64:a.F[c];b.F[j]=i;b.C[j]=a.C[c];b.D[j]=b.I?a.D[c]:0;if(k!=-1){b.C[j]&=-31745;b.C[j]|=k<<10;}++b.p;b.R=0;return j};S0.kj=function kj(a,b,c,d,e,f,g){return S0.jj(a,b,c,d,e,f==null?a.B[0][c]:f[a.B[0][c]],f==null?a.B[1][c]:f[a.B[1][c]],g)};S0.lj=function lj(a,b){var c,d;b.t=null;b.r=null;b.I=a.I;b.o=0;for(c=0;c<a.o;c++)S0.ij(a,b,c,0,0);b.p=0;for(d=0;d<a.p;d++)S0.jj(a,b,d,0,0,a.B[0][d],a.B[1][d],false);a.ub(b);};S0.mj=function mj(a,b){b.I=a.I;b.J=a.J;b.Q=a.Q;b.G=a.G;b.N=a.N;b.R=a.R&24;};S0.nj=function nj(a,b){var c,d,e,f;for(c=0;c<a.p;c++){for(e=0;e<2;e++){if(a.B[e][c]==b){a.F[c]=512;d=0;for(f=0;f<a.p;f++){if(f==c)continue;(a.B[0][f]===a.B[1-e][c]||a.B[1][f]===a.B[1-e][c])&&++d;}if(d==0){S0.Vk(a,a.u[a.B[1-e][c]]);a.A[a.B[1-e][c]]=-1;}}}}S0.Vk(a,a.u[b]);a.A[b]=-1;a.t!=null&&(a.t[b]=null);a.r!=null&&(a.r[b]=null);S0.hj(a);a.R=0;};S0.oj=function oj(a,b,c){var d,e;d=S0.uj(a,b,c);if(d!=-1){(a.s[d]&512)!=0?S0.tj(a):S0.nj(a,d);a.R=0;return true}e=S0.vj(a,b,c);if(e!=-1){(a.s[a.B[0][e]]&a.s[a.B[1][e]]&512)!=0?S0.tj(a):S0.rj(a,e);a.R=0;return true}return false};S0.pj=function pj(a,b){var c,d,e,f;if(b.length==0)return null;for(d=b,e=0,f=d.length;e<f;++e){c=d[e];a.A[c]=-1;}return S0.sj(a)};S0.qj=function qj(a,b){a.F[b]=512;S0.hj(a);a.R=0;};S0.rj=function rj(a,b){var c,d,e;for(d=0;d<2;d++){c=0;for(e=0;e<a.p;e++){if(e==b)continue;(a.B[0][e]===a.B[d][b]||a.B[1][e]===a.B[d][b])&&++c;}if(c==0){S0.Vk(a,a.u[a.B[d][b]]);a.A[a.B[d][b]]=-1;}}a.F[b]=512;S0.hj(a);a.R=0;};S0.sj=function sj(a){var b,c,d;d=false;for(b=0;b<a.o;b++){if(a.A[b]==-1){d=true;S0.Vk(a,a.u[b]);}}for(c=0;c<a.p;c++){if(a.F[c]==512){d=true;}else if(a.A[a.B[0][c]]==-1||a.A[a.B[1][c]]==-1){a.F[c]=512;d=true;}}if(d){a.R=0;return S0.hj(a)}return null};S0.tj=function tj(a){var b,c;c=false;for(b=0;b<a.o;b++){if((a.s[b]&512)!=0){a.A[b]=-1;c=true;}}return c&&S0.sj(a)!=null};S0.uj=function uj(a,b,c){var d,e,f,g,h,i,j,k;g=-1;e=S0.Rj(a,a.o,a.p,S0.Qi);h=q3;i=e*e/12;for(d=0;d<a.o;d++){j=a.H[d].a;k=a.H[d].b;f=(b-j)*(b-j)+(c-k)*(c-k);if(f<i&&f<h){h=f;g=d;}}return g};S0.vj=function vj(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;m=-1;o=S0.Rj(a,a.o,a.p,S0.Qi);n=q3;for(d=0;d<a.p;d++){p=a.H[a.B[0][d]].a;r=a.H[a.B[0][d]].b;q=a.H[a.B[1][d]].a;s=a.H[a.B[1][d]].b;k=q-p;l=s-r;e=$wnd.Math.sqrt(k*k+l*l);f=(p+q)/2;g=(r+s)/2;k=b-f;l=c-g;if($wnd.Math.sqrt(k*k+l*l)>e/2)continue;if(q==p)j=$wnd.Math.abs(p-b);else {h=(s-r)/(p-q);i=-h*p-r;j=$wnd.Math.abs((h*b+c+i)/$wnd.Math.sqrt(h*h+1));}if(j<o&&j<n){n=j;m=d;}}return m};S0.wj=function wj(a,b){return ((a.s[b]&n3)>>>27)-1};S0.xj=function xj(a,b){return (a.s[b]&49152)>>14};S0.yj=function yj(a,b){return a.q[b]};S0.zj=function zj(a,b){return a.s[b]&448};S0.Aj=function Aj(a,b){return a.r==null?null:a.r[b]==null?null:O0.dU(a.r[b])};S0.Bj=function Bj(a,b){return a.r==null?null:a.r[b]};S0.Cj=function Cj(a,b){return (a.s[b]&U2)>>18!=1&&(a.s[b]&U2)>>18!=2?-1:(a.s[b]&o3)>>20};S0.Dj=function Dj(a,b){return (a.s[b]&U2)>>18};S0.Ej=function Ej(a,b){return S0.Li[a.A[b]]};S0.Fj=function Fj(a,b){return a.t==null?null:a.t[b]};S0.Gj=function Gj(a,b){var c,d,e;if(a.t==null||a.t[b]==null)return ZQ(EQ(a.w[b],1),0)?'':S0.Li[a.A[b]];e='';for(d=0;d<a.t[b].length;d++){d>0&&(e=(R0.z0(e),e+(R0.z0(','),',')));c=a.t[b][d];e=O0.cU(e,S0.Li[c]);}return e};S0.Hj=function Hj(a,b){return $wnd.Math.abs(a.u[b])};S0.Ij=function Ij(a,b){return a.v[b]};S0.Jj=function Jj(a,b){return a.s[b]&3};S0.Kj=function Kj(a,b){return a.w[b]};S0.Lj=function Lj(a,b){return a.s[b]&48};S0.Mj=function Mj(a,b){return a.H[b].a};S0.Nj=function Nj(a,b){return a.H[b].b};S0.Oj=function Oj(a,b){return a.H[b].c};S0.Pj=function Pj(a,b){return a.A[b]};S0.Qj=function Qj(a){return S0.Rj(a,a.o,a.p,S0.Qi)};S0.Rj=function Rj(a,b,c,d){return S0.Sj(a,b,c,d,a.H)};S0.Sj=function Sj(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o;l=false;m=0;for(j=0;j<c;j++)a.F[j]!=32&&(a.D[j]&Q2)==0&&++m;if(m==0){for(k=0;k<c;k++)(a.D[k]&Q2)==0&&++m;l=true;}if(m==0){if(b<2)return d;o=q3;for(f=1;f<b;f++){for(g=0;g<f;g++){n=S0.Ug(e[f],e[g]);n>0&&n<o&&(o=n);}}return o!=q3?0.6*o:d}h=0;for(i=0;i<c;i++){(l||a.F[i]!=32)&&(a.D[i]&Q2)==0&&(h+=S0.Ug(e[a.B[1][i]],e[a.B[0][i]]));}return h/m};S0.Tj=function Tj(a,b,c){return S0.em(a.H[b].a,a.H[b].b,a.H[c].a,a.H[c].b)};S0.Uj=function Uj(a,b,c){return a.B[b][c]};S0.Vj=function Vj(a,b){return ((a.D[b]&7680)>>9)+((a.D[b]&122880)>>13)};S0.Wj=function Wj(a,b){return (a.D[b]&7680)>>9};S0.Xj=function Xj(a,b){return (a.C[b]&48)>>4};S0.Yj=function Yj(a,b){return (a.C[b]&768)>>8!=1&&(a.C[b]&768)>>8!=2?-1:(a.C[b]&p3)>>10};S0.Zj=function Zj(a,b){return (a.C[b]&768)>>8};S0.$j=function $j(a,b){var c,d,e,f;c=a.B[0][b];d=a.B[1][b];e=a.H[d].a-a.H[c].a;f=a.H[d].b-a.H[c].b;return $wnd.Math.sqrt(e*e+f*f)};S0._j=function _j(a,b,c){var d;for(d=0;d<a.p;d++)if(a.B[0][d]==b&&a.B[1][d]==c||a.B[0][d]==c&&a.B[1][d]==b)if(a.F[d]!=512)return d;return -1};S0.ak=function ak(a,b){switch(a.F[b]&127){case 1:case 64:return 1;case 2:return 2;case 4:return 3;case 8:return 4;case 16:return 5;default:return 0;}};S0.bk=function bk(a,b){return a.C[b]&3};S0.ck=function ck(a,b){return a.D[b]};S0.dk=function dk(a,b){return a.F[b]};S0.ek=function ek(a,b){return a.F[b]&127};S0.fk=function fk(a,b){var c,d,e,f,g;if(a.o==0)return null;d=a.H[0].a;f=a.H[0].b;e=a.H[0].a;g=a.H[0].b;for(c=1;c<a.o;c++){d>a.H[c].a?(d=a.H[c].a):e<a.H[c].a&&(e=a.H[c].a);f>a.H[c].b?(f=a.H[c].b):g<a.H[c].b&&(g=a.H[c].b);}if(!b){b=new Z0.Uw(d,f,e-d,g-f);}else {b.c=d;b.d=f;b.b=e-d;b.a=g-f;}return b};S0.gk=function gk(a,b){var c;c=a.A[b]<S0.Mi.length?S0.Mi[a.A[b]]:null;return c==null?6:c[c.length-1]};S0.hk=function hk(a,b,c){var d,e;if(a.A[b]>=171&&a.A[b]<=190)return 0;e=0;(a.s[b]&48)==32&&(e-=1);((a.s[b]&48)==16||(a.s[b]&48)==48)&&(e-=2);d=a.q[b];if(d==0&&a.I){OQ(EQ(a.w[b],q2),t2)&&(d=-1);OQ(EQ(a.w[b],q2),s2)&&(d=1);}a.A[b]==7||a.A[b]==8||a.A[b]==9?(e+=d):a.A[b]==6||a.A[b]==14||a.A[b]==32?(e-=$wnd.Math.abs(d)):a.A[b]==15||a.A[b]==33?c-e-d<=3?(e+=d):(e-=d):a.A[b]==16||a.A[b]==34||a.A[b]==52?c-e-d<=4?(e+=d):(e-=$wnd.Math.abs(d)):a.A[b]==17||a.A[b]==35||a.A[b]==53?c-e-d<=5?(e+=d):(e-=$wnd.Math.abs(d)):(e-=d);return e};S0.ik=function ik(a,b){var c;c=S0.jk(a,b);return c+S0.hk(a,b,c)};S0.jk=function jk(a,b){var c,d;c=((a.s[b]&n3)>>>27)-1;c==-1&&(c=(d=a.A[b]<S0.Mi.length?S0.Mi[a.A[b]]:null,d==null?6:d[d.length-1]));return c};S0.kk=function kk(a,b){var c,d,e,f,g;f=S0.Mk(a,a.B[0][b])||S0.Mk(a,a.B[1][b])?5:3;for(d=0;d<2;d++){c=a.B[d][b];e=S0.ak(a,b)+(g=S0.jk(a,c),g+S0.hk(a,c,g))-S0.gn(a,c);f>e&&(f=e);}return f};S0.lk=function lk(a,b){return (a.s[b]&C1)!=0};S0.mk=function mk(a,b){var c,d,e;d=S0.kk(a,b);c=S0.Ek(a,a.B[0][b])||S0.Ek(a,a.B[1][b]);e=c?32:1;if(a.F[b]==16){a.F[b]=e;a.R=0;return true}if(a.F[b]==8){a.F[b]=d>4?16:e;a.R=0;return true}if(a.F[b]==4){a.F[b]=d>3?8:e;a.R=0;return true}if(a.F[b]==2){a.F[b]=386;a.R&=7;if((a.C[b]&128)==0)return true}if(a.F[b]==386){d>2?(a.F[b]=4):(a.F[b]=e);a.R=0;return true}if((384&a.F[b])!=0){a.F[b]=1;a.R&=7;return true}if(!c&&d<2)return false;if(a.F[b]==1){a.F[b]=2;a.R=0;return true}if(d<1)return false;if(a.F[b]==32){a.F[b]=1;a.R=0;return true}return false};S0.nk=function nk(a){var b;a.R=0;a.A=OL(N0.hN,K1,5,a.K,15,1);a.q=OL(N0.hN,K1,5,a.K,15,1);a.u=OL(N0.hN,K1,5,a.K,15,1);a.H=OL(N0.zN,r3,36,a.K,0,1);for(b=0;b<a.K;b++)a.H[b]=new S0.Yg;a.v=OL(N0.hN,K1,5,a.K,15,1);a.s=OL(N0.hN,K1,5,a.K,15,1);a.w=OL(N0.iN,c3,5,a.K,14,1);a.t=null;a.r=null;a.B=ML(N0.hN,[a3,K1],[6,5],15,[2,a.L],2);a.F=OL(N0.hN,K1,5,a.L,15,1);a.C=OL(N0.hN,K1,5,a.L,15,1);a.D=OL(N0.hN,K1,5,a.L,15,1);};S0.ok=function ok(a,b){a.R&=~b;};S0.pk=function pk(a){var b;for(b=0;b<a.o;b++)if(a.H[b].c!=0)return true;return false};S0.qk=function qk(a,b){return (a.s[b]&s3)!=0};S0.rk=function rk(a,b){return a.A[b]==-1};S0.sk=function sk(a,b){return (a.s[b]&4)!=0};S0.tk=function tk(a,b){return (a.s[b]&t3)!=0};S0.uk=function uk(a,b){return a.u[b]<0};S0.vk=function vk(a,b){return (a.C[b]&u3)!=0};S0.wk=function wk(a,b){return (a.D[b]&Q2)!=0};S0.xk=function xk(a,b){return (a.C[b]&C1)!=0};S0.yk=function yk(a,b){return a.F[b]==512};S0.zk=function zk(a,b){return (a.C[b]&4)!=0};S0.Ak=function Ak(a,b){return (a.C[b]&e3)!=0};S0.Bk=function Bk(a,b){var c,d,e,f;if(a.I){if(ZQ(EQ(a.w[b],1),0))return false;if(a.t!=null&&a.t[b]!=null)for(d=a.t[b],e=0,f=d.length;e<f;++e){c=d[e];if(!S0.hm(c))return false}}return S0.hm(a.A[b])};S0.Ck=function Ck(a,b){var c,d,e,f;if(a.I){if(ZQ(EQ(a.w[b],1),0))return false;if(a.t!=null&&a.t[b]!=null)for(d=a.t[b],e=0,f=d.length;e<f;++e){c=d[e];if(!S0.im(c))return false}}return S0.im(a.A[b])};S0.Dk=function Dk(a,b){return (a.s[b]&e3)!=0};S0.Ek=function Ek(a,b){var c,d,e,f;if(a.I){if(ZQ(EQ(a.w[b],1),0))return false;if(a.t!=null&&a.t[b]!=null)for(d=a.t[b],e=0,f=d.length;e<f;++e){c=d[e];if(!(c>=3&&c<=4||c>=11&&c<=13||c>=19&&c<=31||c>=37&&c<=51||c>=55&&c<=84||c>=87&&c<=103))return false}}return S0.jm(a.A[b])};S0.Fk=function Fk(a,b){return a.v[b]==0};S0.Gk=function Gk(a,b){var c,d,e,f;if(a.I){if(ZQ(EQ(a.w[b],1),0))return false;if(a.t!=null&&a.t[b]!=null)for(d=a.t[b],e=0,f=d.length;e<f;++e){c=d[e];if(!(c==1||c>=5&&c<=9||c>=14&&c<=17||c>=32&&c<=35||c>=52&&c<=53))return false}}return S0.km(a.A[b])};S0.Hk=function Hk(a){var b;for(b=0;b<a.o;b++){switch(a.A[b]){case 1:case 5:case 6:case 7:case 8:case 9:case 14:case 15:case 16:case 17:case 33:case 34:case 35:case 52:case 53:continue;default:return false;}}return true};S0.Ik=function Ik(a,b){return (a.s[b]&512)!=0};S0.Jk=function Jk(a,b){return (a.s[a.B[0][b]]&a.s[a.B[1][b]]&512)!=0};S0.Kk=function Kk(a,b){return a.F[b]==257||a.F[b]==129};S0.Lk=function Lk(a,b,c){return (a.F[b]==257||a.F[b]==129)&&a.B[0][b]==c};S0.Mk=function Mk(a,b){var c,d,e,f;if(a.I){if(ZQ(EQ(a.w[b],1),0))return false;if(a.t!=null&&a.t[b]!=null)for(d=a.t[b],e=0,f=d.length;e<f;++e){c=d[e];if(!(c>=3&&c<=4||c>=11&&c<=13||c>=19&&c<=31||c>=37&&c<=51||c>=55&&c<=84||c>=87&&c<=103))return false}}return S0.lm(a.A[b])};S0.Nk=function Nk(a,b){a.A[b]=-1;};S0.Ok=function Ok(a,b){a.F[b]=512;};S0.Pk=function Pk(a,b,c,d,e,f,g,h){var i,j,k,l,m,n,o,p,q,r;if(b!=d){q=a.H[b].a-a.H[d].a;r=a.H[b].b-a.H[d].b;h=$wnd.Math.sqrt(q*q+r*r);}i=b;k=S0.Ol(a,b)!=3;for(p=1;p<c;p++){m=a.H[i].a+h*$wnd.Math.sin(f);n=a.H[i].b+h*$wnd.Math.cos(f);o=-1;for(l=0;l<a.o;l++){if($wnd.Math.abs(m-a.H[l].a)<4&&$wnd.Math.abs(n-a.H[l].b)<4){o=l;break}}if(o==-1){o=S0.Si(a,m,n,0);a.H[o].a=m;a.H[o].b=n;a.H[o].c=0;}j=S0._j(a,i,o);if(j==-1){j=S0.Vi(a,i,o,S0.Ek(a,i)||S0.Ek(a,o)?32:1);if(e){k&&S0.Ol(a,a.B[0][j])<4&&S0.Ol(a,a.B[1][j])<3&&(a.F[j]=2);k=!k;}}i=o;f+=g;}j=S0._j(a,i,d);j==-1&&(j=S0.Vi(a,i,d,S0.Ek(a,i)||S0.Ek(a,d)?32:1));e&&k&&S0.Ol(a,a.B[0][j])<4&&S0.Ol(a,a.B[1][j])<4&&(a.F[j]=2);};S0.Qk=function Qk(a,b,c){var d,e;if(S0.ak(a,b)!=1)return false;if((a.s[c]&3)!=0)return true;for(e=0;e<a.p;e++)if(e!=b&&a.F[e]==2&&(a.B[0][e]==c&&(a.s[a.B[1][e]]&3)!=0||a.B[1][e]==c&&(a.s[a.B[0][e]]&3)!=0))return true;for(d=0;d<a.p;d++)if(d!=b&&a.F[d]==1&&(a.B[0][d]==c||a.B[1][d]==c)&&(a.C[d]&3)!=0)return true;return false};S0.Rk=function Rk(a){var b;for(b=0;b<a.o;b++)a.s[b]&=-449;};S0.Sk=function Sk(a){var b;for(b=0;b<a.o;b++)a.s[b]&=-131073;};S0.Tk=function Tk(a){var b;for(b=0;b<a.o;b++)a.s[b]&=-513;};S0.Uk=function Uk(a){var b;for(b=0;b<a.p;b++)a.C[b]&=-98305;};S0.Vk=function Vk(a,b){var c;for(c=0;c<a.o;c++)$wnd.Math.abs(a.u[c])==$wnd.Math.abs(b)&&(a.u[c]=0);};S0.Wk=function Wk(a){var b,c,d,e;e=false;for(c=0;c<a.o;c++){if(ZQ(EQ(a.w[c],d2),0)){a.A[c]=-1;e=true;}}e&&S0.sj(a);if(a.t!=null){a.t=null;e=true;}for(b=0;b<a.o;b++){if(ZQ(a.w[b],0)){a.w[b]=0;e=true;}}for(d=0;d<a.p;d++){if(a.D[d]!=0){a.D[d]=0;e=true;}if(a.F[d]==64){a.F[d]=1;e=true;}}e&&(a.R=0);return e};S0.Xk=function Xk(a,b){var c,d,e,f,g,h,i,j,k;if(b==0)return 0;h=null;for(d=0;d<a.o;d++){if((a.s[d]&U2)>>18==b){h==null&&(h=OL(N0.xQ,c2,5,32,16,1));h[(a.s[d]&U2)>>18!=1&&(a.s[d]&U2)>>18!=2?-1:(a.s[d]&o3)>>20]=true;}}for(f=0;f<a.p;f++){if((a.C[f]&768)>>8==b){h==null&&(h=OL(N0.xQ,c2,5,32,16,1));h[(a.C[f]&768)>>8!=1&&(a.C[f]&768)>>8!=2?-1:(a.C[f]&p3)>>10]=true;}}k=0;if(h!=null){j=OL(N0.hN,K1,5,32,15,1);for(i=0;i<32;i++)h[i]&&(j[i]=k++);for(c=0;c<a.o;c++){if((a.s[c]&U2)>>18==b){g=j[(a.s[c]&U2)>>18!=1&&(a.s[c]&U2)>>18!=2?-1:(a.s[c]&o3)>>20];a.s[c]&=-32505857;a.s[c]|=g<<20;}}for(e=0;e<a.p;e++){if((a.C[e]&768)>>8==b){g=j[(a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10];a.C[e]&=-31745;a.C[e]|=g<<10;}}}return k};S0.Yk=function Yk(a,b){var c;for(c=0;c<a.o;c++){a.H[c].a*=b;a.H[c].b*=b;}};S0.Zk=function Zk(a,b){a.o=b;a.R=0;};S0.$k=function $k(a,b){a.p=b;a.R=0;};S0._k=function _k(a,b,c){if(c>=-1&&c<=14){a.s[b]&=-2013265921;a.s[b]|=1+c<<27;if(a.A[b]==6){if(c==-1||c==0||c==2||c==4){a.s[b]&=-49;c==2&&(a.s[b]|=16);}}}};S0.al=function al(a,b,c){a.s[b]&=-49153;a.s[b]|=c<<14;};S0.bl=function bl(a,b,c){a.q[b]=c;a.R=0;};S0.cl=function cl(a,b,c){a.s[b]&=-449;a.s[b]|=c;};S0.dl=function dl(a,b,c){c?(a.s[b]|=s3):(a.s[b]&=-33554433);a.R&=7;};S0.el=function el(a,b,c){var d,e;if(c!=null){if(R0.I0(c).length==0)c=null;else {d=S0.gm(c,321);if(d!=0&&O0.eU(c,S0.Li[d])||O0.eU(c,'?')){S0.ul(a,b,d);c=null;}}}if(c==null){a.r!=null&&(a.r[b]=null);}else {a.r==null&&(a.r=OL(N0.dN,p1,7,a.K,0,2));a.r[b]=R0.n0((e=c,R0.i0(),e));}};S0.fl=function fl(a,b,c){c!=null&&c.length==0&&(c=null);if(c==null){a.r!=null&&(a.r[b]=null);}else {a.r==null&&(a.r=OL(N0.dN,p1,7,a.K,0,2));a.r[b]=c;}};S0.gl=function gl(a,b,c,d){var e,f,g;if(c==0){a.s[b]&=v3;a.s[b]|=c<<18;}else {if(d>=32)return;if(d==-1){g=-1;for(f=0;f<a.o;f++)f!=b&&c==(a.s[f]&U2)>>18&&g<((a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20)&&(g=(a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20);for(e=0;e<a.p;e++)c==(a.C[e]&768)>>8&&g<((a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10)&&(g=(a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10);d=g+1;if(d>=32)return}a.s[b]&=v3;a.s[b]|=c<<18|d<<20;}a.R&=7;};S0.hl=function hl(a,b,c){a.t==null&&(a.t=OL(N0.hN,a3,6,a.K,0,2));R0.g0(c,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));a.t[b]=c;a.R=0;a.I=true;};
S0.il=function il(a,b,c,d){var e;if(c==null){a.t!=null&&(a.t[b]=null);return}if(c.length==1&&!d){e=c[0];a.A[b]!=e&&S0.dj(a,b,e,0,-1,0);a.t!=null&&(a.t[b]=null);return}a.t==null&&(a.t=OL(N0.hN,a3,6,a.K,0,2));a.t[b]=c;d&&(a.w[b]=_Q(a.w[b],1));a.R=0;a.I=true;};S0.jl=function jl(a,b,c,d){a.u[b]=d?-c:c;};S0.kl=function kl(a,b,c){c?(a.s[b]|=e3):(a.s[b]&=-131073);};S0.ll=function ll(a,b,c){a.v[b]=c;a.R&=7;};S0.ml=function ml(a,b,c,d){a.s[b]&=-33554440;a.s[b]|=c;d&&(a.s[b]|=4);};S0.nl=function nl(a,b,c,d){d?(a.w[b]=_Q(a.w[b],c)):(a.w[b]=EQ(a.w[b],$Q(c)));a.R=0;a.I=true;};S0.ol=function ol(a,b,c){a.s[b]&=-49;a.s[b]|=c;a.R&=7;};S0.pl=function pl(a,b,c){c?(a.s[b]|=512):(a.s[b]&=-513);};S0.ql=function ql(a,b,c){a.s[b]&=-67108865;c&&(a.s[b]|=t3);};S0.rl=function rl(a,b,c){a.H[b].a=c;a.R&=7;};S0.sl=function sl(a,b,c){a.H[b].b=c;a.R&=7;};S0.tl=function tl(a,b,c){a.H[b].c=c;a.R&=7;};S0.ul=function ul(a,b,c){if(c>=0&&c<=190){if(c==151||c==152){a.A[b]=1;a.v[b]=c-149;}else {a.A[b]=c;a.v[b]=0;}a.s[b]&=-2013265921;a.R=0;}};S0.vl=function vl(a,b,c,d){a.B[b][c]=d;a.R=0;};S0.wl=function wl(a,b,c){c?(a.C[b]|=u3):(a.C[b]&=-32769);};S0.xl=function xl(a,b,c){a.C[b]&=-49;a.C[b]|=c<<4;};S0.yl=function yl(a,b,c,d){var e,f,g;if(c==0){a.C[b]&=-32513;a.C[b]|=c<<8;}else {if(d>=32)return;if(d==-1){g=-1;for(f=0;f<a.o;f++)c==(a.s[f]&U2)>>18&&g<((a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20)&&(g=(a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20);for(e=0;e<a.p;e++)e!=b&&c==(a.C[e]&768)>>8&&g<((a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10)&&(g=(a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10);d=g+1;if(d>=32)return}a.C[b]&=-32513;a.C[b]|=c<<8|d<<10;}a.R&=7;};S0.zl=function zl(a,b,c){c?(a.C[b]|=C1):(a.C[b]&=-65537);};S0.Al=function Al(a,b,c){a.F[b]=c==1?1:c==2?2:c==3?4:32;a.R=0;};S0.Bl=function Bl(a,b,c,d){a.C[b]&=-131080;a.C[b]|=c;d&&(a.C[b]|=4);};S0.Cl=function Cl(a,b){a.C[b]|=e3;};S0.Dl=function Dl(a,b,c,d){d?(a.D[b]|=c):(a.D[b]&=~c);a.R=0;a.I=true;};S0.El=function El(a,b,c){a.F[b]=c;a.R=0;};S0.Fl=function Fl(a,b){a.G=b;};S0.Gl=function Gl(a,b){if(a.I!=b){a.I=b;b||S0.Wk(a);a.R=0;}};S0.Hl=function Hl(a,b){a.R=b;};S0.Il=function Il(a,b){a.Q=b;};S0.Jl=function Jl(a,b){var c,d;a.A=S0.$l(a.A,b);a.q=S0.$l(a.q,b);a.u=S0.$l(a.u,b);d=a.H.length;a.H=S0.am(a.H,b);for(c=d;c<b;c++)a.H[c]=new S0.Yg;a.v=S0.$l(a.v,b);a.s=S0.$l(a.s,b);a.w=S0._l(a.w,b);a.t!=null&&(a.t=S0.cm(a.t,b));a.r!=null&&(a.r=S0.bm(a.r,b));a.K=b;};S0.Kl=function Kl(a,b){a.B[0]=S0.$l(a.B[0],b);a.B[1]=S0.$l(a.B[1],b);a.F=S0.$l(a.F,b);a.C=S0.$l(a.C,b);a.D=S0.$l(a.D,b);a.L=b;};S0.Ll=function Ll(a,b){a.M=b;};S0.Ml=function Ml(a,b){a.N=b;};S0.Nl=function Nl(a,b){a.s[b]|=C1;};S0.Ol=function Ol(a,b){var c,d;d=0;for(c=0;c<a.p;c++)(a.B[0][c]==b||a.B[1][c]==b)&&(d+=S0.ak(a,c));return d};S0.Pl=function Pl(a){var b,c,d;c=false;d=false;for(b=0;b<a.o;b++){if(a.v[b]!=0){a.v[b]=0;c=true;a.A[b]==1&&(d=true);}}d&&(a.R=0);return c};S0.Ql=function Ql(a,b,c){return S0.Ek(a,b)||S0.Ek(a,c)?32:1};S0.Rl=function Rl(a,b,c){var d,e,f,g,h,i;g=a.A[b];a.A[b]=a.A[c];a.A[c]=g;g=a.q[b];a.q[b]=a.q[c];a.q[c]=g;g=a.v[b];a.v[b]=a.v[c];a.v[c]=g;g=a.s[b];a.s[b]=a.s[c];a.s[c]=g;i=a.w[b];a.w[b]=a.w[c];a.w[c]=i;g=a.u[b];a.u[b]=a.u[c];a.u[c]=g;f=a.H[b];a.H[b]=a.H[c];a.H[c]=f;if(a.t!=null){h=a.t[b];a.t[b]=a.t[c];a.t[c]=h;}if(a.r!=null){h=a.r[b];a.r[b]=a.r[c];a.r[c]=h;}for(d=0;d<a.p;d++){for(e=0;e<2;e++){a.B[e][d]==b?(a.B[e][d]=c):a.B[e][d]==c&&(a.B[e][d]=b);}}a.R=0;};S0.Sl=function Sl(a,b,c){var d;d=a.B[0][b];a.B[0][b]=a.B[0][c];a.B[0][c]=d;d=a.B[1][b];a.B[1][b]=a.B[1][c];a.B[1][c]=d;d=a.F[b];a.F[b]=a.F[c];a.F[c]=d;d=a.C[b];a.C[b]=a.C[c];a.C[c]=d;d=a.D[b];a.D[b]=a.D[c];a.D[c]=d;a.R=0;};S0.Tl=function Tl(a,b,c){var d;for(d=0;d<a.o;d++){a.H[d].a+=b;a.H[d].b+=c;}a.S+=b;a.T+=c;};S0.Ul=function Ul(a,b,c){var d,e;e=c&127;d=S0.kk(a,b);switch(e){case 1:case 64:return d>=1;case 2:return d>=2;case 4:return d>=3;case 8:return d>=4;case 16:return d>=5;case 32:return true;default:return false;}};S0.Vl=function Vl(a,b,c,d){var e,f,g;for(e=0;e<a.o;e++){if(!d||(a.s[e]&512)!=0){g=a.P[e]*b;f=a.O[e]-c;a.H[e].a=a.S+g*$wnd.Math.sin(f);a.H[e].b=a.T+g*$wnd.Math.cos(f);}}d&&(a.R&=7);};S0.Wl=function Wl(a,b,c){var d,e,f;a.S=b;a.T=c;a.O=OL(N0.fN,O2,5,a.o,15,1);a.P=OL(N0.fN,O2,5,a.o,15,1);for(d=0;d<a.o;d++){e=b-a.H[d].a;f=c-a.H[d].b;a.P[d]=$wnd.Math.sqrt(e*e+f*f);a.O[d]=S0.em(b,c,a.H[d].a,a.H[d].b);}};S0.Xl=function Xl(){this.K=this.L=256;S0.nk(this);};S0.Yl=function Yl(a,b){this.K=$wnd.Math.max(1,a);this.L=$wnd.Math.max(1,b);S0.nk(this);};S0.$l=function $l(a,b){var c;c=OL(N0.hN,K1,5,b,15,1);O0.QU(a,0,c,0,$wnd.Math.min(a.length,b));return c};S0._l=function _l(a,b){var c;c=OL(N0.iN,c3,5,b,14,1);O0.QU(a,0,c,0,$wnd.Math.min(a.length,b));return c};S0.am=function am(a,b){var c,d;c=OL(N0.zN,r3,36,b,0,1);for(d=0;d<a.length;d++)!!a[d]&&(c[d]=new S0.$g(a[d]));return c};S0.bm=function bm(a,b){var c,d;c=OL(N0.dN,p1,7,b,0,2);for(d=0;d<a.length;d++){if(a[d]!=null){c[d]=OL(N0.dN,d3,5,a[d].length,15,1);O0.QU(a[d],0,c[d],0,a[d].length);}}return c};S0.cm=function cm(a,b){var c,d;c=OL(N0.hN,a3,6,b,0,2);for(d=0;d<a.length;d++){if(a[d]!=null){c[d]=OL(N0.hN,K1,5,a[d].length,15,1);O0.QU(a[d],0,c[d],0,a[d].length);}}return c};S0.dm=function dm(a){S0.Ri();return a>=0&&a<S0.Mi.length&&S0.Mi[a]!=null?S0.Mi[a]:a>=171&&a<=190?S0.Ki:S0.Oi};S0.em=function em(a,b,c,d){S0.Ri();var e,f,g;f=c-a;g=d-b;if(g!=0){e=$wnd.Math.atan(f/g);g<0&&(f<0?(e-=h2):(e+=h2));}else e=f>0?i2:P2;return e};S0.fm=function fm(a,b){S0.Ri();var c;c=a-b;while(c<w3)c+=g2;while(c>h2)c-=g2;return c};S0.gm=function gm(a,b){S0.Ri();var c,d,e,f,g;if((b&256)!=0&&O0.eU(a,'?'))return 0;for(d=1;d<=128;d++)if(!O0.eU(a,m3)&&O0.fU(a,S0.Li[d]))return d;if((b&2)!=0)for(e=129;e<=144;e++)if(O0.fU(a,S0.Li[e]))return e;if((b&4)!=0)for(f=146;f<=148;f++)if(O0.fU(a,S0.Li[f]))return f;if((b&1)!=0)for(g=151;g<=152;g++)if(O0.fU(a,S0.Li[g]))return g;if((b&32)!=0)if(O0.fU(a,S0.Li[153]))return 153;if((b&8)!=0)if(O0.fU(a,S0.Li[154]))return 154;if((b&16)!=0)if(O0.fU(a,S0.Li[145]))return 145;if((b&128)!=0)if(O0.fU(a,S0.Li[159]))return 159;if((b&64)!=0)for(c=171;c<=190;c++)if(O0.fU(a,S0.Li[c]))return c;return 0};S0.hm=function hm(a){S0.Ri();switch(a){case 7:case 8:case 9:case 15:case 16:case 17:case 33:case 34:case 35:case 52:case 53:return true;}return false};S0.im=function im(a){S0.Ri();if(a==1||a==6)return false;if(S0.hm(a))return false;if(a==2||a==10||a==18||a==36||a==54)return false;if(a>103)return false;return true};S0.jm=function jm(a){return a>=3&&a<=4||a>=11&&a<=13||a>=19&&a<=31||a>=37&&a<=51||a>=55&&a<=84||a>=87&&a<=103};S0.km=function km(a){return a==1||a>=5&&a<=9||a>=14&&a<=17||a>=32&&a<=35||a>=52&&a<=53};S0.lm=function lm(a){return a>=21&&a<=30||a>=39&&a<=48||a==57||a>=72&&a<=80||a==89||a>=104&&a<=112};sR(61,1,{61:1,4:1});_.ub=function Zl(a){S0.mj(this,a);};_.vb=function mm(a){return this.F[a]==64};_.o=0;_.p=0;_.G=0;_.I=false;_.J=false;_.K=0;_.L=0;_.M=0;_.Q=false;_.R=0;_.S=0;_.T=0;S0.Qi=24;N0.LN=LS(61);S0.nm=function nm(a,b,c,d){var e,f,g,h,i,j,k,l,m;S0.Ls(b,1);d==null&&(d=OL(N0.hN,K1,5,b.o,15,1));h=S0.Xk(a,1);i=S0.Xk(a,2);m=OL(N0.xQ,c2,5,b.o,16,1);j=OL(N0.hN,K1,5,b.o,15,1);j[0]=c;m[c]=true;d[c]=S0.ij(b,a,c,h,i);g=0;k=0;while(g<=k){for(l=0;l<S0.Bm(b,j[g]);l++){f=b.f[j[g]][l];if(!m[f]){j[++k]=f;m[f]=true;d[f]=S0.ij(b,a,f,h,i);}}++g;}for(e=0;e<b.p;e++)m[b.B[0][e]]&&S0.jj(b,a,e,h,i,d==null?b.B[0][e]:d[b.B[0][e]],d==null?b.B[1][e]:d[b.B[1][e]],false);S0.Xk(a,1);S0.Xk(a,2);a.R=0;};S0.om=function om(a){var b,c,d,e,f,g,h,i,j,k,l,m;a.g=OL(N0.hN,K1,5,a.o,15,1);a.c=OL(N0.hN,K1,5,a.o,15,1);a.f=OL(N0.hN,a3,6,a.o,0,2);a.i=OL(N0.hN,a3,6,a.o,0,2);a.j=OL(N0.hN,a3,6,a.o,0,2);a.k=OL(N0.hN,K1,5,a.d,15,1);j=OL(N0.hN,K1,5,a.o,15,1);for(g=0;g<a.p;g++){++j[a.B[0][g]];++j[a.B[1][g]];}for(d=0;d<a.o;d++){a.f[d]=OL(N0.hN,K1,5,j[d],15,1);a.i[d]=OL(N0.hN,K1,5,j[d],15,1);a.j[d]=OL(N0.hN,K1,5,j[d],15,1);}l=false;for(h=0;h<a.e;h++){m=S0.ak(a,h);if(m==0){l=true;continue}for(k=0;k<2;k++){c=a.B[k][h];b=a.c[c];a.j[c][b]=m;a.f[c][b]=a.B[1-k][h];a.i[c][b]=h;++a.c[c];++a.g[c];c<a.d&&(m>1?(a.k[c]+=m-1):a.F[h]==64&&(a.k[c]=1));}}for(i=a.e;i<a.p;i++){m=S0.ak(a,i);if(m==0){l=true;continue}for(k=0;k<2;k++){c=a.B[k][i];b=a.c[c];a.j[c][b]=m;a.f[c][b]=a.B[1-k][i];a.i[c][b]=i;++a.c[c];a.B[1-k][i]<a.d&&++a.g[c];}}if(l){b=OL(N0.hN,K1,5,a.o,15,1);for(e=0;e<a.o;e++)b[e]=a.c[e];for(f=0;f<a.p;f++){m=S0.ak(a,f);if(m==0){for(k=0;k<2;k++){c=a.B[k][f];a.j[c][b[c]]=m;a.f[c][b[c]]=a.B[1-k][f];a.i[c][b[c]]=f;++b[c];}}}}};S0.pm=function pm(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;S0.Ls(a,1);c&&(b=true);for(i=0;i<a.p;i++){j=S0.ak(a,i);if(j==1||j==2){if(a.q[a.B[0][i]]>0&&a.q[a.B[1][i]]<0){f=a.B[0][i];g=a.B[1][i];}else if(a.q[a.B[0][i]]<0&&a.q[a.B[1][i]]>0){f=a.B[1][i];g=a.B[0][i];}else continue;if(S0.Ek(a,f)||S0.Ek(a,g))continue;if(a.A[f]<9&&S0.gn(a,f)>3||a.A[g]<9&&S0.gn(a,g)>3)continue;l=S0.bn(a,f)!=0;a.q[f]-=1;a.q[g]+=1;if(!l){s=a.F[i];j==1?(a.F[i]=2):(a.F[i]=4);if(s==129||s==257){w=a.B[0][i];r=S0._n(a,w,false);if(a.B[0][r]!=w){a.B[1][r]=a.B[0][r];a.B[1][r]=w;}}}a.R=0;}}t=0;p=0;n=0;for(e=0;e<a.o;e++){t+=a.q[e];if(a.q[e]<0&&!S0.An(a,e)){++p;S0.Bk(a,e)&&(n-=a.q[e]);}}if(!b&&t!=0)throw CQ(new O0.FJ("molecule's overall charges are not balanced"));S0.Ls(a,1);u=0;v=c?t+n:n;for(h=0;h<a.o;h++){if(a.q[h]>0){if(!S0.zn(a,h)&&S0.Bk(a,h)){k=$wnd.Math.min(S0.bn(a,h),a.q[h]);if(k!=0&&v>=k){t-=k;u-=k;v-=k;a.q[h]-=k;a.R&=1;}}}}q=c?t:u;if(q<0){o=OL(N0.hN,K1,5,p,15,1);p=0;for(f=0;f<a.o;f++){a.q[f]<0&&!S0.An(a,f)&&(o[p++]=(a.A[f]<<22)+f);}R0.g0(o,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));for(m=o.length-1;q<0&&m>=o.length-p;m--){d=o[m]&x3;if(S0.Bk(a,d)){k=$wnd.Math.min(-q,-a.q[d]);t+=k;q+=k;a.q[d]+=k;a.R&=1;}}}return t};S0.qm=function qm(a){var b,c,d,e,f,g,h,i,j,k,l,m,n;if(!a.I)return false;for(c=0;c<a.o;c++){n=S0.jk(a,c);n+S0.hk(a,c,n)-S0.gn(a,c)<=0&&!(a.q[c]==0&&(a.A[c]==5||(e=a.A[c],e==7||e==15||e==33)||(d=a.A[c],d==8||d==16||d==34||d==52)))&&(a.w[c]=EQ(a.w[c],-6145));}g=false;for(b=0;b<a.d;b++){h=a.c[b]-a.g[b];if(!a.Q&&h>0){if(OQ(EQ(a.w[b],N2),0)){k=OQ(EQ(a.w[b],o2),896)?3:OQ(EQ(a.w[b],o2),384)?2:OQ(EQ(a.w[b],128),128)?1:0;i=(n=S0.jk(a,b),n+S0.hk(a,b,n)-S0.gn(a,b));a.q[b]==0&&OQ(EQ(a.w[b],q2),0)&&a.A[b]!=6&&++i;l=h;l>3-k&&(l=3-k);l>i+h-k&&(l=i+h-k);if(l>0){m=k==0?0:aR(EQ(a.w[b],o2),l);m=_Q(m,N0.MQ((l==3?7:h==2?3:1)<<7));a.w[b]=EQ(a.w[b],-1921);a.w[b]=_Q(a.w[b],EQ(o2,m));}}for(j=a.g[b];j<a.c[b];j++){f=a.i[b][j];if(a.F[f]==1){a.A[a.f[b][j]]=-1;a.F[f]=512;g=true;}}}}g&&S0.hj(a);return g};S0.rm=function rm(a,b){var c,d,e,f;if(a.k[b]==2&&a.g[b]==2&&a.j[b][0]==2){for(e=0;e<2;e++){c=S0.wm(a,b,a.f[b][e]);if(c!=-1){for(f=0;f<a.g[c];f++){d=a.i[c][f];(a.F[d]==257||a.F[d]==129)&&a.B[0][d]==c&&(a.F[a.i[c][f]]=1);}}}return}if(a.k[b]==0||a.A[b]>=15){for(e=0;e<a.c[b];e++){d=a.i[b][e];(a.F[d]==257||a.F[d]==129)&&a.B[0][d]==b&&a.B[0][d]==b&&(a.F[d]=1);}}};S0.sm=function sm(a,b,c,d,e){var f,g,h,i,j;d&&S0.Ls(a,7);b.t=null;a.I&&S0.Gl(b,true);i=c.length;e==null&&(e=OL(N0.hN,K1,5,i,15,1));b.o=0;for(f=0;f<i;f++)e[f]=c[f]?S0.ij(a,b,f,0,0):-1;b.p=0;for(j=0;j<a.p;j++){g=a.B[0][j];h=a.B[1][j];if(g<i&&h<i){if(c[g]&&c[h])S0.jj(a,b,j,0,0,e==null?a.B[0][j]:e[a.B[0][j]],e==null?a.B[1][j]:e[a.B[1][j]],d);else if(a.q[g]!=0&&a.q[h]!=0&&a.q[g]<0^a.q[h]<0){c[g]&&(b.q[e[g]]+=a.q[g]<0?1:-1);c[h]&&(b.q[e[h]]+=a.q[h]<0?1:-1);}}}S0.mj(a,b);!!a.b&&(b.R=0);b.R=0;S0.Xk(b,1);S0.Xk(b,2);b.o!=i&&S0.Gl(b,true);d&&S0.ae(new S0.ke(b),null,false);};S0.tm=function tm(a,b,c,d,e){var f,g,h,i,j;d&&S0.Ls(a,7);b.t=null;a.I&&S0.Gl(b,true);e==null&&(e=OL(N0.hN,K1,5,a.o,15,1));b.o=0;for(f=0;f<a.o;f++){e[f]=-1;for(j=0;j<a.g[f];j++){if(c[a.i[f][j]]){e[f]=S0.ij(a,b,f,0,0);break}}}b.p=0;for(i=0;i<a.p;i++)if(c[i]){S0.jj(a,b,i,0,0,e==null?a.B[0][i]:e[a.B[0][i]],e==null?a.B[1][i]:e[a.B[1][i]],d);}else {g=a.B[0][i];h=a.B[1][i];if(e[g]==-1^e[h]==-1){if(a.q[g]!=0&&a.q[h]!=0&&a.q[g]<0^a.q[h]<0){e[g]!=-1&&(b.q[e[g]]+=a.q[g]<0?1:-1);e[h]!=-1&&(b.q[e[h]]+=a.q[h]<0?1:-1);}}}S0.mj(a,b);!!a.b&&(b.R=0);b.R=0;S0.Xk(b,1);S0.Xk(b,2);b.o!=a.o&&S0.Gl(b,true);d&&S0.ae(new S0.ke(b),null,false);return e};S0.um=function um(a,b){var c,d,e,f,g,h,i,j,k,l;if((b&~a.R)==0)return;if((a.R&1)==0){S0.yn(a);S0.om(a);a.R|=1;if(S0.qm(a)){S0.yn(a);S0.om(a);}}if((b&~a.R)==0)return;if((a.R&-7)!=0){for(d=0;d<a.d;d++)a.s[d]&=-15369;for(f=0;f<a.e;f++)a.C[f]&=-705;if((b&4)==0){S0.zm(a,1);a.R|=2;return}S0.zm(a,7);for(e=0;e<a.d;e++){for(k=0;k<a.g[e];k++){i=a.i[e][k];if(i<a.e&&S0.Aq(a.n,i))continue;h=a.f[e][k];for(l=0;l<a.g[h];l++){if(a.i[h][l]==i)continue;a.j[h][l]>1&&(a.A[a.f[h][l]]==6?(a.s[e]|=k2):!S0.Fn(a,a.i[h][l])&&S0.Bk(a,a.f[h][l])&&(a.s[e]|=M2));}}}while(true){j=false;for(c=0;c<a.d;c++){if(a.k[c]>0&&(a.s[c]&M2)!=0&&!S0.zq(a.n,c)){for(k=0;k<a.g[c];k++){if(a.j[c][k]>1){h=a.f[c][k];i=a.i[c][k];for(l=0;l<a.g[h];l++){if(a.i[h][l]!=i){g=a.f[h][l];if((a.s[g]&M2)==0){a.s[g]|=M2;j=true;}}}}}}}if(!j)break}}a.R|=6;};S0.vm=function vm(a,b){var c,d,e,f,g;c=-1;if(a.k[b]==1){for(f=0;f<a.g[b];f++){if(a.j[b][f]==2){d=a.f[b][f];if(a.g[d]==2&&a.k[d]==2){for(g=0;g<2;g++){e=a.f[d][g];if(e!=b&&a.k[e]==1){c=d;break}}}break}}}return c};S0.wm=function wm(a,b,c){var d,e;d=b;while(a.g[c]==2&&a.k[c]==2&&c!=d){e=c;c=a.f[c][0]==b?a.f[c][1]:a.f[c][0];b=e;}return c==d?-1:c};S0.xm=function xm(a,b){var c;if(a.g[b]==3&&b<a.d&&S0.zq(a.n,b)&&(!!a.n&&b<a.d?S0.oq(a.n,b):0)>=5)for(c=0;c<a.g[b];c++)if(S0.Gn(a,a.i[b][c]))return a.i[b][c];return -1};S0.ym=function ym(a,b,c,d,e){var f,g,h,i,j,k;S0.Ls(a,7);if((a.s[b]&3072)==0||c&&!(b<a.d&&S0.zq(a.n,b)))return;i=OL(N0.hN,K1,5,a.d,15,1);i[0]=b;d[b]=true;h=0;j=0;while(h<=j){for(k=0;k<a.g[i[h]];k++){g=a.i[i[h]][k];if(!e[g]&&(a.C[g]&64)!=0&&(!c||g<a.e&&S0.Aq(a.n,g))){e[g]=true;f=a.f[i[h]][k];if(!d[f]){d[f]=true;i[++j]=f;}}}++h;}};S0.zm=function zm(a,b){var c,d,e,f,g,h,i,j;a.n=new S0.Nq(a,b);d=OL(N0.hN,K1,5,a.d,15,1);for(e=0;e<a.e;e++){if(S0.qq(a.n,e)!=0){a.C[e]|=64;++d[a.B[0][e]];++d[a.B[1][e]];}}for(c=0;c<a.d;c++){d[c]==2?(a.s[c]|=p2):d[c]==3?(a.s[c]|=N2):d[c]>3&&(a.s[c]|=3072);}for(j=0;j<a.n.i.a.length;j++){g=S0.sq(a.n,j);i=S0.tq(a.n,j);h=g.length;for(f=0;f<h;f++){a.s[g[f]]|=8;a.C[i[f]]|=128;a.F[i[f]]==386&&(a.F[i[f]]=2);}}};S0.Am=function Am(a){var b,c,d,e,f,g,h,i;h=OL(N0.xQ,c2,5,a.o,16,1);for(c=0;c<a.o;c++)h[c]=a.A[c]==1&&a.v[c]==0&&a.q[c]==0&&(a.r==null||a.r[c]==null);i=OL(N0.xQ,c2,5,a.o,16,1);for(g=0;g<a.p;g++){d=a.B[0][g];e=a.B[1][g];if(S0.ak(a,g)!=1){h[d]=false;h[e]=false;continue}i[d]&&(h[d]=false);i[e]&&(h[e]=false);h[d]&&S0.Ek(a,e)&&a.A[e]!=13&&(h[d]=false);h[e]&&S0.Ek(a,d)&&a.A[d]!=13&&(h[e]=false);i[d]=true;i[e]=true;}for(f=0;f<a.p;f++){if(h[a.B[0][f]]&&h[a.B[1][f]]){h[a.B[0][f]]=false;h[a.B[1][f]]=false;}}for(b=0;b<a.o;b++)i[b]||(h[b]=false);return h};S0.Bm=function Bm(a,b){return a.c[b]};S0.Cm=function Cm(a,b){return a.f[b].length};S0.Dm=function Dm(a,b){return a.c[b]-S0.fn(a,b)+S0.bn(a,b)};S0.Em=function Em(a){var b,c;S0.Ls(a,7);b=0;for(c=0;c<a.n.i.a.length;c++)S0.yq(a.n,c)&&++b;return b};S0.Fm=function Fm(a,b){var c,d;c=0;for(d=0;d<a.g[b];d++)S0.Bk(a,a.f[b][d])&&!S0.wk(a,a.i[b][d])&&++c;return c};S0.Gm=function Gm(a,b){return a.k[b]};S0.Hm=function Hm(a,b){S0.Ls(a,7);return a.k[b]==2&&a.g[b]==2?S0.Zn(a,b,false):S0._n(a,b,false)};S0.Im=function Im(a,b){var c;c=a.s[b]&3072;return c==0?0:c==p2?2:c==N2?3:4};S0.Jm=function Jm(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;S0.Ls(a,7);f=OL(N0.xQ,c2,5,a.e,16,1);l=OL(N0.xQ,c2,5,a.e,16,1);o=OL(N0.hN,K1,5,a.d,15,1);g=0;for(h=1;h<a.g[b];h++){d=a.i[b][h];if((a.C[d]&64)!=0){for(j=0;j<h;j++){e=a.i[b][j];if((a.C[e]&64)!=0){l[d]=true;l[e]=true;n=S0.jn(a,o,a.f[b][h],a.f[b][j],c-2,null,l);l[d]=false;l[e]=false;if(n!=-1){i=false;m=OL(N0.hN,K1,5,n,15,1);S0.kn(a,o,m,n);for(k=0;k<n;k++){if(!f[m[k]]){f[m[k]]=true;i=true;}}i&&++g;}}}}}return g};S0.Km=function Km(a,b){return !!a.n&&b<a.d?S0.oq(a.n,b):0};S0.Lm=function Lm(a,b){if(b){S0.Ls(a,1);return S0.Rj(a,a.d,a.e,S0.Qi)}else {return S0.Rj(a,a.o,a.p,S0.Qi)}};S0.Mm=function Mm(a){var b,c,d,e,f,g,h,i;S0.Ls(a,1);h=OL(N0.gN,c3,5,a.d,15,1);d=OL(N0.hN,K1,5,a.d,15,1);for(i=0;i<a.d;i++){d[0]=i;e=OL(N0.hN,K1,5,a.d,15,1);e[i]=1;c=0;f=0;while(c<=f){for(g=0;g<a.g[d[c]];g++){b=a.f[d[c]][g];if(e[b]==0){e[b]=e[d[c]]+1;d[++f]=b;h[i]+=e[b]-1;}}++c;}h[i]/=f;}return h};S0.Nm=function Nm(a,b,c){var d;for(d=0;d<a.f[b].length;d++)if(a.f[b][d]==c)return a.i[b][d];return -1};S0.Om=function Om(a,b){return !!a.n&&b<a.e?S0.qq(a.n,b):0};S0.Pm=function Pm(a,b,c){return a.f[b][c]};S0.Qm=function Qm(a,b){return a.g[b]};S0.Rm=function Rm(a,b,c){return a.i[b][c]};S0.Sm=function Sm(a,b,c){return a.j[b][c]};S0.Tm=function Tm(a,b){var c,d;c=0;for(d=0;d<a.g[b];d++)ZQ(EQ(a.w[d],d2),0)&&++c;return c};S0.Um=function Um(a,b){return a.c[b]-a.g[b]};S0.Vm=function Vm(a,b,c,d,e){var f,g,h,i;g=a.c[b];if(a.k[b]!=0||b<a.d&&S0.zq(a.n,b)||a.g[b]<3||g>4)return false;i=OL(N0.xQ,c2,5,4,16,1);for(h=0;h<g;h++){f=3.9269908169872414-d[h];if($wnd.Math.abs(y3-f%i2)>0.0872664675116539)return false;e[h]=3&cN(f/i2);if(i[e[h]])return false;i[e[h]]=true;if((e[h]&1)==0){if(a.F[a.i[b][c[h]]]!=1)return false}else {if(!S0.Lk(a,a.i[b][c[h]],b))return false}}return i[0]&&i[2]};S0.Wm=function Wm(a,b,c,d,e){var f,g,h,i,j,k,l,m;if((!!a.n&&b<a.d?S0.oq(a.n,b):0)>24)return 3;f=a.c[b];e==null&&(e=OL(N0.hN,K1,5,f,15,1));if(!S0.Vm(a,b,c,d,e))return 3;i=-1;for(j=0;j<f;j++){if((e[j]&1)==1){g=a.F[a.i[b][c[j]]];if(i!=-1&&i!=g)return 3;i=g;}}k=$wnd.Math.abs(e[0]-e[1])==2?1:0;h=e[k]-e[k+1];m=$wnd.Math.abs(h)==3^e[k]<e[k+1];l=f==3||(e[3]&1)==1;return m^l^i==129?1:2};S0.Xm=function Xm(a,b,c){var d,e,f,g,h,i,j,k,l,m;S0.Ls(a,1);m=OL(N0.xQ,c2,5,a.o,16,1);j=OL(N0.hN,K1,5,a.o,15,1);j[0]=b;m[b]=true;g=0;k=0;i=1;while(g<=k){f=c?S0.Cm(a,j[g]):a.c[j[g]];for(l=0;l<f;l++){e=a.f[j[g]][l];if(!m[e]){j[++k]=e;m[e]=true;++i;}}++g;}h=OL(N0.hN,K1,5,i,15,1);i=0;for(d=0;d<a.o;d++)m[d]&&(h[i++]=d);return h};S0.Ym=function Ym(a,b,c,d){var e,f,g,h,i,j,k,l,m;S0.Ls(a,1);for(f=0;f<a.o;f++)b[f]=-1;j=0;for(e=0;e<a.o;e++){if(b[e]==-1&&(!c||(a.s[e]&e3)!=0)){b[e]=j;k=OL(N0.hN,K1,5,a.o,15,1);k[0]=e;i=0;l=0;while(i<=l){h=d?S0.Cm(a,k[i]):a.c[k[i]];for(m=0;m<h;m++){g=a.f[k[i]][m];if(b[g]==-1&&(!c||(a.s[g]&e3)!=0)){k[++l]=g;b[g]=j;}}++i;}++j;}}return j};S0.Zm=function Zm(a,b){var c;return c=S0.jk(a,b),c+S0.hk(a,b,c)-S0.gn(a,b)};S0.$m=function $m(a,b){var c,d,e,f,g,h;f=OL(N0.hN,K1,5,a.o,15,1);for(d=0;d<a.o;d++)f[d]=d;e=a.o;do --e;while(e>=0&&b[e]);for(c=0;c<e;c++){if(b[f[c]]){h=f[c];f[c]=f[e];f[e]=h;g=b[c];b[c]=b[e];b[e]=g;do --e;while(b[e])}}return f};S0._m=function _m(a){return S0.$m(a,S0.Am(a))};S0.an=function an(a,b,c){var d,e,f;e=S0.gn(a,b);e-=S0.hk(a,b,e);c&&(e-=a.c[b]-a.g[b]);f=S0.dm(a.A[b]);if(e<=f[0])return -1;for(d=1;d<f.length;d++)if(f[d]>=e)return f[d];return e};S0.bn=function bn(a,b){var c,d,e,f,g,h;if(a.I&&OQ(EQ(a.w[b],N2),0))return 0;if(!S0.jo(a,b))return 0;S0.Ls(a,1);g=0;for(e=0;e<a.c[b];e++)g+=a.j[b][e];if(a.I){c=1;for(d=0;d<a.g[b];d++)a.F[a.i[b][d]]==64&&++c;g+=c>>1;}g-=S0.hk(a,b,g);f=((a.s[b]&n3)>>>27)-1;if(f==-1){h=S0.dm(a.A[b]);f=h[0];for(d=1;f<g&&d<h.length;d++)f=h[d];}return $wnd.Math.max(0,f-g)};S0.cn=function cn(a,b){var c,d,e,f,g;e=S0.gn(a,b);c=S0.hk(a,b,e);f=((a.s[b]&n3)>>>27)-1;if(f==-1){g=S0.dm(a.A[b]);d=0;while(e>g[d]+c&&d<g.length-1)++d;f=g[d];}return f+c-e};S0.dn=function dn(a,b){return a.f[b].length-a.c[b]};S0.en=function en(a){var b,c,d,e;S0.Ls(a,1);e=0;for(b=0;b<a.o;b++){d=a.v[b]!=0?a.v[b]:S0.Pi[a.A[b]];e+=d+S0.bn(a,b)*S0.Pi[1];if(a.A[b]>=171&&a.A[b]<=190){c=a.c[b];c>2&&(e-=(c-2)*S0.Pi[1]);}}return e};S0.fn=function fn(a,b){var c,d;c=a.g[b];for(d=0;d<a.g[b];d++)a.A[a.f[b][d]]==1&&--c;return c};S0.gn=function gn(a,b){var c,d,e,f,g,h;a.wb(1);g=false;d=false;h=0;for(e=0;e<a.c[b];e++){if(!a.I||OQ(EQ(a.w[a.f[b][e]],d2),0)){f=a.j[b][e];h+=f;f>1&&(g=true);c=a.i[b][e];a.F[c]==64&&(d=true);}}d&&!g&&++h;return h};S0.hn=function hn(a,b,c){var d,e,f;e=0;for(f=0;f<a.g[b];f++){d=a.f[b][f];d!=c&&a.g[d]>2&&++e;}return e};S0.jn=function jn(a,b,c,d,e,f,g){var h,i,j,k,l,m,n,o,p;if(c==d){b[0]=c;return 0}a.wb(1);k=OL(N0.hN,K1,5,a.o,15,1);j=OL(N0.hN,K1,5,a.o,15,1);p=OL(N0.hN,K1,5,a.o,15,1);j[0]=c;k[c]=1;i=0;l=0;while(i<=l&&k[j[i]]<=e){o=j[i];for(m=0;m<a.c[o];m++){if(g==null||g.length<=a.i[o][m]||!g[a.i[o][m]]){h=a.f[o][m];if(h==d){n=k[o];b[n]=h;b[--n]=o;while(n>0){b[n-1]=p[b[n]];--n;}return k[o]}if(k[h]==0&&(f==null||f.length<=h||!f[h])){j[++l]=h;k[h]=k[o]+1;p[h]=o;}}}++i;}return -1};S0.kn=function kn(a,b,c,d){var e,f;S0.Ls(a,1);for(e=0;e<d;e++){for(f=0;f<a.c[b[e]];f++){if(a.f[b[e]][f]==b[e+1]){c[e]=a.i[b[e]][f];break}}}};S0.ln=function ln(a,b,c){var d,e,f,g,h,i;if(b==c)return 0;S0.Ls(a,1);g=OL(N0.hN,K1,5,a.o,15,1);f=OL(N0.hN,K1,5,a.o,15,1);f[0]=b;g[b]=1;e=0;h=0;while(e<=h){for(i=0;i<a.c[f[e]];i++){d=a.f[f[e]][i];if(d==c)return g[f[e]];if(g[d]==0){f[++h]=d;g[d]=g[f[e]]+1;}}++e;}return -1};S0.mn=function mn(a,b,c,d,e){var f,g,h,i,j,k;if(b==c)return 0;a.wb(1);i=OL(N0.hN,K1,5,a.o,15,1);h=OL(N0.hN,K1,5,a.o,15,1);h[0]=b;i[b]=1;g=0;j=0;while(g<=j&&i[h[g]]<=d){for(k=0;k<a.c[h[g]];k++){f=a.f[h[g]][k];if(f==c)return i[h[g]];if(i[f]==0&&(e==null||e.length<=f||!e[f])){h[++j]=f;i[f]=i[h[g]]+1;}}++g;}return -1};S0.nn=function nn(a,b){return a.c[b]-a.g[b]+S0.bn(a,b)};S0.on=function on(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;o=OL(N0.hN,K1,5,16,15,1);c=OL(N0.fN,O2,5,16,15,1);f=OL(N0.fN,O2,5,2,15,1);d=0;for(k=0;k<2;k++){e=a.B[k][b];for(l=0;l<a.g[e];l++){i=a.i[e][l];if(i==b)continue;if(d==4)return 0;h=a.f[e][l];o[d]=16;a.k[h]!=0&&(o[d]+=(a.s[h]&3072)!=0?1:4);if((a.C[b]&64)!=0&&(a.C[i]&64)!=0){m=S0.wq(a.n,b,i);m!=-1&&(o[d]+=S0.yq(a.n,m)?64:6);}c[d++]=S0.em(a.H[e].a,a.H[e].b,a.H[h].a,a.H[h].b);}}f[0]=S0.Tj(a,a.B[0][b],a.B[1][b]);if(f[0]<0){f[1]=f[0]+h2;g=false;}else {f[1]=f[0];f[0]=f[1]-h2;g=true;}n=0;for(j=0;j<d;j++){c[j]>f[0]&&c[j]<f[1]?(n-=o[j]):(n+=o[j]);}return g?-n:n};S0.pn=function pn(a){S0.Ls(a,7);return a.n};S0.qn=function qn(a){var b,c,d,e,f,g,h,i,j;j=0;S0.Ls(a,7);for(d=0;d<a.e;d++){if(S0.ak(a,d)==1&&(a.C[d]&64)==0){h=true;for(g=0;g<2;g++){b=a.B[g][d];if(a.g[b]==1){h=false;break}if(a.A[b]==7&&!(b<a.d&&S0.zq(a.n,b))){c=a.B[1-g][d];for(i=0;i<a.g[c];i++){e=a.f[c][i];f=a.i[c][i];if(f!=d&&S0.ak(a,f)>1&&!(e<a.d&&S0.zq(a.n,e))&&S0.Bk(a,e)){h=false;break}}}}h&&!S0.On(a,d)&&++j;}}return j};S0.rn=function rn(a,b,c){var d,e,f,g,h,i;e=0;for(f=0;f<a.g[b];f++){d=a.f[b][f];if(d!=c){g=0;for(h=0;h<a.g[d];h++){i=a.f[d][h];i!=b&&S0.Fn(a,a.i[d][h])&&a.g[i]>2&&++g;}g==2&&++e;}}return e};S0.sn=function sn(a,b){var c,d,e,f;c=a.c[b];f=OL(N0.hN,K1,5,c,15,1);for(e=0;e<c;e++)f[e]=(a.f[b][e]<<16)+e;R0.g0(f,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));for(d=0;d<c;d++)f[d]&=D1;return f};S0.tn=function tn(a,b){var c,d;S0.Ls(a,1);if(a.g[b]==2&&a.j[b][0]==2&&a.j[b][1]==2){for(c=0;c<2;c++)for(d=0;d<a.c[a.f[b][c]];d++)if(S0.Lk(a,a.i[a.f[b][c]][d],a.f[b][c]))return a.i[a.f[b][c]][d]}else {for(c=0;c<a.c[b];c++)if(S0.Lk(a,a.i[b][c],b))return a.i[b][c]}return -1};S0.un=function un(a,b,c){if(S0.ak(a,b)!=1)return 0;return 16-a.c[c]+((a.F[b]&384)==0||a.B[0][b]!=c?u3:0)+(a.A[c]==1?k2:0)+(a.c[c]==1?N2:0)+((a.s[c]&3)==0?p2:0)+((a.C[b]&64)!=0?0:512)+(a.A[c]!=6?256:0)};S0.vn=function vn(a,b,c,d,e,f){var g,h,i,j,k;S0.Ls(a,1);if(e){S0.gj(e);e.I=false;}i=OL(N0.hN,K1,5,a.o,15,1);d==null?(d=OL(N0.xQ,c2,5,a.o,16,1)):T0.wZ(d,d.length);i[0]=b;i[1]=c;d[b]=true;d[c]=true;h=1;j=1;while(h<=j){for(k=0;k<a.c[i[h]];k++){g=a.f[i[h]][k];if(g==b){if(h!=1)return -1}if(!d[g]){d[g]=true;i[++j]=g;}}++h;}if(e){f==null&&(f=OL(N0.hN,K1,5,d.length,15,1));S0.sm(a,e,d,false,f);S0.dj(e,f[b],0,0,-1,0);}d[b]=false;return j};S0.wn=function wn(a,b,c){var d,e,f,g,h,i;S0.Ls(a,1);f=OL(N0.hN,K1,5,a.d,15,1);i=OL(N0.xQ,c2,5,a.d,16,1);f[0]=b;f[1]=c;i[b]=true;i[c]=true;e=1;g=1;while(e<=g){for(h=0;h<a.g[f[e]];h++){d=a.f[f[e]][h];if(d==b){if(e!=1)return -1}if(!i[d]){i[d]=true;f[++g]=d;}}++e;}return g};S0.xn=function xn(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;if(S0.ak(a,c)!=2&&!(c<a.e&&S0.Aq(a.n,c)))return -1;n=a.C[c]&3;if(n!=1&&n!=2)return -1;for(i=0;i<2;i++){d=a.B[i][c];e=a.B[1-i][c];m=-1;g=false;for(k=0;k<a.g[d];k++){f=a.f[d][k];f!=e&&(f==b?(g=true):(m=f));}if(g){l=-1;h=-1;for(j=0;j<a.g[e];j++){f=a.f[e][j];if(f!=d){if(l==-1)l=f;else if(f>l)h=f;else {h=l;l=f;}}}if(a.g[d]==2){if(a.g[e]==2)return n==2?l:-1;return n==2?l:h}else {if(a.g[e]==2)return n==2^b<m?-1:l;return n==2^b<m?h:l}}}return -1};S0.yn=function yn(a){var b,c,d,e,f,g,h,i,j,k;g=S0.Am(a);i=a.o;do --i;while(i>=0&&g[i]);for(b=0;b<i;b++){if(g[b]){S0.Rl(a,b,i);k=g[b];g[b]=g[i];g[i]=k;do --i;while(g[i])}}a.d=i+1;if(a.o==a.d){a.e=a.p;return}h=OL(N0.xQ,c2,5,a.p,16,1);for(f=0;f<a.p;f++){c=a.B[0][f];d=a.B[1][f];(g[c]||g[d])&&(h[f]=true);}j=a.p;do --j;while(j>=0&&h[j]);for(e=0;e<j;e++){if(h[e]){S0.Sl(a,e,j);h[e]=false;do --j;while(h[j])}}a.e=j+1;};S0.zn=function zn(a,b){var c;for(c=0;c<a.g[b];c++)if(a.q[a.f[b][c]]<0)return true;return false};S0.An=function An(a,b){var c;for(c=0;c<a.g[b];c++)if(a.q[a.f[b][c]]>0)return true;return false};S0.Bn=function Bn(a,b){var c;c=a.A[b];return c==3||c==11||c==19||c==37||c==55};S0.Cn=function Cn(a,b){return (a.s[b]&k2)!=0};S0.Dn=function Dn(a,b){var c,d,e,f,g,h;S0.Ls(a,1);for(g=0;g<2;g++){c=a.B[g][b];if(a.A[c]==7){d=a.B[1-g][b];for(h=0;h<a.g[d];h++){e=a.f[d][h];f=a.i[d][h];if((a.A[e]==7||a.A[e]==8||a.A[e]==16)&&S0.ak(a,f)>=2)return true}}}return false};S0.En=function En(a,b){return b<a.d&&S0.zq(a.n,b)};S0.Fn=function Fn(a,b){return b<a.e&&S0.Aq(a.n,b)};S0.Gn=function Gn(a,b){var c,d,e,f,g,h;if(a.F[b]!=1||b<a.e&&S0.Aq(a.n,b)||(a.C[b]&64)!=0&&(!!a.n&&b<a.e?S0.qq(a.n,b):0)<7)return false;c=a.B[0][b];if(!(c<a.d&&S0.zq(a.n,c))||(!!a.n&&c<a.d?S0.oq(a.n,c):0)<5)return false;d=a.B[1][b];if(!(d<a.d&&S0.zq(a.n,d))||(!!a.n&&d<a.d?S0.oq(a.n,d):0)<5)return false;e=S0.hn(a,c,d);f=S0.hn(a,d,c);if((!!a.n&&c<a.d?S0.oq(a.n,c):0)>5&&(!!a.n&&d<a.d?S0.oq(a.n,d):0)>5)return e+f>2;g=S0.rn(a,c,d);h=S0.rn(a,d,c);if(e==2&&h>=1)return true;if(f==2&&g>=1)return true;if(g==2&&(f>=1||h>=1))return true;if(h==2&&(e>=1||g>=1))return true;return false};S0.Hn=function Hn(a,b){return a.k[b]==2&&a.g[b]==2&&a.j[b][0]==2&&a.j[b][1]==2&&a.A[b]<=7};S0.In=function In(a,b){var c;c=a.A[b];return c==8||c==16||c==34||c==52};S0.Jn=function Jn(a,b){return b<a.e&&(S0.Eq(a.n,b)||a.F[b]==64)};S0.Kn=function Kn(a,b){var c;c=a.A[b];return c==12||c==20||c==38||c==56};S0.Ln=function Ln(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;if(a.A[b]!=7||a.g[b]==4)return false;if(b<a.d&&S0.zq(a.n,b)||a.k[b]!=0||ZQ(EQ(a.w[b],L2),0))return true;if(a.q[b]==1)return false;for(i=0;i<a.g[b];i++)if(S0.Om(a,a.i[b][i])==3)return false;g=0;for(j=0;j<a.g[b];j++){if(a.j[b][j]==1){d=a.A[a.f[b][j]];(d==8||d==9||d==17)&&++g;}}if(g==0){for(h=0;h<a.g[b];h++){e=a.f[b][h];if(a.k[e]!=0){if(e<a.d&&S0.zq(a.n,e)){if((!!a.n&&e<a.d?S0.oq(a.n,e):0)>=5){p=0;for(m=0;m<a.g[e];m++){o=a.f[e][m];o!=b&&S0.fn(a,o)>=3&&++p;}n=S0.fn(a,b);if(p==2&&n>=2||p==1&&n==3)continue}return !c||!S0.Qn(a,b)}for(l=0;l<a.g[e];l++){if(a.j[e][l]==2||S0.Fn(a,a.i[e][l]))return !c||!S0.Qn(a,b)}}}}if(g<2){for(h=0;h<a.g[b];h++){e=a.f[b][h];k=false;f=false;for(l=0;l<a.g[e];l++){if(a.f[e][l]!=b){a.j[e][l]!=1&&(a.A[a.f[e][l]]==7||a.A[a.f[e][l]]==8||a.A[a.f[e][l]]==16)&&(k=true);a.j[e][l]==1&&a.A[a.f[e][l]]==7&&(f=true);}}if(k&&(!f||g==0))return !c||!S0.Qn(a,b)}}return false};S0.Mn=function Mn(a,b){var c;c=a.A[b];return c==9||c==17||c==35||c==53};S0.Nn=function Nn(a,b){var c;c=a.A[b];return c==7||c==15||c==33};S0.On=function On(a,b){var c,d,e,f,g,h;if(S0.ak(a,b)!=1)return false;for(f=0;f<2;f++){c=a.B[f][b];h=a.B[1-f][b];while(a.k[c]==2&&a.g[c]==2&&a.A[c]<10){for(g=0;g<2;g++){d=a.f[c][g];if(d!=h){if(a.g[d]==1)return true;e=a.i[c][g];if(S0.ak(a,e)==1&&e<b)return true;h=c;c=d;break}}}if(a.g[c]==1)return true}return false};S0.Pn=function Pn(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s;m=OL(N0.xQ,c2,5,a.e,16,1);m[e]=true;n=OL(N0.hN,K1,5,11,15,1);o=S0.jn(a,n,d,b,10,null,m);if(o==-1)return false;g=1;while(!S0.Bq(a.n,c,n[g]))++g;f=o-g;h=n[g];s=S0.vq(a.n,c);if(s==6&&f==2&&g==3){if(S0.Im(a,n[1])>=3){r=S0.sq(a.n,c);for(l=0;l<6;l++){if(b==r[l]){q=S0.Mq(a.n,c,h==r[S0.Mq(a.n,c,l+2)]?l-2:l+2);p=r[q];k=a.s[p]&3072;if((k==0?0:k==p2?2:k==N2?3:4)>=3&&S0.mn(a,n[1],p,2,null)==2)return true;break}}}}i=a.k[h]==1||h<a.d&&S0.zq(a.n,h)||S0.Ln(a,h,false);j=!i&&a.A[h]==7&&a.q[h]!=1;if(f==1&&!i&&!j&&s<=4&&g<=3)return true;switch(s){case 4:if(!i&&!j&&g<=4)return true;break;case 5:if(j){if(g<=3)return true}else if(!i){if(g<=4)return true}break;case 6:if(f==2){if(i){if(g<=4)return true}else if(!j){if(g<=3)return true}}else if(f==3){if(i){if(g<=6)return true}else {if(g<=4)return true}}break;case 7:if(f==3){if(g<=3)return true}}return false};S0.Qn=function Qn(a,b){var c,d,e,f,g;if(b<a.d&&S0.zq(a.n,b)||a.k[b]!=0||ZQ(EQ(a.w[b],L2),0)||(d=a.s[b]&3072,(d==0?0:d==p2?2:d==N2?3:4)<3))return false;g=!!a.n&&b<a.d?S0.oq(a.n,b):0;if(g>7)return false;f=0;while(f<a.n.i.a.length){if(S0.vq(a.n,f)==g&&S0.Bq(a.n,f,b))break;++f;}if(f>=p2&&f==a.n.i.a.length)return false;for(e=0;e<a.g[b];e++){c=a.i[b][e];if(!S0.Cq(a.n,f,c)&&S0.Pn(a,b,f,a.f[b][e],c))return true}return false};S0.Rn=function Rn(a,b){return (a.s[b]&3072)!=0};S0.Sn=function Sn(a,b){return (a.C[b]&64)!=0};S0.Tn=function Tn(a,b){return a.A[b]==1&&a.v[b]==0&&a.q[b]==0&&(a.r==null||a.r[b]==null)};S0.Un=function Un(a,b){return (a.s[b]&8)!=0};S0.Vn=function Vn(a,b){return (a.C[b]&128)!=0};S0.Wn=function Wn(a,b){return (a.s[b]&M2)!=0};S0.Xn=function Xn(a){var b,c,d,e,f,g,h,i,j,k,l;S0.Ls(a,1);S0.Yn(a);j=false;for(c=0;c<a.d;c++){if(a.A[c]==7&&a.q[c]==0){l=S0.gn(a,c);if(l==4){for(k=0;k<a.g[c];k++){h=a.f[c][k];if(a.j[c][k]==1&&a.A[h]==8&&a.g[h]==1&&a.q[h]==0){j=true;++a.q[c];--a.q[h];break}}}else if(l==5){for(k=0;k<a.g[c];k++){h=a.f[c][k];i=a.i[c][k];if(a.j[c][k]==2&&a.A[h]==8){j=true;++a.q[c];--a.q[h];a.F[i]=1;break}if(a.j[c][k]==3&&a.A[h]==7){j=true;++a.q[c];--a.q[h];a.F[i]=2;break}}}}}g=false;for(f=0;f<a.e;f++){for(k=0;k<2;k++){if(S0.Bk(a,a.B[k][f])){b=a.B[1-k][f];e=a.A[b];if(e==3||e==11||e==19||e==37||e==55||(d=a.A[b],d==12||d==20||d==38||d==56)){if(S0.ak(a,f)==1){++a.q[b];--a.q[a.B[k][f]];a.F[f]=512;g=true;}else if(a.F[f]==32){a.F[f]=512;g=true;}}break}}}if(g){S0.hj(a);j=true;}j&&(a.R=0);return j};S0.Yn=function Yn(a){var b;for(b=0;b<a.e;b++)if(a.F[b]==64)return S0.ae(new S0.ke(a),null,false);return false};
S0.Zn=function Zn(a,b,c){var d,e,f,g,h,i,j,k;j=-1;e=0;for(h=0;h<2;h++){d=a.f[b][h];for(i=0;i<a.c[d];i++){f=a.f[d][i];if(f!=b){g=a.i[d][i];k=S0.un(a,g,f);if(e<k&&(!c||!(a.F[g]==257||a.F[g]==129))){e=k;j=g;}}}}return j};S0.$n=function $n(a,b){var c,d,e,f,g,h,i,j;i=-1;d=0;for(g=0;g<2;g++){c=a.B[g][b];for(h=0;h<a.c[c];h++){e=a.f[c][h];if(e!=a.B[1-g][b]){f=a.i[c][h];j=S0.un(a,f,e);if(d<j){d=j;i=f;}}}}return i};S0._n=function _n(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;d=a.c[b];e=OL(N0.fN,O2,5,d,15,1);for(q=0;q<d;q++)e[q]=S0.Tj(a,b,a.f[b][q]);for(r=1;r<d;r++){for(u=0;u<r;u++){f=$wnd.Math.abs(S0.fm(e[r],e[u]));if(f<0.08||f>z3){g=0;h=0;for(v=0;v<d;v++){if(v!=r&&v!=u){g+=$wnd.Math.abs(_0.SI(e[r],e[v]));h+=$wnd.Math.abs(_0.SI(e[u],e[v]));}}j=g<h?a.i[b][r]:a.i[b][u];if(S0.ak(a,j)==1&&(!c||!(a.F[j]==257||a.F[j]==129)))return j}}}t=OL(N0.xQ,c2,5,d,16,1);for(s=0;s<d;s++){k=-10;l=10;for(u=0;u<d;u++){if(u!=s){o=_0.SI(e[s],e[u]);o<0?k<o&&(k=o):l>o&&(l=o);}t[s]=l-k<h2;}}w=-1;i=0;for(p=0;p<d;p++){m=a.f[b][p];n=a.i[b][p];A=S0.un(a,n,m);t[p]&&(A+=j2);if(i<A&&(!c||!(a.F[n]==257||a.F[n]==129))){i=A;w=n;}}return w};S0.ao=function ao(a,b){var c,d,e,f;S0.Ls(a,b?15:1);a.o=a.d;a.p=a.e;for(d=0;d<a.d;d++){if(a.c[d]!=a.g[d]){c=S0.an(a,d,false);a.c[d]=a.g[d];if(c!=-1){f=S0.an(a,d,true);if(c!=f){e=((a.s[d]&n3)>>>27)-1;(e==-1||e<c)&&S0._k(a,d,c);}}}}b&&S0.ho(a);a.R=0;};S0.bo=function bo(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;if(a.g[b]!=2||a.j[b][0]!=2||a.j[b][1]!=2||a.g[a.f[b][0]]<2||a.g[a.f[b][1]]<2||a.k[a.f[b][0]]!=1||a.k[a.f[b][1]]!=1){S0.ml(a,b,0,false);return}v=-1;u=-1;t=-1;q=-1;f=0;for(l=0;l<2;l++){d=a.f[b][l];for(o=0;o<a.c[d];o++){g=a.f[d][o];if(g!=b){h=a.i[d][o];w=S0.un(a,h,g);if(f<w){f=w;u=g;v=h;t=d;q=a.f[b][1-l];}}}}if(u==-1)return;for(m=0;m<2;m++){d=a.f[b][m];for(o=0;o<a.c[d];o++){g=a.f[d][o];h=a.i[d][o];g!=b&&a.B[0][h]==d&&(a.F[h]=1);}}if(a.B[1][v]!=u){a.B[0][v]=a.B[1][v];a.B[1][v]=u;}i=u1;for(n=0;n<a.g[t];n++){g=a.f[t][n];g!=b&&i>g&&(i=g);}r=OL(N0.hN,K1,5,2,15,1);s=0;for(k=0;k<a.g[q];k++){g=a.f[q][k];g!=b&&(r[s++]=g);}c=S0.em(a.H[b].a,a.H[b].b,a.H[q].a,a.H[q].b);e=0;if(s==2){if(r[0]>r[1]){A=r[0];r[0]=r[1];r[1]=A;}j=S0.fm(c,S0.Tj(a,q,r[0]));p=S0.fm(c,S0.Tj(a,q,r[1]));e=j-p;}else {e=S0.fm(c,S0.Tj(a,q,r[0]));}e<0^(a.s[b]&3)==1^i==u?(a.F[v]=257):(a.F[v]=129);};S0.co=function co(a,b,c,d){var e,f,g,h,i,j;e=a.c[b];h=OL(N0.hN,K1,5,e,15,1);j=S0.Wm(a,b,c,d,h);if(j==3)return false;g=(a.s[b]&3)==j?257:129;for(i=0;i<e;i++){if((h[i]&1)==1){f=a.i[b][c[i]];a.F[f]=g;if(a.B[0][f]!=b){a.B[1][f]=a.B[0][f];a.B[0][f]=b;}}}return true};S0.eo=function eo(a,b){a.R|=248&(8|b);};S0.fo=function fo(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;S0.rm(a,b);if((a.s[b]&3)==0||(a.s[b]&3)==3)return;if(a.k[b]==2&&a.g[b]==2){S0.bo(a,b);return}if(a.g[b]<3||a.g[b]>4){S0.ml(a,b,0,false);return}c=a.c[b];o=false;for(g=0;g<c;g++){if(S0.ak(a,a.i[b][g])==1){o=true;break}}if(!o)return;p=S0.sn(a,b);d=OL(N0.fN,O2,5,c,15,1);for(h=0;h<c;h++)d[h]=S0.Tj(a,a.f[b][p[h]],b);for(i=0;i<c;i++)a.B[0][a.i[b][i]]==b&&S0.ak(a,a.i[b][i])==1&&(a.F[a.i[b][i]]=1);if((!!a.n&&b<a.d?S0.oq(a.n,b):0)<=24&&S0.co(a,b,p,d))return;m=S0._n(a,b,true);if(a.B[0][m]!=b){a.B[1][m]=a.B[0][m];a.B[0][m]=b;}n=-1;for(j=0;j<c;j++){if(m==a.i[b][p[j]]){n=j;break}}q=WL(IL(N0.hN,2),a3,6,0,[WL(IL(N0.hN,1),K1,5,15,[2,1,2,1]),WL(IL(N0.hN,1),K1,5,15,[1,2,2,1]),WL(IL(N0.hN,1),K1,5,15,[1,1,2,2]),WL(IL(N0.hN,1),K1,5,15,[2,1,1,2]),WL(IL(N0.hN,1),K1,5,15,[2,2,1,1]),WL(IL(N0.hN,1),K1,5,15,[1,2,1,2])]);for(f=1;f<c;f++)d[f]<d[0]&&(d[f]+=g2);if(c==3){k=false;switch(n){case 0:k=d[1]<d[2]&&d[2]-d[1]<h2||d[1]>d[2]&&d[1]-d[2]>h2;break;case 1:k=d[2]-d[0]>h2;break;case 2:k=d[1]-d[0]<h2;}e=(a.s[b]&3)==1^k?257:129;}else {l=0;d[1]<=d[2]&&d[2]<=d[3]?(l=0):d[1]<=d[3]&&d[3]<=d[2]?(l=1):d[2]<=d[1]&&d[1]<=d[3]?(l=2):d[2]<=d[3]&&d[3]<=d[1]?(l=3):d[3]<=d[1]&&d[1]<=d[2]?(l=4):d[3]<=d[2]&&d[2]<=d[1]&&(l=5);e=(a.s[b]&3)==1^q[l][n]==1?129:257;}a.F[m]=e;};S0.go=function go(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;if((a.C[b]&3)==0||(a.C[b]&3)==3||!S0.Gn(a,b))return;v=-1;t=-1;u=-1;s=-1;e=0;for(l=0;l<2;l++){d=a.B[l][b];for(o=0;o<a.c[d];o++){h=a.i[d][o];if(h!=b&&S0.ak(a,h)==1){g=a.f[d][o];w=S0.un(a,h,g);if(e<w){e=w;t=g;v=h;u=d;s=a.B[1-l][b];}}}}if(t==-1)return;for(m=0;m<2;m++){for(o=0;o<a.c[a.B[m][b]];o++){h=a.i[a.B[m][b]][o];h!=b&&S0.ak(a,h)==1&&(a.F[h]=1);}}if(a.B[1][v]!=t){a.B[0][v]=a.B[1][v];a.B[1][v]=t;}i=u1;for(n=0;n<a.g[u];n++){g=a.f[u][n];a.i[u][n]!=b&&i>g&&(i=g);}q=OL(N0.hN,K1,5,2,15,1);r=0;for(k=0;k<a.g[s];k++)a.i[s][k]!=b&&(q[r++]=a.f[s][k]);f=S0.em(a.H[u].a,a.H[u].b,a.H[s].a,a.H[s].b);c=0;if(r==2){if(q[0]>q[1]){A=q[0];q[0]=q[1];q[1]=A;}j=S0.fm(f,S0.Tj(a,s,q[0]));p=S0.fm(f,S0.Tj(a,s,q[1]));c=j-p;}else {c=S0.fm(f,S0.Tj(a,s,q[0]));}c<0^(a.C[b]&3)==2^i==t?(a.F[v]=257):(a.F[v]=129);};S0.ho=function ho(a){var b,c,d,e;S0.Ls(a,7);for(d=0;d<a.e;d++)(a.F[d]==257||a.F[d]==129)&&(a.F[d]=1);for(b=0;b<a.d;b++)S0.fo(a,b);for(e=0;e<a.e;e++)S0.go(a,e);for(c=0;c<a.e;c++)a.F[c]==2&&(a.C[c]&3)==3&&(a.F[c]=386);};S0.io=function io(b,c){var d,e,f,g,h,i,j,k,l,m;i=OL(N0.hN,K1,5,b.o,15,1);h=S0.Ym(b,i,false,c);if(h<=1)return null;j=OL(N0.hN,K1,5,h,15,1);for(e=0;e<b.d;e++)++j[i[e]];l=0;m=j[0];for(k=1;k<h;k++){if(m<j[k]){m=j[k];l=k;}}for(d=0;d<b.o;d++)i[d]!=l&&(b.A[d]=-1);for(g=0;g<b.p;g++)(!c&&b.F[g]==32||i[b.B[0][g]]!=l)&&(b.F[g]=512);f=S0.hj(b);b.R=0;try{S0.pm(b,true,true);}catch(a){a=BQ(a);if(!VM(a,13))throw CQ(a)}return f};S0.jo=function jo(a,b){if((a.s[b]&n3)!=0)return true;if(a.A[b]==1)return false;return S0.Gk(a,b)||a.A[b]==13||a.A[b]>=171};S0.ko=function ko(a){var b,c,d,e,f,g,h,i,j,k;f=S0.Rj(a,a.o,a.p,S0.Qi);g=f*f/16;for(d=1;d<a.o;d++){for(e=0;e<d;e++){i=a.H[e].a-a.H[d].a;j=a.H[e].b-a.H[d].b;k=a.H[e].c-a.H[d].c;if(i*i+j*j+k*k<g)throw CQ(new O0.FJ('The distance between two atoms is too close.'))}}S0.Ls(a,1);b=0;for(c=0;c<a.d;c++){if(S0.gn(a,c)>(h=S0.jk(a,c),h+S0.hk(a,c,h)))throw CQ(new O0.FJ('atom valence exceeded'));b+=a.q[c];}if(b!=0)throw CQ(new O0.FJ('unbalanced atom charge'))};S0.lo=function lo(a,b,c){var d;d=S0.Ul(a,b,c);if(d&&c==386){S0.Ls(a,7);d=d&(a.C[b]&128)==0;}return d};S0.mo=function mo(){S0.Xl.call(this);};S0.no=function no(a,b){S0.Yl.call(this,a,b);};S0.oo=function oo(a){S0.Yl.call(this,!a?256:a.K,!a?256:a.L);!!a&&S0.lj(a,this);};sR(70,61,{70:1,61:1,4:1});_.wb=function po(a){S0.um(this,a);};_.vb=function qo(a){return S0.Jn(this,a)};_.d=0;_.e=0;N0.EN=LS(70);S0.ro=function ro(a,b){return $wnd.Math.pow(10,$wnd.Math.log(2000)*$wnd.Math.LOG10E*a/(b-1)-1)};S0.so=function so(a,b){var c,d;c=b;d=0;while(b!=0){if(a.d==0){a.f=(a.c[++a.e]&63)<<11;a.d=6;}d|=(C1&a.f)>>16-c+b;a.f<<=1;--b;--a.d;}return d};S0.to=function to(a,b,c){a.d=6;a.e=c;a.c=b;a.f=(b[a.e]&63)<<11;};S0.uo=function uo(a,b){var c,d,e,f;d=b/2|0;e=a>=d;e&&(a-=d);f=b/32|0;c=f*a/(d-a);return e?-c:c};S0.vo=function vo(a,b){var c;return b==null||R0.I0(b).length==0?null:S0.xo(a,R0.n0((c=b,R0.i0(),c)),null)};S0.wo=function wo(a,b,c){var d,e;return b==null?null:S0.xo(a,R0.n0((e=b,R0.i0(),e)),c==null?null:R0.n0((d=c,d)))};S0.xo=function xo(a,b,c){var d,e,f,g,h;S0.to(a,b,0);d=S0.so(a,4);g=S0.so(a,4);d>8&&(d=g);e=S0.so(a,d);f=S0.so(a,g);h=new S0.bt(e,f);S0.yo(a,h,b,c,0);return h};S0.yo=function yo(b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab,Bb,Cb,Db,Eb,Fb,Gb,Hb,Ib,Jb,Kb,Lb,Mb,Nb,Ob,Pb,Qb,Rb,Sb,Tb,Ub,Vb,Wb,Xb,Yb,Zb,$b,_b,ac,bc,cc,dc,ec,fc,gc,hc,ic,jc,kc,lc,mc,nc,oc,pc,qc,rc,sc,tc,uc,vc,wc,xc,yc,zc,Ac;S0.gj(c);if(0>=d.length)return;b.g=c;uc=8;e!=null&&(f<0||f>=e.length)&&(e=null);S0.to(b,d,0);i=S0.so(b,4);B=S0.so(b,4);if(i>8){uc=i;i=B;}if(i==0){S0.Gl(b.g,S0.so(b,1)==1);return}j=S0.so(b,i);k=S0.so(b,B);ic=S0.so(b,i);mc=S0.so(b,i);lc=S0.so(b,i);O=S0.so(b,i);for(o=0;o<j;o++)S0.Ti(b.g,6);for(kb=0;kb<ic;kb++)S0.ul(b.g,S0.so(b,i),7);for(lb=0;lb<mc;lb++)S0.ul(b.g,S0.so(b,i),8);for(wb=0;wb<lc;wb++)S0.ul(b.g,S0.so(b,i),S0.so(b,8));for(Hb=0;Hb<O;Hb++)S0.bl(b.g,S0.so(b,i),S0.so(b,4)-8);P=1+k-j;V=S0.so(b,4);A=0;S0.rl(b.g,0,0);S0.sl(b.g,0,0);S0.tl(b.g,0,0);W=e!=null&&e[f]>=39;tc=0;wc=0;yc=0;Ac=0;R=false;S=false;if(W){if(e.length>2*j-2&&e[2*j-2]==39||e.length>3*j-3&&e[3*j-3]==39){S=true;R=e.length==3*j-3+9;_b=R?3*j-3:2*j-2;w=86*(e[_b+1]-40)+e[_b+2]-40;tc=$wnd.Math.pow(10,w/2000-1);_b+=2;vc=86*(e[_b+1]-40)+e[_b+2]-40;wc=$wnd.Math.pow(10,vc/1500-1);_b+=2;xc=86*(e[_b+1]-40)+e[_b+2]-40;yc=$wnd.Math.pow(10,xc/1500-1);if(R){_b+=2;zc=86*(e[_b+1]-40)+e[_b+2]-40;Ac=$wnd.Math.pow(10,zc/1500-1);}}else {R=e.length==3*j-3;}}if(b.xb()&&R){e=null;W=false;}for(Sb=1;Sb<j;Sb++){X=S0.so(b,V);if(X==0){if(W){S0.rl(b.g,Sb,S0.Mj(b.g,0)+8*(e[Sb*2-2]-83));S0.sl(b.g,Sb,S0.Nj(b.g,0)+8*(e[Sb*2-1]-83));R&&S0.tl(b.g,Sb,S0.Oj(b.g,0)+8*(e[2*j-3+Sb]-83));}++P;continue}A+=X-1;if(W){S0.rl(b.g,Sb,S0.Mj(b.g,A)+e[Sb*2-2]-83);S0.sl(b.g,Sb,S0.Nj(b.g,A)+e[Sb*2-1]-83);R&&S0.tl(b.g,Sb,S0.Oj(b.g,A)+(e[2*j-3+Sb]-83));}S0.Vi(b.g,A,Sb,1);}for(Wb=0;Wb<P;Wb++)S0.Vi(b.g,S0.so(b,i),S0.so(b,i),1);ac=OL(N0.xQ,c2,5,k,16,1);for(I=0;I<k;I++){J=S0.so(b,2);switch(J){case 0:ac[I]=true;break;case 2:S0.El(b.g,I,2);break;case 3:S0.El(b.g,I,4);}}h=S0.so(b,i);for(Xb=0;Xb<h;Xb++){n=S0.so(b,i);if(uc==8){nc=S0.so(b,2);if(nc==3){S0.gl(b.g,n,1,0);S0.ml(b.g,n,1,false);}else {S0.ml(b.g,n,nc,false);}}else {nc=S0.so(b,3);switch(nc){case 4:S0.ml(b.g,n,1,false);S0.gl(b.g,n,1,S0.so(b,3));break;case 5:S0.ml(b.g,n,2,false);S0.gl(b.g,n,1,S0.so(b,3));break;case 6:S0.ml(b.g,n,1,false);S0.gl(b.g,n,2,S0.so(b,3));break;case 7:S0.ml(b.g,n,2,false);S0.gl(b.g,n,2,S0.so(b,3));break;default:S0.ml(b.g,n,nc,false);}}}uc==8&&S0.so(b,1)==0&&(b.g.J=true);g=S0.so(b,B);for(Yb=0;Yb<g;Yb++){D=S0.so(b,B);if(S0.dk(b.g,D)==1){nc=S0.so(b,3);switch(nc){case 4:S0.Bl(b.g,D,1,false);S0.yl(b.g,D,1,S0.so(b,3));break;case 5:S0.Bl(b.g,D,2,false);S0.yl(b.g,D,1,S0.so(b,3));break;case 6:S0.Bl(b.g,D,1,false);S0.yl(b.g,D,2,S0.so(b,3));break;case 7:S0.Bl(b.g,D,2,false);S0.yl(b.g,D,2,S0.so(b,3));break;default:S0.Bl(b.g,D,nc,false);}}else {S0.Bl(b.g,D,S0.so(b,2),false);}}S0.Gl(b.g,S0.so(b,1)==1);m=null;kc=0;while(S0.so(b,1)==1){U=kc+S0.so(b,4);switch(U){case 0:jc=S0.so(b,i);for(Zb=0;Zb<jc;Zb++){n=S0.so(b,i);S0.nl(b.g,n,N2,true);}break;case 1:jc=S0.so(b,i);for($b=0;$b<jc;$b++){n=S0.so(b,i);gc=S0.so(b,8);S0.ll(b.g,n,gc);}break;case 2:jc=S0.so(b,B);for(mb=0;mb<jc;mb++){S0.so(b,B);}break;case 3:jc=S0.so(b,i);for(nb=0;nb<jc;nb++){n=S0.so(b,i);S0.nl(b.g,n,k2,true);}break;case 4:jc=S0.so(b,i);for(ob=0;ob<jc;ob++){n=S0.so(b,i);rc=aR(QQ(S0.so(b,4)),3);S0.nl(b.g,n,rc,true);}break;case 5:jc=S0.so(b,i);for(pb=0;pb<jc;pb++){n=S0.so(b,i);l=aR(QQ(S0.so(b,2)),1);S0.nl(b.g,n,l,true);}break;case 6:jc=S0.so(b,i);for(qb=0;qb<jc;qb++){n=S0.so(b,i);S0.nl(b.g,n,1,true);}break;case 7:jc=S0.so(b,i);for(rb=0;rb<jc;rb++){n=S0.so(b,i);hb=aR(QQ(S0.so(b,4)),7);S0.nl(b.g,n,hb,true);}break;case 8:jc=S0.so(b,i);for(sb=0;sb<jc;sb++){n=S0.so(b,i);t=S0.so(b,4);r=OL(N0.hN,K1,5,t,15,1);for(bc=0;bc<t;bc++){s=S0.so(b,8);r[bc]=s;}S0.hl(b.g,n,r);}break;case 9:jc=S0.so(b,B);for(tb=0;tb<jc;tb++){D=S0.so(b,B);rc=S0.so(b,2)<<7;S0.Dl(b.g,D,rc,true);}break;case 10:jc=S0.so(b,B);for(ub=0;ub<jc;ub++){D=S0.so(b,B);L=S0.so(b,5);S0.Dl(b.g,D,L,true);}break;case 11:jc=S0.so(b,i);for(vb=0;vb<jc;vb++){n=S0.so(b,i);S0.nl(b.g,n,M2,true);}break;case 12:jc=S0.so(b,B);for(xb=0;xb<jc;xb++){D=S0.so(b,B);M=S0.so(b,8)<<9;S0.Dl(b.g,D,M,true);}break;case 13:jc=S0.so(b,i);for(yb=0;yb<jc;yb++){n=S0.so(b,i);oc=aR(QQ(S0.so(b,3)),14);S0.nl(b.g,n,oc,true);}break;case 14:jc=S0.so(b,i);for(zb=0;zb<jc;zb++){n=S0.so(b,i);hc=aR(QQ(S0.so(b,5)),17);S0.nl(b.g,n,hc,true);}break;case 15:case 31:kc+=16;break;case 16:jc=S0.so(b,i);for(Ab=0;Ab<jc;Ab++){n=S0.so(b,i);qc=aR(QQ(S0.so(b,3)),22);S0.nl(b.g,n,qc,true);}break;case 17:jc=S0.so(b,i);for(Bb=0;Bb<jc;Bb++){n=S0.so(b,i);S0._k(b.g,n,S0.so(b,4));}break;case 18:jc=S0.so(b,i);fc=S0.so(b,4);for(Cb=0;Cb<jc;Cb++){n=S0.so(b,i);T=S0.so(b,fc);cc=OL(N0.dN,d3,5,T,15,1);for(bc=0;bc<T;bc++)cc[bc]=S0.so(b,7)<<24>>24;S0.el(b.g,n,O0.vU(R0.l0(cc,0,(dc=cc.length,R0.i0(),dc))));}break;case 19:jc=S0.so(b,i);for(Db=0;Db<jc;Db++){n=S0.so(b,i);N=aR(QQ(S0.so(b,3)),25);S0.nl(b.g,n,N,true);}break;case 20:jc=S0.so(b,B);for(Eb=0;Eb<jc;Eb++){D=S0.so(b,B);qc=S0.so(b,3)<<17;S0.Dl(b.g,D,qc,true);}break;case 21:jc=S0.so(b,i);for(Fb=0;Fb<jc;Fb++){n=S0.so(b,i);S0.ol(b.g,n,S0.so(b,2)<<4);}break;case 22:jc=S0.so(b,i);for(Gb=0;Gb<jc;Gb++){n=S0.so(b,i);S0.nl(b.g,n,L2,true);}break;case 23:jc=S0.so(b,B);for(Ib=0;Ib<jc;Ib++){D=S0.so(b,B);S0.Dl(b.g,D,g3,true);}break;case 24:jc=S0.so(b,B);for(Jb=0;Jb<jc;Jb++){D=S0.so(b,B);l=S0.so(b,2)<<21;S0.Dl(b.g,D,l,true);}break;case 25:for(Kb=0;Kb<j;Kb++)S0.so(b,1)==1&&S0.pl(b.g,Kb,true);break;case 26:jc=S0.so(b,B);m=OL(N0.hN,K1,5,jc,15,1);for(Lb=0;Lb<jc;Lb++)m[Lb]=S0.so(b,B);break;case 27:jc=S0.so(b,i);for(Mb=0;Mb<jc;Mb++){n=S0.so(b,i);S0.nl(b.g,n,d2,true);}break;case 28:jc=S0.so(b,B);for(Nb=0;Nb<jc;Nb++)S0.El(b.g,S0.so(b,B),32);break;case 29:jc=S0.so(b,i);for(Ob=0;Ob<jc;Ob++){n=S0.so(b,i);gb=aR(QQ(S0.so(b,2)),30);S0.nl(b.g,n,gb,true);}break;case 30:jc=S0.so(b,i);for(Pb=0;Pb<jc;Pb++){n=S0.so(b,i);qc=aR(QQ(S0.so(b,7)),32);S0.nl(b.g,n,qc,true);}break;case 32:jc=S0.so(b,i);for(Qb=0;Qb<jc;Qb++){n=S0.so(b,i);sc=aR(QQ(S0.so(b,2)),44);S0.nl(b.g,n,sc,true);}break;case 33:jc=S0.so(b,i);for(Rb=0;Rb<jc;Rb++){n=S0.so(b,i);bb=aR(QQ(S0.so(b,5)),39);S0.nl(b.g,n,bb,true);}break;case 34:jc=S0.so(b,i);for(Tb=0;Tb<jc;Tb++){n=S0.so(b,i);S0.nl(b.g,n,n2,true);}break;case 35:jc=S0.so(b,B);for(Ub=0;Ub<jc;Ub++){D=S0.so(b,B);S0.Dl(b.g,D,j3,true);}break;case 36:jc=S0.so(b,B);for(Vb=0;Vb<jc;Vb++){D=S0.so(b,B);K=S0.so(b,2)<<5;S0.Dl(b.g,D,K,true);}break;case 37:jc=S0.so(b,B);for(jb=0;jb<jc;jb++){D=S0.so(b,B);K=S0.so(b,1)==0?8:16;S0.El(b.g,D,K);}}}S0.ae(new S0.ke(b.g),ac,false);if(m!=null)for(F=m,G=0,H=F.length;G<H;++G){D=F[G];S0.El(b.g,D,S0.dk(b.g,D)==2?4:2);}if(e==null&&!b.i&&d.length>b.e+1&&(d[b.e+1]==32||d[b.e+1]==9)){e=d;f=b.e+2;}if(e!=null){try{if(e[f]==33||e[f]==35){S0.to(b,e,f+1);R=S0.so(b,1)==1;S=S0.so(b,1)==1;pc=2*S0.so(b,4);C=1<<pc;eb=0;D=0;for(p=1;p<j;p++){if(D<k&&S0.Uj(b.g,1,D)==p){eb=S0.Uj(b.g,0,D++);db=1;}else {eb=0;db=8;}S0.rl(b.g,p,S0.Mj(b.g,eb)+db*(S0.so(b,pc)-(C/2|0)));S0.sl(b.g,p,S0.Nj(b.g,eb)+db*(S0.so(b,pc)-(C/2|0)));R&&S0.tl(b.g,p,S0.Oj(b.g,eb)+db*(S0.so(b,pc)-(C/2|0)));}if(e[f]==35){ib=0;fb=OL(N0.hN,K1,5,j,15,1);for(q=0;q<j;q++)ib+=fb[q]=S0.bn(b.g,q);for(n=0;n<j;n++){for(jb=0;jb<fb[n];jb++){hb=S0.Ti(b.g,1);S0.Vi(b.g,n,hb,1);S0.rl(b.g,hb,S0.Mj(b.g,n)+(S0.so(b,pc)-(C/2|0)));S0.sl(b.g,hb,S0.Nj(b.g,n)+(S0.so(b,pc)-(C/2|0)));R&&S0.tl(b.g,hb,S0.Oj(b.g,n)+(S0.so(b,pc)-(C/2|0)));}}j+=ib;k+=ib;}v=R?1.5:(S0.Ri(),S0.Ri(),S0.Qi);u=S0.Rj(b.g,j,k,v);if(S){tc=S0.ro(S0.so(b,pc),C);wc=tc*S0.uo(S0.so(b,pc),C);yc=tc*S0.uo(S0.so(b,pc),C);R&&(Ac=tc*S0.uo(S0.so(b,pc),C));db=tc/u;for(n=0;n<j;n++){S0.rl(b.g,n,wc+db*S0.Mj(b.g,n));S0.sl(b.g,n,yc+db*S0.Nj(b.g,n));R&&S0.tl(b.g,n,Ac+db*S0.Oj(b.g,n));}}else {tc=1.5;db=tc/u;for(n=0;n<j;n++){S0.rl(b.g,n,db*S0.Mj(b.g,n));S0.sl(b.g,n,db*S0.Nj(b.g,n));R&&S0.tl(b.g,n,db*S0.Oj(b.g,n));}}}else {R&&!S&&tc==0&&(tc=1.5);if(tc!=0&&b.g.p!=0){u=0;for(D=0;D<b.g.p;D++){Y=S0.Mj(b.g,S0.Uj(b.g,0,D))-S0.Mj(b.g,S0.Uj(b.g,1,D));Z=S0.Nj(b.g,S0.Uj(b.g,0,D))-S0.Nj(b.g,S0.Uj(b.g,1,D));$=R?S0.Oj(b.g,S0.Uj(b.g,0,D))-S0.Oj(b.g,S0.Uj(b.g,1,D)):0;u+=$wnd.Math.sqrt(Y*Y+Z*Z+$*$);}u/=b.g.p;cb=tc/u;for(n=0;n<b.g.o;n++){S0.rl(b.g,n,S0.Mj(b.g,n)*cb+wc);S0.sl(b.g,n,S0.Nj(b.g,n)*cb+yc);R&&S0.tl(b.g,n,S0.Oj(b.g,n)*cb+Ac);}}}}catch(a){a=BQ(a);if(VM(a,13)){ab=a;O0.nJ(ab,(O0.PU(),O0.OU),'');'Faulty id-coordinates:'+O0.rJ(ab,ab.Kb())+' '+O0.vU(R0.l0(d,0,(ec=d.length,R0.i0(),ec)))+' '+O0.vU(R0.l0(e,0,(dc=e.length,dc)));e=null;R=false;}else throw CQ(a)}}Q=e!=null&&!R;if(Q||b.xb()){S0.Ls(b.g,7);for(D=0;D<b.g.e;D++)S0.ak(b.g,D)==2&&!S0.Vn(b.g,D)&&S0.bk(b.g,D)==0&&S0.Cl(b.g,D);}S0.eo(b.g,0);if(!Q&&b.xb()){try{b.yb(b.g);Q=true;}catch(a){a=BQ(a);if(VM(a,13)){ab=a;O0.nJ(ab,(O0.PU(),O0.OU),'');'2D-coordinate creation failed:'+O0.rJ(ab,ab.Kb())+' '+O0.vU(R0.l0(d,0,(dc=d.length,R0.i0(),dc)));}else throw CQ(a)}}if(Q){S0.ho(b.g);S0.Ys(b.g);}else R||S0.eo(b.g,0);};S0.zo=function zo(a,b){var c,d,e,f,g,h;if(b.length<=0||b[0]<64)return;S0.to(a,b,0);h=S0.so(a,4);e=S0.so(a,1)==1;f=S0.so(a,1)==1;for(c=0;c<a.g.d;c++){g=S0.so(a,h);d=e;e&&f&&(d=S0.so(a,1)==1);S0.jl(a.g,c,g,d);}};S0.Ao=function Ao(){};sR(157,1,{},S0.Ao);_.xb=function Bo(){return false};_.yb=function Co(a){throw CQ(new O0.FJ('Unexpected request to invent coordinates. Check source code logic!'))};_.d=0;_.e=0;_.f=0;_.i=false;N0.FN=LS(157);S0.Do=function Do(a){};S0.Eo=function Eo(a){S0.Do(this);this.b=a;};sR(51,157,{},S0.Eo);_.xb=function Fo(){return this.b};_.yb=function Go(a){var b;b=new V0.Hu(this.a);b.g=new T0.j$(78187493520);V0.ou(b,a);};_.a=2;_.b=false;N0.GN=LS(51);S0.Ho=function Ho(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r;e=b.a;n=b.g;j=ZQ(EQ(S0.Kj(a.k,e),1),0);f=S0.Fj(a.k,e);l=f!=null?S0.Oo(a,e,f,d):j?'*':S0.Ej(a.k,e);!j&&f==null&&S0.En(a.k,e)&&(a.j&4)==0&&(S0.Gm(a.k,e)!=0||S0.wj(a.k,e)==-1&&S0.Lj(a.k,e)==0)&&(l=R0.I0(l).toLowerCase());b.f&&(c.a+='(',c);n!=-1&&S0.Lo(a,S0.Nm(a.k,b.a,b.g),b.g,c);g=S0.yj(a.k,e);if(g==0&&(a.j&1)!=0){h=EQ(S0.Kj(a.k,e),q2);JQ(h,t2)==0?(g=-1):JQ(h,s2)==0&&(g=1);}k=S0.Ij(a.k,e);m=(a.j&2)!=0?S0.Hj(a.k,e):0;o=(a.j&1)!=0?S0.Uo(a,e,d):null;r=!j&&!S0._o(S0.Pj(a.k,e))||f!=null||(S0.Jj(a.k,e)==1||S0.Jj(a.k,e)==2)&&(q=S0.Dj(a.k,e)-1,!(q!=-1&&a.i[q][S0.Cj(a.k,e)]<=1))&&(S0.Pj(a.k,e)!=7||S0.yj(a.k,e)>0)||S0.En(a.k,e)&&S0.Gm(a.k,e)==0&&(a.j&4)==0||g!=0||k!=0||m!=0||S0.wj(a.k,e)!=-1||S0.Lj(a.k,e)!=0||o!=null;r&&(c.a+='[',c);k!=0&&(c.a+=k,c);c.a+=''+l;(S0.Jj(a.k,e)==1||S0.Jj(a.k,e)==2)&&(p=S0.Dj(a.k,e)-1,!(p!=-1&&a.i[p][S0.Cj(a.k,e)]<=1))&&(S0.Pj(a.k,e)!=7||S0.yj(a.k,e)>0)&&O0.HU(c,S0.To(a,e,n));if((a.j&1)==0&&r){i=S0.nn(a.k,e);i==1?(c.a+='H',c):i>1&&(c.a+='H'+i,c);}if(g!=0){c.a+=String.fromCharCode(g>0?43:45);$wnd.Math.abs(g)>1&&O0.EU(c,$wnd.Math.abs(g));}o!=null&&(c.a+=''+o,c);if(m!=0){c.a+=':';c.a+=m;}r&&(c.a+=']',c);S0.Mo(a,b,c);b.e&&(c.a+=')',c);};S0.Io=function Io(a,b,c){var d,e,f,g,h;f=true;h=T0.Yh(a.g,b).a;g=S0.Xo(a,h);while(g!=-1){d=S0.Pm(a.k,h,g);e=S0.Rm(a.k,h,g);g=S0.Xo(a,d);S0.Ko(a,new S0._r(d,e,h,c&&f,c&&g==-1),++b);h=d;f=false;}};S0.Jo=function Jo(a,b,c){var d,e,f,g;for(e=b,f=0,g=e.length;f<g;++f){d=e[f];a.f[d&1073741823]=(d&A3)!=0^c?2:1;}};S0.Ko=function Ko(a,b,c){T0.Sh(a.g,c,b);a.b[b.a]=true;b.g!=-1&&(a.c[S0.Nm(a.k,b.a,b.g)]=true);};S0.Lo=function Lo(a,b,c,d){var e,f,g,h,i;i=R0.I0(d.a).length;a.f[b]!=0&&O0.DU(d,a.f[b]==1?47:92);if(a.j==1){f=S0.ck(a.k,127);if(f!=0){(f&1)!=0&&a.f[b]==0&&(d.a+='-',d);if((f&2)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);d.a+='=';}if((f&4)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);d.a+='#';}if((f&8)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);d.a+='$';}if((f&16)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);d.a+='$';}if((f&64)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);d.a+=':';}if((f&32)!=0){R0.I0(d.a).length!=i&&(d.a+=',',d);O0.HU(d,S0.Ek(a.k,c)?'<-':'->');}}}if(i==R0.I0(d.a).length&&(!S0.Fn(a.k,b)||(a.j&4)!=0)){e=S0.dk(a.k,b)&127;e==1?S0.En(a.k,S0.Uj(a.k,0,b))&&S0.En(a.k,S0.Uj(a.k,1,b))&&(a.j&4)==0&&a.f[b]==0&&(d.a+='-',d):e==2?(d.a+='=',d):e==4?(d.a+='#',d):e==8?(d.a+='$',d):e==16?(d.a+='$',d):e==64?(d.a+=':',d):e==32&&O0.HU(d,S0.Ek(a.k,c)?'<-':'->');}if(a.j==1){g=i==R0.I0(d.a).length?'':';';h=S0.ck(a.k,b)&384;h==256?(d.a+=g+'@',d):h==128&&(d.a+=g+'!@',d);}};S0.Mo=function Mo(a,b,c){var d,e,f;if(b.c!=null){for(e=0;e<b.c.length;e++){for(f=0;f<S0.Qm(a.k,b.a);f++){if(b.c[e]==S0.Pm(a.k,b.a,f)){d=S0.Rm(a.k,b.a,f);b.d[e]||S0.Lo(a,d,b.a,c);a.e[d]>9&&(c.a+='%',c);O0.EU(c,a.e[d]);}}}}};S0.No=function No(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O;M=new T0.ki;for(r=new T0.iZ(a.g);r.a<r.c.a.length;){q=T0.hZ(r);if(q.g!=-1){t=S0.Nm(a.k,q.a,q.g);if(!S0.Gn(a.k,t)&&!S0.Vn(a.k,t)&&(S0.bk(a.k,t)==1||S0.bk(a.k,t)==2)){K=T0.Yh(a.g,a.q[q.g]);c=OL(N0.hN,K1,5,S0.Qm(a.k,q.a)+S0.Qm(a.k,K.a)-2,15,1);B=0;L=false;if(K.g!=-1){c[B++]=K.b;}else {u=-1;N=-1;v=u1;for(D=0;D<S0.Qm(a.k,K.a);D++){l=S0.Pm(a.k,K.a,D);if(l!=q.a){if(u==-1){u=D;v=a.q[l];}else {if(v<a.q[l]){N=D;}else {N=u;u=D;}}}}if(N==-1){H=S0.Pm(a.k,K.a,u);I=S0.Rm(a.k,K.a,u);c[B++]=I|(S0.Zo(a,K.a,H)?A3:0);}else {m=S0.Pm(a.k,K.a,u);o=S0.Rm(a.k,K.a,u);n=S0.Pm(a.k,K.a,N);p=S0.Rm(a.k,K.a,N);c[B++]=o|(S0.Zo(a,K.a,m)?A3:0);c[B++]=p|(S0.Zo(a,K.a,n)?0:A3);}}if(S0.Qm(a.k,K.a)==3&&K.g!=-1){for(D=0;D<S0.Qm(a.k,K.a);D++){l=S0.Pm(a.k,K.a,D);if(l!=K.g&&l!=q.a){d=S0.Rm(a.k,K.a,D);c[B++]=d|(S0.Zo(a,K.a,l)?A3:0);l<K.g&&(L=!L);break}}}S0.bk(a.k,t)==2&&(L=!L);for(C=0;C<S0.Qm(a.k,q.a);C++){i=S0.Pm(a.k,q.a,C);if(i!=q.g){A=L;if(S0.Qm(a.k,q.a)==3){for(G=0;G<S0.Qm(a.k,q.a);G++){l=S0.Pm(a.k,q.a,G);if(l!=q.g&&l!=i){l<i&&(A=!A);break}}}if(S0.zk(a.k,t)){w=S0.vf(a.d,t);if(!a.n[w]){a.n[w]=true;a.o[w]=A;}a.o[w]&&(A=!A);}j=S0.Nm(a.k,q.a,i);c[B++]=j|(A^S0.Zo(a,q.a,i)?0:A3);}}R0.e0(M.a,c);}}}a.f=OL(N0.hN,K1,5,a.k.e,15,1);M.a.length!=0&&S0.Jo(a,T0.ci(M,0),false);while(M.a.length!=0){O=M.a.length;for(C=M.a.length-1;C>=0;C--){c=(R0.y0(C,M.a.length),M.a[C]);J=0;F=false;k=false;for(f=c,g=0,h=f.length;g<h;++g){e=f[g];b=e&1073741823;if(a.f[b]!=0){s=(e&A3)!=0^a.f[b]==2;J==0?(F=s):F!=s&&(k=true);++J;}}if(J!=0){c=T0.ci(M,C);k||S0.Jo(a,c,F);}}O==M.a.length&&S0.Jo(a,T0.ci(M,0),false);}};S0.Oo=function Oo(a,b,c,d){var e,f,g,h,i,j,k;k=R0.I0(d.a).length;0<k?(d.a=O0.qU(d.a,0,0)):0>k&&(d.a+=O0.vU(OL(N0.eN,c3,5,-k,15,1)));i=S0.En(a.k,b)&&(a.j&4)==0;for(f=c,g=0,h=f.length;g<h;++g){e=f[g];R0.I0(d.a).length!=0&&(d.a+=',',d);j=(S0.Ri(),S0.Li)[e];O0.HU(d,i?R0.I0(j).toLowerCase():j);}return d.a};S0.Po=function Po(a){var b,c,d,e,f,g,h,i;if(!a.k||a.k.o==0)return '';S0.Ls(a.k,15);a.d=new S0.Pf(a.k,129);e=a.d.R;a.o=OL(N0.xQ,c2,5,e+1,16,1);a.n=OL(N0.xQ,c2,5,e+1,16,1);a.i=ML(N0.hN,[a3,K1],[6,5],15,[2,32],2);for(b=0;b<a.k.d;b++){i=S0.Dj(a.k,b)-1;i!=-1&&++a.i[i][S0.Cj(a.k,b)];}S0.So(a);S0.Qo(a);S0.No(a);d=new O0.KU;c=new O0.KU;f=true;for(h=new T0.iZ(a.g);h.a<h.c.a.length;){g=T0.hZ(h);g.g==-1&&(f?(f=false):(d.a+='.',d));S0.Ho(a,g,d,c);}return d.a};S0.Qo=function Qo(a){var b,c,d,e,f,g,h,i,j,k,l;for(l=new T0.iZ(a.g);l.a<l.c.a.length;){j=T0.hZ(l);c=0;for(f=0;f<S0.Qm(a.k,j.a);f++)a.c[S0.Rm(a.k,j.a,f)]||++c;if(c!=0){j.c=OL(N0.hN,K1,5,c,15,1);c=0;for(g=0;g<S0.Qm(a.k,j.a);g++){if(!a.c[S0.Rm(a.k,j.a,g)]){i=S0.Pm(a.k,j.a,g);j.c[c++]=a.q[i]<<16|i;}}R0.g0(j.c,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));for(e=0;e<j.c.length;e++)j.c[e]=D1&j.c[e];}}d=OL(N0.xQ,c2,5,a.k.e,16,1);a.e=OL(N0.hN,K1,5,a.k.e,15,1);for(k=new T0.iZ(a.g);k.a<k.c.a.length;){j=T0.hZ(k);if(j.c!=null){j.d=OL(N0.xQ,c2,5,j.c.length,16,1);for(e=0;e<j.c.length;e++){for(h=0;h<S0.Qm(a.k,j.a);h++){if(j.c[e]==S0.Pm(a.k,j.a,h)){b=S0.Rm(a.k,j.a,h);if(a.c[b]){d[a.e[b]]=false;}else {a.c[b]=true;j.d[e]=true;a.e[b]=1;while(d[a.e[b]])++a.e[b];d[a.e[b]]=true;}}}}}}};S0.Ro=function Ro(a){var b,c,d,e;d=-1;e=u1;for(b=0;b<a.k.d;b++){if(!a.b[b]){c=a.a[b];ZQ(EQ(S0.Kj(a.k,b),d2),0)&&(c+=A3);S0.Qm(a.k,b)==0?(c+=1056964608):(c+=S0.Qm(a.k,b)<<24);if(e>c){e=c;d=b;}}}return d};S0.So=function So(a){var b,c,d,e,f;a.a=a.d.d;a.b=OL(N0.xQ,c2,5,a.k.d,16,1);a.c=OL(N0.xQ,c2,5,a.k.e,16,1);a.g=new T0.ki;b=S0.Ro(a);while(b!=-1){c=a.g.a.length;S0.Ko(a,new S0._r(b,-1,-1,false,false),c);if(S0.Qm(a.k,b)!=0){S0.Io(a,c,false);while(c<a.g.a.length-1){while(S0.Yo(a,T0.Yh(a.g,c).a))S0.Io(a,c,true);++c;}}b=S0.Ro(a);}a.q=OL(N0.hN,K1,5,a.k.d,15,1);d=0;for(f=new T0.iZ(a.g);f.a<f.c.a.length;){e=T0.hZ(f);a.q[e.a]=d++;}};S0.To=function To(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;h=false;if(S0.Gm(a.k,b)!=0&&S0.Qm(a.k,b)==2&&S0.Sm(a.k,b,0)==2&&S0.Sm(a.k,b,1)==2){for(f=0;f<S0.Qm(a.k,b);f++){d=S0.Pm(a.k,b,f);n=0;m=OL(N0.hN,K1,5,3,15,1);for(j=0;j<S0.Qm(a.k,d);j++){m[n]=S0.Pm(a.k,d,j);m[n]!=b&&++n;}n==2&&a.q[m[0]]<a.q[m[1]]^m[0]<m[1]&&(h=!h);}}else {k=OL(N0.hN,K1,5,4,15,1);l=OL(N0.hN,K1,5,4,15,1);g=0;if(c!=-1){k[g]=c;l[g++]=8*a.q[c];}if(S0.bn(a.k,b)!=0){k[g]=u1;l[g++]=8*a.q[b];}else if(S0.Qm(a.k,b)==3){k[g]=u1;l[g++]=8*a.q[b];}for(f=0;f<S0.Qm(a.k,b);f++){d=S0.Pm(a.k,b,f);if(d!=c){k[g]=d;l[g++]=S0.Wo(a,b,f);}}h=S0.$o(k,l);}i=S0.Jj(a.k,b)==1^h;if(S0.sk(a.k,b)){e=S0.wf(a.d,b);if(!a.n[e]){a.n[e]=true;a.o[e]=i;}a.o[e]&&(i=!i);}return i?'@@':'@'};S0.Uo=function Uo(a,b,c){var d,e,f,g,h,i,j,k;h=R0.I0(c.a).length;0<h?(c.a=O0.qU(c.a,0,0)):0>h&&(c.a+=O0.vU(OL(N0.eN,c3,5,-h,15,1)));i=S0.Kj(a.k,b);e=gR(bR(EQ(i,q2),3));switch(e){case 20971520:c.a+='+0';break;case 25165824:S0.yj(a.k,b)==0&&(c.a+='-',c);break;case 12582912:S0.yj(a.k,b)==0&&(c.a+='+',c);}d=EQ(i,f3);JQ(d,2)==0?(c.a+=';a',c):JQ(d,4)==0&&(c.a+=';A',c);f=EQ(i,o2);JQ(f,0)!=0&&(JQ(f,1792)==0?(c.a+=';H0',c):JQ(f,1664)==0?(c.a+=';H1',c):JQ(f,1408)==0?(c.a+=';H2',c):JQ(f,896)==0?(c.a+=';H3',c):JQ(f,128)==0?(c.a+=';!H0',c):JQ(f,384)==0?(c.a+=';!H0;!H1',c):JQ(f,1536)==0?(c.a+=';!H2;!H3',c):JQ(f,p2)==0&&(c.a+=';!H3',c));k=EQ(i,120);JQ(k,8)==0?(c.a+=';!R0',c):JQ(k,16)==0?(c.a+=';!R1',c):JQ(k,32)==0?(c.a+=';!R2',c):JQ(k,64)==0?(c.a+=';!R3',c):JQ(k,112)==0?(c.a+=';R0',c):JQ(k,104)==0?(c.a+=';R1',c):JQ(k,88)==0?(c.a+=';R2',c):JQ(k,56)==0&&(c.a+=';R3',c);j=EQ(i,O1);if(JQ(j,P1)==0)c.a+=';!r'+hR(j);else if(JQ(j,B3)==0)c.a+=';r'+hR(j);else if(JQ(j,0)!=0){if(ZQ(EQ(j,V1),0)){OQ(EQ(j,P1),0)&&(c.a+=';!r0'+hR(j),c);OQ(EQ(j,Q1),0)&&(c.a+=';!r3'+hR(j),c);OQ(EQ(j,R1),0)&&(c.a+=';!r4'+hR(j),c);OQ(EQ(j,S1),0)&&(c.a+=';!r5'+hR(j),c);OQ(EQ(j,T1),0)&&(c.a+=';!r6'+hR(j),c);OQ(EQ(j,U1),0)&&(c.a+=';!r7'+hR(j),c);}else {c.a+=';';ZQ(EQ(j,P1),0)&&(c.a+='r0,'+hR(j),c);ZQ(EQ(j,Q1),0)&&(c.a+='r3,'+hR(j),c);ZQ(EQ(j,R1),0)&&(c.a+='r4,'+hR(j),c);ZQ(EQ(j,S1),0)&&(c.a+='r5,'+hR(j),c);ZQ(EQ(j,T1),0)&&(c.a+='r6,'+hR(j),c);ZQ(EQ(j,U1),0)&&(c.a+='r7,'+hR(j),c);O0._R(c,R0.I0(c.a).length-1);}}if(JQ(j,0)==0){j=bR(EQ(i,K2),22);JQ(j,0)!=0&&(c.a+=';r'+hR(j),c);}g=EQ(i,v2);JQ(g,3801088)==0&&(c.a+=';D1',c);JQ(g,3538944)==0&&(c.a+=';D2',c);JQ(g,3014656)==0&&(c.a+=';D3',c);JQ(g,3145728)==0&&(c.a+=';!D3;!D4',c);JQ(g,w2)==0&&(c.a+=';!D4',c);JQ(g,x2)==0&&(c.a+=';!D0;!D1',c);JQ(g,y2)==0&&(c.a+=';!D0;!D1;!D2',c);JQ(g,z2)==0&&(c.a+=';!D0;!D1;!D2;!D3',c);ZQ(EQ(i,N2),0)&&O0.HU(c,';D'+S0.Qm(a.k,b));ZQ(EQ(i,k2),0)&&O0.HU(c,';!D'+S0.Qm(a.k,b));return R0.I0(c.a).length==0?null:c.a};S0.Vo=function Vo(a){a.p==null&&(a.p=S0.Po(a));return a.p};S0.Wo=function Wo(a,b,c){var d,e,f,g,h;d=S0.Rm(a.k,b,c);g=S0.Pm(a.k,b,c);if(a.e[d]!=0){h=8*a.q[b]+1;e=T0.Yh(a.g,a.q[b]).c;for(f=0;f<e.length&&g!=e[f];f++)++h;return h}return 8*a.q[g]};S0.Xo=function Xo(a,b){var c,d,e,f,g;c=-1;d=-1;for(f=0;f<S0.Qm(a.k,b);f++){e=S0.Pm(a.k,b,f);g=(S0.Sm(a.k,b,f)<<24)+a.a[e];if(!a.b[e]&&(c==-1||d<g)){c=f;d=g;}}return c};S0.Yo=function Yo(a,b){var c;for(c=0;c<S0.Qm(a.k,b);c++)if(!a.b[S0.Pm(a.k,b,c)])return true;return false};S0.Zo=function Zo(a,b,c){var d,e;d=T0.Yh(a.g,a.q[b]);if(d.g==c)return false;e=T0.Yh(a.g,a.q[c]);if(e.g==b)return true;return S0.$r(e,b)};S0.$o=function $o(a,b){var c,d,e;d=false;for(c=1;c<4;c++){for(e=0;e<c;e++){a[e]>a[c]&&(d=!d);b[e]>b[c]&&(d=!d);}}return d};S0._o=function _o(a){return a>=5&&a<=9||a>=15&&a<=17||a==35||a==53};S0.ap=function ap(a){S0.cp.call(this,a,false);};S0.bp=function bp(a,b){this.k=a;this.j=b;};S0.cp=function cp(a,b){S0.bp.call(this,a,b?2:0);};S0.dp=function dp(a){var b,c,d,e;e=new O0.KU;for(c=0;c<a.g.a.length;c++){c!=0&&(e.a+='.',e);O0.HU(e,S0.Vo(new S0.bp(T0.Yh(a.g,c),2)));}e.a+='>';for(d=0;d<a.a.a.length;d++){d!=0&&(e.a+='.',e);O0.HU(e,S0.Vo(new S0.ap(T0.Yh(a.a,d))));}e.a+='>';for(b=0;b<a.f.a.length;b++){b!=0&&(e.a+='.',e);O0.HU(e,S0.Vo(new S0.bp(T0.Yh(a.f,b),2)));}return e.a};sR(60,1,{},S0.ap,S0.bp,S0.cp);_.j=0;N0.HN=LS(60);S0.ep=function ep(a,b){this.b=a;this.a=b;};sR(3,1,{3:1},S0.ep);_.a=0;_.b=0;N0.IN=LS(3);
S0.gp=function gp(){S0.gp=uR;S0.fp=WL(IL(N0.IN,2),p1,9,0,[null,WL(IL(N0.IN,1),C3,3,0,[new S0.ep(0,1.007825032),new S0.ep(1,2.014101778),new S0.ep(2,3.016049268),new S0.ep(3,4.027834627),new S0.ep(4,5.039542911),new S0.ep(5,6.044942608)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(1,3.01602931),new S0.ep(2,4.00260325),new S0.ep(3,5.012223628),new S0.ep(4,6.018888072),new S0.ep(5,7.028030527),new S0.ep(6,8.033921838),new S0.ep(7,9.043820323),new S0.ep(8,10.052399713)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(1,4.027182329),new S0.ep(2,5.012537796),new S0.ep(3,6.015122281),new S0.ep(4,7.016004049),new S0.ep(5,8.02248667),new S0.ep(6,9.026789122),new S0.ep(7,10.035480884),new S0.ep(8,11.043796166),new S0.ep(9,12.05378)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(1,5.04079),new S0.ep(2,6.019725804),new S0.ep(3,7.016929246),new S0.ep(4,8.005305094),new S0.ep(5,9.012182135),new S0.ep(6,10.01353372),new S0.ep(7,11.021657653),new S0.ep(8,12.026920631),new S0.ep(9,13.036133834),new S0.ep(10,14.042815522)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(2,7.029917389),new S0.ep(3,8.024606713),new S0.ep(4,9.013328806),new S0.ep(5,10.012937027),new S0.ep(6,11.009305466),new S0.ep(7,12.014352109),new S0.ep(8,13.017780267),new S0.ep(9,14.025404064),new S0.ep(10,15.031097291),new S0.ep(11,16.039808836),new S0.ep(12,17.046931399),new S0.ep(13,18.05617),new S0.ep(14,19.06373)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(2,8.037675026),new S0.ep(3,9.031040087),new S0.ep(4,10.01685311),new S0.ep(5,11.011433818),new S0.ep(6,12),new S0.ep(7,13.003354838),new S0.ep(8,14.003241988),new S0.ep(9,15.010599258),new S0.ep(10,16.014701243),new S0.ep(11,17.022583712),new S0.ep(12,18.026757058),new S0.ep(13,19.035248094),new S0.ep(14,20.040322395),new S0.ep(15,21.04934),new S0.ep(16,22.05645)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(3,10.042618),new S0.ep(4,11.026796226),new S0.ep(5,12.018613202),new S0.ep(6,13.005738584),new S0.ep(7,14.003074005),new S0.ep(8,15.000108898),new S0.ep(9,16.006101417),new S0.ep(10,17.008449673),new S0.ep(11,18.014081827),new S0.ep(12,19.017026896),new S0.ep(13,20.023367295),new S0.ep(14,21.027087574),new S0.ep(15,22.034440259),new S0.ep(16,23.04051),new S0.ep(17,24.0505)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(4,12.034404776),new S0.ep(5,13.0248104),new S0.ep(6,14.008595285),new S0.ep(7,15.003065386),new S0.ep(8,15.994914622),new S0.ep(9,16.999131501),new S0.ep(10,17.999160419),new S0.ep(11,19.00357873),new S0.ep(12,20.00407615),new S0.ep(13,21.008654631),new S0.ep(14,22.009967157),new S0.ep(15,23.015691325),new S0.ep(16,24.020369922),new S0.ep(17,25.02914),new S0.ep(18,26.03775)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(5,14.03608),new S0.ep(6,15.018010856),new S0.ep(7,16.01146573),new S0.ep(8,17.002095238),new S0.ep(9,18.000937667),new S0.ep(10,18.998403205),new S0.ep(11,19.999981324),new S0.ep(12,20.999948921),new S0.ep(13,22.00299925),new S0.ep(14,23.003574385),new S0.ep(15,24.008099371),new S0.ep(16,25.012094963),new S0.ep(17,26.019633157),new S0.ep(18,27.026892316),new S0.ep(19,28.03567),new S0.ep(20,29.04326)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(6,16.025756907),new S0.ep(7,17.017697565),new S0.ep(8,18.005697066),new S0.ep(9,19.001879839),new S0.ep(10,19.992440176),new S0.ep(11,20.993846744),new S0.ep(12,21.99138551),new S0.ep(13,22.994467337),new S0.ep(14,23.993615074),new S0.ep(15,24.997789899),new S0.ep(16,26.000461498),new S0.ep(17,27.0076152),new S0.ep(18,28.012108072),new S0.ep(19,29.019345902),new S0.ep(20,30.023872),new S0.ep(21,31.03311),new S0.ep(22,32.03991)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(7,18.02718),new S0.ep(8,19.01387945),new S0.ep(9,20.00734826),new S0.ep(10,20.997655099),new S0.ep(11,21.994436782),new S0.ep(12,22.989769675),new S0.ep(13,23.990963332),new S0.ep(14,24.989954352),new S0.ep(15,25.992589898),new S0.ep(16,26.994008702),new S0.ep(17,27.99889041),new S0.ep(18,29.002811301),new S0.ep(19,30.009226487),new S0.ep(20,31.013595108),new S0.ep(21,32.019649792),new S0.ep(22,33.027386),new S0.ep(23,34.0349),new S0.ep(24,35.04418)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(8,20.018862744),new S0.ep(9,21.011714174),new S0.ep(10,21.999574055),new S0.ep(11,22.99412485),new S0.ep(12,23.985041898),new S0.ep(13,24.985837023),new S0.ep(14,25.98259304),new S0.ep(15,26.984340742),new S0.ep(16,27.983876703),new S0.ep(17,28.988554743),new S0.ep(18,29.990464529),new S0.ep(19,30.996548459),new S0.ep(20,31.999145889),new S0.ep(21,33.005586975),new S0.ep(22,34.00907244),new S0.ep(23,35.018669),new S0.ep(24,36.02245),new S0.ep(25,37.03124)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(8,21.02804),new S0.ep(9,22.01952),new S0.ep(10,23.0072649),new S0.ep(11,23.999940911),new S0.ep(12,24.990428555),new S0.ep(13,25.986891659),new S0.ep(14,26.981538441),new S0.ep(15,27.981910184),new S0.ep(16,28.980444848),new S0.ep(17,29.982960304),new S0.ep(18,30.983946023),new S0.ep(19,31.988124379),new S0.ep(20,32.990869587),new S0.ep(21,33.996927255),new S0.ep(22,34.99993765),new S0.ep(23,36.006351501),new S0.ep(24,37.01031),new S0.ep(25,38.0169),new S0.ep(26,39.0219)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(8,22.03453),new S0.ep(9,23.02552),new S0.ep(10,24.011545711),new S0.ep(11,25.00410664),new S0.ep(12,25.992329935),new S0.ep(13,26.986704764),new S0.ep(14,27.976926533),new S0.ep(15,28.976494719),new S0.ep(16,29.973770218),new S0.ep(17,30.975363275),new S0.ep(18,31.974148129),new S0.ep(19,32.97800052),new S0.ep(20,33.978575745),new S0.ep(21,34.984584158),new S0.ep(22,35.986687363),new S0.ep(23,36.99299599),new S0.ep(24,37.99598),new S0.ep(25,39.0023),new S0.ep(26,40.0058),new S0.ep(27,41.0127),new S0.ep(28,42.0161)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(9,24.03435),new S0.ep(10,25.02026),new S0.ep(11,26.01178),new S0.ep(12,26.999191645),new S0.ep(13,27.99231233),new S0.ep(14,28.981801376),new S0.ep(15,29.978313807),new S0.ep(16,30.973761512),new S0.ep(17,31.973907163),new S0.ep(18,32.971725281),new S0.ep(19,33.973636381),new S0.ep(20,34.973314249),new S0.ep(21,35.978259824),new S0.ep(22,36.979608338),new S0.ep(23,37.98447),new S0.ep(24,38.98642),new S0.ep(25,39.99105),new S0.ep(26,40.9948),new S0.ep(27,42.00009),new S0.ep(28,43.00331),new S0.ep(29,44.00988),new S0.ep(30,45.01514),new S0.ep(31,46.02383)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(10,26.02788),new S0.ep(11,27.018795),new S0.ep(12,28.004372661),new S0.ep(13,28.996608805),new S0.ep(14,29.984902954),new S0.ep(15,30.979554421),new S0.ep(16,31.97207069),new S0.ep(17,32.971458497),new S0.ep(18,33.967866831),new S0.ep(19,34.96903214),new S0.ep(20,35.96708088),new S0.ep(21,36.971125716),new S0.ep(22,37.971163443),new S0.ep(23,38.975135275),new S0.ep(24,39.97547),new S0.ep(25,40.98003),new S0.ep(26,41.98149),new S0.ep(27,42.9866),new S0.ep(28,43.98832),new S0.ep(29,44.99482),new S0.ep(30,45.99957),new S0.ep(31,47.00762),new S0.ep(32,48.01299),new S0.ep(33,49.02201)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(11,28.02851),new S0.ep(12,29.01411),new S0.ep(13,30.00477),new S0.ep(14,30.992416014),new S0.ep(15,31.985688908),new S0.ep(16,32.977451798),new S0.ep(17,33.973761967),new S0.ep(18,34.968852707),new S0.ep(19,35.968306945),new S0.ep(20,36.9659026),new S0.ep(21,37.96801055),new S0.ep(22,38.968007677),new S0.ep(23,39.970415555),new S0.ep(24,40.970650212),new S0.ep(25,41.973174994),new S0.ep(26,42.974203385),new S0.ep(27,43.978538712),new S0.ep(28,44.9797),new S0.ep(29,45.98412),new S0.ep(30,46.98795),new S0.ep(31,47.99485),new S0.ep(32,48.99989),new S0.ep(33,50.00773),new S0.ep(34,51.01353)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(12,30.02156),new S0.ep(13,31.012126),new S0.ep(14,31.99766066),new S0.ep(15,32.989928719),new S0.ep(16,33.980270118),new S0.ep(17,34.975256726),new S0.ep(18,35.967546282),new S0.ep(19,36.966775912),new S0.ep(20,37.962732161),new S0.ep(21,38.964313413),new S0.ep(22,39.962383123),new S0.ep(23,40.964500828),new S0.ep(24,41.963046386),new S0.ep(25,42.965670701),new S0.ep(26,43.965365269),new S0.ep(27,44.968094979),new S0.ep(28,45.968093467),new S0.ep(29,46.972186238),new S0.ep(30,47.97507),new S0.ep(31,48.98218),new S0.ep(32,49.98594),new S0.ep(33,50.99324),new S0.ep(34,51.99817),new S0.ep(35,53.006227)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(13,32.02192),new S0.ep(14,33.00726),new S0.ep(15,33.99841),new S0.ep(16,34.988011615),new S0.ep(17,35.981293405),new S0.ep(18,36.973376915),new S0.ep(19,37.969080107),new S0.ep(20,38.963706861),new S0.ep(21,39.963998672),new S0.ep(22,40.961825972),new S0.ep(23,41.962403059),new S0.ep(24,42.960715746),new S0.ep(25,43.961556146),new S0.ep(26,44.960699658),new S0.ep(27,45.961976203),new S0.ep(28,46.961677807),new S0.ep(29,47.965512946),new S0.ep(30,48.967450084),new S0.ep(31,49.972782832),new S0.ep(32,50.97638),new S0.ep(33,51.98261),new S0.ep(34,52.98712),new S0.ep(35,53.99399),new S0.ep(36,54.999388)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(14,34.01412),new S0.ep(15,35.004765),new S0.ep(16,35.993087234),new S0.ep(17,36.985871505),new S0.ep(18,37.976318637),new S0.ep(19,38.970717729),new S0.ep(20,39.962591155),new S0.ep(21,40.962278349),new S0.ep(22,41.958618337),new S0.ep(23,42.958766833),new S0.ep(24,43.955481094),new S0.ep(25,44.956185938),new S0.ep(26,45.953692759),new S0.ep(27,46.954546459),new S0.ep(28,47.952533512),new S0.ep(29,48.955673302),new S0.ep(30,49.957518286),new S0.ep(31,50.961474238),new S0.ep(32,51.9651),new S0.ep(33,52.97005),new S0.ep(34,53.97468),new S0.ep(35,54.98055),new S0.ep(36,55.98579),new S0.ep(37,56.992356)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(15,36.01492),new S0.ep(16,37.00305),new S0.ep(17,37.9947),new S0.ep(18,38.984790009),new S0.ep(19,39.977964014),new S0.ep(20,40.969251316),new S0.ep(21,41.965516761),new S0.ep(22,42.96115098),new S0.ep(23,43.959403048),new S0.ep(24,44.955910243),new S0.ep(25,45.95517025),new S0.ep(26,46.952408027),new S0.ep(27,47.952234991),new S0.ep(28,48.950024065),new S0.ep(29,49.952187008),new S0.ep(30,50.9536027),new S0.ep(31,51.95665),new S0.ep(32,52.95817),new S0.ep(33,53.963),new S0.ep(34,54.9694),new S0.ep(35,55.97266),new S0.ep(36,56.97704),new S0.ep(37,57.98307),new S0.ep(38,58.988041)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(16,38.00977),new S0.ep(17,39.001323),new S0.ep(18,39.990498907),new S0.ep(19,40.983131),new S0.ep(20,41.973031622),new S0.ep(21,42.968523342),new S0.ep(22,43.959690235),new S0.ep(23,44.958124349),new S0.ep(24,45.952629491),new S0.ep(25,46.951763792),new S0.ep(26,47.947947053),new S0.ep(27,48.947870789),new S0.ep(28,49.944792069),new S0.ep(29,50.946616017),new S0.ep(30,51.946898175),new S0.ep(31,52.949731709),new S0.ep(32,53.95087),new S0.ep(33,54.95512),new S0.ep(34,55.95799),new S0.ep(35,56.9643),new S0.ep(36,57.96611),new S0.ep(37,58.97196),new S0.ep(38,59.97564),new S0.ep(39,60.982018)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(17,40.01109),new S0.ep(18,40.99974),new S0.ep(19,41.99123),new S0.ep(20,42.98065),new S0.ep(21,43.9744),new S0.ep(22,44.965782286),new S0.ep(23,45.960199491),new S0.ep(24,46.954906918),new S0.ep(25,47.95225448),new S0.ep(26,48.948516914),new S0.ep(27,49.947162792),new S0.ep(28,50.943963675),new S0.ep(29,51.944779658),new S0.ep(30,52.944342517),new S0.ep(31,53.946444381),new S0.ep(32,54.947238194),new S0.ep(33,55.95036),new S0.ep(34,56.95236),new S0.ep(35,57.95665),new S0.ep(36,58.9593),new S0.ep(37,59.9645),new S0.ep(38,60.96741),new S0.ep(39,61.97314),new S0.ep(40,62.97675)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(18,42.00643),new S0.ep(19,42.997707),new S0.ep(20,43.98547),new S0.ep(21,44.97916),new S0.ep(22,45.968361649),new S0.ep(23,46.962906512),new S0.ep(24,47.954035861),new S0.ep(25,48.951341135),new S0.ep(26,49.946049607),new S0.ep(27,50.944771767),new S0.ep(28,51.940511904),new S0.ep(29,52.940653781),new S0.ep(30,53.938884921),new S0.ep(31,54.940844164),new S0.ep(32,55.940645238),new S0.ep(33,56.9437538),new S0.ep(34,57.94425),new S0.ep(35,58.94863),new S0.ep(36,59.94973),new S0.ep(37,60.95409),new S0.ep(38,61.9558),new S0.ep(39,62.96186),new S0.ep(40,63.9642),new S0.ep(41,64.97037)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(19,44.00687),new S0.ep(20,44.99451),new S0.ep(21,45.98672),new S0.ep(22,46.9761),new S0.ep(23,47.96887),new S0.ep(24,48.959623415),new S0.ep(25,49.95424396),new S0.ep(26,50.948215487),new S0.ep(27,51.945570079),new S0.ep(28,52.941294702),new S0.ep(29,53.940363247),new S0.ep(30,54.938049636),new S0.ep(31,55.938909366),new S0.ep(32,56.938287458),new S0.ep(33,57.939986451),new S0.ep(34,58.940447166),new S0.ep(35,59.943193998),new S0.ep(36,60.94446),new S0.ep(37,61.94797),new S0.ep(38,62.94981),new S0.ep(39,63.95373),new S0.ep(40,64.9561),new S0.ep(41,65.96082),new S0.ep(42,66.96382)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(19,45.01456),new S0.ep(20,46.00081),new S0.ep(21,46.99289),new S0.ep(22,47.98056),new S0.ep(23,48.97361),new S0.ep(24,49.962993316),new S0.ep(25,50.956824936),new S0.ep(26,51.948116526),new S0.ep(27,52.945312282),new S0.ep(28,53.939614836),new S0.ep(29,54.938298029),new S0.ep(30,55.934942133),new S0.ep(31,56.935398707),new S0.ep(32,57.933280458),new S0.ep(33,58.934880493),new S0.ep(34,59.934076943),new S0.ep(35,60.936749461),new S0.ep(36,61.936770495),new S0.ep(37,62.940118442),new S0.ep(38,63.94087),new S0.ep(39,64.94494),new S0.ep(40,65.94598),new S0.ep(41,66.95),new S0.ep(42,67.95251),new S0.ep(43,68.9577)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(21,48.00176),new S0.ep(22,48.98972),new S0.ep(23,49.98154),new S0.ep(24,50.97072),new S0.ep(25,51.96359),new S0.ep(26,52.954224985),new S0.ep(27,53.948464147),new S0.ep(28,54.942003149),new S0.ep(29,55.939843937),new S0.ep(30,56.936296235),new S0.ep(31,57.935757571),new S0.ep(32,58.933200194),new S0.ep(33,59.933822196),new S0.ep(34,60.932479381),new S0.ep(35,61.934054212),new S0.ep(36,62.933615218),new S0.ep(37,63.935813523),new S0.ep(38,64.936484581),new S0.ep(39,65.939825412),new S0.ep(40,66.94061),new S0.ep(41,67.94436),new S0.ep(42,68.9452),new S0.ep(43,69.94981),new S0.ep(44,70.95173),new S0.ep(45,71.95641)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(22,49.99593),new S0.ep(23,50.98772),new S0.ep(24,51.97568),new S0.ep(25,52.96846),new S0.ep(26,53.957910508),new S0.ep(27,54.951336329),new S0.ep(28,55.942136339),new S0.ep(29,56.939800489),new S0.ep(30,57.935347922),new S0.ep(31,58.934351553),new S0.ep(32,59.930790633),new S0.ep(33,60.931060442),new S0.ep(34,61.928348763),new S0.ep(35,62.929672948),new S0.ep(36,63.927969574),new S0.ep(37,64.930088013),new S0.ep(38,65.929115232),new S0.ep(39,66.931569638),new S0.ep(40,67.931844932),new S0.ep(41,68.935181837),new S0.ep(42,69.93614),new S0.ep(43,70.94),new S0.ep(44,71.9413),new S0.ep(45,72.94608),new S0.ep(46,73.94791),new S0.ep(47,74.95297),new S0.ep(48,75.95533),new S0.ep(49,76.96083),new S0.ep(50,77.9638)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(23,51.99718),new S0.ep(24,52.98555),new S0.ep(25,53.97671),new S0.ep(26,54.96605),new S0.ep(27,55.95856),new S0.ep(28,56.949215695),new S0.ep(29,57.944540734),new S0.ep(30,58.939504114),new S0.ep(31,59.937368123),new S0.ep(32,60.933462181),new S0.ep(33,61.932587299),new S0.ep(34,62.929601079),new S0.ep(35,63.929767865),new S0.ep(36,64.927793707),new S0.ep(37,65.928873041),new S0.ep(38,66.927750294),new S0.ep(39,67.929637875),new S0.ep(40,68.929425281),new S0.ep(41,69.932409287),new S0.ep(42,70.932619818),new S0.ep(43,71.93552),new S0.ep(44,72.93649),new S0.ep(45,73.9402),new S0.ep(46,74.9417),new S0.ep(47,75.94599),new S0.ep(48,76.94795),new S0.ep(49,77.95281),new S0.ep(50,78.95528),new S0.ep(51,79.96189)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(24,53.99295),new S0.ep(25,54.98398),new S0.ep(26,55.97238),new S0.ep(27,56.96491),new S0.ep(28,57.954596465),new S0.ep(29,58.949267074),new S0.ep(30,59.941832031),new S0.ep(31,60.939513907),new S0.ep(32,61.934334132),new S0.ep(33,62.933215563),new S0.ep(34,63.929146578),new S0.ep(35,64.929245079),new S0.ep(36,65.926036763),new S0.ep(37,66.927130859),new S0.ep(38,67.924847566),new S0.ep(39,68.926553538),new S0.ep(40,69.92532487),new S0.ep(41,70.927727195),new S0.ep(42,71.926861122),new S0.ep(43,72.929779469),new S0.ep(44,73.929458261),new S0.ep(45,74.932937379),new S0.ep(46,75.933394207),new S0.ep(47,76.937085857),new S0.ep(48,77.938569576),new S0.ep(49,78.942095175),new S0.ep(50,79.944414722),new S0.ep(51,80.95048),new S0.ep(52,81.95484)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(25,55.99491),new S0.ep(26,56.98293),new S0.ep(27,57.97425),new S0.ep(28,58.96337),new S0.ep(29,59.95706),new S0.ep(30,60.94917),new S0.ep(31,61.944179608),new S0.ep(32,62.939141527),new S0.ep(33,63.936838307),new S0.ep(34,64.932739322),new S0.ep(35,65.931592355),new S0.ep(36,66.928204915),new S0.ep(37,67.927983497),new S0.ep(38,68.925580912),new S0.ep(39,69.926027741),new S0.ep(40,70.92470501),new S0.ep(41,71.92636935),new S0.ep(42,72.925169832),new S0.ep(43,73.926940999),new S0.ep(44,74.926500645),new S0.ep(45,75.928928262),new S0.ep(46,76.929281189),new S0.ep(47,77.93165595),new S0.ep(48,78.932916371),new S0.ep(49,79.936588154),new S0.ep(50,80.937752955),new S0.ep(51,81.94316),new S0.ep(52,82.94687),new S0.ep(53,83.95234)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(26,57.99101),new S0.ep(27,58.98175),new S0.ep(28,59.97019),new S0.ep(29,60.96379),new S0.ep(30,61.95465),new S0.ep(31,62.94964),new S0.ep(32,63.941572638),new S0.ep(33,64.939440762),new S0.ep(34,65.933846798),new S0.ep(35,66.932738415),new S0.ep(36,67.928097266),new S0.ep(37,68.927972002),new S0.ep(38,69.924250365),new S0.ep(39,70.924953991),new S0.ep(40,71.922076184),new S0.ep(41,72.923459361),new S0.ep(42,73.921178213),new S0.ep(43,74.922859494),new S0.ep(44,75.921402716),new S0.ep(45,76.923548462),new S0.ep(46,77.922852886),new S0.ep(47,78.92540156),new S0.ep(48,79.925444764),new S0.ep(49,80.928821065),new S0.ep(50,81.929550326),new S0.ep(51,82.93451),new S0.ep(52,83.93731),new S0.ep(53,84.94269),new S0.ep(54,85.94627)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(27,59.99313),new S0.ep(28,60.98062),new S0.ep(29,61.9732),new S0.ep(30,62.96369),new S0.ep(31,63.957572),new S0.ep(32,64.949484),new S0.ep(33,65.944099147),new S0.ep(34,66.939190417),new S0.ep(35,67.936792976),new S0.ep(36,68.932280154),new S0.ep(37,69.930927811),new S0.ep(38,70.927114724),new S0.ep(39,71.926752647),new S0.ep(40,72.923825288),new S0.ep(41,73.923929076),new S0.ep(42,74.921596417),new S0.ep(43,75.922393933),new S0.ep(44,76.920647703),new S0.ep(45,77.921828577),new S0.ep(46,78.920948498),new S0.ep(47,79.922578162),new S0.ep(48,80.922132884),new S0.ep(49,81.924504668),new S0.ep(50,82.924980625),new S0.ep(51,83.92906),new S0.ep(52,84.93181),new S0.ep(53,85.93623),new S0.ep(54,86.93958),new S0.ep(55,87.94456),new S0.ep(56,88.94923)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(31,64.96466),new S0.ep(32,65.95521),new S0.ep(33,66.95009),new S0.ep(34,67.94187),new S0.ep(35,68.939562155),new S0.ep(36,69.933504),new S0.ep(37,70.931868378),new S0.ep(38,71.927112313),new S0.ep(39,72.9267668),new S0.ep(40,73.922476561),new S0.ep(41,74.922523571),new S0.ep(42,75.919214107),new S0.ep(43,76.91991461),new S0.ep(44,77.917309522),new S0.ep(45,78.918499802),new S0.ep(46,79.916521828),new S0.ep(47,80.917992931),new S0.ep(48,81.9167),new S0.ep(49,82.919119072),new S0.ep(50,83.918464523),new S0.ep(51,84.922244678),new S0.ep(52,85.924271165),new S0.ep(53,86.928520749),new S0.ep(54,87.931423982),new S0.ep(55,88.93602),new S0.ep(56,89.93942),new S0.ep(57,90.94537),new S0.ep(58,91.94933)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(32,66.96479),new S0.ep(33,67.958248),new S0.ep(34,68.950178),new S0.ep(35,69.944208),new S0.ep(36,70.939246),new S0.ep(37,71.936496876),new S0.ep(38,72.931794889),new S0.ep(39,73.929891152),new S0.ep(40,74.92577641),new S0.ep(41,75.924541974),new S0.ep(42,76.921380123),new S0.ep(43,77.92114613),new S0.ep(44,78.918337647),new S0.ep(45,79.918529952),new S0.ep(46,80.91629106),new S0.ep(47,81.916804666),new S0.ep(48,82.915180219),new S0.ep(49,83.916503685),new S0.ep(50,84.915608027),new S0.ep(51,85.918797162),new S0.ep(52,86.920710713),new S0.ep(53,87.924065908),new S0.ep(54,88.92638726),new S0.ep(55,89.930634988),new S0.ep(56,90.9339653),new S0.ep(57,91.939255258),new S0.ep(58,92.9431),new S0.ep(59,93.94868)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(33,68.96532),new S0.ep(34,69.95601),new S0.ep(35,70.95051),new S0.ep(36,71.94190754),new S0.ep(37,72.938931115),new S0.ep(38,73.933258225),new S0.ep(39,74.931033794),new S0.ep(40,75.925948304),new S0.ep(41,76.92466788),new S0.ep(42,77.920386271),new S0.ep(43,78.920082992),new S0.ep(44,79.91637804),new S0.ep(45,80.916592419),new S0.ep(46,81.913484601),new S0.ep(47,82.914135952),new S0.ep(48,83.911506627),new S0.ep(49,84.912526954),new S0.ep(50,85.910610313),new S0.ep(51,86.913354251),new S0.ep(52,87.914446951),new S0.ep(53,88.917632505),new S0.ep(54,89.919523803),new S0.ep(55,90.923442418),new S0.ep(56,91.926152752),new S0.ep(57,92.931265246),new S0.ep(58,93.934362),new S0.ep(59,94.93984),new S0.ep(60,95.94307),new S0.ep(61,96.94856)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(34,70.96532),new S0.ep(35,71.95908),new S0.ep(36,72.950366),new S0.ep(37,73.944470376),new S0.ep(38,74.938569199),new S0.ep(39,75.935071448),new S0.ep(40,76.930406599),new S0.ep(41,77.928141485),new S0.ep(42,78.923996719),new S0.ep(43,79.922519322),new S0.ep(44,80.918994165),new S0.ep(45,81.918207691),new S0.ep(46,82.915111951),new S0.ep(47,83.914384676),new S0.ep(48,84.911789341),new S0.ep(49,85.91116708),new S0.ep(50,86.909183465),new S0.ep(51,87.911318556),new S0.ep(52,88.912279939),new S0.ep(53,89.914808941),new S0.ep(54,90.91653416),new S0.ep(55,91.919725442),new S0.ep(56,92.922032765),new S0.ep(57,93.926407326),new S0.ep(58,94.92931926),new S0.ep(59,95.934283962),new S0.ep(60,96.937342863),new S0.ep(61,97.941703557),new S0.ep(62,98.945420616),new S0.ep(63,99.94987),new S0.ep(64,100.953195994),new S0.ep(65,101.95921)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(35,72.96597),new S0.ep(36,73.95631),new S0.ep(37,74.94992),new S0.ep(38,75.94161),new S0.ep(39,76.937761511),new S0.ep(40,77.932179362),new S0.ep(41,78.929707076),new S0.ep(42,79.924524588),new S0.ep(43,80.923213095),new S0.ep(44,81.918401258),new S0.ep(45,82.917555029),new S0.ep(46,83.913424778),new S0.ep(47,84.912932689),new S0.ep(48,85.909262351),new S0.ep(49,86.908879316),new S0.ep(50,87.905614339),new S0.ep(51,88.907452906),new S0.ep(52,89.907737596),new S0.ep(53,90.910209845),new S0.ep(54,91.911029895),new S0.ep(55,92.91402241),new S0.ep(56,93.915359856),new S0.ep(57,94.919358213),new S0.ep(58,95.921680473),new S0.ep(59,96.926148757),new S0.ep(60,97.928471177),new S0.ep(61,98.933315038),new S0.ep(62,99.935351729),new S0.ep(63,100.940517434),new S0.ep(64,101.943018795),new S0.ep(65,102.94895),new S0.ep(66,103.95233)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(38,76.94962),new S0.ep(39,77.9435),new S0.ep(40,78.937350712),new S0.ep(41,79.931982402),new S0.ep(42,80.929128719),new S0.ep(43,81.926792071),new S0.ep(44,82.922352572),new S0.ep(45,83.920387768),new S0.ep(46,84.916427076),new S0.ep(47,85.914887724),new S0.ep(48,86.910877833),new S0.ep(49,87.909503361),new S0.ep(50,88.905847902),new S0.ep(51,89.907151443),new S0.ep(52,90.907303415),new S0.ep(53,91.908946832),new S0.ep(54,92.909581582),new S0.ep(55,93.911594008),new S0.ep(56,94.912823709),new S0.ep(57,95.915897787),new S0.ep(58,96.918131017),new S0.ep(59,97.922219525),new S0.ep(60,98.924634736),new S0.ep(61,99.927756402),new S0.ep(62,100.930313395),new S0.ep(63,101.933555501),new S0.ep(64,102.93694),new S0.ep(65,103.94145),new S0.ep(66,104.94509),new S0.ep(67,105.95022)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(39,78.94916),new S0.ep(40,79.94055),new S0.ep(41,80.936815296),new S0.ep(42,81.931086249),new S0.ep(43,82.92865213),new S0.ep(44,83.92325),new S0.ep(45,84.92146522),new S0.ep(46,85.916472851),new S0.ep(47,86.914816578),new S0.ep(48,87.910226179),new S0.ep(49,88.908888916),new S0.ep(50,89.904703679),new S0.ep(51,90.905644968),new S0.ep(52,91.905040106),new S0.ep(53,92.906475627),new S0.ep(54,93.906315765),new S0.ep(55,94.908042739),new S0.ep(56,95.908275675),new S0.ep(57,96.910950716),new S0.ep(58,97.912746366),new S0.ep(59,98.916511084),new S0.ep(60,99.917761704),new S0.ep(61,100.921139958),new S0.ep(62,101.922981089),new S0.ep(63,102.926597062),new S0.ep(64,103.92878),new S0.ep(65,104.93305),new S0.ep(66,105.93591),new S0.ep(67,106.94086),new S0.ep(68,107.94428)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(40,80.94905),new S0.ep(41,81.94313),new S0.ep(42,82.936703713),new S0.ep(43,83.93357),new S0.ep(44,84.927906486),new S0.ep(45,85.925037588),new S0.ep(46,86.920361435),new S0.ep(47,87.91833144),new S0.ep(48,88.913495503),new S0.ep(49,89.911264109),new S0.ep(50,90.906990538),new S0.ep(51,91.907193214),new S0.ep(52,92.906377543),new S0.ep(53,93.907283457),new S0.ep(54,94.906835178),new S0.ep(55,95.908100076),new S0.ep(56,96.908097144),new S0.ep(57,97.91033069),new S0.ep(58,98.911617864),new S0.ep(59,99.914181434),new S0.ep(60,100.915251567),new S0.ep(61,101.918037417),new S0.ep(62,102.919141297),new S0.ep(63,103.922459464),new S0.ep(64,104.923934023),new S0.ep(65,105.92819),new S0.ep(66,106.93031),new S0.ep(67,107.93501),new S0.ep(68,108.93763),new S0.ep(69,109.94268)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(41,82.94874),new S0.ep(42,83.94009),new S0.ep(43,84.93659),new S0.ep(44,85.930695167),new S0.ep(45,86.92732683),new S0.ep(46,87.921952728),new S0.ep(47,88.919480562),new S0.ep(48,89.913936161),new S0.ep(49,90.911750754),new S0.ep(50,91.90681048),new S0.ep(51,92.906812213),new S0.ep(52,93.905087578),new S0.ep(53,94.905841487),new S0.ep(54,95.904678904),new S0.ep(55,96.906021033),new S0.ep(56,97.905407846),new S0.ep(57,98.907711598),new S0.ep(58,99.907477149),new S0.ep(59,100.910346543),new S0.ep(60,101.910297162),new S0.ep(61,102.913204596),new S0.ep(62,103.913758387),new S0.ep(63,104.916972087),new S0.ep(64,105.918134284),new S0.ep(65,106.921694724),new S0.ep(66,107.923973837),new S0.ep(67,108.92781),new S0.ep(68,109.92973),new S0.ep(69,110.93451),new S0.ep(70,111.93684),new S0.ep(71,112.94203)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(42,84.94894),new S0.ep(43,85.94288),new S0.ep(44,86.93653),new S0.ep(45,87.93283),new S0.ep(46,88.92754288),new S0.ep(47,89.92355583),new S0.ep(48,90.9184282),new S0.ep(49,91.915259655),new S0.ep(50,92.910248473),new S0.ep(51,93.909656309),new S0.ep(52,94.907656454),new S0.ep(53,95.907870803),new S0.ep(54,96.906364843),new S0.ep(55,97.907215692),new S0.ep(56,98.906254554),new S0.ep(57,99.907657594),new S0.ep(58,100.90731438),new S0.ep(59,101.909212938),new S0.ep(60,102.909178805),new S0.ep(61,103.911444898),new S0.ep(62,104.911658043),new S0.ep(63,105.914355408),new S0.ep(64,106.915081691),new S0.ep(65,107.918479973),new S0.ep(66,108.919980998),new S0.ep(67,109.92339),new S0.ep(68,110.92505),new S0.ep(69,111.92924),new S0.ep(70,112.93133),new S0.ep(71,113.93588),new S0.ep(72,114.93828)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(43,86.94918),new S0.ep(44,87.94042),new S0.ep(45,88.93611),new S0.ep(46,89.92978),new S0.ep(47,90.926377434),new S0.ep(48,91.92012),new S0.ep(49,92.917051523),new S0.ep(50,93.911359569),new S0.ep(51,94.910412729),new S0.ep(52,95.907597681),new S0.ep(53,96.907554546),new S0.ep(54,97.905287111),new S0.ep(55,98.905939307),new S0.ep(56,99.904219664),new S0.ep(57,100.905582219),new S0.ep(58,101.904349503),new S0.ep(59,102.906323677),new S0.ep(60,103.905430145),new S0.ep(61,104.907750341),new S0.ep(62,105.907326913),new S0.ep(63,106.909907207),new S0.ep(64,107.910192211),new S0.ep(65,108.913201565),new S0.ep(66,109.913966185),new S0.ep(67,110.91756),new S0.ep(68,111.918821673),new S0.ep(69,112.92254),new S0.ep(70,113.923891981),new S0.ep(71,114.92831),new S0.ep(72,115.93016),new S0.ep(73,116.93479),new S0.ep(74,117.93703)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(44,88.94938),new S0.ep(45,89.94287),new S0.ep(46,90.93655),new S0.ep(47,91.93198),new S0.ep(48,92.92574),new S0.ep(49,93.921698),new S0.ep(50,94.915898541),new S0.ep(51,95.914518212),new S0.ep(52,96.911336643),new S0.ep(53,97.910716431),new S0.ep(54,98.908132101),new S0.ep(55,99.90811663),new S0.ep(56,100.906163526),new S0.ep(57,101.906842845),new S0.ep(58,102.905504182),new S0.ep(59,103.906655315),new S0.ep(60,104.905692444),new S0.ep(61,105.907284615),new S0.ep(62,106.90675054),new S0.ep(63,107.908730768),new S0.ep(64,108.908735621),new S0.ep(65,109.910949525),new S0.ep(66,110.91166),new S0.ep(67,111.913969253),new S0.ep(68,112.91542),new S0.ep(69,113.91734336),new S0.ep(70,114.920124676),new S0.ep(71,115.922746643),new S0.ep(72,116.92535),new S0.ep(73,117.92943),new S0.ep(74,118.93136),new S0.ep(75,119.93578),new S0.ep(76,120.93808)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(45,90.94948),new S0.ep(46,91.94042),new S0.ep(47,92.93591),new S0.ep(48,93.92877),new S0.ep(49,94.92469),new S0.ep(50,95.91822194),new S0.ep(51,96.916478921),new S0.ep(52,97.912720751),new S0.ep(53,98.911767757),new S0.ep(54,99.908504596),new S0.ep(55,100.908289144),new S0.ep(56,101.905607716),new S0.ep(57,102.906087204),new S0.ep(58,103.904034912),new S0.ep(59,104.905084046),new S0.ep(60,105.903483087),new S0.ep(61,106.905128453),new S0.ep(62,107.903894451),new S0.ep(63,108.905953535),new S0.ep(64,109.905152385),new S0.ep(65,110.907643952),new S0.ep(66,111.907313277),new S0.ep(67,112.910151346),new S0.ep(68,113.910365322),new S0.ep(69,114.91368341),new S0.ep(70,115.914158288),new S0.ep(71,116.91784),new S0.ep(72,117.918983915),new S0.ep(73,118.92268),new S0.ep(74,119.92403),new S0.ep(75,120.92818),new S0.ep(76,121.9298),new S0.ep(77,122.93426)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(47,93.94278),new S0.ep(48,94.93548),new S0.ep(49,95.93068),new S0.ep(50,96.924),new S0.ep(51,97.921759995),new S0.ep(52,98.917597103),new S0.ep(53,99.916069387),new S0.ep(54,100.912802135),new S0.ep(55,101.911999996),new S0.ep(56,102.908972453),new S0.ep(57,103.908628228),new S0.ep(58,104.906528234),new S0.ep(59,105.906666431),new S0.ep(60,106.90509302),new S0.ep(61,107.905953705),new S0.ep(62,108.904755514),new S0.ep(63,109.90611046),new S0.ep(64,110.905294679),new S0.ep(65,111.907004132),new S0.ep(66,112.906565708),new S0.ep(67,113.908807907),new S0.ep(68,114.908762282),new S0.ep(69,115.911359558),new S0.ep(70,116.911684187),new S0.ep(71,117.914582383),new S0.ep(72,118.915666045),new S0.ep(73,119.918788609),new S0.ep(74,120.919851074),new S0.ep(75,121.92332),new S0.ep(76,122.9249),new S0.ep(77,123.92853),new S0.ep(78,124.93054),new S0.ep(79,125.9345),new S0.ep(80,126.93688)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(48,95.93977),new S0.ep(49,96.93494),new S0.ep(50,97.927579),new S0.ep(51,98.92501),new S0.ep(52,99.920230232),new S0.ep(53,100.918681442),new S0.ep(54,101.914777255),new S0.ep(55,102.913418952),new S0.ep(56,103.909848091),new S0.ep(57,104.909467818),new S0.ep(58,105.906458007),new S0.ep(59,106.906614232),new S0.ep(60,107.904183403),new S0.ep(61,108.904985569),new S0.ep(62,109.903005578),new S0.ep(63,110.904181628),new S0.ep(64,111.902757226),new S0.ep(65,112.904400947),new S0.ep(66,113.903358121),new S0.ep(67,114.905430553),new S0.ep(68,115.904755434),new S0.ep(69,116.907218242),new S0.ep(70,117.906914144),new S0.ep(71,118.909922582),new S0.ep(72,119.909851352),new S0.ep(73,120.91298039),new S0.ep(74,121.9135),new S0.ep(75,122.917003675),new S0.ep(76,123.917648302),new S0.ep(77,124.92124717),new S0.ep(78,125.922353996),new S0.ep(79,126.926434822),new S0.ep(80,127.927760617),new S0.ep(81,128.93226),new S0.ep(82,129.93398)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(49,97.94224),new S0.ep(50,98.93461),new S0.ep(51,99.931149033),new S0.ep(52,100.92656),new S0.ep(53,101.924707541),new S0.ep(54,102.919913896),new S0.ep(55,103.918338416),new S0.ep(56,104.914673434),new S0.ep(57,105.913461134),new S0.ep(58,106.910292195),new S0.ep(59,107.909719683),new S0.ep(60,108.907154078),new S0.ep(61,109.907168783),new S0.ep(62,110.905110677),new S0.ep(63,111.905533338),new S0.ep(64,112.904061223),new S0.ep(65,113.904916758),new S0.ep(66,114.903878328),new S0.ep(67,115.905259995),new S0.ep(68,116.904515731),new S0.ep(69,117.906354623),new S0.ep(70,118.905846334),new S0.ep(71,119.907961505),new S0.ep(72,120.907848847),new S0.ep(73,121.910277103),new S0.ep(74,122.910438951),new S0.ep(75,123.913175916),new S0.ep(76,124.913601387),new S0.ep(77,125.916464532),new S0.ep(78,126.917344048),new S0.ep(79,127.920170658),new S0.ep(80,128.921657958),new S0.ep(81,129.924854941),new S0.ep(82,130.926767408),new S0.ep(83,131.932919005),new S0.ep(84,132.93834),new S0.ep(85,133.94466)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(50,99.938954),new S0.ep(51,100.93606),new S0.ep(52,101.93049),new S0.ep(53,102.92813),new S0.ep(54,103.923185469),new S0.ep(55,104.921390409),new S0.ep(56,105.916880472),new S0.ep(57,106.915666702),new S0.ep(58,107.911965339),new S0.ep(59,108.911286879),new S0.ep(60,109.907852688),new S0.ep(61,110.907735404),new S0.ep(62,111.90482081),new S0.ep(63,112.905173373),new S0.ep(64,113.902781816),new S0.ep(65,114.903345973),new S0.ep(66,115.901744149),new S0.ep(67,116.902953765),new S0.ep(68,117.901606328),new S0.ep(69,118.90330888),new S0.ep(70,119.902196571),new S0.ep(71,120.904236867),new S0.ep(72,121.903440138),new S0.ep(73,122.905721901),new S0.ep(74,123.90527463),new S0.ep(75,124.907784924),new S0.ep(76,125.907653953),new S0.ep(77,126.91035098),new S0.ep(78,127.910534953),new S0.ep(79,128.913439976),new S0.ep(80,129.913852185),new S0.ep(81,130.916919144),new S0.ep(82,131.917744455),new S0.ep(83,132.923814085),new S0.ep(84,133.928463576),new S0.ep(85,134.93473),new S0.ep(86,135.93934),new S0.ep(87,136.94579)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(52,102.94012),new S0.ep(53,103.936287),new S0.ep(54,104.931528593),new S0.ep(55,105.928183134),new S0.ep(56,106.92415),new S0.ep(57,107.92216),new S0.ep(58,108.918136092),new S0.ep(59,109.917533911),new S0.ep(60,110.912534147),new S0.ep(61,111.91239464),new S0.ep(62,112.909377941),new S0.ep(63,113.909095876),new S0.ep(64,114.906598812),new S0.ep(65,115.906797235),new S0.ep(66,116.90483959),new S0.ep(67,117.905531885),new S0.ep(68,118.90394646),new S0.ep(69,119.905074315),new S0.ep(70,120.903818044),new S0.ep(71,121.905175415),new S0.ep(72,122.904215696),new S0.ep(73,123.905937525),new S0.ep(74,124.905247804),new S0.ep(75,125.907248153),new S0.ep(76,126.906914564),new S0.ep(77,127.90916733),new S0.ep(78,128.909150092),new S0.ep(79,129.911546459),new S0.ep(80,130.911946487),new S0.ep(81,131.914413247),new S0.ep(82,132.915236466),new S0.ep(83,133.920551554),new S0.ep(84,134.925167962),new S0.ep(85,135.93066),new S0.ep(86,136.93531),new S0.ep(87,137.94096),new S0.ep(88,138.94571)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(54,105.937702),new S0.ep(55,106.935036),new S0.ep(56,107.929486838),new S0.ep(57,108.927456483),new S0.ep(58,109.922407164),new S0.ep(59,110.921120589),new S0.ep(60,111.917061617),new S0.ep(61,112.915452551),new S0.ep(62,113.912498025),new S0.ep(63,114.911578627),new S0.ep(64,115.908420253),new S0.ep(65,116.90863418),new S0.ep(66,117.905825187),new S0.ep(67,118.90640811),new S0.ep(68,119.904019891),new S0.ep(69,120.904929815),new S0.ep(70,121.903047064),new S0.ep(71,122.904272951),new S0.ep(72,123.902819466),new S0.ep(73,124.904424718),new S0.ep(74,125.903305543),new S0.ep(75,126.90521729),new S0.ep(76,127.904461383),new S0.ep(77,128.906595593),new S0.ep(78,129.906222753),new S0.ep(79,130.90852188),new S0.ep(80,131.908523782),new S0.ep(81,132.910939068),new S0.ep(82,133.911540546),new S0.ep(83,134.916450782),new S0.ep(84,135.920103155),new S0.ep(85,136.925324769),new S0.ep(86,137.92922),new S0.ep(87,138.93473),new S0.ep(88,139.9387),new S0.ep(89,140.94439),new S0.ep(90,141.9485)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(55,107.943291),new S0.ep(56,108.938191658),new S0.ep(57,109.934634181),new S0.ep(58,110.930276),new S0.ep(59,111.92797),new S0.ep(60,112.923644245),new S0.ep(61,113.92185),new S0.ep(62,114.918272),new S0.ep(63,115.916735014),new S0.ep(64,116.913647692),new S0.ep(65,117.91337523),new S0.ep(66,118.910180837),new S0.ep(67,119.910047843),new S0.ep(68,120.907366063),new S0.ep(69,121.907592451),new S0.ep(70,122.905597944),new S0.ep(71,123.906211423),new S0.ep(72,124.90462415),new S0.ep(73,125.905619387),new S0.ep(74,126.90446842),new S0.ep(75,127.905805254),new S0.ep(76,128.904987487),new S0.ep(77,129.906674018),new S0.ep(78,130.906124168),new S0.ep(79,131.907994525),new S0.ep(80,132.907806465),new S0.ep(81,133.909876552),new S0.ep(82,134.91005031),new S0.ep(83,135.914655105),new S0.ep(84,136.917872653),new S0.ep(85,137.922383666),new S0.ep(86,138.926093402),new S0.ep(87,139.93121),new S0.ep(88,140.93483),new S0.ep(89,141.94018),new S0.ep(90,142.94407),new S0.ep(91,143.94961)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(56,109.944476),new S0.ep(57,110.941632),new S0.ep(58,111.93566535),new S0.ep(59,112.933382836),new S0.ep(60,113.928145),new S0.ep(61,114.926979032),new S0.ep(62,115.921394197),new S0.ep(63,116.920564355),new S0.ep(64,117.91657092),new S0.ep(65,118.915554295),new S0.ep(66,119.91215199),new S0.ep(67,120.911386497),new S0.ep(68,121.908548396),new S0.ep(69,122.908470748),new S0.ep(70,123.905895774),new S0.ep(71,124.906398236),new S0.ep(72,125.904268868),new S0.ep(73,126.905179581),new S0.ep(74,127.903530436),new S0.ep(75,128.904779458),new S0.ep(76,129.903507903),new S0.ep(77,130.90508192),new S0.ep(78,131.904154457),new S0.ep(79,132.90590566),new S0.ep(80,133.905394504),new S0.ep(81,134.907207499),new S0.ep(82,135.907219526),new S0.ep(83,136.911562939),new S0.ep(84,137.913988549),new S0.ep(85,138.918786859),new S0.ep(86,139.921635665),new S0.ep(87,140.926646282),new S0.ep(88,141.929702981),new S0.ep(89,142.93489),new S0.ep(90,143.93823),new S0.ep(91,144.94367),new S0.ep(92,145.9473),new S0.ep(93,146.95301)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(57,111.950331),new S0.ep(58,112.944535512),new S0.ep(59,113.940841319),new S0.ep(60,114.935939),new S0.ep(61,115.932914152),new S0.ep(62,116.928639484),new S0.ep(63,117.926554883),new S0.ep(64,118.922370879),new S0.ep(65,119.920678219),new S0.ep(66,120.917183637),new S0.ep(67,121.916121946),new S0.ep(68,122.912990168),new S0.ep(69,123.912245731),new S0.ep(70,124.909724871),new S0.ep(71,125.909447953),new S0.ep(72,126.9074176),new S0.ep(73,127.907747919),new S0.ep(74,128.906063369),new S0.ep(75,129.906706163),new S0.ep(76,130.905460232),new S0.ep(77,131.906429799),new S0.ep(78,132.90544687),new S0.ep(79,133.906713419),new S0.ep(80,134.905971903),new S0.ep(81,135.907305741),new S0.ep(82,136.907083505),new S0.ep(83,137.911010537),new S0.ep(84,138.913357921),new S0.ep(85,139.917277075),new S0.ep(86,140.920043984),new S0.ep(87,141.924292317),new S0.ep(88,142.927330292),new S0.ep(89,143.932027373),new S0.ep(90,144.935388226),new S0.ep(91,145.940162028),new S0.ep(92,146.943864435),new S0.ep(93,147.948899539),new S0.ep(94,148.95272),new S0.ep(95,149.95797),new S0.ep(96,150.962)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(58,113.950941),new S0.ep(59,114.94771),new S0.ep(60,115.94168),new S0.ep(61,116.937700229),new S0.ep(62,117.93344),new S0.ep(63,118.931051927),new S0.ep(64,119.926045941),new S0.ep(65,120.924485908),new S0.ep(66,121.92026),new S0.ep(67,122.91885),new S0.ep(68,123.915088437),new S0.ep(69,124.914620234),new S0.ep(70,125.911244146),new S0.ep(71,126.911121328),new S0.ep(72,127.90830887),new S0.ep(73,128.908673749),new S0.ep(74,129.906310478),new S0.ep(75,130.906930798),new S0.ep(76,131.905056152),new S0.ep(77,132.906002368),new S0.ep(78,133.904503347),new S0.ep(79,134.905682749),new S0.ep(80,135.904570109),new S0.ep(81,136.905821414),new S0.ep(82,137.905241273),new S0.ep(83,138.908835384),new S0.ep(84,139.910599485),new S0.ep(85,140.914406439),new S0.ep(86,141.916448175),new S0.ep(87,142.920617184),new S0.ep(88,143.922940468),new S0.ep(89,144.926923807),new S0.ep(90,145.930106645),new S0.ep(91,146.933992519),new S0.ep(92,147.937682377),new S0.ep(93,148.94246),new S0.ep(94,149.94562),new S0.ep(95,150.9507),new S0.ep(96,151.95416),new S0.ep(97,152.95961)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(60,116.95001),new S0.ep(61,117.94657),new S0.ep(62,118.94099),new S0.ep(63,119.93807),new S0.ep(64,120.93301),new S0.ep(65,121.93071),new S0.ep(66,122.92624),new S0.ep(67,123.92453),new S0.ep(68,124.92067),new S0.ep(69,125.91937),new S0.ep(70,126.91616),new S0.ep(71,127.91544794),new S0.ep(72,128.912667334),new S0.ep(73,129.91232),new S0.ep(74,130.910108489),new S0.ep(75,131.910110399),new S0.ep(76,132.908396372),new S0.ep(77,133.908489607),new S0.ep(78,134.906971003),new S0.ep(79,135.907651181),new S0.ep(80,136.906465656),new S0.ep(81,137.907106826),new S0.ep(82,138.90634816),new S0.ep(83,139.909472552),new S0.ep(84,140.910957016),new S0.ep(85,141.914074489),new S0.ep(86,142.916058646),new S0.ep(87,143.919591666),new S0.ep(88,144.92163837),new S0.ep(89,145.925700146),new S0.ep(90,146.927819639),new S0.ep(91,147.932191197),new S0.ep(92,148.93437),new S0.ep(93,149.93857),new S0.ep(94,150.94156),new S0.ep(95,151.94611),new S0.ep(96,152.94945),new S0.ep(97,153.9544),new S0.ep(98,154.95813)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(61,118.95276),new S0.ep(62,119.94664),new S0.ep(63,120.94367),new S0.ep(64,121.93801),new S0.ep(65,122.93551),new S0.ep(66,123.93052),new S0.ep(67,124.92854),new S0.ep(68,125.9241),new S0.ep(69,126.92275),new S0.ep(70,127.91887),new S0.ep(71,128.918679183),new S0.ep(72,129.914339361),new S0.ep(73,130.914424137),new S0.ep(74,131.91149),new S0.ep(75,132.91155),new S0.ep(76,133.909026379),new S0.ep(77,134.909145555),new S0.ep(78,135.907143574),new S0.ep(79,136.907777634),new S0.ep(80,137.905985574),new S0.ep(81,138.906646605),new S0.ep(82,139.905434035),new S0.ep(83,140.908271103),new S0.ep(84,141.909239733),new S0.ep(85,142.912381158),new S0.ep(86,143.913642686),new S0.ep(87,144.917227871),new S0.ep(88,145.918689722),new S0.ep(89,146.922510962),new S0.ep(90,147.924394738),new S0.ep(91,148.928289207),new S0.ep(92,149.930226399),new S0.ep(93,150.93404),new S0.ep(94,151.93638),new S0.ep(95,152.94058),new S0.ep(96,153.94332),new S0.ep(97,154.94804),new S0.ep(98,155.95126),new S0.ep(99,156.95634)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(62,120.955364),new S0.ep(63,121.95165),new S0.ep(64,122.94596),new S0.ep(65,123.94296),new S0.ep(66,124.93783),new S0.ep(67,125.93531),new S0.ep(68,126.93083),new S0.ep(69,127.9288),new S0.ep(70,128.92486),new S0.ep(71,129.92338),new S0.ep(72,130.920060245),new S0.ep(73,131.91912),new S0.ep(74,132.9162),new S0.ep(75,133.915672),new S0.ep(76,134.91313914),new S0.ep(77,135.912646935),new S0.ep(78,136.910678351),new S0.ep(79,137.910748891),new S0.ep(80,138.908932181),new S0.ep(81,139.909071204),new S0.ep(82,140.907647726),new S0.ep(83,141.910039865),new S0.ep(84,142.910812233),new S0.ep(85,143.913300595),new S0.ep(86,144.914506897),new S0.ep(87,145.917588016),new S0.ep(88,146.918979001),new S0.ep(89,147.922183237),new S0.ep(90,148.923791056),new S0.ep(91,149.926995031),new S0.ep(92,150.928227869),new S0.ep(93,151.9316),new S0.ep(94,152.93365),new S0.ep(95,153.93739),new S0.ep(96,154.93999),new S0.ep(97,155.94412),new S0.ep(98,156.94717),new S0.ep(99,157.95178),new S0.ep(100,158.95523)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(66,125.94307),new S0.ep(67,126.9405),new S0.ep(68,127.93539),new S0.ep(69,128.932385),new S0.ep(70,129.92878),new S0.ep(71,130.927102697),new S0.ep(72,131.92312),new S0.ep(73,132.92221),new S0.ep(74,133.918645),new S0.ep(75,134.91824),new S0.ep(76,135.915020542),new S0.ep(77,136.91463973),new S0.ep(78,137.91291745),new S0.ep(79,138.91192415),new S0.ep(80,139.909309824),new S0.ep(81,140.9096048),new S0.ep(82,141.907718643),new S0.ep(83,142.909809626),new S0.ep(84,143.910082629),new S0.ep(85,144.912568847),new S0.ep(86,145.913112139),new S0.ep(87,146.916095794),new S0.ep(88,147.916888516),new S0.ep(89,148.92014419),new S0.ep(90,149.920886563),new S0.ep(91,150.923824739),new S0.ep(92,151.924682428),new S0.ep(93,152.927694534),new S0.ep(94,153.929483295),new S0.ep(95,154.932629551),new S0.ep(96,155.9352),new S0.ep(97,156.93927),new S0.ep(98,157.94187),new S0.ep(99,158.94639),new S0.ep(100,159.94939),new S0.ep(101,160.95433)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(67,127.94826),new S0.ep(68,128.94316),new S0.ep(69,129.94045),new S0.ep(70,130.9358),new S0.ep(71,131.93375),new S0.ep(72,132.92972),new S0.ep(73,133.92849),new S0.ep(74,134.924617),new S0.ep(75,135.923447865),new S0.ep(76,136.920713),new S0.ep(77,137.920432261),new S0.ep(78,138.916759814),new S0.ep(79,139.915801649),new S0.ep(80,140.913606636),new S0.ep(81,141.912950738),new S0.ep(82,142.910927571),new S0.ep(83,143.912585768),new S0.ep(84,144.912743879),new S0.ep(85,145.914692165),new S0.ep(86,146.915133898),new S0.ep(87,147.917467786),new S0.ep(88,148.918329195),new S0.ep(89,149.920979477),new S0.ep(90,150.921202693),new S0.ep(91,151.923490557),new S0.ep(92,152.924113189),new S0.ep(93,153.926547019),new S0.ep(94,154.928097047),new S0.ep(95,155.931060357),new S0.ep(96,156.9332),new S0.ep(97,157.93669),new S0.ep(98,158.93913),new S0.ep(99,159.94299),new S0.ep(100,160.94586),new S0.ep(101,161.95029),new S0.ep(102,162.95352)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(68,129.94863),new S0.ep(69,130.94589),new S0.ep(70,131.94082),new S0.ep(71,132.93873),new S0.ep(72,133.93402),new S0.ep(73,134.93235),new S0.ep(74,135.9283),new S0.ep(75,136.927046709),new S0.ep(76,137.92354),new S0.ep(77,138.922302),new S0.ep(78,139.918991),new S0.ep(79,140.918468512),new S0.ep(80,141.915193274),new S0.ep(81,142.914623555),new S0.ep(82,143.91199473),new S0.ep(83,144.913405611),new S0.ep(84,145.91303676),new S0.ep(85,146.914893275),new S0.ep(86,147.914817914),new S0.ep(87,148.917179521),new S0.ep(88,149.917271454),new S0.ep(89,150.919928351),new S0.ep(90,151.919728244),new S0.ep(91,152.922093907),new S0.ep(92,153.922205303),new S0.ep(93,154.92463594),new S0.ep(94,155.925526236),new S0.ep(95,156.928354506),new S0.ep(96,157.929987938),new S0.ep(97,158.9332),new S0.ep(98,159.93514),new S0.ep(99,160.93883),new S0.ep(100,161.94122),new S0.ep(101,162.94536),new S0.ep(102,163.94828),new S0.ep(103,164.95298)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(69,131.95416),new S0.ep(70,132.9489),new S0.ep(71,133.94632),new S0.ep(72,134.94172),new S0.ep(73,135.9395),new S0.ep(74,136.93521),new S0.ep(75,137.93345),new S0.ep(76,138.92882915),new S0.ep(77,139.928083921),new S0.ep(78,140.924885867),new S0.ep(79,141.923400033),new S0.ep(80,142.920286634),new S0.ep(81,143.918774116),new S0.ep(82,144.916261285),new S0.ep(83,145.917199714),new S0.ep(84,146.916741206),new S0.ep(85,147.918153775),new S0.ep(86,148.917925922),new S0.ep(87,149.919698294),new S0.ep(88,150.919846022),new S0.ep(89,151.921740399),new S0.ep(90,152.921226219),new S0.ep(91,153.922975386),new S0.ep(92,154.922889429),new S0.ep(93,155.924750855),new S0.ep(94,156.925419435),new S0.ep(95,157.927841923),new S0.ep(96,158.9290845),new S0.ep(97,159.931460406),new S0.ep(98,160.93368),new S0.ep(99,161.93704),new S0.ep(100,162.93921),new S0.ep(101,163.94299),new S0.ep(102,164.94572),new S0.ep(103,165.94997),new S0.ep(104,166.95305)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(72,135.94707),new S0.ep(73,136.94465),new S0.ep(74,137.93997),new S0.ep(75,138.93808),new S0.ep(76,139.933236934),new S0.ep(77,140.93221),new S0.ep(78,141.927908919),new S0.ep(79,142.926738636),new S0.ep(80,143.923390357),new S0.ep(81,144.921687498),new S0.ep(82,145.918305344),new S0.ep(83,146.919089446),new S0.ep(84,147.918109771),new S0.ep(85,148.919336427),new S0.ep(86,149.918655455),new S0.ep(87,150.920344273),new S0.ep(88,151.919787882),new S0.ep(89,152.921746283),new S0.ep(90,153.920862271),new S0.ep(91,154.922618801),new S0.ep(92,155.922119552),new S0.ep(93,156.923956686),new S0.ep(94,157.924100533),new S0.ep(95,158.926385075),new S0.ep(96,159.927050616),new S0.ep(97,160.929665688),new S0.ep(98,161.930981211),new S0.ep(99,162.93399),new S0.ep(100,163.93586),new S0.ep(101,164.93938),new S0.ep(102,165.9416),new S0.ep(103,166.94557),new S0.ep(104,167.94836),new S0.ep(105,168.95287)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(73,137.95287),new S0.ep(74,138.94803),new S0.ep(75,139.945367985),new S0.ep(76,140.94116),new S0.ep(77,141.939073781),new S0.ep(78,142.93475),new S0.ep(79,143.93253),new S0.ep(80,144.92888),new S0.ep(81,145.927180629),new S0.ep(82,146.924037176),new S0.ep(83,147.924298636),new S0.ep(84,148.92324163),new S0.ep(85,149.923654158),new S0.ep(86,150.923098169),new S0.ep(87,151.924071324),new S0.ep(88,152.923430858),new S0.ep(89,153.924686236),new S0.ep(90,154.923500411),new S0.ep(91,155.924743749),new S0.ep(92,156.924021155),new S0.ep(93,157.92541026),new S0.ep(94,158.925343135),new S0.ep(95,159.927164021),new S0.ep(96,160.927566289),new S0.ep(97,161.929484803),new S0.ep(98,162.930643942),new S0.ep(99,163.933347253),new S0.ep(100,164.93488),new S0.ep(101,165.93805),new S0.ep(102,166.94005),new S0.ep(103,167.94364),new S0.ep(104,168.94622),new S0.ep(105,169.95025),new S0.ep(106,170.9533)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(74,139.95379),new S0.ep(75,140.95119),new S0.ep(76,141.946695946),new S0.ep(77,142.94383),new S0.ep(78,143.93907),new S0.ep(79,144.936717),new S0.ep(80,145.932720118),new S0.ep(81,146.930878496),new S0.ep(82,147.927177882),new S0.ep(83,148.927333981),new S0.ep(84,149.925579728),new S0.ep(85,150.92617963),new S0.ep(86,151.924713874),new S0.ep(87,152.925760865),new S0.ep(88,153.924422046),new S0.ep(89,154.92574895),new S0.ep(90,155.924278273),new S0.ep(91,156.925461256),new S0.ep(92,157.924404637),new S0.ep(93,158.92573566),new S0.ep(94,159.925193718),new S0.ep(95,160.926929595),new S0.ep(96,161.926794731),new S0.ep(97,162.928727532),new S0.ep(98,163.929171165),new S0.ep(99,164.931699828),new S0.ep(100,165.932803241),new S0.ep(101,166.935649025),new S0.ep(102,167.93723),new S0.ep(103,168.940303648),new S0.ep(104,169.94267),new S0.ep(105,170.94648),new S0.ep(106,171.94911),new S0.ep(107,172.95344)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(75,141.95986),new S0.ep(76,142.95469),new S0.ep(77,143.95164),new S0.ep(78,144.94688),new S0.ep(79,145.9441),new S0.ep(80,146.93984),new S0.ep(81,147.937269),new S0.ep(82,148.933789944),new S0.ep(83,149.932760914),new S0.ep(84,150.931680791),new S0.ep(85,151.931740598),new S0.ep(86,152.930194506),new S0.ep(87,153.930596268),new S0.ep(88,154.929079084),new S0.ep(89,155.929001869),new S0.ep(90,156.928188059),new S0.ep(91,157.92894573),new S0.ep(92,158.927708537),new S0.ep(93,159.928725679),new S0.ep(94,160.927851662),new S0.ep(95,161.92909242),new S0.ep(96,162.928730286),new S0.ep(97,163.930230577),new S0.ep(98,164.930319169),new S0.ep(99,165.932281267),new S0.ep(100,166.933126195),new S0.ep(101,167.935496424),new S0.ep(102,168.936868306),new S0.ep(103,169.939614951),new S0.ep(104,170.941461227),new S0.ep(105,171.94482),new S0.ep(106,172.94729),new S0.ep(107,173.95115),new S0.ep(108,174.95405)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(76,143.96059),new S0.ep(77,144.95746),new S0.ep(78,145.95212),new S0.ep(79,146.94931),new S0.ep(80,147.94444),new S0.ep(81,148.942780527),new S0.ep(82,149.937171034),new S0.ep(83,150.93746),new S0.ep(84,151.935078452),new S0.ep(85,152.935093125),new S0.ep(86,153.932777294),new S0.ep(87,154.933204273),new S0.ep(88,155.931015001),new S0.ep(89,156.931945517),new S0.ep(90,157.929912),new S0.ep(91,158.930680718),new S0.ep(92,159.929078924),new S0.ep(93,160.930001348),new S0.ep(94,161.928774923),new S0.ep(95,162.930029273),new S0.ep(96,163.929196996),new S0.ep(97,164.9307228),new S0.ep(98,165.93028997),new S0.ep(99,166.932045448),new S0.ep(100,167.932367781),new S0.ep(101,168.934588082),new S0.ep(102,169.935460334),new S0.ep(103,170.938025885),new S0.ep(104,171.939352149),new S0.ep(105,172.9424),new S0.ep(106,173.94434),new S0.ep(107,174.94793),new S0.ep(108,175.95029),new S0.ep(109,176.95437)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(77,145.966495),new S0.ep(78,146.961081),new S0.ep(79,147.95755),new S0.ep(80,148.95265),new S0.ep(81,149.94967),new S0.ep(82,150.944842),new S0.ep(83,151.9443),new S0.ep(84,152.942027631),new S0.ep(85,153.940832325),new S0.ep(86,154.939191562),new S0.ep(87,155.939006895),new S0.ep(88,156.936756069),new S0.ep(89,157.936996),new S0.ep(90,158.934808966),new S0.ep(91,159.935090772),new S0.ep(92,160.933398042),new S0.ep(93,161.933970147),new S0.ep(94,162.932647648),new S0.ep(95,163.933450972),new S0.ep(96,164.932432463),new S0.ep(97,165.933553133),new S0.ep(98,166.932848844),new S0.ep(99,167.934170375),new S0.ep(100,168.934211117),new S0.ep(101,169.935797877),new S0.ep(102,170.936425817),new S0.ep(103,171.938396118),new S0.ep(104,172.939600336),new S0.ep(105,173.942164618),new S0.ep(106,174.943832897),new S0.ep(107,175.946991412),new S0.ep(108,176.94904),new S0.ep(109,177.95264),new S0.ep(110,178.95534)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(78,147.96676),new S0.ep(79,148.96348),new S0.ep(80,149.95799),new S0.ep(81,150.954657965),new S0.ep(82,151.950167),new S0.ep(83,152.94921),new S0.ep(84,153.945651145),new S0.ep(85,154.945792),new S0.ep(86,155.942847109),new S0.ep(87,156.94265865),new S0.ep(88,157.939857897),new S0.ep(89,158.940153735),new S0.ep(90,159.93756),new S0.ep(91,160.937357719),new S0.ep(92,161.93575),new S0.ep(93,162.936265492),new S0.ep(94,163.93452),new S0.ep(95,164.935397592),new S0.ep(96,165.933879623),new S0.ep(97,166.934946862),new S0.ep(98,167.933894465),new S0.ep(99,168.93518712),new S0.ep(100,169.934758652),new S0.ep(101,170.936322297),new S0.ep(102,171.936377696),new S0.ep(103,172.938206756),new S0.ep(104,173.938858101),new S0.ep(105,174.941272494),new S0.ep(106,175.942568409),new S0.ep(107,176.945257126),new S0.ep(108,177.946643396),new S0.ep(109,178.95017),new S0.ep(110,179.95233),new S0.ep(111,180.95615)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(79,149.972668),new S0.ep(80,150.967147),new S0.ep(81,151.96361),new S0.ep(82,152.95869),new S0.ep(83,153.9571),new S0.ep(84,154.953641324),new S0.ep(85,155.952907),new S0.ep(86,156.950101536),new S0.ep(87,157.948577981),new S0.ep(88,158.946615113),new S0.ep(89,159.945383),new S0.ep(90,160.943047504),new S0.ep(91,161.943222),new S0.ep(92,162.941203796),new S0.ep(93,163.941215),new S0.ep(94,164.939605886),new S0.ep(95,165.939762646),new S0.ep(96,166.938307056),new S0.ep(97,167.938698576),new S0.ep(98,168.937648757),new S0.ep(99,169.93847219),new S0.ep(100,170.937909903),new S0.ep(101,171.939082239),new S0.ep(102,172.938926901),new S0.ep(103,173.940333522),new S0.ep(104,174.940767904),new S0.ep(105,175.942682399),new S0.ep(106,176.943754987),new S0.ep(107,177.945951366),new S0.ep(108,178.947324216),new S0.ep(109,179.949879968),new S0.ep(110,180.95197),new S0.ep(111,181.95521),new S0.ep(112,182.95757),new S0.ep(113,183.96117)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(82,153.96425),new S0.ep(83,154.96276),new S0.ep(84,155.959247),new S0.ep(85,156.958127),new S0.ep(86,157.95405528),new S0.ep(87,158.954003),new S0.ep(88,159.950713588),new S0.ep(89,160.950330852),new S0.ep(90,161.947202977),new S0.ep(91,162.947057),new S0.ep(92,163.944422),new S0.ep(93,164.94454),new S0.ep(94,165.94225),new S0.ep(95,166.9426),new S0.ep(96,167.94063),new S0.ep(97,168.941158567),new S0.ep(98,169.93965),new S0.ep(99,170.94049),new S0.ep(100,171.93945798),new S0.ep(101,172.94065),new S0.ep(102,173.940040159),new S0.ep(103,174.941502991),new S0.ep(104,175.941401828),new S0.ep(105,176.943220013),new S0.ep(106,177.943697732),new S0.ep(107,178.945815073),new S0.ep(108,179.94654876),new S0.ep(109,180.949099124),new S0.ep(110,181.950552893),new S0.ep(111,182.953531012),new S0.ep(112,183.95544788),new S0.ep(113,184.95878),new S0.ep(114,185.96092)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(83,155.971689),new S0.ep(84,156.968145),new S0.ep(85,157.966368),new S0.ep(86,158.96232309),new S0.ep(87,159.961358),new S0.ep(88,160.958372992),new S0.ep(89,161.956556553),new S0.ep(90,162.95431665),new S0.ep(91,163.95357),new S0.ep(92,164.950817),new S0.ep(93,165.95047),new S0.ep(94,166.948639),new S0.ep(95,167.947787),new S0.ep(96,168.94592),new S0.ep(97,169.94609),new S0.ep(98,170.94446),new S0.ep(99,171.944739818),new S0.ep(100,172.94459),new S0.ep(101,173.944167937),new S0.ep(102,174.94365),new S0.ep(103,175.944740551),new S0.ep(104,176.944471766),new S0.ep(105,177.945750349),new S0.ep(106,178.945934113),new S0.ep(107,179.947465655),new S0.ep(108,180.947996346),new S0.ep(109,181.950152414),new S0.ep(110,182.951373188),new S0.ep(111,183.954009331),new S0.ep(112,184.955559086),new S0.ep(113,185.9585501),new S0.ep(114,186.96041),new S0.ep(115,187.96371)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(84,157.973939),new S0.ep(85,158.97228),new S0.ep(86,159.968369),new S0.ep(87,160.967089),new S0.ep(88,161.962750303),new S0.ep(89,162.962532),new S0.ep(90,163.95898381),new S0.ep(91,164.958335962),new S0.ep(92,165.955019896),new S0.ep(93,166.954672),new S0.ep(94,167.951863),new S0.ep(95,168.951759),new S0.ep(96,169.948473988),new S0.ep(97,170.94946),new S0.ep(98,171.948228837),new S0.ep(99,172.948884),new S0.ep(100,173.94616),new S0.ep(101,174.94677),new S0.ep(102,175.94559),new S0.ep(103,176.94662),new S0.ep(104,177.945848364),new S0.ep(105,178.947071733),new S0.ep(106,179.946705734),new S0.ep(107,180.948198054),new S0.ep(108,181.948205519),new S0.ep(109,182.950224458),new S0.ep(110,183.950932553),new S0.ep(111,184.953420586),new S0.ep(112,185.954362204),new S0.ep(113,186.957158365),new S0.ep(114,187.958486954),new S0.ep(115,188.96191222),new S0.ep(116,189.963179541)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(85,159.981485),new S0.ep(86,160.977661),new S0.ep(87,161.975707),new S0.ep(88,162.971375872),new S0.ep(89,163.970319),new S0.ep(90,164.967050268),new S0.ep(91,165.965211372),new S0.ep(92,166.962564),new S0.ep(93,167.961609),new S0.ep(94,168.95883),new S0.ep(95,169.958163),new S0.ep(96,170.955547),new S0.ep(97,171.955285),new S0.ep(98,172.953062),new S0.ep(99,173.952114),new S0.ep(100,174.951393),new S0.ep(101,175.95157),new S0.ep(102,176.95027),new S0.ep(103,177.950851081),new S0.ep(104,178.949981038),new S0.ep(105,179.95078768),new S0.ep(106,180.950064596),new S0.ep(107,181.951211444),new S0.ep(108,182.950821349),new S0.ep(109,183.952524289),new S0.ep(110,184.952955747),new S0.ep(111,185.954986529),new S0.ep(112,186.955750787),new S0.ep(113,187.958112287),new S0.ep(114,188.959228359),new S0.ep(115,189.961816139),new S0.ep(116,190.963123592),new S0.ep(117,191.96596)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(86,161.983819),new S0.ep(87,162.982048),new S0.ep(88,163.977927),new S0.ep(89,164.976475),new S0.ep(90,165.971934911),new S0.ep(91,166.971554),new S0.ep(92,167.967832911),new S0.ep(93,168.967076205),new S0.ep(94,169.963569716),new S0.ep(95,170.96304),new S0.ep(96,171.960078),new S0.ep(97,172.959791),new S0.ep(98,173.956307704),new S0.ep(99,174.95708),new S0.ep(100,175.953757941),new S0.ep(101,176.955045),new S0.ep(102,177.953348225),new S0.ep(103,178.953951),new S0.ep(104,179.952308241),new S0.ep(105,180.953274494),new S0.ep(106,181.952186222),new S0.ep(107,182.95311),new S0.ep(108,183.952490808),new S0.ep(109,184.954043023),new S0.ep(110,185.953838355),new S0.ep(111,186.955747928),new S0.ep(112,187.955835993),new S0.ep(113,188.958144866),new S0.ep(114,189.95844521),new S0.ep(115,190.960927951),new S0.ep(116,191.961479047),new S0.ep(117,192.964148083),new S0.ep(118,193.965179314),new S0.ep(119,194.968123889),new S0.ep(120,195.96962255)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(88,164.98758),new S0.ep(89,165.985506),new S0.ep(90,166.980951577),new S0.ep(91,167.979966),new S0.ep(92,168.976390868),new S0.ep(93,169.974441697),new S0.ep(94,170.971779),new S0.ep(95,171.970643),new S0.ep(96,172.967707),new S0.ep(97,173.966804),new S0.ep(98,174.964279),new S0.ep(99,175.963511),new S0.ep(100,176.96117),new S0.ep(101,177.960084944),new S0.ep(102,178.95915),new S0.ep(103,179.958555615),new S0.ep(104,180.957642156),new S0.ep(105,181.958127689),new S0.ep(106,182.956814),new S0.ep(107,183.957388318),new S0.ep(108,184.95659),new S0.ep(109,185.957951104),new S0.ep(110,186.95736083),new S0.ep(111,187.958851962),new S0.ep(112,188.958716473),new S0.ep(113,189.960592299),new S0.ep(114,190.960591191),new S0.ep(115,191.962602198),new S0.ep(116,192.9629237),new S0.ep(117,193.96507561),new S0.ep(118,194.9659768),new S0.ep(119,195.968379906),new S0.ep(120,196.969636496),new S0.ep(121,197.97228),new S0.ep(122,198.973787159)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(90,167.988035),new S0.ep(91,168.986421),new S0.ep(92,169.981734918),new S0.ep(93,170.981251),new S0.ep(94,171.977376138),new S0.ep(95,172.976499642),new S0.ep(96,173.972811276),new S0.ep(97,174.972276),new S0.ep(98,175.969),new S0.ep(99,176.968453),new S0.ep(100,177.964894223),new S0.ep(101,178.965475),new S0.ep(102,179.962023729),new S0.ep(103,180.963177),new S0.ep(104,181.961267637),new S0.ep(105,182.961729),new S0.ep(106,183.959851685),new S0.ep(107,184.960753782),new S0.ep(108,185.959432346),new S0.ep(109,186.960697),new S0.ep(110,187.959395697),new S0.ep(111,188.9608319),new S0.ep(112,189.959930073),new S0.ep(113,190.961684653),new S0.ep(114,191.961035158),new S0.ep(115,192.962984504),new S0.ep(116,193.962663581),new S0.ep(117,194.964774449),new S0.ep(118,195.964934884),new S0.ep(119,196.967323401),new S0.ep(120,197.967876009),new S0.ep(121,198.970576213),new S0.ep(122,199.971423885),new S0.ep(123,200.974496467),new S0.ep(124,201.97574)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(92,170.991183),new S0.ep(93,171.990109),new S0.ep(94,172.986398138),new S0.ep(95,173.984325861),new S0.ep(96,174.981552),new S0.ep(97,175.980269),new S0.ep(98,176.977215),new S0.ep(99,177.975975),new S0.ep(100,178.973412),new S0.ep(101,179.972396),new S0.ep(102,180.969948),new S0.ep(103,181.968621416),new S0.ep(104,182.96762),new S0.ep(105,183.966776046),new S0.ep(106,184.965806956),new S0.ep(107,185.965997671),new S0.ep(108,186.964562),new S0.ep(109,187.965321662),new S0.ep(110,188.9642243),new S0.ep(111,189.964698757),new S0.ep(112,190.963649239),new S0.ep(113,191.964810107),new S0.ep(114,192.964131745),new S0.ep(115,193.96533889),new S0.ep(116,194.965017928),new S0.ep(117,195.966551315),new S0.ep(118,196.966551609),new S0.ep(119,197.968225244),new S0.ep(120,198.968748016),new S0.ep(121,199.970717886),new S0.ep(122,200.971640839),new S0.ep(123,201.973788431),new S0.ep(124,202.975137256),new S0.ep(125,203.977705),new S0.ep(126,204.97961)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(95,174.991411),new S0.ep(96,175.987413248),new S0.ep(97,176.986336874),new S0.ep(98,177.982476325),new S0.ep(99,178.981783),new S0.ep(100,179.978322),new S0.ep(101,180.977806),new S0.ep(102,181.97393546),new S0.ep(103,182.974561),new S0.ep(104,183.970705219),new S0.ep(105,184.971983),new S0.ep(106,185.969460021),new S0.ep(107,186.969785),new S0.ep(108,187.967511693),new S0.ep(109,188.968733187),new S0.ep(110,189.966958568),new S0.ep(111,190.96706311),new S0.ep(112,191.965921572),new S0.ep(113,192.966644169),new S0.ep(114,193.965381832),new S0.ep(115,194.966638981),new S0.ep(116,195.965814846),new S0.ep(117,196.967195333),new S0.ep(118,197.96675183),new S0.ep(119,198.968262489),new S0.ep(120,199.968308726),new S0.ep(121,200.970285275),new S0.ep(122,201.970625604),new S0.ep(123,202.972857096),new S0.ep(124,203.97347564),new S0.ep(125,204.976056104),new S0.ep(126,205.977498672),new S0.ep(127,206.982577025),new S0.ep(128,207.98594)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(96,176.996881),new S0.ep(97,177.994637),new S0.ep(98,178.991466),new S0.ep(99,179.990194),new S0.ep(100,180.986904),new S0.ep(101,181.98561),new S0.ep(102,182.982697),new S0.ep(103,183.98176),new S0.ep(104,184.9791),new S0.ep(105,185.977549881),new S0.ep(106,186.97617),new S0.ep(107,187.97592),new S0.ep(108,188.974290451),new S0.ep(109,189.974473379),new S0.ep(110,190.972261952),new S0.ep(111,191.972770785),new S0.ep(112,192.970548),new S0.ep(113,193.971053),new S0.ep(114,194.96965),new S0.ep(115,195.970515),new S0.ep(116,196.9695362),new S0.ep(117,197.970466294),new S0.ep(118,198.969813837),new S0.ep(119,199.970945394),new S0.ep(120,200.97080377),new S0.ep(121,201.972090569),new S0.ep(122,202.972329088),new S0.ep(123,203.973848646),new S0.ep(124,204.97441227),new S0.ep(125,205.976095321),new S0.ep(126,206.977407908),new S0.ep(127,207.982004653),new S0.ep(128,208.985349125),new S0.ep(129,209.990065574)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(99,180.996714),new S0.ep(100,181.992676101),new S0.ep(101,182.99193),new S0.ep(102,183.988198),new S0.ep(103,184.98758),new S0.ep(104,185.983485388),new S0.ep(105,186.98403),new S0.ep(106,187.979869108),new S0.ep(107,188.98088),new S0.ep(108,189.978180008),new S0.ep(109,190.9782),new S0.ep(110,191.975719811),new S0.ep(111,192.97608),new S0.ep(112,193.974648056),new S0.ep(113,194.975920279),new S0.ep(114,195.97271),new S0.ep(115,196.97338),new S0.ep(116,197.97198),new S0.ep(117,198.972909384),new S0.ep(118,199.97181556),new S0.ep(119,200.972846589),new S0.ep(120,201.972143786),new S0.ep(121,202.973375491),new S0.ep(122,203.973028761),new S0.ep(123,204.974467112),new S0.ep(124,205.974449002),new S0.ep(125,206.975880605),new S0.ep(126,207.97663585),new S0.ep(127,208.981074801),new S0.ep(128,209.984173129),new S0.ep(129,210.988731474),new S0.ep(130,211.991887495),new S0.ep(131,212.9965),new S0.ep(132,213.999798147)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(102,184.997708),new S0.ep(103,185.99648),new S0.ep(104,186.993458),new S0.ep(105,187.992173),new S0.ep(106,188.989505),new S0.ep(107,189.987520007),new S0.ep(108,190.986053),new S0.ep(109,191.985368),new S0.ep(110,192.983662229),new S0.ep(111,193.983430186),new S0.ep(112,194.98112697),new S0.ep(113,195.981236107),new S0.ep(114,196.978934287),new S0.ep(115,197.979024396),new S0.ep(116,198.977576953),new S0.ep(117,199.978141983),new S0.ep(118,200.976970721),new S0.ep(119,201.977674504),new S0.ep(120,202.976868118),new S0.ep(121,203.977805161),new S0.ep(122,204.977374688),new S0.ep(123,205.978482854),new S0.ep(124,206.978455217),new S0.ep(125,207.979726699),new S0.ep(126,208.980383241),new S0.ep(127,209.984104944),new S0.ep(128,210.987258139),new S0.ep(129,211.991271542),new S0.ep(130,212.994374836),new S0.ep(131,213.998698664),new S0.ep(132,215.001832349),new S0.ep(133,216.006199)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(106,189.994293888),new S0.ep(107,190.994653),new S0.ep(108,191.99033039),new S0.ep(109,192.991102),new S0.ep(110,193.988284107),new S0.ep(111,194.988045),new S0.ep(112,195.985469432),new S0.ep(113,196.985567),new S0.ep(114,197.984024384),new S0.ep(115,198.985044507),new S0.ep(116,199.981735),new S0.ep(117,200.982209),new S0.ep(118,201.980704),new S0.ep(119,202.981412863),new S0.ep(120,203.980307113),new S0.ep(121,204.981165396),new S0.ep(122,205.980465241),new S0.ep(123,206.981578228),new S0.ep(124,207.981231059),new S0.ep(125,208.982415788),new S0.ep(126,209.982857396),new S0.ep(127,210.986636869),new S0.ep(128,211.988851755),new S0.ep(129,212.992842522),new S0.ep(130,213.995185949),new S0.ep(131,214.999414609),new S0.ep(132,216.001905198),new S0.ep(133,217.006253),new S0.ep(134,218.008965773)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(108,193.000188),new S0.ep(109,193.997973),new S0.ep(110,194.996554),new S0.ep(111,195.995702),new S0.ep(112,196.993891293),new S0.ep(113,197.99343368),new S0.ep(114,198.991008569),new S0.ep(115,199.990920883),new S0.ep(116,200.988486908),new S0.ep(117,201.988448629),new S0.ep(118,202.986847216),new S0.ep(119,203.987261559),new S0.ep(120,204.986036352),new S0.ep(121,205.986599242),new S0.ep(122,206.985775861),new S0.ep(123,207.986582508),new S0.ep(124,208.986158678),new S0.ep(125,209.987131308),new S0.ep(126,210.987480806),new S0.ep(127,211.990734657),new S0.ep(128,212.99292115),new S0.ep(129,213.996356412),new S0.ep(130,214.998641245),new S0.ep(131,216.002408839),new S0.ep(132,217.004709619),new S0.ep(133,218.008681458),new S0.ep(134,219.011296478),new S0.ep(135,220.015301),new S0.ep(136,221.01814),new S0.ep(137,222.02233),new S0.ep(138,223.02534)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(110,196.001117268),new S0.ep(111,197.001661),new S0.ep(112,197.998779978),new S0.ep(113,198.998309),new S0.ep(114,199.995634148),new S0.ep(115,200.995535),new S0.ep(116,201.993899382),new S0.ep(117,202.994765192),new S0.ep(118,203.991365),new S0.ep(119,204.991668),new S0.ep(120,205.99016),new S0.ep(121,206.990726826),new S0.ep(122,207.989631237),new S0.ep(123,208.990376634),new S0.ep(124,209.989679862),new S0.ep(125,210.99058541),new S0.ep(126,211.990688899),new S0.ep(127,212.993868354),new S0.ep(128,213.995346275),new S0.ep(129,214.998729195),new S0.ep(130,216.000258153),new S0.ep(131,217.003914555),new S0.ep(132,218.005586315),new S0.ep(133,219.009474831),new S0.ep(134,220.011384149),new S0.ep(135,221.015455),new S0.ep(136,222.017570472),new S0.ep(137,223.02179),new S0.ep(138,224.02409),new S0.ep(139,225.02844),new S0.ep(140,226.03089),new S0.ep(141,227.035407),new S0.ep(142,228.038084)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(113,200.006499),new S0.ep(114,201.00458692),new S0.ep(115,202.00396885),new S0.ep(116,203.001423829),new S0.ep(117,204.001221209),new S0.ep(118,204.998663961),new S0.ep(119,205.998486886),new S0.ep(120,206.996859385),new S0.ep(121,207.997133849),new S0.ep(122,208.995915421),new S0.ep(123,209.996398327),new S0.ep(124,210.995529332),new S0.ep(125,211.996194988),new S0.ep(126,212.996174845),new S0.ep(127,213.99895474),new S0.ep(128,215.000326029),new S0.ep(129,216.003187873),new S0.ep(130,217.004616452),new S0.ep(131,218.007563326),new S0.ep(132,219.009240843),new S0.ep(133,220.012312978),new S0.ep(134,221.014245654),new S0.ep(135,222.017543957),new S0.ep(136,223.019730712),new S0.ep(137,224.023235513),new S0.ep(138,225.025606914),new S0.ep(139,226.029343423),new S0.ep(140,227.031833167),new S0.ep(141,228.034776087),new S0.ep(142,229.038426),new S0.ep(143,230.04251),new S0.ep(144,231.045407),new S0.ep(145,232.049654)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(115,203.00921),new S0.ep(116,204.006434513),new S0.ep(117,205.006187),new S0.ep(118,206.004463814),new S0.ep(119,207.005176607),new S0.ep(120,208.001776),new S0.ep(121,209.001944),new S0.ep(122,210.000446),new S0.ep(123,211.000893996),new S0.ep(124,211.999783492),new S0.ep(125,213.000345847),new S0.ep(126,214.000091141),new S0.ep(127,215.002704195),new S0.ep(128,216.003518402),new S0.ep(129,217.00630601),new S0.ep(130,218.007123948),new S0.ep(131,219.010068787),new S0.ep(132,220.011014669),new S0.ep(133,221.013907762),new S0.ep(134,222.01536182),new S0.ep(135,223.01849714),new S0.ep(136,224.020202004),new S0.ep(137,225.023604463),new S0.ep(138,226.025402555),new S0.ep(139,227.029170677),new S0.ep(140,228.031064101),new S0.ep(141,229.034820309),new S0.ep(142,230.037084774),new S0.ep(143,231.04122),new S0.ep(144,232.043693),new S0.ep(145,233.047995),new S0.ep(146,234.050547)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(118,207.012469754),new S0.ep(119,208.012112949),new S0.ep(120,209.009568736),new S0.ep(121,210.009256802),new S0.ep(122,211.007648196),new S0.ep(123,212.007811441),new S0.ep(124,213.006573689),new S0.ep(125,214.006893072),new S0.ep(126,215.006450832),new S0.ep(127,216.008721268),new S0.ep(128,217.009332676),new S0.ep(129,218.011625045),new S0.ep(130,219.012404918),new S0.ep(131,220.014752105),new S0.ep(132,221.015575746),new S0.ep(133,222.017828852),new S0.ep(134,223.01912603),new S0.ep(135,224.021708435),new S0.ep(136,225.023220576),new S0.ep(137,226.026089848),new S0.ep(138,227.027746979),new S0.ep(139,228.031014825),new S0.ep(140,229.032930871),new S0.ep(141,230.036025144),new S0.ep(142,231.038551503),new S0.ep(143,232.042022474),new S0.ep(144,233.04455),new S0.ep(145,234.04842),new S0.ep(146,235.051102),new S0.ep(147,236.055178)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(120,210.015711883),new S0.ep(121,211.016306912),new S0.ep(122,212.012916),new S0.ep(123,213.012962),new S0.ep(124,214.011451),new S0.ep(125,215.011726597),new S0.ep(126,216.011050963),new S0.ep(127,217.013066169),new S0.ep(128,218.013267744),new S0.ep(129,219.015521253),new S0.ep(130,220.015733126),new S0.ep(131,221.018171499),new S0.ep(132,222.018454131),new S0.ep(133,223.020795153),new S0.ep(134,224.02145925),new S0.ep(135,225.023941441),new S0.ep(136,226.024890681),new S0.ep(137,227.027698859),new S0.ep(138,228.028731348),new S0.ep(139,229.03175534),new S0.ep(140,230.033126574),new S0.ep(141,231.03629706),new S0.ep(142,232.03805036),new S0.ep(143,233.041576923),new S0.ep(144,234.043595497),new S0.ep(145,235.04750442),new S0.ep(146,236.04971),new S0.ep(147,237.053894),new S0.ep(148,238.056243)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(122,213.021183209),new S0.ep(123,214.02073923),new S0.ep(124,215.019097612),new S0.ep(125,216.019109649),new S0.ep(126,217.018288571),new S0.ep(127,218.020007906),new S0.ep(128,219.019880348),new S0.ep(129,220.021876493),new S0.ep(130,221.021863742),new S0.ep(131,222.023726),new S0.ep(132,223.023963748),new S0.ep(133,224.025614854),new S0.ep(134,225.026115172),new S0.ep(135,226.02793275),new S0.ep(136,227.028793151),new S0.ep(137,228.031036942),new S0.ep(138,229.032088601),new S0.ep(139,230.034532562),new S0.ep(140,231.035878898),new S0.ep(141,232.03858172),new S0.ep(142,233.040240235),new S0.ep(143,234.043302325),new S0.ep(144,235.045436759),new S0.ep(145,236.048675176),new S0.ep(146,237.05113943),new S0.ep(147,238.054497046),new S0.ep(148,239.05713),new S0.ep(149,240.06098)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(126,218.023487),new S0.ep(127,219.024915423),new S0.ep(128,220.024712),new S0.ep(129,221.026351),new S0.ep(130,222.02607),new S0.ep(131,223.027722956),new S0.ep(132,224.027590139),new S0.ep(133,225.029384369),new S0.ep(134,226.02933975),new S0.ep(135,227.031140069),new S0.ep(136,228.031366357),new S0.ep(137,229.033496137),new S0.ep(138,230.033927392),new S0.ep(139,231.036289158),new S0.ep(140,232.03714628),new S0.ep(141,233.039628196),new S0.ep(142,234.040945606),new S0.ep(143,235.043923062),new S0.ep(144,236.045561897),new S0.ep(145,237.048723955),new S0.ep(146,238.050782583),new S0.ep(147,239.054287777),new S0.ep(148,240.056585734),new S0.ep(149,241.06033),new S0.ep(150,242.062925)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(132,225.033899689),new S0.ep(133,226.035129),new S0.ep(134,227.034958261),new S0.ep(135,228.03618),new S0.ep(136,229.036246866),new S0.ep(137,230.037812591),new S0.ep(138,231.038233161),new S0.ep(139,232.040099),new S0.ep(140,233.04073235),new S0.ep(141,234.042888556),new S0.ep(142,235.044055876),new S0.ep(143,236.046559724),new S0.ep(144,237.048167253),new S0.ep(145,238.050940464),new S0.ep(146,239.052931399),new S0.ep(147,240.056168828),new S0.ep(148,241.058246266),new S0.ep(149,242.061635),new S0.ep(150,243.064273),new S0.ep(151,244.06785)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(134,228.038727686),new S0.ep(135,229.040138934),new S0.ep(136,230.039645603),new S0.ep(137,231.041258),new S0.ep(138,232.041179445),new S0.ep(139,233.04298757),new S0.ep(140,234.043304681),new S0.ep(141,235.0452815),new S0.ep(142,236.046048088),new S0.ep(143,237.048403774),new S0.ep(144,238.0495534),new S0.ep(145,239.052156519),new S0.ep(146,240.05380746),new S0.ep(147,241.056845291),new S0.ep(148,242.058736847),new S0.ep(149,243.061997013),new S0.ep(150,244.06419765),new S0.ep(151,245.067738657),new S0.ep(152,246.070198429),new S0.ep(153,247.07407)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(136,231.04556),new S0.ep(137,232.04659),new S0.ep(138,233.046472),new S0.ep(139,234.047794),new S0.ep(140,235.048029),new S0.ep(141,236.049569),new S0.ep(142,237.049970748),new S0.ep(143,238.051977839),new S0.ep(144,239.053018481),new S0.ep(145,240.055287826),new S0.ep(146,241.056822944),new S0.ep(147,242.059543039),new S0.ep(148,243.061372686),new S0.ep(149,244.064279429),new S0.ep(150,245.066445398),new S0.ep(151,246.069768438),new S0.ep(152,247.072086),new S0.ep(153,248.075745),new S0.ep(154,249.07848)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(137,233.0508),new S0.ep(138,234.05024),new S0.ep(139,235.051591),new S0.ep(140,236.051405),new S0.ep(141,237.052891),new S0.ep(142,238.053016298),new S0.ep(143,239.054951),new S0.ep(144,240.055519046),new S0.ep(145,241.057646736),new S0.ep(146,242.058829326),new S0.ep(147,243.061382249),new S0.ep(148,244.062746349),new S0.ep(149,245.065485586),new S0.ep(150,246.067217551),new S0.ep(151,247.070346811),new S0.ep(152,248.072342247),new S0.ep(153,249.075947062),new S0.ep(154,250.078350687),new S0.ep(155,251.082277873),new S0.ep(156,252.08487)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(138,235.05658),new S0.ep(139,236.05733),new S0.ep(140,237.057127),new S0.ep(141,238.058266),new S0.ep(142,239.058362),new S0.ep(143,240.059749),new S0.ep(144,241.060223),new S0.ep(145,242.06205),new S0.ep(146,243.06300157),new S0.ep(147,244.065167882),new S0.ep(148,245.066355386),new S0.ep(149,246.068666836),new S0.ep(150,247.070298533),new S0.ep(151,248.07308),new S0.ep(152,249.074979937),new S0.ep(153,250.078310529),new S0.ep(154,251.08075344),new S0.ep(155,252.084303),new S0.ep(156,253.08688),new S0.ep(157,254.0906)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(139,237.06207),new S0.ep(140,238.06141),new S0.ep(141,239.062579),new S0.ep(142,240.062295),new S0.ep(143,241.063716),new S0.ep(144,242.063688713),new S0.ep(145,243.065421),new S0.ep(146,244.06599039),new S0.ep(147,245.068039),new S0.ep(148,246.068798807),new S0.ep(149,247.070992043),new S0.ep(150,248.07217808),new S0.ep(151,249.074846818),new S0.ep(152,250.076399951),new S0.ep(153,251.079580056),new S0.ep(154,252.081619582),new S0.ep(155,253.085126791),new S0.ep(156,254.087316198),new S0.ep(157,255.091039),new S0.ep(158,256.09344)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(141,240.06892),new S0.ep(142,241.068662),new S0.ep(143,242.069699),new S0.ep(144,243.069631),new S0.ep(145,244.070969),new S0.ep(146,245.071317),new S0.ep(147,246.072965),new S0.ep(148,247.07365),new S0.ep(149,248.075458),new S0.ep(150,249.076405),new S0.ep(151,250.078654),new S0.ep(152,251.079983592),new S0.ep(153,252.082972247),new S0.ep(154,253.084817974),new S0.ep(155,254.088016026),new S0.ep(156,255.090266386),new S0.ep(157,256.093592),new S0.ep(158,257.095979)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(142,242.07343),new S0.ep(143,243.07451),new S0.ep(144,244.074077),new S0.ep(145,245.075375),new S0.ep(146,246.075281634),new S0.ep(147,247.076819),new S0.ep(148,248.077184411),new S0.ep(149,249.079024),new S0.ep(150,250.079514759),new S0.ep(151,251.081566467),new S0.ep(152,252.082460071),new S0.ep(153,253.085176259),new S0.ep(154,254.086847795),new S0.ep(155,255.089955466),new S0.ep(156,256.091766522),new S0.ep(157,257.095098635),new S0.ep(158,258.097069),new S0.ep(159,259.100588)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(144,245.081017),new S0.ep(145,246.081933),new S0.ep(146,247.081804),new S0.ep(147,248.082909),new S0.ep(148,249.083002),new S0.ep(149,250.084488),new S0.ep(150,251.084919),new S0.ep(151,252.08663),new S0.ep(152,253.08728),new S0.ep(153,254.089725),new S0.ep(154,255.091075196),new S0.ep(155,256.094052757),new S0.ep(156,257.095534643),new S0.ep(157,258.098425321),new S0.ep(158,259.100503),new S0.ep(159,260.103645)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(147,249.087823),new S0.ep(148,250.087493),new S0.ep(149,251.08896),new S0.ep(150,252.088965909),new S0.ep(151,253.090649),new S0.ep(152,254.090948746),new S0.ep(153,255.093232449),new S0.ep(154,256.094275879),new S0.ep(155,257.096852778),new S0.ep(156,258.0982),new S0.ep(157,259.101024),new S0.ep(158,260.102636),new S0.ep(159,261.105743),new S0.ep(160,262.10752)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(148,251.09436),new S0.ep(149,252.09533),new S0.ep(150,253.095258),new S0.ep(151,254.096587),new S0.ep(152,255.096769),new S0.ep(153,256.098763),new S0.ep(154,257.099606),new S0.ep(155,258.101883),new S0.ep(156,259.10299),new S0.ep(157,260.105572),new S0.ep(158,261.106941),new S0.ep(159,262.109692),new S0.ep(160,263.111394)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(149,253.100679),new S0.ep(150,254.100166),new S0.ep(151,255.101492),new S0.ep(152,256.101179573),new S0.ep(153,257.103072),new S0.ep(154,258.103568),new S0.ep(155,259.105628),new S0.ep(156,260.106434),new S0.ep(157,261.108752),new S0.ep(158,262.109918),new S0.ep(159,263.11254),new S0.ep(160,264.113978)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(150,255.107398),new S0.ep(151,256.10811),new S0.ep(152,257.107858),new S0.ep(153,258.109438),new S0.ep(154,259.109721),new S0.ep(155,260.111427),new S0.ep(156,261.112106),new S0.ep(157,262.114153),new S0.ep(158,263.115078),new S0.ep(159,264.117473),new S0.ep(160,265.118659)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(152,258.113151),new S0.ep(153,259.114652),new S0.ep(154,260.114435447),new S0.ep(155,261.116199),new S0.ep(156,262.116477),new S0.ep(157,263.118313),new S0.ep(158,264.118924),new S0.ep(159,265.121066),new S0.ep(160,266.121928)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(153,260.121803),new S0.ep(154,261.1218),new S0.ep(155,262.123009),new S0.ep(156,263.123146),new S0.ep(157,264.12473),new S0.ep(158,265.125198),new S0.ep(159,266.127009),new S0.ep(160,267.12774)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(155,263.12871),new S0.ep(156,264.128408258),new S0.ep(157,265.130001),new S0.ep(158,266.130042),new S0.ep(159,267.131774),new S0.ep(160,268.132156),new S0.ep(161,269.134114)]),WL(IL(N0.IN,1),C3,3,0,[new S0.ep(156,265.136567),new S0.ep(157,266.13794),new S0.ep(158,267.137526),new S0.ep(159,268.138816),new S0.ep(160,269.139106),new S0.ep(161,270.140723),new S0.ep(162,271.141229)])]);};
S0.hp=function hp(a,b){S0.gp();var c,d;d=b-a;for(c=0;c<S0.fp[a].length;c++)if(S0.fp[a][c].b==d)return S0.fp[a][c].a;return NaN};S0.ip=function ip(a,b){var c;if(a.b.length!=b.b.length)return a.b.length<b.b.length?-1:1;for(c=0;c<a.b.length;c++)if(a.b[c]!=b.b[c])return a.b[c]<b.b[c]?-1:1;return 0};S0.jp=function jp(a){var b,c,d,e,f,g;c=0;for(e=a.a,f=0,g=e.length;f<g;++f){d=e[f];d&&++c;}a.b=OL(N0.hN,K1,5,c,15,1);c=0;for(b=0;b<a.a.length;b++)a.a[b]&&(a.b[c++]=b);};S0.kp=function kp(a,b){var c;S0.jp(a);for(c=0;c<a.b.length;c++)if(b[a.b[c]])return true;return false};S0.lp=function lp(a){this.a=OL(N0.xQ,c2,5,a,16,1);};sR(124,1,{124:1,27:1},S0.lp);_.qb=function mp(a){return S0.ip(this,a)};N0.JN=LS(124);S0.qp=function qp(){S0.qp=uR;S0.pp=WL(IL(N0.fN,1),O2,5,15,[0,1.00794,4.0026,6.941,9.0122,10.811,12.011,14.007,15.999,18.998,20.18,22.99,24.305,26.982,28.086,30.974,32.066,35.453,39.948,39.098,40.078,44.956,47.867,50.942,51.996,54.938,55.845,58.933,58.693,63.546,65.39,69.723,72.61,74.922,78.96,79.904,83.8,85.468,87.62,88.906,91.224,92.906,95.94,98.906,101.07,102.91,106.42,107.87,112.41,114.82,118.71,121.76,127.6,126.9,131.29,132.91,137.33,138.91,140.12,140.91,144.24,146.92,150.36,151.96,157.25,158.93,162.5,164.93,167.26,168.93,173.04,174.97,178.49,180.95,183.84,186.21,190.23,192.22,195.08,196.97,200.59,204.38,207.2,208.98,209.98,209.99,222.02,223.02,226.03,227.03,232.04,231.04,238.03,237.05,239.05,241.06,244.06,249.08,252.08,252.08,257.1,258.1,259.1,262.11,267.12,268.13,271.13,270.13,277.15,276.15,D3,D3,283.17,285.18,E3,E3,293.2,F3,F3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.0141,3.016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71.0787,156.18828,114.10364,115.0877,103.1447,128.13052,129.11458,57.05182,137.14158,113.15934,113.15934,128.17428,131.19846,147.17646,97.11658,87.0777,101.10458,186.2134,163.17546,99.13246]);S0.np=WL(IL(N0.fN,1),O2,5,15,[0,1.007825,4.0026,7.016003,9.012182,11.009305,12,14.003074,15.994915,18.998403,19.992435,22.989767,23.985042,26.98153,27.976927,30.973762,31.97207,34.968852,39.962384,38.963707,39.962591,44.95591,47.947947,50.943962,51.940509,54.938047,55.934939,58.933198,57.935346,62.939598,63.929145,68.92558,73.921177,74.921594,79.91652,78.918336,83.911507,84.911794,87.905619,88.905849,89.904703,92.906377,97.905406,89.92381,101.904348,102.9055,105.903478,106.905092,113.903357,114.90388,119.9022,120.903821,129.906229,126.904473,131.904144,132.905429,137.905232,138.906346,139.905433,140.907647,141.907719,135.92398,151.919729,152.921225,157.924099,158.925342,163.929171,164.930319,165.93029,168.934212,173.938859,174.94077,179.946545,180.947992,183.950928,186.955744,191.961467,192.962917,194.964766,196.966543,201.970617,204.974401,207.976627,208.980374,193.98818,195.99573,199.9957,201.00411,206.0038,210.00923,232.038054,216.01896,238.050784,229.03623,232.041169,237.05005,238.05302,242.06194,240.06228,243.06947,243.07446,248.08275,251.08887,253.09515,257.10295,257.10777,271.13,270.13,277.15,276.15,D3,D3,283.17,285.18,E3,E3,291.2,F3,F3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.014,3.01605,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);S0.op=WL(IL(N0.hN,1),K1,5,15,[6,1,7,8]);};S0.rp=function rp(a){var b,c;c=a.a;for(b=0;b<a.b.length;b++)c+=a.b[b]*S0.np[a.c[b]];return c};S0.sp=function sp(a){var b,c;b=new O0.AU;for(c=0;c<a.b.length;c++){O0.zU(b,(S0.Ri(),S0.Li)[a.c[c]]);a.b[c]>1&&O0.yU(b,a.b[c]);}return b.a};S0.tp=function tp(a){var b,c;c=a.d;for(b=0;b<a.b.length;b++)c+=a.b[b]*S0.pp[a.c[b]];return c};S0.up=function up(a){var b,c,d,e,f,g,h,i,j,k,l;S0.Ls(a,1);e=OL(N0.hN,K1,5,191,15,1);for(c=0;c<a.o;c++){switch(a.A[c]){case 171:e[1]+=5;e[6]+=3;e[7]+=1;e[8]+=1;break;case 172:e[1]+=12;e[6]+=6;e[7]+=4;e[8]+=1;break;case 173:e[1]+=6;e[6]+=4;e[7]+=2;e[8]+=2;break;case 174:e[1]+=5;e[6]+=4;e[7]+=1;e[8]+=3;break;case 175:e[1]+=5;e[6]+=3;e[7]+=1;e[8]+=1;e[16]+=1;break;case 176:e[1]+=8;e[6]+=5;e[7]+=2;e[8]+=2;break;case 177:e[1]+=7;e[6]+=5;e[7]+=1;e[8]+=3;break;case 178:e[1]+=3;e[6]+=2;e[7]+=1;e[8]+=1;break;case 179:e[1]+=7;e[6]+=6;e[7]+=3;e[8]+=1;break;case 181:case 180:e[1]+=11;e[6]+=6;e[7]+=1;e[8]+=1;break;case 182:e[1]+=12;e[6]+=6;e[7]+=2;e[8]+=1;break;case 183:e[1]+=9;e[6]+=5;e[7]+=1;e[8]+=1;e[16]+=1;break;case 184:e[1]+=9;e[6]+=9;e[7]+=1;e[8]+=1;break;case 185:e[1]+=7;e[6]+=5;e[7]+=1;e[8]+=1;break;case 186:e[1]+=5;e[6]+=3;e[7]+=1;e[8]+=2;break;case 187:e[1]+=7;e[6]+=4;e[7]+=1;e[8]+=2;break;case 188:e[1]+=10;e[6]+=11;e[7]+=2;e[8]+=1;break;case 189:e[1]+=9;e[6]+=9;e[7]+=1;e[8]+=2;break;case 190:e[1]+=9;e[6]+=5;e[7]+=1;e[8]+=1;break;case 1:switch(a.v[c]){case 0:case 1:++e[1];break;case 2:++e[151];break;case 3:++e[152];}break;default:++e[a.A[c]];}}for(d=0;d<a.o;d++)a.A[d]>=171&&a.A[d]<=190?(e[1]+=2-S0.gn(a,d)):(e[1]+=S0.bn(a,d));h=0;for(j=1;j<=190;j++)e[j]!=0&&++h;this.b=OL(N0.hN,K1,5,h,15,1);this.c=OL(N0.hN,K1,5,h,15,1);h=0;for(i=0;i<S0.op.length;i++){if(e[S0.op[i]]!=0){this.b[h]=e[S0.op[i]];this.c[h]=S0.op[i];++h;e[S0.op[i]]=0;}}while(true){l='zzz';k=-1;for(g=1;g<=190;g++)if(e[g]>0&&O0.aU(l,(S0.Ri(),S0.Li)[g])>0){l=(S0.Ri(),S0.Li)[g];k=g;}if(k==-1)break;this.b[h]=e[k];this.c[h]=k;++h;e[k]=0;}this.a=0;this.d=0;for(b=0;b<a.d;b++){if(a.A[b]!=1&&a.v[b]!=0){g=a.A[b];f=a.v[b];this.a+=S0.hp(g,f)-S0.np[g];this.d+=S0.hp(g,f)-S0.pp[g];}}};sR(81,1,{81:1});_.ib=function vp(a){var b;if(a===this)return true;if(!VM(a,81))return false;for(b=0;b<this.b.length;b++)if(this.b[b]!=a.b[b])return false;return true};_.a=0;_.d=0;N0.KN=LS(81);S0.wp=function wp(a,b){var c,d;d=k1.iX(a.b,b);for(c=R0.I0(d).length;c<10;c++)O0.DU(a.a,32);O0.HU(a.a,d);};S0.xp=function xp(a,b){var c,d,e;if(b<0||b>999){O0.HU(a.a,'  ?');return}c=false;for(d=0;d<3;d++){e=b/100|0;if(e==0){d==2||c?O0.DU(a.a,48):O0.DU(a.a,32);}else {O0.DU(a.a,48+e&D1);c=true;}b=10*(b%100);}};S0.yp=function yp(a,b){h1.VR(b,a.a.a);};S0.zp=function zp(a){S0.Ap.call(this,a);};S0.Ap=function Ap(a){S0.Cp.call(this,a,new O0.LU);};S0.Bp=function Bp(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z;this.b=new k1.kX((N=G3,N));S0.Ls(a,15);L=true;for(e=0;e<a.d;e++){if((a.s[e]&3)!=0&&(a.s[e]&3)!=3&&(a.s[e]&U2)>>18!=1){L=false;break}}O=-1;if(L){F=OL(N0.hN,K1,5,32,15,1);P=0;for(f=0;f<a.d;f++){if((a.s[f]&3)!=0&&(a.s[f]&3)!=3&&(a.s[f]&U2)>>18==1){H=(a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20;++F[H];if(P<F[H]){P=F[H];O=H;}break}}}this.a=!c?new O0.KU:c;R=a.N!=null?a.N:'';O0.HU(this.a,R+o1);O0.HU(this.a,'Actelion Java MolfileCreator 1.0\n\n');S0.xp(this,a.o);S0.xp(this,a.p);O0.HU(this.a,'  0  0');S0.xp(this,L?0:1);O0.HU(this.a,'  0  0  0  0  0999 V2000\n');I=a.o==1;for(i=1;i<a.o;i++){if(a.H[i].a!=a.H[0].a||a.H[i].b!=a.H[0].b||a.H[i].c!=a.H[0].c){I=true;break}}G=1;if(I){if(b!=0){G=b;}else {s=S0.Rj(a,a.o,a.p,(S0.Ri(),S0.Qi));if(s!=0){(s<1||s>3)&&(G=1.5/s);}else {Q=q3;for(f=1;f<a.o;f++){for(h=0;h<f;h++){B=a.H[h].a-a.H[f].a;C=a.H[h].b-a.H[f].b;D=a.H[h].c-a.H[f].c;A=B*B+C*C+D*D;Q>A&&(Q=A);}}G=3/Q;}}}for(j=0;j<a.o;j++){if(I){S0.wp(this,G*a.H[j].a);S0.wp(this,G*-a.H[j].b);S0.wp(this,G*-a.H[j].c);}else {O0.HU(this.a,'    0.0000    0.0000    0.0000');}if((a.t==null?null:a.t[j])!=null)O0.HU(this.a,' L  ');else if(ZQ(EQ(a.w[j],1),0))O0.HU(this.a,' A  ');else if(a.A[j]>=129&&a.A[j]<=144||a.A[j]==154)O0.HU(this.a,' R# ');else {p=(S0.Ri(),S0.Li)[a.A[j]];O0.HU(this.a,' '+p);R0.I0(p).length==1?O0.HU(this.a,'  '):R0.I0(p).length==2&&O0.HU(this.a,' ');}O0.HU(this.a,' 0  0  0');J=EQ(o2,a.w[j]);JQ(J,0)==0?O0.HU(this.a,'  0'):JQ(J,384)==0?O0.HU(this.a,'  3'):JQ(J,128)==0?O0.HU(this.a,'  2'):JQ(J,1792)==0?O0.HU(this.a,'  1'):JQ(J,1664)==0&&O0.HU(this.a,'  2');O0.HU(this.a,ZQ(EQ(a.w[j],M2),0)?'  1':'  0');Z=((a.s[j]&n3)>>>27)-1;Z==-1?O0.HU(this.a,'  0'):Z==0?O0.HU(this.a,' 15'):S0.xp(this,Z);O0.HU(this.a,'  0  0  0');S0.xp(this,$wnd.Math.abs(a.u[j]));O0.HU(this.a,'  0  0\n');}for(t=0;t<a.p;t++){switch(a.F[t]){case 1:T=1;W=0;break;case 2:T=2;W=0;break;case 4:T=3;W=0;break;case 129:T=1;W=6;break;case 257:T=1;W=1;break;case 386:T=2;W=3;break;case 64:T=4;W=0;break;case 32:T=8;W=0;break;default:T=1;W=0;}if(L&&(W==1||W==6)){f=a.B[0][t];(a.s[f]&U2)>>18==2?(W=0):(a.s[f]&U2)>>18==1&&((a.s[f]&U2)>>18!=1&&(a.s[f]&U2)>>18!=2?-1:(a.s[f]&o3)>>20)!=O&&(W=4);}u=a.D[t]&31;u!=0&&(u==8?(T=4):u==3?(T=5):u==9?(T=6):u==10?(T=7):(T=8));V=a.D[t]&384;Y=V==0?0:V==256?1:2;S0.xp(this,1+a.B[0][t]);S0.xp(this,1+a.B[1][t]);S0.xp(this,T);S0.xp(this,W);O0.HU(this.a,'  0');S0.xp(this,Y);O0.HU(this.a,'  0\n');}S=0;for(k=0;k<a.o;k++)a.q[k]!=0&&++S;if(S!=0){w=0;for(f=0;f<a.o;f++){if(a.q[f]!=0){if(w==0){O0.HU(this.a,'M  CHG');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,f+1);v=a.q[f];if(v<0){O0.HU(this.a,'  -');v=-v;}else O0.HU(this.a,'   ');O0.DU(this.a,48+v&D1);--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}S=0;for(l=0;l<a.o;l++)a.v[l]==0||++S;if(S!=0){w=0;for(f=0;f<a.o;f++){if(a.v[f]!=0){if(w==0){O0.HU(this.a,'M  ISO');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,f+1);O0.HU(this.a,' ');S0.xp(this,a.v[f]);--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}S=0;for(m=0;m<a.o;m++)(a.s[m]&48)!=0&&++S;if(S!=0){w=0;for(f=0;f<a.o;f++){if((a.s[f]&48)!=0){if(w==0){O0.HU(this.a,'M  RAD');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,f+1);switch(a.s[f]&48){case 16:O0.HU(this.a,'   1');break;case 32:O0.HU(this.a,'   2');break;case 48:O0.HU(this.a,'   3');}--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}S=0;for(n=0;n<a.o;n++)(a.A[n]>=129&&a.A[n]<=144||a.A[n]==154)&&++S;if(S!=0){w=0;for(d=0;d<a.o;d++){r=a.A[d];if(r>=129&&r<=144||r==154){if(w==0){O0.HU(this.a,'M  RGP');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,d+1);O0.HU(this.a,' ');S0.xp(this,r==154?0:r>=142?r-141:r-125);--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}if(a.I){S=0;for(f=0;f<a.o;f++)ZQ(EQ(a.w[f],120),0)&&++S;if(S!=0){w=0;for(h=0;h<a.o;h++){U=EQ(a.w[h],120);if(JQ(U,0)!=0){if(w==0){O0.HU(this.a,'M  RBC');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,h+1);JQ(U,112)==0?O0.HU(this.a,'  -1'):JQ(U,8)==0?O0.HU(this.a,'   1'):JQ(U,104)==0?O0.HU(this.a,'   2'):JQ(U,88)==0?O0.HU(this.a,'   3'):JQ(U,56)==0&&O0.HU(this.a,'   4');--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}for(o=0;o<a.o;o++){q=a.t==null?null:a.t[o];if(q!=null){O0.HU(this.a,'M  ALS ');S0.xp(this,o+1);S0.xp(this,q.length);O0.HU(this.a,ZQ(EQ(a.w[o],1),0)?' T ':' F ');for(K=0;K<q.length;K++){M=(S0.Ri(),S0.Li)[q[K]];switch(R0.I0(M).length){case 1:O0.HU(this.a,M+'   ');break;case 2:O0.HU(this.a,M+'  ');break;case 3:O0.HU(this.a,M+' ');break;default:O0.HU(this.a,'   ?');}}O0.HU(this.a,o1);}}S=0;for(g=0;g<a.o;g++)ZQ(EQ(a.w[g],6144),0)&&++S;if(S!=0){w=0;for(d=0;d<a.o;d++){X=EQ(a.w[d],6144);if(JQ(X,0)!=0){if(w==0){O0.HU(this.a,'M  SUB');S0.xp(this,$wnd.Math.min(8,S));}O0.HU(this.a,' ');S0.xp(this,d+1);ZQ(EQ(X,k2),0)?O0.HU(this.a,'   '+(a.c[d]+1)):O0.HU(this.a,'  -2');--S;if(++w==8||S==0){w=0;O0.HU(this.a,o1);}}}}}O0.HU(this.a,H3);};S0.Cp=function Cp(a,b){S0.Bp.call(this,a,0,b);};sR(68,1,{},S0.zp,S0.Bp);N0.MN=LS(68);S0.Dp=function Dp(a,b,c,d,e,f){var g,h,i,j;j=1;h=false;switch(e){case 1:j=257;break;case 3:j=386;break;case 4:j=257;h=true;break;case 6:j=129;break;default:switch(d){case 1:j=1;break;case 2:j=2;break;case 3:j=4;break;case 4:j=64;break;case 9:j=32;}}g=S0.Vi(a.j,b,c,j);i=0;h&&S0.gl(a.j,b,1,-1);if(d>4){switch(d){case 5:i|=3;break;case 6:i|=9;break;case 7:i|=10;break;case 8:j!=32&&(i|=31);}}f==1&&(i|=256);f==2&&(i|=128);i!=0&&S0.Dl(a.j,g,i,true);return g};S0.Ep=function Ep(a){var b,c,d,e,f,g,h,i,j,k,l;g=OL(N0.hN,K1,5,a.j.o,15,1);for(c=0;c<a.j.o;c++)g[c]=-S0.yj(a.j,c);S0.ae(new S0.ke(a.j),null,true);for(d=0;d<a.j.o;d++)g[d]+=S0.yj(a.j,d);for(b=0;b<a.j.o;b++){if(g[b]!=0){h=-g[b];for(e=0;e<a.j.p;e++){for(j=0;j<2;j++){if(h>0&&S0.dk(a.j,e)==32&&S0.Uj(a.j,1-j,e)==b){l=S0.Uj(a.j,j,e);if(S0.Ek(a.j,l)){k=S0.Gp(a,l);f=S0.yj(a.j,l);if(f<k){i=$wnd.Math.min(h,k-f);S0.bl(a.j,l,f+i);h-=i;}}}}}}}};S0.Fp=function Fp(a,b){a.j=null;return S0.Xp(a,new h1.QR(new h1.UR(b)))?a.j:null};S0.Gp=function Gp(a,b){var c,d;c=S0.Pj(a.j,b);d=c<(S0.Ri(),S0.Ni).length?S0.Ni[c]:null;return d==null?0:d[d.length-1]};S0.Hp=function Hp(a,b){var c;c=!a.b?null:T0.HY(a.b,new O0.DT(b));return !c?b-1:c.a};S0.Ip=function Ip(a,b){var c;c=!a.c?null:T0.HY(a.c,new O0.DT(b));return !c?b-1:c.a};S0.Jp=function Jp(a,b){var c,d;if(b!=null){S0.Ls(a.j,1);for(c=0;c<a.j.d;c++){if(b[c]!=0){d=S0.hk(a.j,c,S0.gn(a.j,c));b[c]==15?d>=0&&S0._k(a.j,c,0):b[c]!=S0.ik(a.j,c)&&S0._k(a.j,c,b[c]-d);}}}};S0.Kp=function Kp(a,b){var c;if(b==-1){return -1}for(c=b+1;c<R0.I0(a).length;c++){R0.F0(c,R0.I0(a).length);if(R0.I0(a).charCodeAt(c)!=32&&(R0.F0(c,R0.I0(a).length),R0.I0(a).charCodeAt(c)!=9)){return c}}return -1};S0.Lp=function Lp(a,b){var c;for(c=b;c<R0.I0(a).length;c++){R0.F0(c,R0.I0(a).length);if(R0.I0(a).charCodeAt(c)==32||(R0.F0(c,R0.I0(a).length),R0.I0(a).charCodeAt(c)==9)){return c}}return -1};S0.Mp=function Mp(a){if(R0.I0(a).indexOf('ATOMS=(')!=-1)return I3;if(R0.I0(a).indexOf('BONDS=(')!=-1)return 'BONDS';return null};S0.Np=function Np(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F;p=0;q=(h=S0.Lp(b,p+1),h==-1?R0.I0(b).length:h);d=O0.cT((R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p)));p=S0.Kp(b,q);q=(i=S0.Lp(b,p+1),i==-1?R0.I0(b).length:i);s=(R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p));A=null;e=false;r=S0.Up(b);if(r!=0){A=S0.Op(b);r<0&&(e=true);q=$wnd.Math.abs(r);}p=S0.Kp(b,q);q=(j=S0.Lp(b,p+1),j==-1?R0.I0(b).length:j);C=xT((R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p)));p=S0.Kp(b,q);q=(k=S0.Lp(b,p+1),k==-1?R0.I0(b).length:k);D=xT((R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p)));p=S0.Kp(b,q);q=(l=S0.Lp(b,p+1),l==-1?R0.I0(b).length:l);F=xT((R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p)));p=S0.Kp(b,q);q=(m=S0.Lp(b,p+1),m==-1?R0.I0(b).length:m);u=O0.cT((R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p)));c=S0.Si(a.j,C,-D,-F);c+1!=d&&(!a.b&&(a.b=new T0.E$),T0.w$(a.b,new O0.DT(d),new O0.DT(c)));if(A!=null){S0.ul(a.j,c,6);S0.il(a.j,c,A,e);}u!=0&&S0.jl(a.j,c,u,false);if(O0.eU(s,'A')||O0.eU(s,'*')){S0.nl(a.j,c,1,true);}else if(O0.eU(s,'Q')){t=OL(N0.hN,K1,5,1,15,1);t[0]=6;S0.il(a.j,c,t,true);}else {S0.ul(a.j,c,S0.gm(s,67));}while((p=S0.Kp(b,q))!=-1){q=(g=S0.Lp(b,p+1),g==-1?R0.I0(b).length:g);v=(R0.E0(p,q,R0.I0(b).length),R0.I0(b).substr(p,q-p));o=O0.iU(v,tU(61));n=(R0.E0(0,o,R0.I0(v).length),R0.I0(v).substr(0,o));B=O0.cT((R0.F0(o+1,R0.I0(v).length+1),R0.I0(v).substr(o+1)));if(O0.eU(n,'CHG')){S0.bl(a.j,c,B);}else if(O0.eU(n,'RAD')){switch(B){case 1:S0.ol(a.j,c,16);break;case 2:S0.ol(a.j,c,32);break;case 3:S0.ol(a.j,c,48);}}else if(O0.eU(n,'CFG'));else if(O0.eU(n,'MASS')){S0.ll(a.j,c,B);}else if(O0.eU(n,'VAL')){S0._k(a.j,c,B==-1?0:B==0?-1:B);}else if(O0.eU(n,'HCOUNT')){switch(B){case 0:break;case -1:S0.nl(a.j,c,1792,true);break;case 1:S0.nl(a.j,c,128,true);break;case 2:S0.nl(a.j,c,384,true);break;default:S0.nl(a.j,c,896,true);}}else if(O0.eU(n,'SUBST')){if(B==-1){S0.nl(a.j,c,N2,true);}else if(B>0){w=0;for(f=0;f<a.j.p;f++){(S0.Uj(a.j,0,f)==c||S0.Uj(a.j,1,f)==c)&&++w;}B>w&&S0.nl(a.j,c,k2,true);}}else if(O0.eU(n,'RBCNT')){switch(B){case 3:case -1:S0.nl(a.j,c,112,true);break;case 1:S0.nl(a.j,c,8,true);break;case 2:S0.nl(a.j,c,104,true);break;case 4:S0.nl(a.j,c,56,true);}}}};S0.Op=function Op(a){var b,c,d,e,f,g,h,i;h=null;c=R0.I0(a).indexOf('[');d=R0.I0(a).indexOf(']',c);if(c>=0&&d>0){b=OL(N0.hN,K1,5,16,15,1);i=(R0.E0(c+1,d,R0.I0(a).length),R0.I0(a).substr(c+1,d-(c+1)));e=0;g=true;while(g&&e<16){c=R0.I0(i).indexOf(',');f=null;if(c==-1){f=i;g=false;}else {f=(R0.E0(0,c,R0.I0(i).length),R0.I0(i).substr(0,c));i=(R0.F0(c+1,R0.I0(i).length+1),R0.I0(i).substr(c+1));}b[e++]=S0.gm(f,1);}h=OL(N0.hN,K1,5,e,15,1);O0.QU(b,0,h,0,e);}return h};S0.Pp=function Pp(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;o=0;p=(i=S0.Lp(b,o+1),i==-1?R0.I0(b).length:i);f=O0.cT((R0.E0(o,p,R0.I0(b).length),R0.I0(b).substr(o,p-o)));o=S0.Kp(b,p);p=(j=S0.Lp(b,o+1),j==-1?R0.I0(b).length:j);g=O0.cT((R0.E0(o,p,R0.I0(b).length),R0.I0(b).substr(o,p-o)));o=S0.Kp(b,p);p=(k=S0.Lp(b,o+1),k==-1?R0.I0(b).length:k);c=S0.Hp(a,O0.cT((R0.E0(o,p,R0.I0(b).length),R0.I0(b).substr(o,p-o))));o=S0.Kp(b,p);p=(l=S0.Lp(b,o+1),l==-1?R0.I0(b).length:l);d=S0.Hp(a,O0.cT((R0.E0(o,p,R0.I0(b).length),R0.I0(b).substr(o,p-o))));r=0;s=0;while((o=S0.Kp(b,p))!=-1){p=(h=S0.Lp(b,o+1),h==-1?R0.I0(b).length:h);q=(R0.E0(o,p,R0.I0(b).length),R0.I0(b).substr(o,p-o));n=O0.iU(q,tU(61));m=(R0.E0(0,n,R0.I0(q).length),R0.I0(q).substr(0,n));t=O0.cT((R0.F0(n+1,R0.I0(q).length+1),R0.I0(q).substr(n+1)));if(O0.eU(m,'CFG')){switch(t){case 1:r=1;break;case 2:r=g==2?3:4;break;case 3:r=6;}}else O0.eU(m,'TOPO')?(s=t):undefined;}e=S0.Dp(a,c,d,g,r,s);e+1!=f&&(!a.c&&(a.c=new T0.E$),T0.w$(a.c,new O0.DT(f),new O0.DT(e)));};S0.Qp=function Qp(a,b){var c,d,e,f,g,h;h=S0.Mp(b);if(h!=null){g=S0.Sp(b,h);if(O0.eU(R0.I0(b).substr(0,13),'MDLV30/STEABS')){if(O0.eU(h,I3))for(f=0;f<g.length;f++)S0.gl(a.j,S0.Hp(a,g[f]),0,-1);else for(e=0;e<g.length;e++)S0.yl(a.j,S0.Ip(a,g[e]),0,-1);}else if(O0.eU(R0.I0(b).substr(0,13),'MDLV30/STERAC')){d=O0.cT(O0.qU(b,13,S0.Lp(b,13)));if(O0.eU(h,I3))for(f=0;f<g.length;f++)S0.gl(a.j,S0.Hp(a,g[f]),1,d-1);else for(e=0;e<g.length;e++)S0.yl(a.j,S0.Ip(a,g[e]),1,d-1);}else if(O0.eU(R0.I0(b).substr(0,13),'MDLV30/STEREL')){d=O0.cT(O0.qU(b,13,S0.Lp(b,13)));if(O0.eU(h,I3))for(f=0;f<g.length;f++)S0.gl(a.j,S0.Hp(a,g[f]),2,d-1);else for(e=0;e<g.length;e++)S0.yl(a.j,S0.Ip(a,g[e]),2,d-1);}else if(O0.eU(R0.I0(b).substr(0,13),'MDLV30/HILITE')){if(O0.eU(h,I3)){for(e=0;e<g.length;e++)S0.cl(a.j,S0.Hp(a,g[e]),448);}else {for(e=0;e<g.length;e++){c=S0.Ip(a,g[e]);S0.cl(a.j,S0.Uj(a.j,0,c),448);S0.cl(a.j,S0.Uj(a.j,1,c),448);}}}}};S0.Rp=function Rp(a,b){var c,d,e;if(!a.j){if(O0.eU(R0.I0(b).substr(0,6),'COUNTS')){c=S0.Kp(b,S0.Lp(b,7));d=O0.cT(O0.qU(b,7,S0.Lp(b,7)));e=O0.cT(O0.qU(b,c,S0.Lp(b,c)));a.j=new S0.bt(d,e);}}};S0.Sp=function Sp(a,b){var c,d,e,f,g,h;f=R0.I0(a).indexOf(b+'=(')+R0.I0(b).length+2;g=O0.jU(a,tU(41),f);e=S0.Lp(a,f);c=O0.cT((R0.E0(f,e,R0.I0(a).length),R0.I0(a).substr(f,e-f)));h=OL(N0.hN,K1,5,c,15,1);for(d=0;d<c;d++){f=S0.Kp(a,e);e=S0.Lp(a,f);(e==-1||e>g)&&(e=g);h[d]=O0.cT((R0.E0(f,e,R0.I0(a).length),R0.I0(a).substr(f,e-f)));}return h};S0.Tp=function Tp(a){var b,c,d,e,f,g,h,i,j;i=OL(N0.hN,K1,5,a.j.o,15,1);for(d=0;d<a.j.p;d++)if(S0.dk(a.j,d)==64)for(g=0;g<2;g++)i[S0.Uj(a.j,g,d)]=1;for(e=0;e<a.j.p;e++){j=S0.ak(a.j,e);for(f=0;f<2;f++)i[S0.Uj(a.j,f,e)]+=j;}for(c=0;c<a.j.p;c++){if(S0.ak(a.j,c)==1){for(f=0;f<2;f++){h=S0.Uj(a.j,1-f,c);if(S0.Ek(a.j,h)){b=S0.Uj(a.j,f,c);if(S0.Bk(a.j,b)&&i[b]>S0.ik(a.j,b)){S0.El(a.j,c,32);continue}}}}}};S0.Up=function Up(a){var b,c;if(R0.I0(a).indexOf('[')>=0){b=R0.I0(a).indexOf(' NOT[');c=R0.I0(a).indexOf(']',b);if(b>=0&&c>0){return -(c+1)}else {b=R0.I0(a).indexOf(' [');c=R0.I0(a).indexOf(']',b);if(b>=0&&c>0){return c+1}}b=R0.I0(a).indexOf(" 'NOT[");c=R0.I0(a).indexOf("]'",b);if(b>=0&&c>0){return -(c+2)}else {b=R0.I0(a).indexOf(" '[");c=R0.I0(a).indexOf("]'",b);if(b>=0&&c>0){return c+2}}O0.PU();}return 0};S0.Vp=function Vp(a,b,c){a.j=b;return S0.Xp(a,c)};S0.Wp=function Wp(a){return R0.I0(a).length==0?0:O0.cT(a)};S0.Xp=function Xp(b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X;T=null;try{b.f=null;if(b.j){S0.gj(b.j);S0.Gl(b.j,false);}D=v=h1.PR(c);if(null==D){return false}if(null==(v=h1.PR(c))){return false}if(null==(v=h1.PR(c))){return false}b.k=R0.I0(v).indexOf("From CSD data. Using bond type 'Any'")!=-1;b.e=R0.I0(v).indexOf('From CSD data.')!=-1;if(null==(v=h1.PR(c))){return false}b.g=false;b.d=b.a;try{F=O0.cT(O0.rU((R0.E0(0,3,R0.I0(v).length),R0.I0(v).substr(0,3))));G=O0.cT(O0.rU((R0.E0(3,6,R0.I0(v).length),R0.I0(v).substr(3,3))));H=S0.Wp(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));b.d=b.d|1==S0.Wp(O0.rU((R0.E0(12,15,R0.I0(v).length),R0.I0(v).substr(12,3))));b.g=R0.I0(v).length>=39&&O0.eU(R0.I0(v).substr(34,R0.I0('V3000').length),'V3000');}catch(a){a=BQ(a);if(VM(a,13)){return false}else throw CQ(a)}if(b.g){K=S0.Yp(b,c);S0.Ml(b.j,D);return K}!b.j&&(b.j=new S0.bt(F,G));S0.Ml(b.j,D);b.d||(b.j.J=true);if(0==F){while(v!=null&&!(O0.eU(v,J3)||O0.eU(v,K3)||O0.eU((R0.F0(1,R0.I0(v).length+1),R0.I0(v).substr(1)),'$'))){v=h1.PR(c);}return true}for(q=0;q<F;q++){if(null==(v=h1.PR(c))){return false}V=xT(O0.rU((R0.E0(0,10,R0.I0(v).length),R0.I0(v).substr(0,10))));W=xT(O0.rU((R0.E0(10,20,R0.I0(v).length),R0.I0(v).substr(10,10))));X=xT(O0.rU((R0.E0(20,30,R0.I0(v).length),R0.I0(v).substr(20,10))));e=S0.Si(b.j,V,-W,-X);u=O0.rU((R0.E0(31,34,R0.I0(v).length),R0.I0(v).substr(31,3)));if(O0.eU(u,'A')||O0.eU(u,'*')){S0.nl(b.j,e,1,true);}else if(O0.eU(u,'Q')){w=OL(N0.hN,K1,5,1,15,1);w[0]=6;S0.il(b.j,e,w,true);}else {h=S0.gm(u,67);S0.ul(b.j,e,h);}C=S0.Wp(O0.rU((R0.E0(34,36,R0.I0(v).length),R0.I0(v).substr(34,2))));C!=0&&S0.ll(b.j,e,(S0.Ri(),S0.Pi)[S0.Pj(b.j,e)]+C);m=S0.Wp(O0.rU((R0.E0(36,39,R0.I0(v).length),R0.I0(v).substr(36,3))));m!=0&&(m==4?S0.ol(b.j,e,32):S0.bl(b.j,e,4-m));A=R0.I0(v).length<63?0:S0.Wp(O0.rU((R0.E0(60,63,R0.I0(v).length),R0.I0(v).substr(60,3))));S0.jl(b.j,e,A,false);o=R0.I0(v).length<45?0:S0.Wp(O0.rU((R0.E0(42,45,R0.I0(v).length),R0.I0(v).substr(42,3))));switch(o){case 0:break;case 1:S0.nl(b.j,e,768,true);break;case 2:S0.nl(b.j,e,128,true);break;case 3:S0.nl(b.j,e,384,true);break;default:S0.nl(b.j,e,896,true);}R0.I0(v).length>=48&&(R0.F0(47,R0.I0(v).length),R0.I0(v).charCodeAt(47)==49)&&S0.nl(b.j,e,M2,true);S=R0.I0(v).length<51?0:S0.Wp(O0.rU((R0.E0(48,51,R0.I0(v).length),R0.I0(v).substr(48,3))));if(S!=0){T==null&&(T=OL(N0.hN,K1,5,F,15,1));T[e]=S;}}for(r=0;r<G;r++){if(null==(v=h1.PR(c))){return false}f=O0.cT(O0.rU((R0.E0(0,3,R0.I0(v).length),R0.I0(v).substr(0,3))))-1;g=O0.cT(O0.rU((R0.E0(3,6,R0.I0(v).length),R0.I0(v).substr(3,3))))-1;k=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));N=R0.I0(v).length<12?0:S0.Wp(O0.rU((R0.E0(9,12,R0.I0(v).length),R0.I0(v).substr(9,3))));R=R0.I0(v).length<18?0:S0.Wp(O0.rU((R0.E0(15,18,R0.I0(v).length),R0.I0(v).substr(15,3))));k==8&&(b.k||S0.Ek(b.j,f)||S0.Ek(b.j,g))&&(k=9);S0.Dp(b,f,g,k,N,R);}for(p=0;p<H;p++){if(null==(v=h1.PR(c))){return false}}if(null==(v=h1.PR(c))){(b.i&1)!=0&&(b.f=S0._m(b.j));S0.Jp(b,T);b.d||S0.Ls(b.j,15);return true}while(v!=null&&!(O0.eU(v,J3)||O0.eU(v,K3))){if(O0.eU(R0.I0(v).substr(0,6),'M  CHG')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;l=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));S0.bl(b.j,e,l);}}}if(O0.eU(R0.I0(v).substr(0,6),'M  ISO')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;B=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));S0.ll(b.j,e,B);}}}if(O0.eU(R0.I0(v).substr(0,6),'M  RAD')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;J=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));switch(J){case 1:S0.ol(b.j,e,16);break;case 2:S0.ol(b.j,e,32);break;case 3:S0.ol(b.j,e,48);}}}}if(O0.eU(R0.I0(v).substr(0,6),'M  RBC')||O0.eU(R0.I0(v).substr(0,6),'M  RBD')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;L=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));switch(L){case 3:case -1:S0.nl(b.j,e,112,true);break;case 1:S0.nl(b.j,e,8,true);break;case 2:S0.nl(b.j,e,104,true);break;case 4:S0.nl(b.j,e,56,true);}}}}if(O0.eU(R0.I0(v).substr(0,6),'M  ALS')){e=O0.cT(O0.rU((R0.E0(7,10,R0.I0(v).length),R0.I0(v).substr(7,3))))-1;if(e>=0){I=O0.cT(O0.rU((R0.E0(10,13,R0.I0(v).length),R0.I0(v).substr(10,3))));i=(R0.F0(14,R0.I0(v).length),R0.I0(v).charCodeAt(14)==84);S=OL(N0.hN,K1,5,I,15,1);d=16;for(t=0;t<I;++t,d+=4){Q=O0.rU((R0.E0(d,d+4,R0.I0(v).length),R0.I0(v).substr(d,d+4-d)));S[t]=S0.gm(Q,1);}S0.ul(b.j,e,6);S0.il(b.j,e,S,i);}}if(O0.eU(R0.I0(v).substr(0,6),'M  SUB')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;O=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));if(O==-2){S0.nl(b.j,e,N2,true);}else if(O>0){P=0;for(j=0;j<b.j.p;j++){(S0.Uj(b.j,0,j)==e||S0.Uj(b.j,1,j)==e)&&++P;}O>P&&S0.nl(b.j,e,k2,true);}}}}if(O0.eU(R0.I0(v).substr(0,6),'M  RGP')){s=O0.cT(O0.rU((R0.E0(6,9,R0.I0(v).length),R0.I0(v).substr(6,3))));if(s>0){d=10;U=14;for(t=1;t<=s;++t,d+=8,U+=8){e=O0.cT(O0.rU((R0.E0(d,d+3,R0.I0(v).length),R0.I0(v).substr(d,d+3-d))))-1;M=O0.cT(O0.rU((R0.E0(U,U+3,R0.I0(v).length),R0.I0(v).substr(U,U+3-U))));M>=1&&M<=20&&S0.ul(b.j,e,S0.gm('R'+M,2));}}}v=h1.PR(c);}}catch(a){a=BQ(a);if(VM(a,13)){n=a;O0.nJ(n,(O0.PU(),O0.OU),'');return false}else throw CQ(a)}if(b.e){S0.Tp(b);S0.Ep(b);}(b.i&1)!=0&&(b.f=S0._m(b.j));S0.Jp(b,T);S0.Ls(b.j,15);return true};S0.Yp=function Yp(a,b){var c,d,e,f,g;!!a.b&&T0.p$(a.b);!!a.c&&T0.p$(a.c);e=0;d=h1.PR(b);while(d!=null&&O0.eU(R0.I0(d).substr(0,7),L3)){d=O0.rU((R0.F0(7,R0.I0(d).length+1),R0.I0(d).substr(7)));while(g=R0.I0('-').length,O0.eU(R0.I0(d).substr(R0.I0(d).length-g,g),'-')){c=h1.PR(b);if(!O0.eU(R0.I0(c).substr(0,7),L3)){return false}d=O0.rU(O0.cU(O0.qU(d,0,R0.I0(d).length-1),(R0.F0(7,R0.I0(c).length+1),R0.I0(c).substr(7))));}if(O0.eU(R0.I0(d).substr(0,5),'BEGIN')){f=O0.rU((R0.F0(6,R0.I0(d).length+1),R0.I0(d).substr(6)));if(O0.eU(R0.I0(f).substr(0,4),'CTAB')){e=1;}else if(O0.eU(R0.I0(f).substr(0,4),'ATOM')){e=2;}else if(O0.eU(R0.I0(f).substr(0,4),'BOND')){e=3;}else if(O0.eU(R0.I0(f).substr(0,10),'COLLECTION')){e=4;}else {return false}}else if(O0.eU(R0.I0(d).substr(0,3),'END')){e=0;}else if(e==1){S0.Rp(a,d);}else if(e==2){S0.Np(a,d);}else if(e==3){S0.Pp(a,d);}else if(e==4){S0.Qp(a,d);}else {return false}d=h1.PR(b);}while(d!=null&&!(O0.eU(R0.I0(d).substr(0,6),J3)||O0.eU(d,K3))){d=h1.PR(b);}return true};S0.Zp=function Zp(){this.i=0;};S0.$p=function $p(){this.i=1;};sR(67,1,{},S0.Zp,S0.$p);_.a=false;_.d=false;_.e=false;_.g=false;_.i=0;_.k=false;N0.NN=LS(67);S0._p=function _p(a){};
S0.aq=function aq(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;O0.HU(a.a,'M  V30 BEGIN CTAB\n');O0.HU(a.a,M3+b.o+' '+b.p+' 0 0 0'+o1);O0.HU(a.a,'M  V30 BEGIN ATOM\n');for(i=0;i<b.o;i++){O0.HU(a.a,L3+(i+1));if((b.t==null?null:b.t[i])!=null){k=b.t==null?null:b.t[i];u=ZQ(EQ(b.w[i],1),0);O0.HU(a.a,u?' NOT[':' [');for(s=0;s<k.length;s++){s>0&&O0.HU(a.a,',');t=(S0.Ri(),S0.Li)[k[s]];switch(R0.I0(t).length){case 2:case 3:case 1:O0.HU(a.a,t);break;default:O0.HU(a.a,'?');}}O0.HU(a.a,']');}else ZQ(EQ(b.w[i],1),0)?O0.HU(a.a,' A'):b.A[i]>=129&&b.A[i]<=144||b.A[i]==154?O0.HU(a.a,' R#'):O0.HU(a.a,' '+(S0.Ri(),S0.Li)[b.A[i]]);if(c){O0.HU(a.a,' '+cN(E1*a.b*b.H[i].a)/E1);O0.HU(a.a,' '+cN(E1*a.b*-b.H[i].b)/E1);O0.HU(a.a,' '+cN(E1*a.b*-b.H[i].c)/E1);}else {O0.HU(a.a,' 0 0 0');}O0.HU(a.a,' '+$wnd.Math.abs(b.u[i]));b.q[i]!=0&&O0.HU(a.a,' CHG='+b.q[i]);if((b.s[i]&48)!=0){O0.HU(a.a,' RAD=');switch(b.s[i]&48){case 16:O0.HU(a.a,'1');break;case 32:O0.HU(a.a,'2');break;case 48:O0.HU(a.a,'3');}}if((b.s[i]&3)==1||(b.s[i]&3)==2){O0.HU(a.a,' CFG=');(b.s[i]&3)==1?O0.HU(a.a,'1'):O0.HU(a.a,'2');}b.v[i]!=0&&O0.HU(a.a,' MASS='+b.v[i]);J=((b.s[i]&n3)>>>27)-1;J!=-1&&O0.HU(a.a,' VAL='+(J==0?'-1':O0.MT(J)));l=b.A[i];(l>=129&&l<=144||l==154)&&O0.HU(a.a,' RGROUPS=(1 '+(l==154?0:l>=142?l-141:l-125)+')');r=EQ(o2,b.w[i]);JQ(r,384)==0?O0.HU(a.a,' HCOUNT=2'):JQ(r,128)==0?O0.HU(a.a,' HCOUNT=1'):JQ(r,1792)==0?O0.HU(a.a,' HCOUNT=-1'):JQ(r,1664)==0&&O0.HU(a.a,' HCOUNT=1');G=EQ(b.w[i],6144);JQ(G,0)!=0&&(ZQ(EQ(G,k2),0)?O0.HU(a.a,' SUBST='+(b.c[i]+1)):O0.HU(a.a,' SUBST=-1'));C=EQ(b.w[i],120);JQ(C,0)!=0&&(JQ(C,112)==0?O0.HU(a.a,' RBCNT=-1'):JQ(C,8)==0?O0.HU(a.a,' RBCNT=2'):JQ(C,104)==0?O0.HU(a.a,' RBCNT=2'):JQ(C,88)==0?O0.HU(a.a,' RBCNT=3'):JQ(C,56)==0&&O0.HU(a.a,' RBCNT=4'));O0.HU(a.a,o1);}O0.HU(a.a,'M  V30 END ATOM\n');O0.HU(a.a,'M  V30 BEGIN BOND\n');for(n=0;n<b.p;n++){O0.HU(a.a,L3+(n+1));switch(b.F[n]){case 1:A=1;F=0;break;case 2:A=2;F=0;break;case 4:A=3;F=0;break;case 129:A=1;F=3;break;case 257:A=1;F=1;break;case 386:A=2;F=2;break;case 64:A=4;F=0;break;case 32:A=9;F=0;break;default:A=1;F=0;}p=b.D[n]&31;p!=0&&(p==8?(A=4):p==3?(A=5):p==9?(A=6):p==10?(A=7):(A=8));O0.HU(a.a,' '+A+' '+(b.B[0][n]+1)+' '+(b.B[1][n]+1));F!=0&&O0.HU(a.a,' CFG='+F);D=b.D[n]&384;H=D==0?0:D==256?1:2;H!=0&&O0.HU(a.a,' TOPO='+H);O0.HU(a.a,o1);}O0.HU(a.a,'M  V30 END BOND\n');B=false;d=0;v=OL(N0.hN,K1,5,32,15,1);f=OL(N0.hN,K1,5,32,15,1);for(j=0;j<b.d;j++){if((b.s[j]&3)==1||(b.s[j]&3)==2){B=true;I=(b.s[j]&U2)>>18;I==1?++f[(b.s[j]&U2)>>18!=1&&(b.s[j]&U2)>>18!=2?-1:(b.s[j]&o3)>>20]:I==2?++v[(b.s[j]&U2)>>18!=1&&(b.s[j]&U2)>>18!=2?-1:(b.s[j]&o3)>>20]:++d;}}e=0;w=OL(N0.hN,K1,5,32,15,1);g=OL(N0.hN,K1,5,32,15,1);for(o=0;o<b.e;o++){if(S0.ak(b,o)!=2&&((b.C[o]&3)==1||(b.C[o]&3)==2)){B=true;I=(b.C[o]&768)>>8;I==1?++g[(b.C[o]&768)>>8!=1&&(b.C[o]&768)>>8!=2?-1:(b.C[o]&p3)>>10]:I==2?++w[(b.C[o]&768)>>8!=1&&(b.C[o]&768)>>8!=2?-1:(b.C[o]&p3)>>10]:++e;}}if(B){O0.HU(a.a,'M  V30 BEGIN COLLECTION\n');if(d!=0){O0.HU(a.a,'M  V30 MDLV30/STEABS ATOMS=('+d);for(h=0;h<b.d;h++){((b.s[h]&3)==1||(b.s[h]&3)==2)&&(b.s[h]&U2)>>18==0&&O0.HU(a.a,' '+(h+1));}O0.HU(a.a,N3);}if(e!=0){O0.HU(a.a,'M  V30 MDLV30/STEABS BONDS=('+e);for(m=0;m<b.e;m++){S0.ak(b,m)!=2&&((b.C[m]&3)==1||(b.C[m]&3)==2)&&(b.C[m]&768)>>8==0&&O0.HU(a.a,' '+(m+1));}O0.HU(a.a,N3);}for(q=0;q<32;q++){if(v[q]!=0){O0.HU(a.a,O3+(q+1)+' ATOMS=('+v[q]);for(h=0;h<b.d;h++){((b.s[h]&3)==1||(b.s[h]&3)==2)&&(b.s[h]&U2)>>18==2&&((b.s[h]&U2)>>18!=1&&(b.s[h]&U2)>>18!=2?-1:(b.s[h]&o3)>>20)==q&&O0.HU(a.a,' '+(h+1));}O0.HU(a.a,N3);}if(f[q]!=0){O0.HU(a.a,P3+(q+1)+' ATOMS=('+f[q]);for(h=0;h<b.d;h++){((b.s[h]&3)==1||(b.s[h]&3)==2)&&(b.s[h]&U2)>>18==1&&((b.s[h]&U2)>>18!=1&&(b.s[h]&U2)>>18!=2?-1:(b.s[h]&o3)>>20)==q&&O0.HU(a.a,' '+(h+1));}O0.HU(a.a,N3);}if(w[q]!=0){O0.HU(a.a,O3+(q+1)+' BONDS=('+w[q]);for(m=0;m<b.e;m++){S0.ak(b,m)!=2&&((b.C[m]&3)==1||(b.C[m]&3)==2)&&(b.C[m]&768)>>8==2&&((b.C[m]&768)>>8!=1&&(b.C[m]&768)>>8!=2?-1:(b.C[m]&p3)>>10)==q&&O0.HU(a.a,' '+(m+1));}O0.HU(a.a,N3);}if(g[q]!=0){O0.HU(a.a,P3+(q+1)+' BONDS=('+g[q]);for(m=0;m<b.e;m++){S0.ak(b,m)!=2&&((b.C[m]&3)==1||(b.C[m]&3)==2)&&(b.C[m]&768)>>8==1&&((b.C[m]&768)>>8!=1&&(b.C[m]&768)>>8!=2?-1:(b.C[m]&p3)>>10)==q&&O0.HU(a.a,' '+(m+1));}O0.HU(a.a,N3);}}O0.HU(a.a,'M  V30 END COLLECTION\n');}O0.HU(a.a,'M  V30 END CTAB\n');};S0.bq=function bq(){S0._p(this);this.a=new O0.LU;};S0.cq=function cq(a){S0.dq.call(this,a);};S0.dq=function dq(a){S0.eq.call(this,a,new O0.LU);};S0.eq=function eq(a,b){var c,d;S0._p(this);S0.Ls(a,15);this.a=b;d=a.N!=null?a.N:'';O0.HU(this.a,d+o1);O0.HU(this.a,'Actelion Java MolfileCreator 2.0\n\n');O0.HU(this.a,'  0  0  0  0  0  0              0 V3000\n');this.b=1;c=S0.gq(a);c&&(this.b=S0.fq(a));S0.aq(this,a,c);O0.HU(this.a,H3);};S0.fq=function fq(a){var b,c,d,e,f,g,h,i,j;j=1;d=S0.Rj(a,a.o,a.p,(S0.Ri(),S0.Qi));if(d!=0){(d<1||d>3)&&(j=1.5/d);}else {i=Q3;for(b=1;b<a.o;b++){for(c=0;c<b;c++){f=a.H[c].a-a.H[b].a;g=a.H[c].b-a.H[b].b;h=a.H[c].c-a.H[b].c;e=f*f+g*g+h*h;i>e&&(i=e);}}j=3/$wnd.Math.max(0.75,i);}return j};S0.gq=function gq(a){var b;if(a.o==1)return true;for(b=1;b<a.o;b++){if(a.H[b].a!=a.H[0].a||a.H[b].b!=a.H[0].b||a.H[b].c!=a.H[0].c){return true}}return false};S0.hq=function hq(a,b){var c;c=new S0.bq;c.b=b;S0.Ls(a,15);S0.aq(c,a,true);return c.a.a};sR(77,1,{},S0.bq,S0.cq);_.b=1;N0.ON=LS(77);S0.iq=function iq(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;k=a.g.K;l=0;for(f=0;f<c;f++){if(k>b[f]){k=b[f];l=f;}}p=OL(N0.hN,K1,5,c,15,1);j=l>0?l-1:c-1;m=l<c-1?l+1:0;h=b[j]<b[m];for(g=0;g<c;g++){p[g]=b[l];h?--l<0&&(l=c-1):++l==c&&(l=0);}for(e=0;e<a.i.a.length;e++){o=T0.Yh(a.i,e);if(o.length!=c)continue;d=true;for(i=0;i<c;i++){if(o[i]!=p[i]){d=false;break}}if(d)return}T0.Th(a.i,p);n=S0.uq(a,p);T0.Th(a.j,n);S0.Lq(a,p,n);};S0.jq=function jq(a,b,c){var d,e,f,g,h,i,j;i=OL(N0.hN,K1,5,a.f,15,1);g=OL(N0.hN,K1,5,a.f,15,1);j=OL(N0.xQ,c2,5,a.g.d,16,1);d=S0.Uj(a.g,0,b);e=S0.Uj(a.g,1,b);i[0]=d;i[1]=e;g[1]=-1;j[e]=true;h=1;while(h>=1){++g[h];if(g[h]==S0.Qm(a.g,i[h])){j[i[h]]=false;--h;continue}f=S0.Pm(a.g,i[h],g[h]);if(j[f]||c[f])continue;if(f==d&&h>1){S0.iq(a,i,h+1);if(a.i.a.length>=p2)return;continue}if(h+1<a.f){++h;i[h]=f;j[f]=true;g[h]=-1;}}};S0.kq=function kq(a,b,c,d,e,f,g,h){var i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D;A=T0.Yh(a.i,b);for(l=A,m=0,n=l.length;m<n;++m){k=l[m];if(!S0.Hq(a,k))return true}B=T0.Yh(a.j,b);C=B.length;o=0;j=0;D=false;for(v=0;v<C;v++){o<<=1;j<<=1;if(S0.Jq(a,B[v])){o|=1;}else if(h&&S0.Gq(a,B[v])){o|=1;j|=1;}else {i=c[b][v];if(i!=-1){if(d[i]){if(e[i]){o|=1;f[i]||(j|=1);}}else {D=true;}}}}u=false;switch(C){case 3:p=WL(IL(N0.hN,1),K1,5,15,[2,1,4]);u=true;for(t=0;t<3;t++){if((o&p[t])==p[t]){if(S0.Pj(a.g,A[t])==6&&S0.yj(a.g,A[t])==1||S0.Pj(a.g,A[t])==5&&S0.yj(a.g,A[t])==0){e[b]=true;g[b]=t;(j&p[t])==0&&(u=false);}}}break;case 5:q=WL(IL(N0.hN,1),K1,5,15,[10,5,18,9,20]);u=true;for(w=0;w<5;w++){if((o&q[w])==q[w]){switch(S0.Pj(a.g,A[w])){case 6:if(S0.yj(a.g,A[w])==-1){e[b]=true;g[b]=w;(j&q[w])==0&&(u=false);}break;case 7:if(S0.yj(a.g,A[w])<=0){e[b]=true;g[b]=w;}break;case 8:e[b]=true;g[b]=w;break;case 16:case 34:case 52:if(S0.Qm(a.g,A[w])==2){e[b]=true;g[b]=w;}}}}break;case 6:u=true;if((o&21)==21){e[b]=true;(j&21)==0&&(u=false);}if((o&42)==42){e[b]=true;(j&42)==0&&(u=false);}break;case 7:r=WL(IL(N0.hN,1),K1,5,15,[42,21,74,37,82,41,84]);u=true;for(s=0;s<7;s++){if((o&r[s])==r[s]){if(S0.Pj(a.g,A[s])==6&&(S0.yj(a.g,A[s])==1||h&&S0.xq(a,A[s]))||S0.Pj(a.g,A[s])==5&&S0.yj(a.g,A[s])==0){e[b]=true;g[b]=s;(j&r[s])==0&&(u=false);}}}}e[b]&&!u&&(f[b]=true);if(e[b])return true;return !D};S0.lq=function lq(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q;f=OL(N0.hN,a3,6,a.i.a.length,0,2);for(j=0;j<a.i.a.length;j++){f[j]=OL(N0.hN,K1,5,T0.Yh(a.i,j).length,15,1);for(k=0;k<T0.Yh(a.i,j).length;k++)f[j][k]=-1;}p=OL(N0.hN,K1,5,a.g.e,15,1);for(n=0;n<a.j.a.length;n++){o=T0.Yh(a.j,n);if(o.length==3||o.length>=5&&o.length<=7){for(i=0;i<o.length;i++){h=o[i];if(S0.Qm(a.g,S0.Uj(a.g,0,h))==3&&S0.Qm(a.g,S0.Uj(a.g,1,h))==3){if(p[h]>0){f[p[h]>>>16][p[h]&32767]=n;f[n][i]=p[h]>>>16;}else {p[h]=(n<<16)+u3+i;}}}}}g=OL(N0.xQ,c2,5,a.i.a.length,16,1);q=0;l=-1;while(q>l){l=q;for(m=0;m<a.i.a.length;m++){if(!g[m]){if(S0.kq(a,m,f,g,b,c,d,e)){g[m]=true;++q;}}}}};S0.mq=function mq(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;e=S0.Uj(a.g,0,b);f=S0.Uj(a.g,1,b);i=OL(N0.hN,K1,5,a.g.d,15,1);j=OL(N0.hN,K1,5,a.g.d,15,1);k=OL(N0.hN,K1,5,a.g.d,15,1);i[0]=e;i[1]=f;j[e]=1;j[f]=2;k[e]=-1;k[f]=e;h=1;l=1;while(h<=l){for(m=0;m<S0.Qm(a.g,i[h]);m++){g=S0.Pm(a.g,i[h],m);if(h>1&&g==e){o=OL(N0.hN,K1,5,j[i[h]],15,1);d=i[h];for(n=0;n<o.length;n++){o[n]=d;d=k[d];}return o}if(j[g]==0&&!c[g]){i[++l]=g;j[g]=j[i[h]]+1;k[g]=i[h];}}++h;}return null};S0.nq=function nq(a,b,c){var d,e;e=T0.Yh(a.i,b);for(d=0;d<e.length;d++)if(c==e[d])return d;return -1};S0.oq=function oq(a,b){return a.a[b]&D1};S0.pq=function pq(a,b,c){var d,e;e=T0.Yh(a.j,b);for(d=0;d<e.length;d++)if(c==e[d])return d;return -1};S0.qq=function qq(a,b){return a.b[b]&D1};S0.rq=function rq(a,b){return a.c[b]};S0.sq=function sq(a,b){return T0.Yh(a.i,b)};S0.tq=function tq(a,b){return T0.Yh(a.j,b)};S0.uq=function uq(a,b){var c,d,e,f,g;f=b.length;g=OL(N0.hN,K1,5,f,15,1);for(d=0;d<f;d++){c=d==f-1?b[0]:b[d+1];for(e=0;e<S0.Qm(a.g,b[d]);e++){if(S0.Pm(a.g,b[d],e)==c){g[d]=S0.Rm(a.g,b[d],e);break}}}return g};S0.vq=function vq(a,b){return T0.Yh(a.j,b).length};S0.wq=function wq(a,b,c){var d;for(d=0;d<a.j.a.length;d++)if(S0.Cq(a,d,b)&&S0.Cq(a,d,c))return d;return -1};S0.xq=function xq(a,b){var c;for(c=0;c<S0.Qm(a.g,b);c++)if(S0.Sm(a.g,b,c)==2&&S0.Pj(a.g,S0.Pm(a.g,b,c))==8)return true;return false};S0.yq=function yq(a,b){return a.d[b]};S0.zq=function zq(a,b){return (a.a[b]&C1)!=0};S0.Aq=function Aq(a,b){return (a.b[b]&C1)!=0};S0.Bq=function Bq(a,b,c){var d,e;e=T0.Yh(a.i,b);for(d=0;d<e.length;d++)if(c==e[d])return true;return false};S0.Cq=function Cq(a,b,c){var d,e;e=T0.Yh(a.j,b);for(d=0;d<e.length;d++)if(c==e[d])return true;return false};S0.Dq=function Dq(a,b){return a.e[b]};S0.Eq=function Eq(a,b){return (a.b[b]&e3)!=0};S0.Fq=function Fq(a,b){return (a.a[b]&W2)!=0};S0.Gq=function Gq(a,b){var c,d,e,f,g,h;for(g=0;g<2;g++){c=S0.Uj(a.g,g,b);if(S0.Pj(a.g,c)==7&&S0.Qm(a.g,c)==2){d=S0.Uj(a.g,1-g,b);if(S0.Pj(a.g,d)==6){for(h=0;h<S0.Qm(a.g,d);h++){e=S0.Pm(a.g,d,h);f=S0.Rm(a.g,d,h);if((S0.Pj(a.g,e)==8||S0.Pj(a.g,e)==16)&&S0.ak(a.g,f)==2&&S0.Qm(a.g,e)==1)return true}}}}return false};S0.Hq=function Hq(a,b){var c,d,e,f,g;if(a.g.I){if(ZQ(EQ(S0.Kj(a.g,b),1),0)){return true}else {g=S0.Fj(a.g,b);if(g!=null){for(d=g,e=0,f=d.length;e<f;++e){c=d[e];if(c==5||c==6||c==7||c==8||c==15||c==16||c==33||c==34)return true}return false}}}return S0.Pq(S0.Pj(a.g,b))};S0.Iq=function Iq(a,b){var c,d,e,f,g;if(a.g.I){if(ZQ(EQ(S0.Kj(a.g,b),1),0))return false;c=S0.Fj(a.g,b);if(c!=null){for(e=c,f=0,g=e.length;f<g;++f){d=e[f];if(!S0.hm(d))return false}return true}}return S0.hm(S0.Pj(a.g,b))};S0.Jq=function Jq(a,b){return S0.ak(a.g,b)>1||S0.dk(a.g,b)==64};S0.Kq=function Kq(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;for(q=0;q<a.d.length;q++){if(a.d[q]){p=false;for(d=T0.Yh(a.i,q),f=0,h=d.length;f<h;++f){b=d[f];a.a[b]|=C1;S0.Iq(a,b)&&(p=true);}for(k=T0.Yh(a.j,q),m=0,o=k.length;m<o;++m){i=k[m];a.b[i]|=C1;}if(a.e[q]){for(c=T0.Yh(a.i,q),e=0,g=c.length;e<g;++e){b=c[e];a.a[b]|=e3;}for(j=T0.Yh(a.j,q),l=0,n=j.length;l<n;++l){i=j[l];a.b[i]|=e3;}}if(p){for(c=T0.Yh(a.i,q),e=0,g=c.length;e<g;++e){b=c[e];a.a[b]|=W2;}for(j=T0.Yh(a.j,q),l=0,n=j.length;l<n;++l){i=j[l];a.b[i]|=W2;}}}}};S0.Lq=function Lq(a,b,c){var d,e,f,g;g=b.length;for(f=0;f<g;f++){d=a.a[b[f]]&D1;if(d==0||d>g){a.a[b[f]]&=k3;a.a[b[f]]|=g;}}for(e=0;e<g;e++){d=a.b[c[e]]&D1;if(d==0||d>g){a.b[c[e]]&=k3;a.b[c[e]]|=g;}}};S0.Mq=function Mq(a,b,c){var d;d=T0.Yh(a.j,b).length;while(c>=d)c-=d;while(c<0)c+=d;return c};S0.Nq=function Nq(a,b){S0.Oq.call(this,a,b);};S0.Oq=function Oq(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;this.g=a;this.f=7;this.i=new T0.ki;this.j=new T0.ki;this.a=OL(N0.hN,K1,5,this.g.d,15,1);this.b=OL(N0.hN,K1,5,this.g.e,15,1);this.g.wb(1);m=OL(N0.xQ,c2,5,this.g.d,16,1);n=OL(N0.xQ,c2,5,this.g.e,16,1);do{g=false;for(c=0;c<this.g.d;c++){if(!m[c]){q=0;for(l=0;l<S0.Qm(this.g,c);l++)m[S0.Pm(this.g,c,l)]||++q;if(q<2){m[c]=true;for(k=0;k<S0.Qm(this.g,c);k++)n[S0.Rm(this.g,c,k)]=true;g=true;}}}}while(g);s=0;while(s<this.g.d&&m[s])++s;if(s==this.g.d)return;i=OL(N0.hN,K1,5,this.g.d,15,1);i[0]=s;p=OL(N0.hN,K1,5,this.g.d,15,1);p[0]=-1;h=OL(N0.hN,K1,5,this.g.d,15,1);h[s]=1;f=0;j=0;o=1;while(f<=j){for(k=0;k<S0.Qm(this.g,i[f]);k++){e=S0.Pm(this.g,i[f],k);if(e==p[i[f]])continue;if(h[e]!=0){S0.jq(this,S0.Rm(this.g,i[f],k),m);continue}if(!m[e]){h[e]=o;p[e]=i[f];i[++j]=e;}}++f;if(f>j){for(c=0;c<this.g.d;c++){if(h[c]==0&&!m[c]){h[c]=++o;i[++j]=c;p[c]=-1;break}}}}if((b&4)!=0){this.d=OL(N0.xQ,c2,5,this.i.a.length,16,1);this.e=OL(N0.xQ,c2,5,this.i.a.length,16,1);this.c=OL(N0.hN,K1,5,this.i.a.length,15,1);S0.lq(this,this.d,this.e,this.c,(b&8)!=0);S0.Kq(this);}if((b&2)!=0){for(d=0;d<this.g.e;d++){if(!n[d]&&S0.ak(this.g,d)!=0){r=S0.mq(this,d,m);r!=null&&S0.Lq(this,r,S0.uq(this,r));}}}};S0.Pq=function Pq(a){return a==5||a==6||a==7||a==8||a==15||a==16||a==33||a==34};sR(80,1,{},S0.Nq);_.f=0;N0.PN=LS(80);S0.Qq=function Qq(a,b){var c,d,e,f,g,h,i,j,k,l,m;if(b==2||b==5){T0.Th(a.D,S0.rr(a.F,a.F.length));!!a.b&&T0.Th(a.a,S0.sr(a.B,a.B.length));}else if(b==4){m=S0.ar(S0.rr(a.F,a.F.length));if(!T0.q_(a.N,m)){T0.o_(a.N,m);T0.Th(a.D,S0.rr(a.F,a.F.length));!!a.b&&T0.Th(a.a,S0.sr(a.B,a.B.length));}}else if(b==3){m=S0.ar(S0.rr(a.F,a.F.length));if(!T0.q_(a.N,m)){l=false;for(j=(h=new T0.O$((new T0.T$((new T0.VY(a.N.a)).a)).b),new T0.bZ(h));T0.mX(j.a.a);){i=(g=T0.M$(j.a),g.$b());k=0;for(d=m,e=0,f=d.length;e<f;++e){c=d[e];while(k<i.length&&i[k]<c)++k;if(k<i.length){if(c==i[k]){l=true;break}}}if(l)break}if(!l){T0.o_(a.N,m);T0.Th(a.D,S0.rr(a.F,a.F.length));!!a.b&&T0.Th(a.a,S0.sr(a.B,a.B.length));}}}else if(b==6){m=S0.br(a,S0.rr(a.F,a.F.length));if(!T0.q_(a.N,m)){T0.o_(a.N,m);T0.Th(a.D,S0.rr(a.F,a.F.length));!!a.b&&T0.Th(a.a,S0.sr(a.B,a.B.length));}}};S0.Rq=function Rq(a,b,c){var d,e,f,g,h,i,j,k,l,m;h=S0.Qm(a.G,b);d=a.n[c];if(d>h)return false;j=S0.Kj(a.G,b);f=S0.Kj(a.g,c);e=S0.Fj(a.g,c);i=S0.Fj(a.G,b);if(ZQ(EQ(f,1),0)){if(e!=null){if(ZQ(EQ(j,1),0)){if(i==null)return false;if(!S0.gr(e,i))return false}else {if(i!=null){if(S0.ir(i,e))return false}else {if(S0.fr(S0.Pj(a.G,b),e))return false}}}}else {if(ZQ(EQ(j,1),0))return false;if(e!=null){if(i!=null){if(!S0.gr(i,e))return false}else {if(!S0.fr(S0.Pj(a.G,b),e))return false}}else {if(i!=null)return false;if(a.I[b]!=a.j[c])return false}}if(ZQ(_Q(j,f),0)){if(ZQ(EQ(f,N2),0)){if(a.G.I&&OQ(EQ(j,N2),0))return false;else if(d!=h)return false}if(ZQ(EQ(f,k2),0)){if(d>=h&&OQ(EQ(j,k2),0))return false}}if(ZQ(EQ(a.H[b],$Q(a.i[c])),0))return false;if(ZQ(EQ(a.A[c],$Q(a.L[b])),0))return false;g=EQ(f,O1);if(a.G.I){k=EQ(f,O1);if(JQ(k,0)!=0&&(JQ(g,0)==0||ZQ(EQ(g,$Q(k)),0)))return false}else {if(JQ(g,0)!=0&&OQ(EQ(g,a.L[b]),0))return false}if(S0.yj(a.g,c)!=0&&S0.yj(a.g,c)!=S0.yj(a.G,b))return false;if(S0.Ij(a.g,c)!=0&&S0.Ij(a.g,c)!=S0.Ij(a.G,b))return false;if(S0.Lj(a.g,c)!=0&&S0.Lj(a.g,c)!=S0.Lj(a.G,b))return false;l=gR(bR(EQ(S0.Kj(a.g,c),K2),22));if(l!=0){if(a.G.I){m=gR(bR(EQ(S0.Kj(a.G,b),K2),22));if(l!=m)return false}else {if(S0.Km(a.G,b)!=l)return false}}return true};S0.Sq=function Sq(a,b,c){var d,e,f,g,h,i,j,k,l;j=a.J[b];g=a.k[c];if((S0.ck(a.g,c)&j3)!=0){i=S0.ek(a.G,b);e=S0.ek(a.g,c);f=S0.ck(a.g,c)&31;if(i!=e&&!(i==1&&(f&1)!=0)&&!(i==2&&(f&2)!=0)&&!(i==4&&(f&4)!=0)&&!(i==8&&(f&32)!=0)&&!(i==16&&(f&64)!=0)&&!(i==32&&(f&16)!=0)&&!(i==64&&(f&8)!=0))return false;j&=-32;g&=-32;}if((j&~g)!=0)return false;l=(S0.ck(a.g,c)&y2)>>17;if(l!=0){if(a.G.I&&l==(S0.ck(a.G,c)&y2)>>17)return true;d=false;k=S0.pn(a.G);for(h=0;h<k.i.a.length;h++){if(T0.Yh(k.j,h).length==l){if(S0.Cq(k,h,b)){d=true;break}}}if(!d)return false}return true};S0.Tq=function Tq(a){var b,c;a.b=null;for(b=0;b<a.g.e;b++){if(S0.wk(a.g,b)){!a.b&&(a.b=new T0.ki);c=new S0.tr;c.a=S0.Uj(a.g,0,b);c.b=S0.Uj(a.g,1,b);c.d=S0.Wj(a.g,b);c.c=S0.Vj(a.g,b);T0.Th(a.b,c);}}};S0.Uq=function Uq(a){var b,c,d,e,f,g,h,i,j,k,l,m;S0.Ls(a.g,a.M);i=$wnd.Math.max(a.g.d,a.g.e)+16;a.r=OL(N0.hN,K1,5,i,15,1);a.t=OL(N0.hN,K1,5,i,15,1);a.u=OL(N0.hN,K1,5,i,15,1);a.s=OL(N0.xQ,c2,5,i+1,16,1);g=OL(N0.xQ,c2,5,a.g.d,16,1);h=OL(N0.xQ,c2,5,a.g.e,16,1);d=0;for(c=0;c<a.g.d;c++){if(!a.C[c]&&!g[c]){a.r[d]=c;a.u[d]=-1;a.t[d]=-1;j=d;while(d<=j){for(k=0;k<S0.Cm(a.g,a.r[d]);k++)j=S0.pr(a,d,j,k,g,h,-1);while(a.s[++d]);}}}a.v=d;if(a.o!=0){j=a.v-1;for(f=0;f<a.d;f++){d=0;while(d<=j){for(l=0;l<S0.Cm(a.g,a.r[d]);l++)j=S0.pr(a,d,j,l,g,h,f);while(a.s[++d]);}}for(b=0;b<a.g.d;b++){if(a.C[b]&&!g[b]){a.r[d]=b;a.u[d]=-1;a.t[d]=-1;j=d;while(d<=j){for(l=0;l<S0.Cm(a.g,a.r[d]);l++)S0.Pm(a.g,a.r[d],l)<a.g.d&&(j=S0.pr(a,d,j,l,g,h,a.f[b]));while(a.s[++d]);}}}a.e=OL(N0.hN,K1,5,a.d,15,1);for(m=0;m<a.d;m++)a.e[m]=-1;for(k=a.v;k<d;k++){e=a.f[a.r[k]];a.e[e]==-1&&(a.e[e]=k);}}a.w=d;};S0.Vq=function Vq(a,b){var c,d,e,f,g,h,i,j;j=S0.pn(a.G);for(h=0;h<j.i.a.length;h++){if(S0.Cq(j,h,b)){i=OL(N0.hN,K1,5,2,15,1);for(e=0;e<2;e++){i[e]=u1;d=S0.Uj(a.G,e,b);for(f=0;f<S0.Qm(a.G,d);f++){c=S0.Pm(a.G,d,f);c!=S0.Uj(a.G,1-e,b)&&i[e]>c&&(i[e]=c);}}g=0;S0.Bq(j,h,i[0])&&++g;S0.Bq(j,h,i[1])&&++g;if(g==2)return 2;if(g==1)return 1;return 2}}return 0};S0.Wq=function Wq(a,b,c){var d,e,f,g,h;if(a.b){a.B=OL(N0.xQ,c2,5,b.length,16,1);for(e=new T0.iZ(a.b);e.a<e.c.a.length;){d=T0.hZ(e);if(a.f==null||c==-1&&a.f[d.a]==-1&&a.f[d.b]==-1||c!=-1&&(a.f[d.a]==c||a.f[d.b]==c)){h=OL(N0.hN,K1,5,d.c+2,15,1);f=S0.jn(a.G,h,a.F[d.a],a.F[d.b],d.c+1,b,null)-1;if(f<d.d||f>d.c)return false;for(g=1;g<=f;g++)a.B[h[g]]=true;}}}return true};S0.Xq=function Xq(a,b){var c,d,e,f,g,h,i,j;for(e=0;e<a.g.e;e++){if((S0.ck(a.g,e)&g3)!=0){f=S0.bk(a.g,e);if(f==0)continue;c=S0.Uj(a.g,0,e);d=S0.Uj(a.g,1,e);if(a.f==null||b==-1&&a.f[c]==-1&&a.f[d]==-1||b!=-1&&(a.f[c]==b||a.f[d]==b)){g=a.F[c];h=a.F[d];i=S0.Nm(a.G,g,h);j=S0.bk(a.G,i);if(j==0){S0.Vn(a.G,i)&&(j=S0.Vq(a,i));if(j==0)continue}if(f==3)continue;if(j==3)continue;if(S0.cr(a,e)==(f==j))return false}}}return true};S0.Yq=function Yq(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;g=0;for(i=0;i<a.g.d;i++){if((a.f==null||a.f[i]==b)&&ZQ(EQ(S0.Kj(a.g,i),M2),0)){m=a.F[i];l=S0.Jj(a.g,i);o=S0.Jj(a.G,m);if(l==0)continue;if(l==3)continue;if(o==0||o==3)return false;if(S0.Dj(a.g,i)==1){++g;continue}if(S0.Dj(a.G,m)==1)return false;if(S0.Dj(a.g,i)==2){++g;continue}if(S0.Dj(a.G,m)==2)return false;if(S0.hr(a,i)==(l==o))return false}}if(g!=0){e=OL(N0.hN,K1,5,g,15,1);f=0;for(j=0;j<a.g.d;j++){if((a.f==null||a.f[j]==b)&&ZQ(EQ(S0.Kj(a.g,j),M2),0)){l=S0.Jj(a.g,j);l!=0&&l!=3&&(e[f++]=S0.Cj(a.g,j)<<24|S0.Dj(a.g,j)<<22|j);}}R0.g0(e,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));f=0;while(f<e.length){k=e[f]&x3;n=a.F[k];c=e[f]&-4194304;d=S0.hr(a,k)^S0.Jj(a.g,k)==S0.Jj(a.G,n);for(++f;f<e.length&&(e[f]&-4194304)==c;f++){h=e[f]&x3;m=a.F[h];if(S0.Dj(a.G,m)!=S0.Dj(a.G,n)||S0.Cj(a.G,m)!=S0.Cj(a.G,n))return false;p=S0.hr(a,h)^S0.Jj(a.g,h)==S0.Jj(a.G,m);if(p!=d)return false}}}return true};S0.Zq=function Zq(a,b,c){var d,e,f,g,h,i,j;a.O=false;a.D=new T0.ki;a.a=new T0.ki;T0.p$(a.N.a);if(!a.G||!a.g)return 0;if(a.g.d-a.o>a.G.d||a.g.e-a.p>a.G.e)return 0;if(a.g.d==0)return 0;b==6&&(a.M=63);S0.lr(a,c);d=OL(N0.xQ,c2,5,a.G.d,16,1);a.F=OL(N0.hN,K1,5,a.g.d,15,1);T0.rZ(a.F);h=OL(N0.hN,K1,5,a.w,15,1);T0.uZ(h,h.length,-1);f=0;while(!a.O){if(a.v!=0){j=a.t[f]==-1?a.G.d:S0.Cm(a.G,a.F[a.t[f]]);++h[f];if(h[f]==j){h[f]=-1;if(f==0)break;--f;a.s[f]||(d[a.F[a.r[f]]]=false);continue}if(a.t[f]==-1){if(!d[h[f]]){if(S0.Rq(a,h[f],a.r[f])){a.F[a.r[f]]=h[f];d[h[f]]=true;++f;}}}else {if(S0.Pm(a.G,a.F[a.t[f]],h[f])>=a.G.d)continue;e=S0.Pm(a.G,a.F[a.t[f]],h[f]);if(a.s[f]){e==a.F[a.r[f]]&&S0.Sq(a,S0.Rm(a.G,a.F[a.t[f]],h[f]),a.u[f])&&++f;}else {if(!d[e]){if(S0.Rq(a,e,a.r[f])&&S0.Sq(a,S0.Rm(a.G,a.F[a.t[f]],h[f]),a.u[f])){d[e]=true;a.F[a.r[f]]=e;++f;}}}}}if(f==a.v){if(S0.Yq(a,-1)&&S0.Xq(a,-1)&&S0.Wq(a,d,-1)){i=false;for(g=0;g<a.d;g++){if(S0.dr(a,d,h,g)){i=true;break}}if(b==1&&!i)return 1;if(!i){S0.Qq(a,b);if(b==2)return 1}}if(f==0)break;--f;a.s[f]||(d[a.F[a.r[f]]]=false);}}return a.D.a.length};S0.$q=function $q(a,b){var c,d,e,f,g,h,i,j;i=0;if(a.I){b<a.d&&S0.Fq(a.n,b)?(i=_Q(i,R3)):b<a.d&&S0.zq(a.n,b)&&(i=_Q(i,2));j=(e=a.s[b]&3072,e==0?0:e==p2?2:e==N2?3:4);if(j!=0){i=_Q(i,8);j>2&&(i=_Q(i,16));j>3&&(i=_Q(i,32));}c=a.q[b];c<0?(i=_Q(i,t2)):c>0&&(i=_Q(i,s2));g=a.g[b];switch(g){case 0:break;case 1:i=_Q(i,e3);break;case 2:i=_Q(i,x2);break;case 3:i=_Q(i,y2);break;default:i=_Q(i,z2);}d=S0.Fm(a,b);switch(d){case 0:break;case 1:i=_Q(i,G2);break;case 2:i=_Q(i,H2);break;case 3:i=_Q(i,I2);break;default:i=_Q(i,J2);}h=a.k[b];h>0&&(i=_Q(i,j2));h>1&&(i=_Q(i,u3));}else {b<a.d&&S0.Fq(a.n,b)?(i=_Q(i,R3)):b<a.d&&S0.zq(a.n,b)?(i=_Q(i,2)):(i=_Q(i,4));(a.s[b]&t3)!=0?(i=_Q(i,l2)):(i=_Q(i,m2));j=(e=a.s[b]&3072,e==0?0:e==p2?2:e==N2?3:4);j==0?(i=_Q(i,112)):j==2?(i=_Q(i,104)):j==3?(i=_Q(i,88)):(i=_Q(i,56));c=a.q[b];c==0?(i=_Q(i,r2)):c<0?(i=_Q(i,t2)):c>0&&(i=_Q(i,s2));f=a.c[b]-S0.fn(a,b)+S0.bn(a,b);switch(f){case 0:i=_Q(i,1792);break;case 1:i=_Q(i,1664);break;case 2:i=_Q(i,1408);break;default:i=_Q(i,896);}g=a.g[b];switch(g){case 0:i=_Q(i,3932160);break;case 1:i=_Q(i,3801088);break;case 2:i=_Q(i,3538944);break;case 3:i=_Q(i,3014656);break;default:i=_Q(i,z2);}d=S0.Fm(a,b);switch(d){case 0:i=_Q(i,B2);break;case 1:i=_Q(i,C2);break;case 2:i=_Q(i,D2);break;case 3:i=_Q(i,E2);break;default:i=_Q(i,J2);}h=a.k[b];switch(h){case 0:i=_Q(i,98304);break;case 1:i=_Q(i,81920);break;default:i=_Q(i,49152);}}return i};S0._q=function _q(a,b){var c;c=0;if(b<a.e&&(S0.Eq(a.n,b)||a.F[b]==64)||a.F[b]==64)c|=8;else switch(S0.ak(a,b)){case 4:case 0:c|=32;break;case 1:c|=1;break;case 2:c|=2;break;case 3:c|=4;break;case 5:c|=64;}(a.C[b]&64)!=0?(c|=256):a.I||(c|=128);b<a.e&&S0.Aq(a.n,b)?(c|=w2):a.I||(c|=S3);return c};S0.ar=function ar(a){var b,c,d,e,f,g,h,i,j,k;i=0;for(d=a,f=0,h=d.length;f<h;++f){b=d[f];b==-1&&++i;}if(i!=0){k=a;a=OL(N0.hN,K1,5,k.length-i,15,1);j=0;for(c=k,e=0,g=c.length;e<g;++e){b=c[e];b!=-1&&(a[j++]=b);}}R0.g0(a,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));return a};S0.br=function br(a,b){var c,d,e,f,g,h,i,j;g=0;for(d=b,e=0,f=d.length;e<f;++e){c=d[e];c==-1&&++g;}j=OL(N0.hN,K1,5,b.length-g,15,1);i=0;for(h=0;h<b.length;h++){if(b[h]!=-1){j[i]=S0.Ws(a.g,h)<<16|S0.Ws(a.G,b[h]);++i;}}R0.g0(j,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));return j};S0.cr=function cr(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;f=false;for(e=0;e<2;e++){c=S0.Uj(a.g,e,b);k=a.F[c];if(S0.Qm(a.G,k)>2){m=S0.Uj(a.g,1-e,b);i=u1;for(h=0;h<S0.Qm(a.g,c);h++){d=S0.Pm(a.g,c,h);d!=m&&i>d&&(i=d);}n=a.F[m];j=u1;for(g=0;g<S0.Qm(a.G,k);g++){l=S0.Pm(a.G,k,g);l!=n&&j>l&&(j=l);}a.F[i]!=j&&(f=!f);}}return f};S0.dr=function dr(a,b,c,d){var e,f,g,h,i,j,k,l;h=a.e[d];i=h+1;while(i<a.w&&a.f[a.r[i]]==d)++i;for(k=h;k<i;k++)c[k]=-1;g=h;while(true){l=a.t[g]==-1?a.G.d:S0.Cm(a.G,a.F[a.t[g]]);++c[g];if(c[g]==l){c[g]=-1;if(g==h)break;--g;if(!a.s[g]){b[a.F[a.r[g]]]=false;a.F[a.r[g]]=-1;}continue}if(a.t[g]==-1){if(!b[c[g]]){if(S0.Rq(a,c[g],a.r[g])){a.F[a.r[g]]=c[g];b[c[g]]=true;++g;}}}else {if(S0.Pm(a.G,a.F[a.t[g]],c[g])>=a.G.d){++c[g];continue}f=S0.Pm(a.G,a.F[a.t[g]],c[g]);if(a.s[g]){f==a.F[a.r[g]]&&S0.Sq(a,S0.Rm(a.G,a.F[a.t[g]],c[g]),a.u[g])&&++g;}else {if(!b[f]){if(S0.Rq(a,f,a.r[g])&&S0.Sq(a,S0.Rm(a.G,a.F[a.t[g]],c[g]),a.u[g])){b[f]=true;a.F[a.r[g]]=f;++g;}}}}if(g==i){if(S0.Yq(a,d)&&S0.Xq(a,d)&&S0.Wq(a,b,d)){for(j=h;j<i;j++){if(!a.s[j]){e=a.r[j];b[a.F[e]]=false;a.F[e]=-1;}}return true}--g;if(!a.s[g]){b[a.F[a.r[g]]]=false;a.F[a.r[g]]=-1;}}}return false};S0.er=function er(a){return S0.Zq(a,1,a.c)>0};S0.fr=function fr(a,b){var c;for(c=0;c<b.length;c++)if(b[c]==a)return true;return false};S0.gr=function gr(a,b){var c,d,e;e=0;for(d=0;d<a.length;d++){c=a[d];while(b[e]<c){++e;if(e==b.length)return false}if(b[e]>c)return false}return true};S0.hr=function hr(a,b){var c,d,e,f,g,h,i,j;g=false;if(S0.Gm(a.g,b)==0){for(f=1;f<S0.Qm(a.g,b);f++){for(h=0;h<f;h++){d=S0.Pm(a.g,b,f);e=S0.Pm(a.g,b,h);a.F[d]>a.F[e]^d>e&&(g=!g);}}}else {for(f=0;f<S0.Qm(a.g,b);f++){c=S0.Pm(a.g,b,f);j=0;i=OL(N0.hN,K1,5,3,15,1);for(h=0;h<S0.Qm(a.g,c);h++){i[j]=S0.Pm(a.g,c,h);i[j]!=b&&++j;}j==2&&a.F[i[0]]>a.F[i[1]]^i[0]>i[1]&&(g=!g);}}return g};S0.ir=function ir(a,b){var c,d,e,f;e=0;f=0;while(e<a.length&&f<b.length){c=a[e];d=b[f];if(c==d)return true;c<d?++e:++f;}return false};S0.jr=function jr(a,b){var c,d,e,f,g;if(!b||b.o==0||!b.I){a.g=null;return}a.g=b;a.q=false;S0.Ls(a.g,1);a.M=7;for(d=0;d<a.g.d;d++)ZQ(EQ(S0.Kj(a.g,d),{l:M2,m:0,h:3}),0)&&(a.M=15);for(g=0;g<a.g.e;g++)(S0.ck(a.g,g)&g3)!=0&&(a.M=15);a.K&&a.M!=7&&S0.Ls(a.G,a.M);a.o=0;a.p=0;a.C=OL(N0.xQ,c2,5,a.g.d,16,1);for(e=0;e<a.g.d;e++){a.C[e]=ZQ(EQ(S0.Kj(a.g,e),d2),0);a.C[e]&&++a.o;}a.d=0;a.f=null;if(a.o!=0){if(a.o!=0)for(f=0;f<a.g.e;f++)(a.C[S0.Uj(a.g,0,f)]||a.C[S0.Uj(a.g,1,f)])&&++a.p;for(c=0;c<a.g.o;c++)S0.kl(a.g,c,a.C[c]);a.f=OL(N0.hN,K1,5,a.g.o,15,1);a.d=S0.Ym(a.g,a.f,true,false);}};S0.kr=function kr(a,b){if(!b||b.o==0){a.G=null;return}a.G=b;a.K=false;S0.Ls(a.G,1);};S0.lr=function lr(a,b){if(!a.K){S0.or(a,b);a.K=true;}if(!a.q){S0.mr(a,b);S0.Uq(a);S0.Tq(a);a.q=true;}};S0.mr=function mr(a,b){var c,d,e,f,g,h,i,j,k,l;f=null;i=null;g=null;S0.Ls(a.g,a.M);a.n=OL(N0.hN,K1,5,a.g.d,15,1);for(d=0;d<a.g.d;d++)a.n[d]=S0.Qm(a.g,d);if(a.o!=0){j=new S0.bt(a.g.o,a.g.p);l=OL(N0.xQ,c2,5,a.g.o,16,1);for(e=0;e<a.g.o;e++)l[e]=!a.C[e];S0.sm(a.g,j,l,true,null);S0.Ls(j,a.M);S0.nr(a,j,b);f=a.i;i=a.k;g=a.j;k=0;for(c=0;c<a.g.d;c++)a.C[c]||(a.n[c]=S0.Qm(j,k++));}S0.nr(a,a.g,b);if(a.o!=0){k=0;for(c=0;c<a.g.o;c++){if(!a.C[c]){a.i[c]=f[k];a.j[c]=g[k++];}}k=0;for(h=0;h<a.g.p;h++){!a.C[S0.Uj(a.g,0,h)]&&!a.C[S0.Uj(a.g,1,h)]&&(a.k[h]=i[k++]);}}};S0.nr=function nr(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;p=b.d;a.i=OL(N0.iN,c3,5,b.d,14,1);a.j=OL(N0.hN,K1,5,b.d,15,1);for(h=0;h<p;h++){a.i[h]=iR(EQ(_Q(S0.$q(b,h),b.w[h]),T3),U3);a.j[h]=b.A[h];(c&1)!=0&&(a.j[h]+=b.q[h]+16<<8);(c&2)!=0&&(a.j[h]+=b.v[h]<<16);}a.A=OL(N0.iN,c3,5,b.d,14,1);r=(S0.Ls(b,7),b.n);for(o=0;o<r.i.a.length;o++){n=false;for(j=T0.Yh(r.j,o),k=0,l=j.length;k<l;++k){m=j[k];if((b.D[m]&Q2)!=0){n=true;break}}if(!n){s=T0.Yh(r.j,o).length;for(e=T0.Yh(r.i,o),f=0,g=e.length;f<g;++f){d=e[f];s==3?(a.A[d]=_Q(a.A[d],Q1)):s==4?(a.A[d]=_Q(a.A[d],R1)):s==5?(a.A[d]=_Q(a.A[d],S1)):s==6?(a.A[d]=_Q(a.A[d],T1)):s==7&&(a.A[d]=_Q(a.A[d],U1));}}}q=b.e;a.k=OL(N0.hN,K1,5,b.e,15,1);for(i=0;i<q;i++){a.k[i]=(S0._q(b,i)|b.D[i])&6291967^6291840;(c&4)!=0?(a.k[i]&2)!=0&&(a.k[i]|=8):(c&8)!=0&&(a.k[i]&2)!=0&&i<b.e&&S0.Aq(b.n,i)&&(a.k[i]|=8);}};S0.or=function or(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;S0.Ls(a.G,a.M);k=a.G.d;a.I=OL(N0.hN,K1,5,k,15,1);a.H=OL(N0.iN,c3,5,k,14,1);for(g=0;g<k;g++){a.H[g]=iR(EQ(_Q(S0.$q(a.G,g),S0.Kj(a.G,g)),T3),U3);a.I[g]=S0.Pj(a.G,g);(b&1)!=0&&(a.I[g]+=S0.yj(a.G,g)+16<<8);(b&2)!=0&&(a.I[g]+=S0.Ij(a.G,g)<<16);}a.L=OL(N0.iN,c3,5,k,14,1);m=S0.pn(a.G);for(j=0;j<m.i.a.length;j++){n=T0.Yh(m.j,j).length;for(d=T0.Yh(m.i,j),e=0,f=d.length;e<f;++e){h=d[e];n==3?(a.L[h]=_Q(a.L[h],Q1)):n==4?(a.L[h]=_Q(a.L[h],R1)):n==5?(a.L[h]=_Q(a.L[h],S1)):n==6?(a.L[h]=_Q(a.L[h],T1)):n==7&&(a.L[h]=_Q(a.L[h],U1));}}for(c=0;c<k;c++){n=S0.Km(a.G,c);n==0?(a.L[c]=_Q(a.L[c],P1)):n>7&&(a.L[c]=_Q(a.L[c],V1));}l=a.G.e;a.J=OL(N0.hN,K1,5,l,15,1);for(i=0;i<l;i++)a.J[i]=(S0._q(a.G,i)|S0.ck(a.G,i))&6422527^6291840;};S0.pr=function pr(a,b,c,d,e,f,g){var h,i;h=S0.Pm(a.g,a.r[b],d);if((!a.C[h]||a.f[h]==g)&&h!=a.t[b]){i=S0.Rm(a.g,a.r[b],d);if(!f[i]&&!S0.wk(a.g,i)){a.r[++c]=h;a.t[c]=a.r[b];a.u[c]=i;f[i]=true;e[h]?(a.s[c]=true):(e[h]=true);}}return c};S0.qr=function qr(){this.c=8;this.N=new T0.u_(new _0._I);};S0.rr=function rr(a,b){var c;c=OL(N0.hN,K1,5,b,15,1);O0.QU(a,0,c,0,$wnd.Math.min(a.length,b));return c};S0.sr=function sr(a,b){var c;c=OL(N0.xQ,c2,5,b,16,1);O0.QU(a,0,c,0,$wnd.Math.min(a.length,b));return c};sR(92,1,{},S0.qr);_.c=0;_.d=0;_.o=0;_.p=0;_.q=false;_.v=0;_.w=0;_.K=false;_.M=0;_.O=false;N0.SN=LS(92);S0.tr=function tr(){};sR(109,1,{109:1},S0.tr);_.a=0;_.b=0;_.c=0;_.d=0;N0.QN=LS(109);
S0.wr=function wr(){S0.wr=uR;S0.ur=WL(IL(N0.CP,1),B1,2,6,['QM@HzAmdqjF@','RF@Q``','qC`@ISTAlQE`','`J@H','QM@HzAmdqbF@','qC`@ISTAlQEhqPp@','sJP@DiZhAmQEb','RF@QPvR@','QM@HzA@','qC`@ISTAlQEhpPp@','qC`@Qz`MbHl','sJP@DiZhAmQEcFZF@','RFPDXH','qC`@IVtAlQE`','QM@HvAmdqfF@','sGP@DiVj`FsDVM@','`L@H','sJP@DizhAmQEcFBF@','sJP@DjvhAmQEb','sFp@DiTt@@AlqEcP','sGP@LdbMU@MfHlZ','QMHAIhD','QM@HzAy@','sJP@DkVhAmQEb','sNp@DiUjj@[\\QXu`','sJP@DiZhAmQEcFBF@','sGP@DjVj`FsDVM@','RFPDTH','RG@DXOH@','sGP@Divj`FsDVMcAC@','sGP@Dj}j`FsDVM@','qC`@Qz`MbHmFRF@','sNp@LdbJjj@[\\QXu`','QMHAIhGe@','QM@HzAyd`','QM`AIhD','qC`@ISTA@','sGP@DkUj`FsDVM@','qC`@IVtAlQEhqPp@','sNp@DiUjj@[\\QXuqea`@','KAx@@IRjuUPAlHPfES\\','QM`BN`P','sJP@DjZhAmQEcFJF@','Hid@@DjU^nBBH@FtaBXUMp`','sNp@Diujj@[\\QXuq`a`@','sJP@DjvhAmQEcFZF@','sJP@DjZhAmQEcFFF@','sOp@DjWkB@@FwDVM\\YhX@','sNp@Dj}Zj@[\\QXu`','sNp@DiWjj@[\\QXuq`a`@','sOp@DjWkB@@D','KAx@@ITouUPAlHPfES\\','KAx@@YIDTjjh@vDHSBin@','sNp@DkUZj@[\\QXu`','RFPDXOH@','QM`BN`^L`','qC`@ISTAy@','sGP@LdbMU@MfHl[FVF@','qCb@AIZ`H','KAx@@IRjuUPAlHPfES]FFa`@','KAx@@ITnuUPAlHPfES\\','HiD@@DiUVjj`AmHPfES\\H','sNp@DjUjj@[\\QXu`','sJP@DkVhAmQEcFJF@','sGP@DjVj`FsDVMcCC@','qC`@Qz`MbHmFBF@','sJP@DkfhAmQEb','qC`@IVtAlQEhsPp@','sGP@Djuj`FsDVM@','sGP@Dj}j`FsDVMcMC@','sJP@DiZhA@','KAx@@ISjuUPAlHPfES]F@a`@','sJP@DjZhAmQEcFRF@','KAx@@IRnuUPAlHPfES]F@a`@','HiD@@DjWvjj`AmHPfES\\H','QMHAIhGd@','sNp@DiUjj@[\\QXuq`a`@','KAx@@IVjmUPAlHPfES\\','sGP@DjVj`FsDVMcMC@','QM`AIhGe@','HiD@@LdbJRjjh@[RDIaTwB','qCp@AIZ`H','sGP@LdbMU@MfHl[FFF@','QMDARVA@','sNp@LdbJjj@[\\QXuqba`@','sNp@LdbJjj@[\\QXuqca`@','sGP@Dkej`FsDVM@','qCb@AIZ`OI@','HaD@@DjUZxHH@AlHPfES]FLa`@','sGP@DkYj`FsDVM@','qCb@AIV`H','sNp@LdbJjj@[\\QXuqea`@','sGP@DkUj`FsDVMcEC@','sFp@DiTt@@Axa@','Hmt@@DjU_ZxHHj@AmhPfES\\Lj','QM`BN`^P','qCb@AIZ`OH`','sFp@DiTt@@AxaP','sGP@Djuj`FsDVMcEC@','sGP@Djuj`FsDVMcIC@','sGP@DkUj`FsDVMcKC@','sJP@DkfhAmQEcFRF@','sGP@DjVj`FsDVMcIC@','HaD@@DjUZxHH@AlHPfES]FFa`@','qC`@IRtDVqDV@','sNp@Dj}Zj@[\\QXuqfa`@','KAx@@ITnuUPAlHPfES]FFa`@','HiD@@DkUUjj`AmHPfES\\H','sJQ@@dkU@H','qC`@Qz`H','KAx@@IUkmUPAlHPfES\\','KAx@@ITouUPAlHPfES]FJa`@','sJP@H~j@[TQX`','sGP@DjZj`FsDVM@','sJP@DkVhAmQEcFFF@','sJX@@eKU@H','sJP@DizhAy@','QMHAIhGbP','KAx@@ITouUPAlHPfES]FNa`@','HaD@@DjUZxHD@AlHPfES\\','HaD@@DjUZxHH@A@','sNp@LdbJjj@[\\QXuqaa`@','Hed@@LdbRQUUUP@vTHSBinFP','KAx@@ITouUPAlHPfES]FLa`@','sNp@DkUZj@[\\QXuqba`@','KAx@@ITjuUPAlHPfES]FNa`@','KAx@@YIDTjjh@vDHSBincGPp@','HaD@@DjYvxH`@AlHPfES]FLa`@','RF@QP`','qCb@AIj`H','sNp@DjUjj@[\\QXuqaa`@','sNp@DkVZj@[\\QXu`','KAx@@YIDUJjh@vDHSBin@','sGP@DkYj`FsDVMcIC@','sGP@DjVj`FsDVMcAC@','sGP@DiVj`D','sJP@DkVhAmQEcFZF@','sNp@LdbLjj@[\\QXu`','QM@HvAmdqbF@','HaD@@DjWjXHB@AlHPfES\\','sNp@DjwZj@[\\QXuqba`@','sNp@LdbJjj@[\\QXuqda`@','sFp@DiTt@@Axa`','HiD@@Djuujj`AmHPfES\\H','sNp@DkUZj@[\\QXuqca`@','sJP@DiZhAy@','KAx@@YIDTjjh@vDHSBincCPp@','KAx@@IWNmUPAlHPfES\\','KAx@@IVkMUPAlHPfES\\','sJQ@@dju@H','qCb@AIZ`OH@','qC`@ISTAxa@','sNp@DjyZj@[\\QXu`','Hid@@DjUfaBB`@FtaBXUMp`','HiD@@DiUVjj`AmHPfES\\LXBF@','KAx@@IUjmUPAlHPfES\\','HiD@@DjWvjj`AmHPfES\\LXjF@','sJP@DjVhAmQEb','qCb@AIV`OH`','HiD@@LdbJRjjh@[RDIaTwCFDa`@','KAx@@YIDTjjh@vDHSBinc@Pp@','sNp@DjUjj@[\\QXuqda`@','qC`@Qz`OED','sJP@DkfhAmQEcFZF@','KAx@@YIDbjjh@vDHSBincDPp@','sGP@Djyj`FsDVMcMC@','KAx@@IVrmUPAlHPfES\\','qCp@AIZ`OI@','sJX@@dkU@H','sJQ@@dkU@OH`','sNp@Di]ZjBBvxbqk@','Hkl@@DjU_Uk``bj`@[VDIaTwCJzX','sGP@DjZj`FsDVMcEC@','Hid@@DjU^nBBH@FtaBXUMpqcHX@','sNp@DkeZj@[\\QXu`','sNp@DjYjj@[\\QXuqca`@','sGQ@@djuT@`','HiD@@LdbJTjjh@[RDIaTwB','sOp@DjWkB@@Gd`','HeT@@LdbbRKBDQD@CYPaLJfxY@','qCr@XIKTA@','HiD@@DjW^jj`AmHPfES\\LXJF@','HeT@@DjU]k``b`@[JDIaTwCH','sGP@Djuj`FsDVMcCC@','`IH`B','sOp@DjWkB@@GdX','sJQ@@eKU@H','KAx@@YIDUJjh@vDHSBincBPp@','sJX@@eKU@OH@','KAx@@YIDTjjh@vDHSBincAPp@','sOq@@drm\\@@@`','KAx@@IUkMUPAlHPfES\\','qCp@AIj`H','Hed@@DjUUjjj@FraBXUMpr','sGX@@eJuT@`','sGP@DkUj`FsDVMcCC@','HiD@@Dj}Ujj`AmHPfES\\LXrF@','KAx@@ITouUPAlHPfES]FHa`@','Hed@@DjWujjj@FraBXUMpsFIa`@','sGP@DiUj``mfHlZ','sFp@DiTvjhAlqEcP','Hid@@DjU^nBBH@FtaBXUMpq`XX@','sJP@DkVdAmQEb','qCp@AIZ`OH`','QMhDRVA@','qC`@ISJAlQE`','qCp@BOTAyhl','sJX@@eOU@ODB','sFp@DiTt@@AyaB','sGP@DkUj`FsDVMcMC@','Hid@@DjYUaBH`@FtaBXUMpqcHX@','qC`@Qz`OH@','HiD@@DjUVjj`AmHPfES\\LXZF@','sJP@H~j@[TQXqda`@','sJX@@eKU@OI@','sNp@Djejj@[\\QXu`','sJQ@@dsU@H','sJQ@@dkU@OI`','KAx@@YIMDVjh@vDHSBin@','Hid@@DjU^nBBD@FtaBXUMp`','sNp@DkgZj@[\\QXuqca`@','qC`@IRtDVqDVcEC@','Hed@@LdbRQeUUP@vTHSBinFP','sNp@DiUjj@P','qC`@IRtDT','sNp@DkYZj@[\\QXuqca`@','KAx@@IUkmUPAlHPfES]FDa`@','KAx@@IVjmUPAlHPfES]FNa`@','sOx@@drm\\@@@`','KAx@@ITjuUPAlHPfES]FBa`@','QMDARVAyH','sJP`@dfvhA@','HeT@@DjU_k``b`@[JDIaTwCLXfF@','KAx@@IToUUPAlHPfES]FJa`@','sGP@DkYj`FsDVMcEC@','qCb@AIZ`ODH','`I@`B','KAx@@IUzmUPAlHPfES]FFa`@','sNp@DkfZj@[\\QXu`','KAx@@ITnuUPAlHPfES]F@a`@','HiD@@LddURjjh@[RDIaTwB','sNp@Dj~Zj@[\\QXuqfa`@','Hed@@Dj{uZjj@FraBXUMpr','KAx@@ITsUUPAlHPfES\\','Hid@@LdbRQk``b@AmHPfES\\LXrF@','sOp@DjWkB@@GdH','sJQ@@dkU@OH@','Hid@@DjU^nBBH@FtaBXUMpqahX@','sGP@DiYj``mfHlZ','KAx@@IToUUPAlHPfES]FLa`@','qCp@AJZ`ODH','Hmt@@DjU]ZxHHj@AmhPfES\\Lj','sGP@DkUjPFsDVM@','qC`@IVtA@','Hed@@LdbJReUUP@vTHSBinFP','sNp@DjuZj@[\\QXuqea`@','KAx@@IUkmUPAlHPfES]FNa`@','HiD@@DkVUjj`AmHPfES\\H','Hed@@DkUeZjj@FraBXUMpr','sNp@DkVZj@[\\QXuqea`@','sJP@DiVhHKZbKFLLL@','HiD@@Djuyjj`AmHPfES\\H','sNp@DjUjj@[\\QXuq`a`@','HeT@@DjYUXPbH`@[JDIaTwCH','HiD@@DjwUjj`AmHPfES\\LXRF@','sNq@@djmUPB','KAx@@YIEEZjh@vDHSBincCPp@','sGP@Di^V`dmfHlZ','Hid@@DjYUaBHP@FtaBXUMp`','sNp@DjYjj@[\\QXuqba`@','sGP@Dkej`FsDVMcKC@','HeT@@DjU^k``b`@[JDIaTwCH','qC`@Qv`MbHmFBF@','sGQ@@djmT@`','qCr@XIKTAyH','qC`@IVtAlQEhpPp@','Hid@@LdbbQxXF@@AmHPfES\\LXjF@','sGP@DkYj`FsDVMcCC@','KAx@@IVsMUPAlHPfES\\','qCp@AIj`ODl','HiD@@DkeUjj`AmHPfES\\H','deT@@DjU[k``b`@vTHSBinFP','sJP@DkVdAmQEcFRF@','HiD@@LdbJTjjh@[RDIaTwCFDa`@','HiD@@DkYyjj`AmHPfES\\H','sJP@DjZhAyH','KAx@@IVkMUPAlHPfES]FDa`@','sJX@@dkU@OI@','Hed@@LdbRQUUUP@vTHSBinFXpLL@','Hed@@DjuUZjj@FraBXUMpr','sGP@Djfj`FsDVMcKC@','sNp@DkVZj@[\\QXuqba`@','sNp@DjyZj@[\\QXuqfa`@','qCb@AIj`OH@','sNp@DjUZj@[\\QXu`','KAx@@IWOMUPAlHPfES\\','Hid@@DjU^nBBH@D','Hed@@DjuvZjj@FraBXUMpr','sJP@DiVhHKZbKFLtL@','dmt@@DjU_ZxHHj@C[PaLJfxYVLKC@','sNp@DjuZj@[\\QXuqca`@','sJP@DkfhAmQEcFJF@','sNp@LdbJZj@[\\QXu`','HeT@@DjU_k``b`@[JDIaTwCLXFF@','KAx@@IVlmUPAlHPfES]FNa`@','HeT@@LdbbRKBDQD@CYPaLJfxYcEPp@','Hid@@DjUZnBBH@FtaBXUMpqcHX@','qCa@CIKTA@','HiD@@Dj~]jj`AmHPfES\\LXFF@','sKP@Di\\Zj@[TQX`','sGP@Djfj`FsDVMcEC@','HiD@@DkgYjj`AmHPfES\\H','sNp@DjuZj@[\\QXuqaa`@','KAx@@YIMDVjh@vDHSBincDPp@','sJP@DjVhHKZbKFLTL@','Hid@@LdbRQk``b@AmHPfES\\LXZF@','HiD@@Dj}Ujj`AmHPfES\\LXzF@','HeT@@DjU_k``bP@[JDIaTwCH','sNp@DkUZi@[\\QXu`','HiD@@DjYfjj`AmHPfES\\H','sGP@DjZj`FsDVMcAC@','Hmt@@DjU_jxHHj@AmhPfES\\Lj','Hid@@LdbRQk``R@AmHPfES\\H','KAx@@YIDUJjh@vDHSBincDPp@','qCr@XIKTAyD','sOq@@drm\\@@@|`@','Hed@@DjW^jjj@FraBXUMpsFBa`@','HeT@@DjY]zXFB@@[JDIaTwCH','Hkl@@DjU_Vk``bj`@[VDIaTwCJzX','Hid@@DjY}nBHH@FtaBXUMpqcHX@','sGX@@eKuT@|d@','sGP@Dj^Y`FsDVM@','HcL@@DjU_ZnBBJh@FqaBXUMprn`','sJP@DkVdAmQEcFJF@','sOq@@drm\\@@@|b@','sNp@DjyZj@[\\QXuqaa`@','HaD@@DjUZxHH@AyD@','qC`@Qv`H','dmt@@DjU_ZxHHj@C[PaLJfxYVLYC@','sGP@Dkej`FsDVMcMC@','Hed@@DjUUjjj@FraBXUMpsFHa`@','HeT@@LdbbRkBDQD@CYPaLJfxY@','KAx@@IU{MUPAlHPfES]FLa`@','RG@DTH','sJY@DDeVhA@','KAx@@YIDUJjh@vDHSBinc@Pp@','sJX@@dkU@OI`','sJQ@@dju@OI`','HeT@@LdbbRKBDQD@CYPaLJfxYcFPp@','sFp@DiTvjhAlqEcXpPp@','HaD@@DjUZxHH@AyG@','sNx@@eJ}UPB','sNp@LddUjj@[\\QXuqca`@','HaDH@@RVU[j@@@D','sNp@DkgZi@[\\QXu`','sGY@LDeVj`D','sNp@LdbJfZBZvxbqk@','sJP`@dfvhAyL','sGX@AddQjhAxe`','Hmt@@DjU_ZxHHj@AmhPfES\\LkFIa`@','qCh@CIKTA@','sNp@LdbLjj@[\\QXuq`a`@','sOq@@drm\\@@@|a@','KAx@@IUzmUPAlHPfES]FJa`@','sNx@AddQUUPB','sGP@Di]jP`mfHlZ','sJP`@TeZhA@','KAx@@IRjmUPHKXPaLJfx','HeT@@LdbRTM\\DDT@CYPaLJfxY@','HaF@@@Rfu[j@@@D','Hid@@DjYUaBH`@FtaBXUMpqchX@','KAx@@IUjmTpAlHPfES\\','Hid@@DjU^nBBD@FtaBXUMpqcHX@','sGP@DiUj``mfHl[FFF@','KAx@@IUvmUPAlHPfES]FLa`@','Hed@@LdbQTUUUP@vTHSBinFXqDL@','sJP@DkVhA@','sOx@@drm\\@@@|b@','KAx@@IUkMUPAlHPfES]FDa`@','HeT@@LdbRQU\\DDT@CYPaLJfxY@','HiD@@Dj}Yjj`AmHPfES\\LXrF@','HiD@@Dj{ujj`AmHPfES\\LXFF@','KAx@@IWNmUPAlHPfES]FFa`@','KAx@@IRkMUPHKXPaLJfx','sJP@DjYdAmQEcFZF@','sJY@LDeZhAyL','HaDH@@RVU[f@@@D','sJP`@deVhAyB','HaD@@DjWjZjj`AlHPfES\\','sGP@DkYj`FsDVMcMC@','sNp@DkgZj@[\\QXuqea`@','sJQ@@dlu@H','HeT@@DjU]k``b`@[JDIaTwCLXrF@','sJX@@dkU@OH`','RFDDQFCr`','sJP@DiYXIKZbKFLLL@','KAx@@YIHjjjh@vDHSBincGPp@','Hk\\@@DjU^ukmLHH@@@AmXPfES\\Lki`','sGQ@@djmT@|b@','Hid@@DjUfaBB`@FtaBXUMpqahX@','sNx@@eRmUPB','Hmt@@LdbRVak``ah@FvaBXUMprh','qCr@XIJtA@','KAx@@IWMmUPAlHPfES]FNa`@','HeT@@DjYYZPbJ@@[JDIaTwCH','sNp@DkfZj@[\\QXuqea`@','Hid@@DjU^nBAHAEVtaBXUMp`','dmt@@DjUgZDHJJ@C[PaLJfxYT','sGP@DkejPFsDVM@','sNx@@eJmUPB','qCb@AIf`H','HcL@@DjU_VnBBJh@FqaBXUMprnqcXX@','Hid@@DjUZnBBH@FtaBXUMpqahX@','sNp@LdbQZjBBvxbqkcGC@','sOx@@drm\\@@@|c@','sJP@H~j@^R@','KAx@@YIDcFjhDElHPfES\\','Hid@@DjUZnBAH@FtaBXUMp`','sNp@LddUji@[\\QXu`','sGP@DjfjPFsDVM@','HeT@@DjYUXPbD`@[JDIaTwCH','KAx@@IUoMUPAlHPfES]FDa`@','sFp@DiTt@@AyaD','Hed@@DjuuZjj@FraBXUMpsFIa`@','HeT@@DjUghP`h`@[JDIaTwCLXfF@','sOp@DjWkjj`FwDVM\\YhX@','sGP@Djfj`FsDVMcIC@','KAx@@IRkmUPHKXPaLJfzL]C@','sNx@@djmUPB','QM`AIdD','sOp@DjWkB@@Gbe@','sNp@DjyZj@[\\QXuqca`@','QM@HuAmd`','sNp@LddUjj@[\\QXuqea`@','daD@@DjUZxHD@CXPaLJfzLYC@','qCb@AIZPH','HiD@@LdbJTjjh@[RDIaTwCF@a`@','Hmt@@DjU_ZxHHi@AmhPfES\\Lj','HaDH@@RYWih@H@D','HiD@@LdbJTjjh@[RDIaTwCFHa`@','sGX@@djuT@|a@','sNp@DkfZj@[\\QXuqaa`@','Hid@@DjU^nBBH@GdL','KAx@@IVkMUPAlHPfES]FJa`@','qCr@XIKTAy@','HmT@@Dj{uVjjh@[ZDIaTwCJqaXX@','dmt@@DjYWVDHbJ@C[PaLJfxYT','Hif@@@RUe^Fh@@@P','HaDH@@Rfu[j@@@GdH','KAx@@IVsMUPAlHPfES]FDa`@','sKP@Di\\Zj@[TQXq`a`@','sJX@@eMU@OH@','HeT@@DjU^k``b`@[JDIaTwCLXFF@','Hmt@@LdbbRJXPbHh@FvaBXUMprh','sJP@DjvhAmQEcFBF@','dmt@@LdbbRNXPbHh@MmBDpj[aeXplL@','sJP`@dfvhAyD','sGP@Di^V`dmfHl[FVF@','KAx@@IVsmUPAlHPfES]FBa`@','sOq@@drm\\@@@|PP','sJY@BDeZhA@','HeT@@LdbRbmBDED@CYPaLJfxY@','Hed@@Djy[Zjj@FraBXUMpr','HeT@@DjU]k``b`@[JDIaTwCLXFF@','Hid@@DjUfaBB`@D','qCa@CIJtA@','QMPARVA@','Hid@@DjUfaBB`@FtaBXUMpqcHX@','sJY@BDfZhA@','HeT@@DjUghP`hP@[JDIaTwCH','Hed@@Dj{uZjj@FraBXUMpsFIa`@','dmt@@DjYUvDHbJ@C[PaLJfxYVLUC@','sNp`@dfuZj@P','sJQ@@dmU@OH@','sJX@@dmU@H','HeT@@DjU]k``b`@[JDIaTwCLXZF@','HiD@@LdfbJZjh@[RDIaTwCFAa`@','sOx@@drm\\@@@|a@','deT@@DjUfhP`h`@vTHSBinFP','dmt@@DjU]ZxHHj@C[PaLJfxYVLKC@','sOp@DjWkjj`FwDVM\\XHX@','HcL@@LdbbRNSBDQEP@McBDpj[ae]cFpp@','HiD@@Dj}Yji`AmHPfES\\H','HaDH@@RYe[hB@@D','Hid@@DjU^njjj@FtaBXUMpq`XX@','deT@@LdbbRKBDQB@FraBXUMpr','QMPARZA@','sOq@@drm\\@@@|QX','HaD@@DjYvxH`@A@','HcL@@LdbbRNcBDQEP@McBDpj[ae]@','QMhDRZA@','RG@DXLHmP','QM`BN`XQYd','RG@DTLHmP','QMHAIXFEVd','QMDARVAaH','RFPDXLHmP','RF@Q`vRbdLEC@','RF@QpvR@','QO@HyjAmd`','`II@B','`II@CFspqJp','`II@CF[@hM@prB`','`H@[T[|B`XN@PdM@p|@bHrBcDk@','RG@DXMj}F@','QM`BN`[L~b@','RG@DTMj}D@','QMHAIXFt~j@','QMDARVA}L@','RFPDXMj}D@','sKP@Di\\YZ@[TQXqaa`@','eF`BHD']);};S0.xr=function xr(a,b){var c,d;if(!b)return null;d=OL(N0.hN,K1,5,(S0.ur.length+31)/32|0,15,1);b=S0.Cr(b);S0.kr(a.e,b);for(c=0;c<S0.ur.length;c++){S0.jr(a.e,S0.vr[c]);S0.Zq(a.e,1,4)>0&&(d[c/32|0]|=1<<31-c%32);}return d};S0.yr=function yr(a,b){var c,d;if(!b)return null;d=OL(N0.iN,c3,5,(S0.ur.length+63)/64|0,14,1);b=S0.Cr(b);S0.kr(a.e,b);for(c=0;c<S0.ur.length;c++){S0.jr(a.e,S0.vr[c]);S0.Zq(a.e,1,4)>0&&(d[c/64|0]=_Q(d[c/64|0],aR(1,63-c%64)));}return d};S0.zr=function zr(){var a,b;if(S0.vr==null){b=new S0.Eo(false);S0.vr=OL(N0._N,p1,21,S0.ur.length,0,1);for(a=0;a<S0.ur.length;a++){S0.vr[a]=S0.vo(b,S0.ur[a]);S0.Ls(S0.vr[a],1);}}};S0.Ar=function Ar(a){var b;if(a.d!=null){for(b=0;b<a.d.length;b++)if((a.b[b]&~a.d[b])!=0)return false}else {return false}return S0.Br(a)};S0.Br=function Br(a){!a.c&&(a.c=(new S0.Eo(false),null));!a.a&&(a.a=(new S0.Eo(false),null));S0.kr(a.e,a.c);S0.jr(a.e,a.a);return S0.er(a.e)};S0.Cr=function Cr(a){var b,c;if(a.I){for(b=0;b<a.o;b++){if(ZQ(EQ(a.w[b],d2),0)){a=new S0.ct(a);for(c=b;c<a.o;c++)ZQ(EQ(a.w[c],d2),0)&&(a.A[c]=-1);S0.sj(a);}}}return a};S0.Dr=function Dr(a,b,c){a.a=b;c==null?(a.b=S0.xr(a,b)):(a.b=c);};S0.Er=function Er(a,b,c){a.c=b;c==null?(a.d=S0.xr(a,b)):(a.d=c);};S0.Fr=function Fr(){S0.wr();this.e=new S0.qr;S0.zr();};S0.Gr=function Gr(a){S0.wr();var b,c,d,e,f,g;if(a==null)return null;b=OL(N0.dN,d3,5,a.length*8,15,1);for(d=0;d<a.length;d++){g=a[d];for(e=7;e>=0;e--){c=g&15;c>9&&(c+=7);b[d*8+e]=48+c<<24>>24;g>>=4;}}return O0.vU(R0.l0(b,0,(f=b.length,R0.i0(),f)))};S0.Hr=function Hr(a){S0.wr();var b,c,d,e;if(R0.I0(a).length==0||(R0.I0(a).length&7)!=0)return null;d=OL(N0.hN,K1,5,R0.I0(a).length/8|0,15,1);for(c=0;c<R0.I0(a).length;c++){e=c/8|0;b=(R0.F0(c,R0.I0(a).length),R0.I0(a).charCodeAt(c)-48);b>16&&(b-=7);d[e]<<=4;d[e]+=b;}return d};S0.Ir=function Ir(a,b){S0.wr();var c,d,e,f;f=0;d=0;e=0;for(c=0;c<a.length;c++){f+=ET(a[c]&b[c]);d+=ET(a[c]);e+=ET(b[c]);}return f/$wnd.Math.sqrt(d*e)};S0.Jr=function Jr(a,b){S0.wr();var c,d,e;e=0;c=0;for(d=0;d<a.length;d++){e+=ET(a[d]&b[d]);c+=ET(a[d]|b[d]);}return e/c};sR(91,1,{},S0.Fr);N0.RN=LS(91);S0.Lr=function Lr(a){a.j=1;a.k=10;a.n=400;a.f=400;a.i=true;a.d='black';a.b=new T0.ki;a.a=new T0.ki;a.c=new O0.KU;a.e=new f1.JR(12);};S0.Mr=function Mr(a,b){var c,d;c=O0.bT(i1.gV(i1.dV(new i1.hV(3*a.j),(i1._W(),i1.XW))));d='<line stroke-dasharray="'+c+','+c+X1+'x1="'+O0.bT(i1.gV(i1.dV(new i1.hV(b.a),i1.XW)))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(b.c),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(b.b),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(b.d),i1.XW)))+X1+_1+a.d+X1+'stroke-width:'+a.j+b2;S0.Xr(a,d);};S0.Nr=function Nr(a,b){var c,d;d=new O0.MU('<polygon points="');for(c=0;c<b.a;c++){O0.FU(d,PQ($wnd.Math.round(b.b[c])));d.a+=',';O0.FU(d,PQ($wnd.Math.round(b.c[c])));d.a+=' ';}O0.HU(d,'" fill="'+a.d+X1+_1+a.d+X1+a2+a.j+b2);S0.Xr(a,d.a);};S0.Or=function Or(a,b,c,d){var e,f,g,h;g=(e=(h=f1.HR(a.e,b),new g1.NR(h)).b,e);f='<text x="'+O0.bT(i1.gV(i1.dV(new i1.hV(c-g/2),(i1._W(),i1.XW))))+X1+'y="'+O0.bT(i1.gV(i1.dV(new i1.hV(d+a.k/3),i1.XW)))+X1+'stroke="none" '+'font-size="'+a.e.b+X1+'fill="'+a.d+'">'+b+'<\/text>';S0.Xr(a,f);};S0.Pr=function Pr(a,b,c,d){var e;e='<circle cx="'+O0.bT(i1.gV(i1.dV(new i1.hV(b+d/2),(i1._W(),i1.XW))))+X1+'cy="'+O0.bT(i1.gV(i1.dV(new i1.hV(c+d/2),i1.XW)))+X1+'r="'+O0.bT(i1.gV(i1.dV(new i1.hV(d/2),i1.XW)))+X1+'fill="'+a.d+b2;S0.Xr(a,e);};S0.Qr=function Qr(a,b,c,d){var e;e='<circle id="'+(a.g!=null?a.g:'mol'+S0.Kr)+':Atom:'+b+X1+V3+'data-atom-map-no="'+S0.Hj(a.J,b)+X1+'cx="'+O0.bT(i1.gV(i1.dV(new i1.hV(c),(i1._W(),i1.XW))))+X1+'cy="'+O0.bT(i1.gV(i1.dV(new i1.hV(d),i1.XW)))+X1+'r="'+8+X1+W3;T0.Th(a.a,e);};S0.Rr=function Rr(a,b,c,d,e,f){var g;g='<line id="'+(a.g!=null?a.g:'mol'+S0.Kr)+':Bond:'+b+X1+V3+'x1="'+O0.bT(i1.gV(i1.dV(new i1.hV(c),(i1._W(),i1.XW))))+X1+Y1+O0.bT(i1.gV(i1.dV(new i1.hV(d),i1.XW)))+X1+Z1+O0.bT(i1.gV(i1.dV(new i1.hV(e),i1.XW)))+X1+$1+O0.bT(i1.gV(i1.dV(new i1.hV(f),i1.XW)))+X1+a2+8+X1+W3;T0.Th(a.b,g);};S0.Sr=function Sr(a,b){a.j=fR(PQ($wnd.Math.round(100*$wnd.Math.max(b,1))))/100;};S0.Tr=function Tr(a,b){a.d='rgb('+((b&Y2)>>16)+','+((b&M1)>>8)+','+(b&255)+')';};S0.Ur=function Ur(a,b){if(a.k!=b){a.k=b;a.e=new f1.JR(b);}};S0.Vr=function Vr(a,b){a.n=gR(PQ($wnd.Math.round(b.b)));a.f=gR(PQ($wnd.Math.round(b.a)));return S0.Ld(a,b)};S0.Wr=function Wr(a){var b,c,d,e,f,g;f='<svg id="'+(a.g!=null?a.g:'mol'+S0.Kr)+X1+'xmlns="http://www.w3.org/2000/svg" version="1.1" '+'width="'+a.n+'px" '+'height="'+a.f+'px" '+'viewBox="0 0 '+a.n+' '+a.f+'">\n';g=a.i?'<style> #'+(a.g!=null?a.g:'mol'+S0.Kr)+' { pointer-events:none; }'+' #'+(a.g!=null?a.g:'mol'+S0.Kr)+' .event '+' { pointer-events:all; }'+' line { stroke-linecap:round; }'+' polygon { stroke-linejoin:round; }'+' <\/style>\n':'<g style="font-size:'+a.k+'px; fill-opacity:1; stroke-opacity:1; fill:black; stroke:black;'+' font-weight:normal; text-rendering:optimizeLegibility; font-family:sans-serif;'+' stroke-linejoin:round; stroke-linecap:round; stroke-dashoffset:0;">';f+='  ';f+=g;if(a.i){for(e=new T0.iZ(a.b);e.a<e.c.a.length;){d=T0.hZ(e);S0.Xr(a,d);}for(c=new T0.iZ(a.a);c.a<c.c.a.length;){b=T0.hZ(c);S0.Xr(a,b);}}a.i||S0.Xr(a,'<\/g>');return f+a.c.a+'<\/svg>'};S0.Xr=function Xr(a,b){O0.HU(a.c,'  ');O0.HU(a.c,b);O0.HU(a.c,o1);};S0.Yr=function Yr(a,b,c){S0.Oc();S0.Od.call(this,a,b);S0.Lr(this);this.g=c;++S0.Kr;};sR(136,156,{},S0.Yr);_.lb=function Zr(){return S0.Wr(this)};_.f=0;_.i=false;_.j=0;_.k=0;_.n=0;S0.Kr=0;N0.TN=LS(136);S0.$r=function $r(a,b){var c;if(a.c!=null)for(c=0;c<a.c.length;c++)if(b==a.c[c]&&a.d[c])return true;return false};S0._r=function _r(a,b,c,d,e){this.a=a;this.b=b;this.g=c;this.f=d;this.e=e;};sR(94,1,{94:1},S0._r);_.a=0;_.b=0;_.e=false;_.f=false;_.g=0;N0.UN=LS(94);S0.as=function as(a,b){var c,d,e,f;f=false;a.b=b;S0.Ls(a.b,15);c=a.b.d;d=a.b.e;a.j=OL(N0.xQ,c2,5,d,16,1);for(e=0;e<d;++e)a.j[e]=false;a.g=OL(N0.xQ,c2,5,c,16,1);a.c=OL(N0.hN,K1,5,c,15,1);for(e=0;e<c;++e){a.g[e]=false;a.c[e]=-1;}a.e=OL(N0.CP,B1,2,3*c,6,1);a.i=0;a.d=0;a.a=0;while(!f){for(e=0;e<c;++e){if(!a.g[e]){a.a>0&&(a.e[a.i++]='.');S0.cs(a,e,-1);++a.a;break}}e==c&&(f=true);}a.f='';for(e=0;e<a.i;++e)a.f+=''+a.e[e];return a.f};S0.bs=function bs(a){switch(a){case 5:case 6:case 7:case 8:case 9:case 15:case 16:case 17:case 35:case 53:return true;default:return false;}};S0.cs=function cs(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;d=true;i=0;p=0;m=a.i;a.c[b]=m;h=S0.Pj(a.b,b);g=S0.Ej(a.b,b);e=S0.yj(a.b,b);f=S0.Ij(a.b,b);k=S0.Qm(a.b,b);e==0&&f==0&&S0.bs(h)&&(d=false);a.e[m]='';if(c!=-1){switch(S0.ak(a.b,c)){case 0:a.e[m]+='~';break;case 2:a.e[m]+='=';break;case 3:a.e[m]+='#';}}d&&(a.e[m]+='[');f!=0&&(a.e[m]+=''+f);a.e[m]+=''+g;if(d){if(0<(o=S0.bn(a.b,b))){a.e[m]+='H';1<o&&(a.e[m]+=o);}}if(e!=0){e>0?(a.e[m]+='+'):(a.e[m]+='-');$wnd.Math.abs(e)>1&&(a.e[m]+=''+$wnd.Math.abs(e));}d&&(a.e[m]+=']');c!=-1&&(a.j[c]=true);a.g[b]=true;++a.i;for(n=0;n<k;++n)a.j[S0.Rm(a.b,b,n)]||++i;for(n=0;n<k;++n){j=S0.Pm(a.b,b,n);l=S0.Rm(a.b,b,n);if(a.j[l]){++p;continue}if(a.g[j]){++a.d;a.j[l]=true;switch(S0.ak(a.b,l)){case 0:a.e[a.c[j]]+='~';a.e[m]+='~';break;case 2:a.e[a.c[j]]+='=';a.e[m]+='=';break;case 3:a.e[a.c[j]]+='#';a.e[m]+='3';}if(a.d>9){a.e[a.c[j]]+='%';a.e[m]+='%';}a.e[a.c[j]]+=''+a.d;a.e[m]+=''+a.d;continue}n-p<i-1&&(a.e[a.i++]='(');S0.cs(a,j,l);n-p<i-1&&(a.e[a.i++]=')');}};S0.ds=function ds(){};sR(135,1,{},S0.ds);_.a=0;_.d=0;_.i=0;N0.VN=LS(135);S0.es=function es(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;j=OL(N0.hN,K1,5,a.i.d,15,1);h=OL(N0.hN,K1,5,a.i.d,15,1);i=OL(N0.hN,K1,5,a.i.d,15,1);k=OL(N0.hN,K1,5,a.i.d,15,1);c=S0.Uj(a.i,0,b);d=S0.Uj(a.i,1,b);h[0]=c;h[1]=d;i[0]=-1;i[1]=b;j[c]=1;j[d]=2;k[c]=-1;k[d]=c;g=1;l=1;while(g<=l&&j[h[g]]<15){o=h[g];for(m=0;m<S0.Qm(a.i,o);m++){e=S0.Pm(a.i,o,m);if(e!=k[o]){f=S0.Rm(a.i,o,m);if(e==c){i[0]=f;for(n=0;n<=l;n++){if(!a.f[i[m]]){a.f[i[m]]=true;++a.c;}}return}if(S0.Dk(a.i,e)&&j[e]==0){++l;h[l]=e;i[l]=f;j[e]=j[o]+1;k[e]=o;}}}++g;}return};S0.fs=function fs(a){var b,c,d,e,f,g,h,i,j,k,l,m,n;S0.Ls(a.i,7);l=false;m=OL(N0.hN,K1,5,2,15,1);n=OL(N0.hN,K1,5,2,15,1);k=OL(N0.hN,K1,5,2,15,1);for(d=0;d<a.i.e;d++){if(!S0.Vn(a.i,d)&&S0.dk(a.i,d)==2){for(g=0;g<2;g++){m[g]=-1;k[g]=-1;b=S0.Uj(a.i,g,d);for(j=0;j<S0.Qm(a.i,b);j++){e=S0.Rm(a.i,b,j);if(e!=d){if(m[g]==-1&&(S0.dk(a.i,e)==257||S0.dk(a.i,e)==129)){m[g]=S0.Pm(a.i,b,j);n[g]=e;}else {k[g]=S0.Pm(a.i,b,j);}}}if(m[g]==-1)break}if(m[0]!=-1&&m[1]!=-1){i=S0.dk(a.i,n[0])==S0.dk(a.i,n[1]);for(h=0;h<2;h++)m[h]==S0.Uj(a.i,0,n[h])&&(i=!i);for(f=0;f<2;f++)k[f]!=-1&&k[f]<m[f]&&(i=!i);S0.Bl(a.i,d,i?2:1,false);l=true;}}}for(c=0;c<a.i.e;c++)(S0.dk(a.i,c)==257||S0.dk(a.i,c)==129)&&S0.El(a.i,c,1);return l};S0.gs=function gs(a){return a==61?2:a==35?4:a==36?32:a==58?8:a==62?16:a==126?31:1};S0.hs=function hs(a,b){var c,d,e,f,g,h,i,j,k,l,m;for(c=0;c<a.i.d;c++){if(S0.Dk(a.i,c)){i=OL(N0.hN,K1,5,a.i.d,15,1);h=OL(N0.hN,K1,5,a.i.d,15,1);j=OL(N0.hN,K1,5,a.i.d,15,1);h[0]=c;i[c]=1;j[c]=-1;g=0;k=0;while(g<=k){e=(i[h[g]]&1)==1?1:2;for(l=0;l<S0.Qm(a.i,h[g]);l++){d=S0.Rm(a.i,h[g],l);if(S0.ak(a.i,d)==e&&b[d]){f=S0.Pm(a.i,h[g],l);if(i[f]==0){if(e==1&&S0.Dk(a.i,f)){m=h[g];while(m!=-1){S0.El(a.i,S0.Nm(a.i,f,m),e==1?2:1);e=3-e;f=m;m=j[m];}S0.kl(a.i,c,false);S0.kl(a.i,f,false);a.b-=2;return true}h[++k]=f;j[f]=h[g];i[f]=i[h[g]]+1;}}}++g;}}}return false};S0.is=function is(a){var b,c,d,e;for(b=0;b<a.i.d;b++){if(S0.Pj(a.i,b)==7&&S0.yj(a.i,b)==0&&S0.gn(a.i,b)>3&&S0.Gm(a.i,b)>0){for(e=0;e<S0.Qm(a.i,b);e++){c=S0.Pm(a.i,b,e);d=S0.Rm(a.i,b,e);if(S0.ak(a.i,d)>1&&S0.Bk(a.i,c)){S0.dk(a.i,d)==4?S0.El(a.i,d,2):S0.El(a.i,d,1);S0.bl(a.i,b,S0.yj(a.i,b)+1);S0.bl(a.i,c,S0.yj(a.i,c)-1);S0._k(a.i,b,-1);break}}}}};S0.js=function js(a){return !a.n?'':'Unresolved SMARTS features:'+a.n};S0.ks=function ks(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K;S0.Ls(a.i,1);a.f=OL(N0.xQ,c2,5,a.i.e,16,1);a.c=0;for(k=0;k<a.i.e;k++){if(S0.dk(a.i,k)==64){S0.El(a.i,k,1);a.f[k]=true;++a.c;}}w=OL(N0.xQ,c2,5,a.i.d,16,1);K=new S0.Nq(a.i,3);v=OL(N0.xQ,c2,5,K.i.a.length,16,1);for(G=0;G<K.i.a.length;G++){I=T0.Yh(K.i,G);v[G]=true;for(q=0;q<I.length;q++){if(!S0.Dk(a.i,I[q])){v[G]=false;break}}if(v[G]){for(r=0;r<I.length;r++)w[I[r]]=true;J=T0.Yh(K.j,G);for(s=0;s<J.length;s++){if(!a.f[J[s]]){a.f[J[s]]=true;++a.c;}}}}for(l=0;l<a.i.e;l++){!a.f[l]&&(K.b[l]&D1)!=0&&S0.Dk(a.i,S0.Uj(a.i,0,l))&&S0.Dk(a.i,S0.Uj(a.i,1,l))&&S0.es(a,l);}for(m=0;m<a.i.e;m++){if(!a.f[m]){e=S0.Uj(a.i,0,m);f=S0.Uj(a.i,1,m);if(!w[e]&&!w[f]&&S0.Dk(a.i,e)&&S0.Dk(a.i,f)){a.f[m]=true;++a.c;}}}S0.Ls(a.i,7);u=OL(N0.xQ,c2,5,a.i.e,16,1);for(t=0;t<a.i.e;t++)u[t]=a.f[t];for(H=0;H<K.i.a.length;H++){if(v[H]){I=T0.Yh(K.i,H);for(p=0;p<I.length;p++){if(!S0.rs(a,I[p])){if(S0.Dk(a.i,I[p])){S0.kl(a.i,I[p],false);--a.b;}for(B=0;B<S0.Qm(a.i,I[p]);B++){o=S0.Rm(a.i,I[p],B);if(a.f[o]){a.f[o]=false;--a.c;}}}}}}S0.qs(a);for(F=0;F<K.i.a.length;F++){if(v[F]&&T0.Yh(K.j,F).length==6){J=T0.Yh(K.j,F);A=true;for(h=J,i=0,j=h.length;i<j;++i){g=h[i];if(!a.f[g]){A=false;break}}if(A){S0.ps(a,J[0]);S0.ps(a,J[2]);S0.ps(a,J[4]);S0.qs(a);}}}for(D=5;D>=4;D--){do{C=false;for(g=0;g<a.i.e;g++){if(a.f[g]){c=0;for(p=0;p<2;p++){n=S0.Uj(a.i,p,g);for(B=0;B<S0.Qm(a.i,n);B++)a.f[S0.Rm(a.i,n,B)]&&++c;}if(c==D){S0.ps(a,g);S0.qs(a);C=true;break}}}}while(C)}while(a.b>=2)if(!S0.hs(a,u))break;if(b){if(a.b!=0){for(d=0;d<a.i.d;d++){if(S0.Dk(a.i,d)){S0.kl(a.i,d,false);S0.nl(a.i,d,2,true);--a.b;}}}if(a.c!=0){for(g=0;g<a.i.e;g++){if(a.f[g]){a.f[g]=false;S0.El(a.i,g,64);--a.c;}}}}else {for(d=0;d<a.i.d;d++){if(S0.Dk(a.i,d)&&S0.bn(a.i,d)!=0){S0.kl(a.i,d,false);S0.ol(a.i,d,32);--a.b;}}}if(a.b!=0)throw CQ(new O0.FJ(X3));if(a.c!=0)throw CQ(new O0.FJ(X3))};
S0.ls=function ls(a,b,c,d,e,f,g){var h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,tb,ub,vb,wb,xb,yb,zb,Ab;a.i=b;S0.gj(a.i);!!a.n&&O0._R(a.n,0);a.b=0;i=a.k!=0;fb=null;p=OL(N0.hN,K1,5,32,15,1);p[0]=-1;lb=OL(N0.hN,K1,5,16,15,1);ob=OL(N0.hN,K1,5,16,15,1);nb=OL(N0.hN,K1,5,16,15,1);mb=OL(N0.hN,K1,5,16,15,1);for(M=0;M<16;M++)lb[M]=-1;m=0;H=-1;rb=false;P=false;qb=false;u=0;s=1;r=0;l=new _0.fJ;gb=new S0.Es(c);while(c[d]<=32)++d;while(d<e){tb=c[d++]&D1;if(xS(tb)||tb==42||tb==63||tb==33&&i&&rb||tb==35&&i&&rb){o=-1;w=0;W=0;h=-1;F=-1;eb=false;O=false;n=0;if(rb){if(tb==42){o=6;n=gR(_Q(N0.MQ(n),1));}else if(tb==63){o=0;}else if(tb==35){Z=0;while(d<e&&wS(c[d]&D1)){Z=10*Z+c[d]-48;++d;}if(Z<1||Z>=(S0.Ri(),S0.Li).length)throw CQ(new O0.FJ('SmilesParser: Atomic number out of range.'));o=Z;}else {Q=tb==33;if(Q){qb=true;n=gR(_Q(N0.MQ(n),1));++d;}if(c[d-1]==82&&i&&(wS(c[d]&D1)||a.a&&c[d]==123)){o=6;n=gR(_Q(N0.MQ(n),1));--d;Q&&--d;}else {R=AS(c[d]&D1)==(c[d]&D1)&&xS(c[d]&D1)?2:1;o=(S0.Ri(),S0.gm(O0.vU(R0.l0(c,d-1,(T=R,R0.i0(),T))),321));if(o==-1){o=6;n=gR(_Q(N0.MQ(n),1));--d;}else {d+=R-1;F=9;if(i&&(c[d]==44||Q)){ub=false;V=false;sb=d-R;for(bb=sb;bb<c.length;bb++){if(!xS(c[bb]&D1)){Y=S0.gm(O0.vU(R0.l0(c,sb,(S=bb-sb,S))),321);if(Y!=0){_0.dJ(l,O0.MT(Y));BS(c[sb]&D1)==(c[sb]&D1)&&xS(c[sb]&D1)?(ub=true):(V=true);}sb=bb+1;if(c[bb]!=44)break;if(c[bb+1]==33){if(!Q)throw CQ(new O0.FJ("SmilesParser: inconsistent '!' in atom list."));++bb;++sb;}}}if(l.a.a.length>1){F=-1;ub?V||(n=gR(_Q(N0.MQ(n),4))):(n=gR(_Q(N0.MQ(n),2)));}d=sb-1;}}}}while(rb){if(c[d]==64){++d;if(c[d]==64){O=true;++d;}eb=true;continue}if(c[d]==58){++d;while(wS(c[d]&D1)){W=10*W+c[d]-48;++d;}continue}if(c[d]==91)throw CQ(new O0.FJ('SmilesParser: nested square brackets found'));if(c[d]==93){++d;rb=false;continue}if(c[d]==43){w=1;++d;while(c[d]==43){++w;++d;}if(w==1&&wS(c[d]&D1)){w=c[d]-48;++d;}w==0&&(n=gR(_Q(N0.MQ(n),r2)));continue}if(c[d]==45){w=-1;++d;while(c[d]==45){--w;++d;}if(w==-1&&wS(c[d]&D1)){w=48-c[d];++d;}w==0&&(n=gR(_Q(N0.MQ(n),r2)));continue}Q=c[d]==33;Q&&++d;if(c[d]==72){++d;d+=S0.Bs(gb,c,d,1);F=gb.c;G=0;gb.c<=0&&gb.b>=0&&(G=gR(_Q(N0.MQ(G),128)));gb.c<=1&&gb.b>=1&&(G=gR(_Q(N0.MQ(G),256)));gb.c<=2&&gb.b>=2&&(G=gR(_Q(N0.MQ(G),512)));gb.c<=3&&gb.b>=3&&(G=gR(_Q(N0.MQ(G),p2)));if(Q){n|=G;F=-1;}else {if(gb.b==gb.c){F=gb.c;}else {n=gR(_Q(N0.MQ(n),EQ(o2,N0.MQ(~G))));F=-1;}}continue}if(c[d]==68){++d;d+=S0.Bs(gb,c,d,1);G=0;gb.c<=0&&gb.b>=0&&(G=_Q(G,e3));gb.c<=1&&gb.b>=1&&(G=_Q(G,W2));gb.c<=2&&gb.b>=2&&(G=_Q(G,V2));gb.c<=3&&gb.b>=3&&(G=_Q(G,g3));gb.c<=4&&gb.b>=4&&(G=_Q(G,w2));if(JQ(G,0)!=0){Q||(G=iR(G,v2));n=gR(_Q(N0.MQ(n),G));}continue}if(c[d]==122&&a.a){++d;d+=S0.Bs(gb,c,d,4);G=0;gb.c<=0&&gb.b>=0&&(G=_Q(G,G2));gb.c<=1&&gb.b>=1&&(G=_Q(G,Y3));gb.c<=2&&gb.b>=2&&(G=_Q(G,Z3));gb.c<=3&&gb.b>=3&&(G=_Q(G,$3));gb.c<=4&&gb.b>=4&&(G=_Q(G,F2));if(JQ(G,0)!=0){Q||(G=iR(G,A2));n=gR(_Q(N0.MQ(n),G));}continue}if(c[d]==88){++d;d+=S0.Bs(gb,c,d,1);Ab=(S0.Ri(),S0.Mi)[o];if(Ab==null)continue;wb=Ab[0];G=0;wb-gb.c<=0&&wb-gb.b>=0&&(G=_Q(G,j2));wb-gb.c<=1&&wb-gb.b>=1&&(G=_Q(G,u3));wb-gb.c<=2&&wb-gb.b>=2&&(G=_Q(G,C1));if(JQ(G,0)!=0){Q||(G=iR(G,u2));n=gR(_Q(N0.MQ(n),G));}continue}if(c[d]==65||c[d]==97){++d;n=gR(_Q(N0.MQ(n),Q^c[d]==65?4:2));continue}if(c[d]==82){++d;d+=S0.Bs(gb,c,d,3);G=0;gb.c<=0&&gb.b>=0&&(G=_Q(G,8));gb.c<=1&&gb.b>=1&&(G=_Q(G,16));gb.c<=2&&gb.b>=2&&(G=_Q(G,32));gb.c<=3&&gb.b>=3&&(G=_Q(G,64));gb.b>3&&S0.ts(a,(Q?'!R':'R')+gb.b);if(JQ(G,0)!=0){Q||(G=iR(G,120));n=gR(_Q(N0.MQ(n),G));}continue}if(c[d]==114){++d;d+=S0.Bs(gb,c,d,1);if(gb.a){Q?(n=gR(_Q(N0.MQ(n),384))):(n=gR(_Q(N0.MQ(n),8)));continue}pb=gb.c;gb.b>gb.c&&S0.ts(a,(Q?'!r':'r')+('{'+gb.c+'-'+gb.b+'}'));!Q&&pb>=3&&pb<=7?(n|=pb<<22):gb.b>gb.c||S0.ts(a,(Q?'!r':'r')+pb);continue}if(c[d]==118){++d;d+=S0.Bs(gb,c,d,1);wb=gb.c;gb.b>gb.c&&S0.ts(a,(Q?'!v':'v')+('{'+gb.c+'-'+gb.b+'}'));!Q&&wb<=14?(h=wb):gb.b>gb.c||S0.ts(a,(Q?'!v':'v')+wb);continue}if(i&&(c[d]==59||c[d]==38)){qb=true;++d;continue}throw CQ(new O0.FJ("SmilesParser: unexpected character inside brackets: '"+String.fromCharCode(c[d]&D1)+"'"))}}else if(tb==42){o=6;n=gR(_Q(N0.MQ(n),1));}else if(tb==63){o=0;}else if((tb==65||tb==97)&&i){o=6;n=gR(_Q(N0.MQ(n),1));n=gR(_Q(N0.MQ(n),tb==65?4:2));qb=true;}else {switch(BS(tb)){case 66:if(d<e&&c[d]==114){o=35;++d;}else o=5;break;case 67:if(d<e&&c[d]==108){o=17;++d;}else o=6;break;case 70:o=9;break;case 73:o=53;break;case 78:o=7;break;case 79:o=8;break;case 80:o=15;break;case 83:o=16;}}if(o==-1&&tb!=63)throw CQ(new O0.FJ('SmilesParser: unknown element label found'));k=S0.Ti(a.i,o);S0.bl(a.i,k,w);S0.jl(a.i,k,W,false);S0._k(a.i,k,h);if(n!=0){qb=true;if(ZQ(EQ(N0.MQ(n),2),0)){n=gR(EQ(N0.MQ(n),-3));S0.kl(a.i,k,true);++a.b;}else {S0.kl(a.i,k,false);}S0.nl(a.i,k,N0.MQ(n),true);}if(l.a.a.length!=0){qb=true;U=OL(N0.hN,K1,5,l.a.a.length,15,1);for(L=0;L<l.a.a.length;L++)U[L]=(L<0?null:T0.Yh(l.a,L)).a;S0.hl(a.i,k,U);R0.I0(l.a.a).length=0;}else {if(AS(tb)==tb&&xS(tb)){if(o!=5&&o!=6&&o!=7&&o!=8&&o!=15&&o!=16&&o!=33&&o!=34)throw CQ(new O0.FJ('SmilesParser: atomicNo '+o+' must not be aromatic'));S0.kl(a.i,k,true);++a.b;}else {S0.kl(a.i,k,false);}}if(F!=-1&&o!=1){v=OL(N0.dN,d3,5,1,15,1);v[0]=(F==9?0:F)<<24>>24;S0.fl(a.i,k,v);}H=p[u];if(p[u]!=-1&&s!=512){q=S0.Vi(a.i,p[u],k,s);if(r!=0){qb=true;S0.Dl(a.i,q,r,true);}}s=1;r=0;p[u]=k;if(m!=0){S0.ll(a.i,k,m);m=0;}if(g){cb=!fb?null:T0.HY(fb,O0.MT(H));!!cb&&S0.xs(cb,k,d);if(eb){!fb&&(fb=new T0.E$);K=F==9?0:F;T0.w$(fb,O0.MT(k),new S0.As(k,d-2,H,K,O));}}continue}if(tb==46){p[u]=-1;s=512;continue}if(tb==45||tb==61||tb==35||tb==36||tb==58||tb==47||tb==92||tb==60||tb==126||tb==33||tb==64){if(rb)throw CQ(new O0.FJ("SmilesParser: unexpected bond symbol inside square brackets: '"+String.fromCharCode(tb)+"'"));C=0;while(tb==45||tb==61||tb==35||tb==36||tb==58||tb==47||tb==92||tb==60||tb==126||tb==33||tb==64){if(tb==33){tb=c[d++]&D1;tb==64&&(r|=128);if(tb==45&&c[d]==62||tb==60&&c[d]==45){C|=32;++d;}else if(tb==45)C|=1;else if(tb==61)C|=2;else if(tb==35)C|=4;else if(tb==36)C|=32;else if(tb==58)C|=8;else throw CQ(new O0.FJ("SmilesParser: bond symbol '"+String.fromCharCode(tb)+"' not allowed after '!'."))}else {if(tb==64)r|=256;else if(tb==61)s=2;else if(tb==35)s=4;else if(tb==36)s=8;else if(tb==58)s=64;else if(tb==126)r|=31;else if(tb==47){g&&(s=257);}else if(tb==92){g&&(s=129);}else if(tb==45&&c[d]==62||tb==60&&c[d]==45){s=32;++d;}if(c[d]==44){r|=(s==32?62:tb)==61?2:(s==32?62:tb)==35?4:(s==32?62:tb)==36?32:(s==32?62:tb)==58?8:(s==32?62:tb)==62?16:(s==32?62:tb)==126?31:1;while(c[d]==44){if(c[d+1]==60&&c[d+2]==45||c[d+1]==45&&c[d+2]==62){r|=16;d+=3;}else {r|=S0.gs(c[d+1]&D1);d+=2;}}}}if(c[d]==59){++d;tb=c[d++]&D1;continue}C!=0&&(r|=31&~C);break}continue}if(tb<=32){d=e;continue}if(wS(tb)){Z=tb-48;if(rb){while(d<e&&wS(c[d]&D1)){Z=10*Z+c[d]-48;++d;}m=Z;}else {t=P?d-3:d-2;J=c[t]==45||c[t]==47||c[t]==92||c[t]==61||c[t]==35||c[t]==36||c[t]==58||c[t]==62||c[t]==126;if(P&&d<e&&wS(c[d]&D1)){Z=10*Z+c[d]-48;P=false;++d;}if(Z>=lb.length){if(Z>=100)throw CQ(new O0.FJ('SmilesParser: ringClosureAtom number out of range'));$=lb.length;X=lb.length;while(X<=Z)X=$wnd.Math.min(100,X+16);lb=(R0.w0(X),T0.pZ(lb,OL(N0.hN,K1,5,X,15,1),X));ob=(R0.w0(X),T0.pZ(ob,OL(N0.hN,K1,5,X,15,1),X));nb=(R0.w0(X),T0.pZ(nb,OL(N0.hN,K1,5,X,15,1),X));mb=(R0.w0(X),T0.pZ(mb,OL(N0.hN,K1,5,X,15,1),X));for(L=$;L<X;L++)lb[L]=-1;}if(lb[Z]==-1){lb[Z]=p[u];ob[Z]=d-1;nb[Z]=J?s:-1;mb[Z]=J?r:0;}else {if(lb[Z]==p[u])throw CQ(new O0.FJ('SmilesParser: ring closure to same atom'));if(g&&!!fb){cb=T0.HY(fb,O0.MT(lb[Z]));!!cb&&S0.xs(cb,p[u],ob[Z]);cb=T0.HY(fb,O0.MT(p[u]));!!cb&&S0.xs(cb,lb[Z],d-1);}nb[Z]!=-1?(s=nb[Z]):s==257?(s=129):s==129&&(s=257);q=S0.Vi(a.i,lb[Z],p[u],s);mb[Z]!=0&&(r=mb[Z]);if(r!=0){qb=true;S0.Dl(a.i,q,mb[Z],true);}lb[Z]=-1;}s=1;r=0;}continue}if(tb==43){throw CQ(new O0.FJ("SmilesParser: '+' found outside brackets"))}if(tb==40){if(p[u]==-1)throw CQ(new O0.FJ('Smiles with leading parenthesis are not supported'));++u;p.length==u&&(p=T0.oZ(p,p.length+32));p[u]=p[u-1];continue}if(tb==41){--u;continue}if(tb==91){rb=true;continue}if(tb==93){throw CQ(new O0.FJ('SmilesParser: closing bracket at unexpected position'))}if(tb==37){P=true;continue}throw CQ(new O0.FJ("SmilesParser: unexpected character outside brackets: '"+String.fromCharCode(tb)+"'"))}if(s!=1)throw CQ(new O0.FJ('SmilesParser: dangling open bond'));for(ib=lb,jb=0,kb=ib.length;jb<kb;++jb){hb=ib[jb];if(hb!=-1)throw CQ(new O0.FJ('SmilesParser: dangling ring closure'))}I=S0._m(a.i);S0.Il(a.i,true);S0.Ls(a.i,1);for(j=0;j<a.i.o;j++){if(S0.Aj(a.i,j)!=null){D=S0.Bj(a.i,j)[0];if(qb||a.k==2){if(a.g){for(L=0;L<D;L++)S0.Vi(a.i,j,S0.Ti(a.i,1),1);}else {D==0&&S0.nl(a.i,j,1792,true);D==1&&S0.nl(a.i,j,1664,true);D==2&&S0.nl(a.i,j,1408,true);D==3&&S0.nl(a.i,j,896,true);}}else {if(!S0.Ek(a.i,j)&&(!S0.Dk(a.i,j)||S0.Pj(a.i,j)==6&&S0.yj(a.i,j)==0)){Ab=S0.dm(S0.Pj(a.i,j));A=false;vb=S0.gn(a.i,j);vb-=S0.hk(a.i,j,vb);vb+=D;S0.Dk(a.i,j)&&++vb;for(xb=Ab,yb=0,zb=xb.length;yb<zb;++yb){wb=xb[yb];if(vb<=wb){A=true;wb==vb+2?S0.ol(a.i,j,48):wb==vb+1?S0.ol(a.i,j,32):(wb!=vb||wb!=Ab[0])&&S0._k(a.i,j,vb);break}}A||S0._k(a.i,j,vb);}if(a.g||!S0.jo(a.i,j))for(L=0;L<D;L++)S0.Vi(a.i,j,S0.Ti(a.i,1),1);}}else if(!a.g&&(qb||a.k==2)){D=S0.Um(a.i,j);D>=1&&S0.nl(a.i,j,128,true);D>=2&&S0.nl(a.i,j,256,true);D>=3&&S0.nl(a.i,j,512,true);D>=4&&S0.nl(a.i,j,p2,true);}}!a.g&&(qb||a.k==2)&&S0.ao(a.i,true);S0.Ls(a.i,1);S0.is(a);S0.ks(a,i);a.i.r=null;S0.Il(a.i,false);if(g){S0.fs(a);if(fb){for(db=(ab=new T0.O$((new T0.T$((new T0.kY(fb)).a)).b),new T0.rY(ab));T0.mX(db.a.a);){cb=(B=T0.M$(db.a),B._b());S0.ml(a.i,cb.a,S0.ys(cb,I),false);}S0.eo(a.i,0);}}S0.eo(a.i,0);if(f){N=new V0.Hu(a.d);ZQ(a.j,0)&&V0.Du(N,a.j);V0.ou(N,a.i);g&&S0.Ys(a.i);}(qb||a.k==2)&&S0.Gl(a.i,true);};S0.ms=function ms(a,b,c,d,e){S0.ls(a,b,c,0,c.length,d,e);};S0.ns=function ns(a,b){var c;return b==null?null:S0.os(a,R0.n0((c=b,R0.i0(),c)))};S0.os=function os(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;h=_0.TI(b,0);i=h==-1?-1:_0.TI(b,h+1);if(i==-1)throw CQ(new O0.FJ("Missing one or both separators ('>')."));if(_0.TI(b,i+1)!=-1)throw CQ(new O0.FJ("Found more than 2 separators ('>')."));n=new X0.uw;o=0;for(f=o;f<h-1;f++){if(b[f]==46&&b[f+1]==46){if(f>o){l=new S0.at;S0.ls(a,l,b,o,f,true,true);T0.Th(n.g,l);n.d=-1;}o=f+2;}}m=new S0.at;S0.ls(a,m,b,o,h,true,true);T0.Th(n.g,m);n.d=-1;if(i-h>1){o=h+1;for(g=o;g<i-1;g++){if(b[g]==46&&b[g+1]==46){if(g>o){c=new S0.at;S0.ls(a,c,b,o,g,true,true);T0.Th(n.a,c);}o=g+2;}}d=new S0.at;S0.ls(a,d,b,o,i,true,true);T0.Th(n.a,d);}o=i+1;for(e=o;e<b.length-1;e++){if(b[e]==46&&b[e+1]==46){if(e>o){j=new S0.at;S0.ls(a,j,b,o,e,true,true);T0.Th(n.f,j);n.d=-1;}o=e+2;}}k=new S0.at;S0.ls(a,k,b,o,b.length,true,true);T0.Th(n.f,k);n.d=-1;return n};S0.ps=function ps(a,b){var c,d,e,f;S0.dk(a.i,b)==1&&S0.El(a.i,b,2);for(e=0;e<2;e++){c=S0.Uj(a.i,e,b);if(S0.Dk(a.i,c)){S0.kl(a.i,c,false);--a.b;}for(f=0;f<S0.Qm(a.i,c);f++){d=S0.Rm(a.i,c,f);if(a.f[d]){a.f[d]=false;--a.c;}}}};S0.qs=function qs(a){var b,c,d,e,f,g,h;do{h=false;for(c=0;c<a.i.e;c++){if(a.f[c]){f=false;for(e=0;e<2;e++){b=false;d=S0.Uj(a.i,e,c);for(g=0;g<S0.Qm(a.i,d);g++){if(c!=S0.Rm(a.i,d,g)&&a.f[S0.Rm(a.i,d,g)]){b=true;break}}if(!b){f=true;break}}if(f){h=true;S0.ps(a,c);}}}}while(h)};S0.rs=function rs(a,b){var c,d;if(!S0.Pq(S0.Pj(a.i,b)))return false;if(S0.Pj(a.i,b)==6){if(!S0.Dk(a.i,b))return false;if(S0.yj(a.i,b)>0)return false}c=S0.Aj(a.i,b)==null?0:S0.Bj(a.i,b)[0];d=S0.Zm(a.i,b)-c;if(d<1)return false;if(S0.Pj(a.i,b)==16||S0.Pj(a.i,b)==34||S0.Pj(a.i,b)==52){if(S0.Qm(a.i,b)==2&&S0.yj(a.i,b)<=0)return false;if(d==2)return false}return true};S0.ss=function ss(a,b){a.j=b;};S0.ts=function ts(a,b){if(a.e){!a.n&&(a.n=new O0.KU);O0.HU(a.n,' ');O0.HU(a.n,b);}};S0.us=function us(){S0.vs.call(this,0,false);};S0.vs=function vs(a,b){this.k=a&3;this.a=(a&16)==0;this.e=b;this.g=(a&8)!=0;this.d=2;(a&4)!=0&&(this.d|=1);this.g&&(this.d&=-3);};sR(79,1,{},S0.us,S0.vs);_.a=false;_.b=0;_.c=0;_.d=0;_.e=false;_.g=false;_.j=0;_.k=0;N0.YN=LS(79);S0.ws=function ws(a,b){this.a=a;this.b=b;};sR(93,1,{93:1},S0.ws);_.a=0;_.b=0;N0.WN=LS(93);S0.xs=function xs(a,b,c){if(!a.c){if(a.e.a.length==4){a.c=true;return}T0.Th(a.e,new S0.ws(b,c));}};S0.ys=function ys(a,b){var c,d,e;if(a.c)return 3;for(d=new T0.iZ(a.e);d.a<d.c.a.length;){c=T0.hZ(d);c.a!=2147483646&&c.a!=u1&&(c.a=b[c.a]);}if(a.e.a.length==3)T0.Th(a.e,new S0.ws(u1,a.b));else if(a.e.a.length!=4)return 3;e=a.d^S0.zs(a)?1:2;return e};S0.zs=function zs(a){var b,c,d;c=false;for(b=1;b<a.e.a.length;b++){for(d=0;d<b;d++){T0.Yh(a.e,d).a>T0.Yh(a.e,b).a&&(c=!c);T0.Yh(a.e,d).b>T0.Yh(a.e,b).b&&(c=!c);}}return c};S0.As=function As(a,b,c,d,e){if(d!=0&&d!=1){this.c=true;}else {this.a=a;this.b=b;this.d=e;this.e=new T0.ki;c!=-1&&S0.xs(this,c,b-1);c!=-1&&d==1&&S0.xs(this,2147483646,b+1);}};sR(111,1,{111:1},S0.As);_.a=0;_.b=0;_.c=false;_.d=false;N0.XN=LS(111);S0.Bs=function Bs(a,b,c,d){a.a=false;a.d=c;if(wS(b[c]&D1)){a.c=a.b=S0.Cs(a);return a.d-c}if(b[c]==123&&wS(b[c+1]&D1)){++a.d;a.c=S0.Cs(a);if(b[a.d++]!=45)return 0;if(!wS(b[a.d]&D1))return 0;a.b=S0.Cs(a);if(b[a.d++]!=125)return 0;return a.d-c}a.c=1;a.b=d;a.a=true;return 0};S0.Cs=function Cs(a){var b;b=a.e[a.d++]-48;wS(a.e[a.d]&D1)&&(b=10*b+(a.e[a.d++]-48));return b};S0.Ds=function Ds(a){return '{'+a.c+'-'+a.b+'}'};S0.Es=function Es(a){this.e=a;};sR(144,1,{},S0.Es);_.lb=function Fs(){return S0.Ds(this)};_.a=false;_.b=0;_.c=0;_.d=0;N0.ZN=LS(144);S0.Gs=function Gs(a){a.c=new T0.ki;};S0.Hs=function Hs(a,b){var c,d,e,f;f=a.c.a.length;if(f==0){T0.Sh(a.c,0,b);return 0}e=1;while(2*e<=f)e<<=1;d=e;--e;while(d!=0){d>>=1;if(e>=f){e-=d;continue}c=O0.aU(b,T0.Yh(a.c,e));if(c==0)return -1;if(d==0)break;c<0?(e-=d):(e+=d);}e<f&&O0.aU(b,T0.Yh(a.c,e))>0&&++e;T0.Sh(a.c,e,b);return e};S0.Is=function Is(a,b){var c,d,e,f;f=a.c.a.length;if(f==0)return -1;e=1;while(2*e<=f)e<<=1;d=e;--e;while(d!=0){d>>=1;if(e>=f){e-=d;continue}c=O0.aU(b,T0.Yh(a.c,e));if(c==0)return e;if(d==0)break;c<0?(e-=d):(e+=d);}return -1};S0.Js=function Js(){S0.Gs(this);};sR(123,1,c3,S0.Js);N0.$N=LS(123);S0.Ks=function Ks(a,b){S0.mj(a,b);!!a.b&&(b.R=0);};S0.Ls=function Ls(a,b){var c,d,e,f;S0.um(a,b);if((b&~a.R)==0)return;(a.R&15)!=0&&a.o>1&&S0.Vg(a.H[0],a.H[1])&&V0.ou(new V0.Hu(0),a);a.a&&(b|=128);for(c=0;c<a.o;c++)a.s[c]&=-67223560;for(d=0;d<a.e;d++)a.C[d]&=-64;e=0;f=0;if((b&32)!=0){e=32;f=1;}else if((b&64)!=0){e=64;f=3;}if((b&128)!=0){e|=128;f|=32;}a.b=new S0.Pf(a,f);S0.Kf(a.b);S0.Lf(a.b);S0.Jf(a.b);S0._s(a)&&(a.b=new S0.Pf(a,f));a.R|=24|e;};S0.Ms=function Ms(a,b){return S0.yf(a.b,b)};S0.Ns=function Ns(a,b){return S0.pf(a.b,b)};S0.Os=function Os(a){var b;S0.Ls(a,31);b=a.G&D1;switch(a.G&k3){case C1:return null;case e3:return b==1?'meso':''+b+' meso diastereomers';case 0:return 'unknown chirality';case 196608:return 'both enantiomers';case W2:return 'this enantiomer';case 327680:return 'this or other enantiomer';case x2:return 'two epimers';default:return b==1?'one stereo isomer':''+b+' stereo isomers';}};S0.Ps=function Ps(a){var b;b=new S0.bt(a.o,a.p);S0.lj(a,b);return b};S0.Qs=function Qs(a){var b,c,d,e,f,g,h;S0.Ls(a,15);g=OL(N0.hN,K1,5,3,15,1);for(c=0;c<a.d;c++){if((a.s[c]&t3)!=0){h=(a.s[c]&U2)>>18;h!=0&&(g[h]=$wnd.Math.max(g[h],(a.s[c]&U2)>>18!=1&&(a.s[c]&U2)>>18!=2?-1:(a.s[c]&o3)>>20));}}for(e=0;e<a.e;e++){if(((a.C[e]&3)==1||(a.C[e]&3)==2)&&a.F[e]==1){h=(a.C[e]&768)>>8;h!=0&&(g[h]=$wnd.Math.max(g[h],(a.C[e]&768)>>8!=1&&(a.C[e]&768)>>8!=2?-1:(a.C[e]&p3)>>10));}}f=OL(N0.hN,a3,6,3,0,2);f[1]=OL(N0.hN,K1,5,1+g[1],15,1);f[2]=OL(N0.hN,K1,5,1+g[2],15,1);for(b=0;b<a.d;b++){if((a.s[b]&t3)!=0){h=(a.s[b]&U2)>>18;h!=0&&++f[h][(a.s[b]&U2)>>18!=1&&(a.s[b]&U2)>>18!=2?-1:(a.s[b]&o3)>>20];}}for(d=0;d<a.e;d++){if(((a.C[d]&3)==1||(a.C[d]&3)==2)&&a.F[d]==1){h=(a.C[d]&768)>>8;h!=0&&++f[h][(a.C[d]&768)>>8!=1&&(a.C[d]&768)>>8!=2?-1:(a.C[d]&p3)>>10];}}return f};S0.Rs=function Rs(a){var b,c;b=OL(N0.hN,K1,5,a.o,15,1);c=S0.Ym(a,b,false,false);return S0.Ss(a,b,c)};S0.Ss=function Ss(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;q=OL(N0._N,p1,21,c,0,1);g=OL(N0.hN,K1,5,c,15,1);j=OL(N0.hN,K1,5,c,15,1);f=OL(N0.hN,K1,5,a.o,15,1);for(e=0;e<a.o;e++)b[e]!=-1&&(f[e]=g[b[e]]++);for(i=0;i<a.p;i++){o=b[a.B[0][i]];p=b[a.B[1][i]];o==p&&o!=-1&&++j[o];}for(r=0;r<c;r++){q[r]=new S0.bt(g[r],j[r]);S0.Ks(a,q[r]);}for(d=0;d<a.o;d++)b[d]!=-1&&S0.ij(a,q[b[d]],d,0,0);for(h=0;h<a.p;h++){o=b[a.B[0][h]];p=b[a.B[1][h]];o==p&&o!=-1&&S0.kj(a,q[o],h,0,0,f,false);}for(l=q,m=0,n=l.length;m<n;++m){k=l[m];S0.Xk(k,1);S0.Xk(k,2);}return q};S0.Ts=function Ts(a){S0.Ls(a,15);!a.b&&(a.d<2||!S0.Vg(a.H[0],a.H[1]))&&(a.b=new S0.Of(a));return !a.b?null:S0.tf(a.b)};S0.Us=function Us(a){S0.Ls(a,15);!a.b&&(a.d<2||!S0.Vg(a.H[0],a.H[1]))&&(a.b=new S0.Of(a));return !a.b?null:S0.qf(a.b)};S0.Vs=function Vs(a){var b,c;S0.Ls(a,31);c=0;for(b=0;b<a.d;b++)(a.s[b]&3)!=0&&(a.s[b]&4)==0&&++c;return c};S0.Ws=function Ws(a,b){return S0.xf(a.b,b)};S0.Xs=function Xs(a,b){a.a=b;a.R&=-144;};S0.Ys=function Ys(a){S0.Ls(a,31);!!a.b&&S0.Mf(a.b);};S0.Zs=function Zs(a){var b,c;S0.Ls(a,15);a.J=false;for(b=0;b<a.o;b++){a.s[b]&=v3;(a.s[b]&3)!=0?(a.s[b]|=s3):(a.s[b]&=-33554433);}for(c=0;c<a.p;c++)(a.C[c]&3)!=0&&S0.ak(a,c)==2?(a.F[c]=386):(a.F[c]&=-385);a.R&=-249;};S0.$s=function $s(a){var b,c,d,e,f,g;S0.ko(a);S0.Ls(a,31);for(d=0;d<a.d;d++){if(((a.s[d]&U2)>>18==1||(a.s[d]&U2)>>18==2)&&((a.s[d]&t3)==0||(a.s[d]&3)==3))throw CQ(new O0.FJ(_3));if((a.s[d]&C1)!=0)throw CQ(new O0.FJ(a4));if(((a.s[d]&3)==1||(a.s[d]&3)==2)&&a.k[d]==0){b=OL(N0.fN,O2,5,a.g[d],15,1);for(f=0;f<a.g[d];f++)b[f]=S0.Tj(a,d,a.f[d][f]);for(e=1;e<a.g[d];e++)if(!S0.Lk(a,a.i[d][e],d))for(g=0;g<e;g++)if(!S0.Lk(a,a.i[d][g],d)){c=$wnd.Math.abs(S0.fm(b[e],b[g]));if(c<0.08||c>z3)throw CQ(new O0.FJ(b4))}}}};S0._s=function _s(a){var b,c,d,e,f,g,h;h=false;for(c=0;c<a.d;c++)((a.s[c]&t3)==0||(a.s[c]&3)==3)&&(a.s[c]&=v3);for(f=0;f<a.e;f++)(S0.ak(a,f)!=1||(a.C[f]&3)==0||(a.C[f]&3)==3)&&(a.C[f]&=-32513);if(a.J){if((a.G&k3)!=e3){g=OL(N0.xQ,c2,5,a.d,16,1);for(d=0;d<a.d;d++)(a.s[d]&t3)!=0&&(a.s[d]&3)!=3&&(a.s[d]&U2)>>18==1&&(g[d]=true);for(e=0;e<a.d;e++){if((a.s[e]&t3)!=0&&(a.s[e]&3)!=3){S0.gl(a,e,1,0);h=true;}}for(b=0;b<a.d;b++){if(g[b]){S0.ml(a,b,1,false);S0.gl(a,b,1,-1);h=true;}}}a.J=false;}S0.Xk(a,1);S0.Xk(a,2);return h};S0.at=function at(){S0.Ri();S0.mo.call(this);};S0.bt=function bt(a,b){S0.Ri();S0.no.call(this,a,b);};S0.ct=function ct(a){S0.Ri();S0.oo.call(this,a);};sR(21,70,{70:1,61:1,21:1,4:1},S0.at,S0.bt,S0.ct);_.ub=function dt(a){S0.Ks(this,a);};_.wb=function et(a){S0.Ls(this,a);};_.a=false;N0._N=LS(21);S0.ft=function ft(a){var b,c,d,e,f;c=O0.iU(a,tU(38));if(c==-1)return a;e=0;f=new O0.AU;while(c!=-1){O0.zU(f,(R0.E0(e,c,R0.I0(a).length),R0.I0(a).substr(e,c-e)));R0.F0(c+1,R0.I0(a).length);if(R0.I0(a).charCodeAt(c+1)==38){f.a+='&';e=c+2;}else {b=(R0.F0(c+1,R0.I0(a).length),R0.I0(a).charCodeAt(c+1));b=b-(b<65?48:b<97?65:97);d=(R0.F0(c+2,R0.I0(a).length),R0.I0(a).charCodeAt(c+2));d=d-(d<65?48:d<97?65:97);O0.xU(f,16*b+d&D1);e=c+3;}c=O0.jU(a,tU(38),e);}O0.zU(f,(R0.F0(e,R0.I0(a).length+1),R0.I0(a).substr(e)));return f.a};S0.gt=function gt(a){var b,c;c=new O0.AU;for(b=0;b<R0.I0(a).length;b++){switch(R0.F0(b,R0.I0(a).length),R0.I0(a).charCodeAt(b)){case 38:c.a+='&&';break;case 9:c.a+='&09';break;case 10:c.a+='&0A';break;case 32:c.a+='&20';break;default:O0.xU(c,(R0.F0(b,R0.I0(a).length),R0.I0(a).charCodeAt(b)));}}return c.a};S0.ht=function ht(a,b,c){a.e[0].a=b;a.e[0].b=c;};S0.it=function it(b,c){try{b.a=xT(c);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}};S0.jt=function jt(b,c){try{b.b=O0.cT(c);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}};S0.kt=function kt(a,b,c,d){a.c=b;a.a=c;a.b=d;};S0.lt=function lt(b,c){try{b.e[0].a=xT(c);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}};S0.mt=function mt(b,c){try{b.e[0].b=xT(c);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}};S0.nt=function nt(){S0.pt.call(this,new Z0.Kw);};S0.ot=function ot(a){var b,c,d,e;S0.nt.call(this);b=0;while(b!=-1){c=R0.I0(a).indexOf('="',b);if(c==-1)break;d=(R0.E0(b+1,c,R0.I0(a).length),R0.I0(a).substr(b+1,c-(b+1)));b=R0.I0(a).indexOf('"',c+2);e=b==-1?(R0.F0(c+1,R0.I0(a).length+1),R0.I0(a).substr(c+1)):(R0.E0(c+1,b,R0.I0(a).length),R0.I0(a).substr(c+1,b-(c+1)));O0.eU(d,'text')?(this.c=S0.ft(e)):O0.eU(d,'x')?S0.lt(this,e):O0.eU(d,'y')?S0.mt(this,e):O0.eU(d,'size')?S0.it(this,e):O0.eU(d,'style')&&S0.jt(this,e);}};S0.pt=function pt(a){this.c='';this.a=9;this.b=0;this.e=OL(N0.uO,z1,35,1,0,1);this.e[0]=a;};sR(87,102,{102:1},S0.nt,S0.ot);_.mb=function qt(){var a;a=new S0.nt;S0.kt(a,this.c,this.a,this.b);S0.ht(a,this.e[0].a,this.e[0].b);a.d=this.d;return a};_.nb=function rt(){var a;a=new O0.KU;O0.HU(a,' text="'+S0.gt(this.c)+'"');O0.HU(a,' x="'+this.e[0].a+'"');O0.HU(a,' y="'+this.e[0].b+'"');this.a!=9&&O0.HU(a,' size="'+this.a+'"');this.b!=0&&O0.HU(a,' style="'+this.b+'"');return a.a};_.ob=function st(){return 'text'};_.a=0;_.b=0;N0.aO=LS(87);S0.tt=function tt(a){a.b=new T0.ki;a.a=new T0.ki;};S0.ut=function ut(a,b){var c,d;c=S0.Hs(a,b);if(c==-1)return -1;d=a.b.a.length;T0.Th(a.b,b);T0.Sh(a.a,c,new O0.DT(d));return d};S0.vt=function vt(){S0.Js.call(this);S0.tt(this);};sR(142,123,c3,S0.vt);N0.bO=LS(142);U0.xt=function xt(){U0.xt=uR;U0.wt=S0.gm('X',32);};U0.yt=function yt(a,b){U0.xt();var c,d,e,f,g;for(e=0;e<a.o;e++){g=S0.Ps(a);S0.ul(g,e,U0.wt);S0.Ls(g,15);for(d=0;d<g.d;d++){if((g.s[d]&t3)!=0&&S0.tn(g,d)==-1){f=(S0.Ls(g,7),g.k[d]==2&&g.g[d]==2?S0.Zn(g,d,false):S0._n(g,d,false));if(f!=-1){a.F[f]=257;a.R=0;if(a.B[1][f]==d){c=a.B[0][f];a.B[0][f]=d;a.R=0;a.B[1][f]=c;a.R=0;}S0.gl(a,d,b,0);}}}}};U0.zt=function zt(a){U0.xt();var b,c,d,e;U0.yt(a,1);d=a.o;c=OL(N0.CP,B1,2,d,6,1);for(b=0;b<d;b++){e=S0.Ps(a);S0.el(e,b,(S0.Ri(),S0.Li)[e.A[b]]+'*');e.A[b]==1?S0.ul(e,b,U0.wt):S0.ll(e,b,e.v[b]+5);U0.At(e);c[b]=S0.tf(new S0.Pf(e,8));}return c};U0.At=function At(a){var b;S0.Ls(a,15);for(b=0;b<a.o;b++){(a.s[b]&3)!=0&&S0.gl(a,b,1,0);}};U0.wt=0;U0.Bt=function Bt(a,b,c){var d,e;d=ML(N0.CP,[p1,B1],[25,2],6,[a.d,b],2);S0.Ls(a,7);for(e=0;e<a.d;e++){d[e]=U0.Ct(a,e,b,c);}return d};U0.Ct=function Ct(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p;i=new S0.bt(a.d,a.e);k=new T0.E_;n=0;m=0;g=OL(N0.xQ,c2,5,a.d,16,1);f=OL(N0.hN,K1,5,a.d,15,1);for(p=0;p<c&&m<a.d;p++){if(m==0){f[0]=b;g[b]=true;m=1;}else {o=m;for(j=n;j<m;j++){e=f[j];for(l=0;l<a.g[e];l++){h=a.f[e][l];if(!g[h]){switch(d){case 0:g[h]=true;f[o++]=h;break;case 1:if(!(U0.Et(a,e)&&U0.Et(a,h))){g[h]=true;f[o++]=h;}}}}}n=m;m=o;}S0.sm(a,i,g,true,null);T0.B_(k,S0.tf(new S0.Pf(i,8)));}return T0.D_(k,OL(N0.CP,B1,2,k.a.a.length,6,1))};U0.Dt=function Dt(a,b,c){var d,e,f,g,h;g=S0.vo(new S0.Eo(true),a);e=-1;for(f=0;f<g.o;f++){d=g.r==null?null:g.r[f]==null?null:O0.dU(g.r[f]);if(d!=null&&(h=R0.I0('*').length,O0.eU(R0.I0(d).substr(R0.I0(d).length-h,h),'*'))){e=f;break}}if(e>=0){return U0.Ct(g,e,b,c)}return OL(N0.CP,B1,2,0,6,1)};U0.Et=function Et(a,b){if(a.A[b]!=6)return false;if(a.q[b]!=0)return false;if(S0.bn(a,b)+a.g[b]!=4)return false;return true};U0.Pt=function Pt(){U0.Pt=uR;U0.Ft=$wnd.Math.cos(T2);U0.Kt=$wnd.Math.sin(T2);U0.Ht=$wnd.Math.cos(c4);U0.Mt=$wnd.Math.sin(c4);U0.Jt=$wnd.Math.cos(S2);U0.Ot=$wnd.Math.sin(S2);U0.Gt=$wnd.Math.cos(d4);U0.Lt=$wnd.Math.sin(d4);U0.It=$wnd.Math.cos(y3);U0.Nt=$wnd.Math.sin(y3);$wnd.Math.cos(e4);$wnd.Math.sin(e4);};U0.Qt=function Qt(a){U0.Pt();var b,c;S0.Ls(a,1);c=a.d;for(b=0;b<c;b++){U0.Rt(a,b);}};U0.Rt=function Rt(a,b){U0.Pt();var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;A=S0.bn(a,b);I=a.H[b].a;J=a.H[b].b;switch(A){case 1:{C=a.g[b];if(C==0){k=S0.Lm(a,true);n=0;}else {k=I-S0.Mj(a,a.f[b][0]);n=J-S0.Nj(a,a.f[b][0]);}if(C==1){t=S0.Si(a,I+U0.It*k+U0.Nt*n,J-U0.Nt*k+U0.It*n,0);}else if(C==2){k=I-0.5*(S0.Mj(a,a.f[b][0])+S0.Mj(a,a.f[b][1]));n=J-0.5*(S0.Nj(a,a.f[b][0])+S0.Nj(a,a.f[b][1]));t=S0.Si(a,I+k,J+n,0);}else if(C==3){F=a.f[b][0];for(r=1;r<3;r++){h=a.i[b][r];(a.F[h]==129||a.F[h]==257)&&(F=a.f[b][r]);}c=$wnd.Math.abs(S0.fm(S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][0]),S0.Nj(a,a.f[b][0])),S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][1]),S0.Nj(a,a.f[b][1]))));d=$wnd.Math.abs(S0.fm(S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][0]),S0.Nj(a,a.f[b][0])),S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][2]),S0.Nj(a,a.f[b][2]))));e=$wnd.Math.abs(S0.fm(S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][1]),S0.Nj(a,a.f[b][1])),S0.em(a.H[b].a,a.H[b].b,S0.Mj(a,a.f[b][2]),S0.Nj(a,a.f[b][2]))));D=true;if(c>d&&c>e){if(d+e<h2){D=false;k=I-0.5*(S0.Mj(a,a.f[b][0])+S0.Mj(a,a.f[b][1]));n=J-0.5*(S0.Nj(a,a.f[b][0])+S0.Nj(a,a.f[b][1]));}}else if(d>c&&d>e){if(c+e<h2){D=false;k=I-0.5*(S0.Mj(a,a.f[b][0])+S0.Mj(a,a.f[b][2]));n=J-0.5*(S0.Nj(a,a.f[b][0])+S0.Nj(a,a.f[b][2]));}}else {if(c+d<h2){D=false;k=I-0.5*(S0.Mj(a,a.f[b][1])+S0.Mj(a,a.f[b][2]));n=J-0.5*(S0.Nj(a,a.f[b][1])+S0.Nj(a,a.f[b][2]));}}if(D){G=a.f[b][0];j=q3;for(q=0;q<3;q++){f=a.f[b][q];if(f!=F){i=$wnd.Math.pow(a.H[b].a-a.H[f].a,2)+$wnd.Math.pow(a.H[b].b-a.H[f].b,2);if(i<j){G=f;j=i;O0.PU();}}}t=S0.Si(a,(a.H[F].a+a.H[G].a)/2,(a.H[F].b+a.H[G].b)/2,0);}else {t=S0.Si(a,I+k,J+n,0);}}else {t=S0.Si(a,I+k,J+n,0);}S0.ul(a,t,1);S0.Vi(a,b,t,1);}break;case 2:B=a.g[b];if(B==1){k=I-S0.Mj(a,a.f[b][0]);n=J-S0.Nj(a,a.f[b][0]);t=S0.Si(a,I+(U0.Jt*k-U0.Ot*n)*0.7,J+(U0.Ot*k+U0.Jt*n)*0.7,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);t=S0.Si(a,I+(U0.Gt*k-U0.Lt*n)*0.7,J+(U0.Lt*k+U0.Gt*n)*0.7,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}else if(B==2){l=I-S0.Mj(a,a.f[b][0]);o=J-S0.Nj(a,a.f[b][0]);m=I-S0.Mj(a,a.f[b][1]);p=J-S0.Nj(a,a.f[b][1]);v=$wnd.Math.sqrt(l*l+o*o)*0.7;w=$wnd.Math.sqrt(m*m+p*p)*0.7;k=l+m;n=o+p;u=$wnd.Math.sqrt(k*k+n*n);g=(v+w)/2;k=k/u*g;n=n/u*g;H=S0.tn(a,b);t=S0.Si(a,I+U0.Ft*k-U0.Kt*n,J+U0.Kt*k+U0.Ft*n,0);S0.ul(a,t,1);H>-1?S0.Vi(a,b,t,1):S0.Vi(a,b,t,257);t=S0.Si(a,I+U0.Ht*k-U0.Mt*n,J+U0.Mt*k+U0.Ht*n,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}else {for(s=0;s<A;s++){t=S0.Si(a,I,J,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}}break;case 3:{if(a.f[b][0]>0){k=(I-S0.Mj(a,a.f[b][0]))*0.7;n=(J-S0.Nj(a,a.f[b][0]))*0.7;t=S0.Si(a,I+k,J+n,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);t=S0.Si(a,I-n,J+k,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);t=S0.Si(a,I+n,J-k,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}else {k=S0.Lm(a,true);n=S0.Lm(a,true);t=S0.Si(a,I+k,J+n,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);t=S0.Si(a,I-n*U0.Jt,J+k*U0.Ot,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);t=S0.Si(a,I-n*U0.Jt,J-k*U0.Ot,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}}break;default:{for(s=0;s<A;s++){t=S0.Si(a,I,J,0);S0.ul(a,t,1);S0.Vi(a,b,t,1);}break}}};U0.St=function St(a){U0.Pt();var b,c;S0.Ls(a,1);c=0;for(b=0;b<a.o;b++){a.A[b]==1?++c:(c+=a.c[b]-a.g[b]+S0.bn(a,b));}return c};U0.Ft=0;U0.Gt=0;U0.Ht=0;U0.It=0;U0.Jt=0;U0.Kt=0;U0.Lt=0;U0.Mt=0;U0.Nt=0;U0.Ot=0;V0.Ut=function Ut(a,b,c){var d,e,f;f=b.length;d=new V0.zv(a.f,f,false);d.a[0]=0;d.b[0]=0;for(e=0;e<f;e++){d.k[e]=128-f;d.e[e]=b[e];}f<8?V0.bu(d):V0._t(a,d,b,c);V0.Ju(a.d,d);};V0.Vt=function Vt(a,b,c,d,e){var f,g,h,i,j,k,l,m;g=OL(N0.hN,K1,5,e,15,1);for(f=0;f<a.f.o;f++){for(i=0;i<S0.Bm(a.f,f);i++){m=c[S0.Pm(a.f,f,i)];for(j=0;j<i;j++)if(m<g[j])break;for(k=i;k>j;k--)g[k]=g[k-1];g[j]=m;}l=S0.Bm(a.f,f);S0.eg(b[f],f);S0.bg(b[f],d,N0.MQ(c[f]));S0.bg(b[f],(e-l)*(d+1),0);for(h=0;h<l;h++)S0.bg(b[f],d+1,N0.MQ(g[h]));}};V0.Wt=function Wt(a){var b,c,d,e,f,g,h,i,j,k,l;d=S0.Qf(a.f.d);i=2;for(c=0;c<a.f.d;c++)i=$wnd.Math.max(i,S0.Bm(a.f,c));f=(62+2*d+i*(d+1))/63|0;e=OL(N0.sN,b3,73,a.f.o,0,1);for(b=0;b<a.f.o;b++){e[b]=new S0.fg(f);S0.eg(e[b],b);}l=OL(N0.hN,K1,5,a.f.o,15,1);for(g=0;g<a.f.e;g++){h=S0.bk(a.f,g);if(h==1||h==2){S0.cg(e[S0.Uj(a.f,0,g)],N0.MQ(h));S0.cg(e[S0.Uj(a.f,1,g)],N0.MQ(h));}}j=V0.Xt(e,l);do{k=j;V0.Vt(a,e,l,d,i);j=V0.Xt(e,l);}while(k!=j);return l};V0.Xt=function Xt(a,b){var c,d;d=0;T0.AZ(a,0,a.length,null);for(c=0;c<a.length;c++){(c==0||S0.dg(a[c],a[c-1])!=0)&&++d;b[a[c].a]=d;}return d};V0.Yt=function Yt(a){var b,c,d,e,f,g,h,i,j,k,l,m;for(i=0;i<a.d.a.length;i++){h=T0.Yh(a.d,i);for(j=0;j<h.f.length;j++){d=h.f[j];if(S0.ak(a.f,d)==2){!S0.Vn(a.f,d)&&(S0.bk(a.f,d)==3||S0.bk(a.f,d)==0)&&S0.Cl(a.f,d);if(!S0.Sn(a.f,d)&&S0.Qm(a.f,S0.Uj(a.f,0,d))>1&&S0.Qm(a.f,S0.Uj(a.f,1,d))>1&&(S0.bk(a.f,d)==1||S0.bk(a.f,d)==2)){m=OL(N0.hN,K1,5,2,15,1);e=OL(N0.hN,K1,5,2,15,1);for(k=0;k<2;k++){m[k]=a.f.K;e[k]=S0.Uj(a.f,k,d);for(l=0;l<S0.Bm(a.f,e[k]);l++){f=S0.Pm(a.f,e[k],l);f!=S0.Uj(a.f,1-k,d)&&m[k]>f&&(m[k]=f);}}g=V0.dv(h.a[h.g[e[0]]],h.b[h.g[e[0]]],h.a[h.g[e[1]]],h.b[h.g[e[1]]]);b=V0.dv(h.a[h.g[m[0]]],h.b[h.g[m[0]]],h.a[h.g[e[0]]],h.b[h.g[e[0]]]);c=V0.dv(h.a[h.g[e[1]]],h.b[h.g[e[1]]],h.a[h.g[m[1]]],h.b[h.g[m[1]]]);V0.du(g,b)<0^V0.du(g,c)<0^S0.bk(a.f,d)==2&&V0.nv(h,d);}}}}};V0.Zt=function Zt(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;m=new T0.ki;r=new T0.ki;d=new T0.ki;for(f=new T0.iZ(a.d);f.a<f.c.a.length;){e=T0.hZ(f);g=0;R0.I0(d.a).length=0;for(h=0;h<e.e.length;h++){b=e.e[h];c=a.i[b];if(c!=0){T0.Th(d,new V0.fv(e,h,c));g+=c;}}if(g!=0){T0.hi(d,new V0.Ou);for(j=new T0.iZ(d);j.a<j.c.a.length;){i=T0.hZ(j);if(g*i.b>0){c=$wnd.Math.abs(g)>=$wnd.Math.abs(i.b)?i.b:g;g-=c;T0.Th(c<0?m:r,new V0.fv(e,i.a,c));if(g==0)break}}}}if(m.a.length==0||r.a.length==0)return null;T0.hi(r,new V0.Su);T0.hi(m,new V0.Wu);for(p=new T0.iZ(r);p.a<p.c.a.length;){n=T0.hZ(p);for(l=new T0.iZ(m);l.a<l.c.a.length;){k=T0.hZ(l);if(n.b==-k.b){a.i[V0.rv(n.c,n.a)]-=n.b;a.i[V0.rv(k.c,k.a)]-=k.b;return new V0.av(n.c,k.c,n.a,k.a)}}}for(q=new T0.iZ(r);q.a<q.c.a.length;){n=T0.hZ(q);for(l=new T0.iZ(m);l.a<l.c.a.length;){k=T0.hZ(l);if(n.b>-k.b){a.i[V0.rv(n.c,n.a)]+=k.b;a.i[V0.rv(k.c,k.a)]-=k.b;return new V0.av(n.c,k.c,n.a,k.a)}}}for(o=new T0.iZ(r);o.a<o.c.a.length;){n=T0.hZ(o);for(l=new T0.iZ(m);l.a<l.c.a.length;){k=T0.hZ(l);if(n.b<-k.b){a.i[V0.rv(n.c,n.a)]-=n.b;a.i[V0.rv(k.c,k.a)]+=n.b;return new V0.av(n.c,k.c,n.a,k.a)}}}return null};V0.$t=function $t(a){if(a.d.a.length<2)return null;return new V0._u(T0.Yh(a.d,0),T0.Yh(a.d,1))};
V0._t=function _t(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;k=WL(IL(N0.fN,2),p1,15,0,[WL(IL(N0.fN,1),O2,5,15,[20]),null,null,WL(IL(N0.fN,1),O2,5,15,[0,10]),null,null,WL(IL(N0.fN,1),O2,5,15,[-4,12]),WL(IL(N0.fN,1),O2,5,15,[0,0,-7.5]),null,null,null,null,WL(IL(N0.fN,1),O2,5,15,[8,-8]),null,null,null,WL(IL(N0.fN,1),O2,5,15,[-2.4])]);l=WL(IL(N0.hN,2),a3,6,0,[WL(IL(N0.hN,1),K1,5,15,[146]),WL(IL(N0.hN,1),K1,5,15,[627]),null,WL(IL(N0.hN,1),K1,5,15,[2457,1170]),null,WL(IL(N0.hN,1),K1,5,15,[2451,8643,2519]),WL(IL(N0.hN,1),K1,5,15,[9362,14798]),WL(IL(N0.hN,1),K1,5,15,[34377,-2147448999,26214]),null,WL(IL(N0.hN,1),K1,5,15,[37449,137313,95703,34371,37815,54891,132867,-2147309741,54857,55129,-2147449005,-2147449065]),null,WL(IL(N0.hN,1),K1,5,15,[530697,531819,899169,137289,694617,-2146951863,-2146952797,-2146939175,-2146929547,-2146929564,-2146625111,-2146931799,-2146940503,-2146931935]),WL(IL(N0.hN,1),K1,5,15,[1007293,610915]),WL(IL(N0.hN,1),K1,5,15,[542985,137283,2122017,530691,2206773,-2144711351,219209,2840841,137555,-2146871031,-2147264167,613705,-2145360543,-2146625271,694611,2454837,-2145356703,-2147345133,-2146928951,-2146931805,-2144641719,-2146951869,-2146625237,-2146624183,2841963,1074905,-2146625117,2799955,-2144723645,138583,859225,-2145264843,-2145216253,-2146624149,-2144700727,-2146928917,-2143905527,-2144045771,-2146789097,2288547,544407,2104323,-2146911977,-2144479405,3633737,-2146870089,-2146952169]),null,WL(IL(N0.hN,1),K1,5,15,[8487297,2172633,2116611,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8829813]),WL(IL(N0.hN,1),K1,5,15,[14071213])]);s=1<<b.e.length;g=0;i=0;if(b.e.length>7){for(n=0;n<b.e.length;n++){h=V0.hu(a,c,d,n);h==1?(g+=s):h==2&&(i+=s);g>>>=1;i>>>=1;}}v=b.e.length-9;if(b.e.length>=9&&b.e.length<=25&&l[v]!=null){for(C=0;C<l[v].length;C++){r=(x1&l[v][C])==0;j=u1&l[v][C];for(p=false;!p;p=!p){if(p){if(r)break;t=0;for(e=1;e!=s;e<<=1){t<<=1;(j&e)!=0&&(t|=1);}j=t;}for(w=0;w<b.e.length;w++){if((j&g)==0&&(~j&i)==0){f=0;m=0.017453292519943295*(k[v]==null?0:k[v][C]);u=0;A=j;q=true;for(o=0;o<b.e.length;o++){q&&++u;(A&1)==0&&(q=!q);A>>>=1;}B=u>(b.e.length/2|0);for(n=1;n<b.e.length;n++){b.a[n]=b.a[n-1]+$wnd.Math.sin(f);b.b[n]=b.b[n-1]+$wnd.Math.cos(f);(j&1)==0&&(B=!B);f+=m+(B?S2:d4);j>>>=1;}return}(j&1)!=0&&(j|=s);j>>>=1;}}}}V0.cu(b,g,i);};V0.au=function au(a){var b,c,d,e,f,g,h,i,j,k;b=null;j=null;for(g=0;g<a.f.e;g++){if(S0.dk(a.f,g)==32){c=S0.Uj(a.f,0,g);e=-1;h=0;for(;h<a.d.a.length;h++){e=V0.sv(T0.Yh(a.d,h),c);if(e!=-1)break}d=S0.Uj(a.f,1,g);f=-1;i=0;for(;i<a.d.a.length;i++){f=V0.sv(T0.Yh(a.d,i),d);if(f!=-1)break}if(h!=i){if(h>i){k=h;h=i;i=k;k=e;e=f;f=k;}j==null&&(j=OL(N0.hO,p1,210,a.d.a.length,0,2));j[i]==null&&(j[i]=OL(N0.hO,{210:1,4:1,8:1},55,i,0,1));if(j[i][h])V0.Zu(j[i][h],e,f);else {SL(j[i],h,new V0.av(T0.Yh(a.d,h),T0.Yh(a.d,i),e,f));!b&&(b=new T0.ki);T0.Th(b,j[i][h]);}}}}return b};V0.bu=function bu(a){var b,c;b=h2-h2*(a.e.length-2)/a.e.length;for(c=1;c<a.e.length;c++){a.a[c]=a.a[c-1]+$wnd.Math.sin(b*(c-1));a.b[c]=a.b[c-1]+$wnd.Math.cos(b*(c-1));}};V0.cu=function cu(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(b==0||(b&c)!=0){V0.bu(a);return}q=-1;r=0;f=1<<a.e.length-2;e=1<<a.e.length-1;h=1;g=2;for(j=0;j<a.e.length;j++){if((c&(e|h))==0&&(b&(e|h))!=0&&(b&f)==0){o=0;(c&f)!=0&&(o+=4);(b&e)!=0&&(o+=2);(b&h)!=0&&(o+=1);if(r<o){r=o;q=j;}}f=e;e=h;h=g;g=1<<(j+2<a.e.length?j+2:j+2-a.e.length);}if(q==-1){V0.bu(a);return}m=0;m|=1<<q;n=2;while(n<a.e.length-1){l=q+n<a.e.length?q+n:q+n-a.e.length;e=1<<(l==0?a.e.length-1:l-1);if((c&e)!=0){++n;continue}h=1<<l;if((b&e)!=0){if((c&h)!=0){V0.bu(a);return}m|=h;n+=2;continue}g=1<<(l+1<a.e.length?l+1:l+1-a.e.length);if((b&h)!=0&&(c&g)!=0){m|=h;n+=3;continue}++n;}if(m==0){V0.bu(a);return}d=h2-h2*(a.e.length-2)/a.e.length;for(k=1;k<a.e.length;k++){a.a[k]=a.a[k-1]+$wnd.Math.sin(d*(k-1));a.b[k]=a.b[k-1]+$wnd.Math.cos(d*(k-1));}h=1;p=2*$wnd.Math.sin(d/2);for(i=0;i<a.e.length;i++){if((m&h)!=0){a.a[i]+=p*$wnd.Math.cos(d*(i-0.5));a.b[i]-=p*$wnd.Math.sin(d*(i-0.5));}h<<=1;}};V0.du=function du(a,b){var c;c=a-b;while(c<w3)c+=g2;while(c>h2)c-=g2;return c};V0.eu=function eu(a,b,c){var d,e;d=0;for(e=0;e<S0.Bm(a.f,c);e++){V0.uv(b,S0.Pm(a.f,c,e))&&++d;}return d};V0.fu=function fu(a,b,c,d){var e,f,g,h,i;h=V0.sv(b,d);i=V0.sv(c,d);V0.yv(c,b.a[h]-c.a[i],b.b[h]-c.b[i]);e=V0.Eu(a,b,d);f=V0.Eu(a,c,d);g=0;V0.eu(a,b,d)==1&&V0.eu(a,c,d)==1&&(g=S2);V0.xv(c,c.a[i],c.b[i],e-f+g+h2);return V0.ku(a,b,c,1)};V0.gu=function gu(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L;t=OL(N0.hN,K1,5,e,15,1);u=OL(N0.hN,K1,5,e,15,1);for(p=0;p<e;p++){t[p]=V0.sv(b,d[p]);u[p]=V0.sv(c,d[p]);}F=0;H=0;G=0;I=0;for(q=0;q<e;q++){F+=b.a[t[q]];H+=b.b[t[q]];G+=c.a[u[q]];I+=c.b[u[q]];}F/=e;H/=e;G/=e;I/=e;V0.yv(c,F-G,H-I);j=OL(N0.iO,z1,22,e,0,1);l=OL(N0.iO,z1,22,e,0,1);f=OL(N0.iO,z1,22,e,0,1);g=OL(N0.iO,z1,22,e,0,1);for(r=0;r<e;r++){j[r]=new V0.cv(F,H,b.a[t[r]],b.b[t[r]]);l[r]=new V0.cv(F,H,c.a[u[r]],c.b[u[r]]);f[r]=new V0.bv(j[r].a-l[r].a,j[r].b*l[r].b);g[r]=new V0.bv(j[r].a+l[r].a,j[r].b*l[r].b);}w=V0.Iu(f,e);A=V0.Iu(g,e);K=0;L=0;for(s=0;s<e;s++){for(v=0;v<S0.Bm(a.f,d[s]);v++){h=S0.Pm(a.f,d[s],v);V0.uv(b,h)&&!V0.uv(c,h)&&++K;!V0.uv(b,h)&&V0.uv(c,h)&&++L;}}k=OL(N0.iO,z1,22,K,0,1);m=OL(N0.iO,z1,22,L,0,1);n=OL(N0.iO,z1,22,L,0,1);K=0;L=0;for(o=0;o<e;o++){for(v=0;v<S0.Bm(a.f,d[o]);v++){h=S0.Pm(a.f,d[o],v);if(V0.uv(b,h)&&!V0.uv(c,h)){i=V0.sv(b,h);k[K]=new V0.cv(b.a[t[o]],b.b[t[o]],b.a[i],b.b[i]);++K;}if(!V0.uv(b,h)&&V0.uv(c,h)){i=V0.sv(c,h);J=new V0.cv(c.a[u[o]],c.b[u[o]],c.a[i],c.b[i]);m[L]=new V0.bv(w.a+J.a,J.b);n[L]=new V0.bv(A.a-J.a,J.b);++L;}}}B=V0.Iu(k,K);C=V0.Iu(m,L);D=V0.Iu(n,L);if($wnd.Math.abs(V0.du(B.a,C.a))>$wnd.Math.abs(V0.du(B.a,D.a))){V0.xv(c,F,H,w.a);}else {V0.mv(c,F,H);V0.xv(c,F,H,A.a);}return V0.ku(a,b,c,e)};V0.hu=function hu(a,b,c,d){var e,f,g,h,i,j;f=d==b.length-1?0:d+1;h=d==0?b.length-1:d-1;g=f==b.length-1?0:f+1;if(S0.ak(a.f,c[d])==2){e=S0.bk(a.f,c[d]);if(e==1||e==2){V0.pu(a,b[h],b[d],b[f])^V0.pu(a,b[g],b[f],b[d])&&(e=e==1?2:1);return e}}if(S0.Vn(a.f,c[d])){i=S0.wq(S0.pn(a.f),c[h],c[d]);j=S0.wq(S0.pn(a.f),c[f],c[d]);if(i!=-1||j!=-1)return i==j?2:1;return 2}return 0};V0.iu=function iu(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;e=OL(N0.hN,K1,5,a.f.o,15,1);f=OL(N0.hN,K1,5,a.f.o,15,1);g=OL(N0.hN,K1,5,a.f.o,15,1);h=OL(N0.hN,K1,5,a.f.o,15,1);e[0]=b;g[b]=1;h[0]=-1;d=0;i=0;while(d<=i){if(d==0||!a.b[e[d]]){for(j=0;j<S0.Bm(a.f,e[d]);j++){c=S0.Pm(a.f,e[d],j);m=S0.Rm(a.f,e[d],j);if(g[c]==0&&!a.c[m]){e[++i]=c;f[i]=m;g[c]=g[e[d]]+1;h[i]=d;}}}if(d==i){n=new V0.ev(g[e[d]]);k=d;for(l=0;l<n.a.length;l++){n.a[l]=e[k];n.b[l]=f[k];k=h[k];}return n}++d;}return null};V0.ju=function ju(a){var b,c,d,e;e=0;d=null;for(c=new T0.iZ(a);c.a<c.c.a.length;){b=T0.hZ(c);if(e<b.b[0].e.length*b.b[1].e.length){e=b.b[0].e.length*b.b[1].e.length;d=b;}}return d};V0.ku=function ku(a,b,c,d){var e,f,g,h,i;f=new V0.zv(a.f,b.e.length+c.e.length-d,b.i|c.i);e=0;for(h=0;h<b.e.length;h++){f.e[e]=b.e[h];f.k[e]=b.k[h];f.a[e]=b.a[h];f.b[e++]=b.b[h];}for(g=0;g<c.e.length;g++){i=V0.sv(b,c.e[g]);if(i==-1){f.e[e]=c.e[g];f.k[e]=c.k[g];f.a[e]=c.a[g];f.b[e++]=c.b[g];}else {if(f.k[i]<c.k[g]){f.k[i]=c.k[g];f.a[i]=c.a[g];f.b[i]=c.b[g];}}}return f};V0.lu=function lu(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;h=OL(N0.hN,K1,5,a.f.o,15,1);i=OL(N0.hN,K1,5,a.f.o,15,1);j=OL(N0.hN,K1,5,a.f.o,15,1);k=OL(N0.hN,K1,5,a.f.o,15,1);h[0]=c;j[c]=1;k[0]=-1;g=0;l=0;while(g<=l){for(m=0;m<S0.Cm(a.f,h[g]);m++){e=S0.Pm(a.f,h[g],m);o=S0.Rm(a.f,h[g],m);if(e==b){f=j[h[g]];d=OL(N0.hN,K1,5,f,15,1);d[0]=o;for(n=1;n<f;n++){d[n]=i[g];g=k[g];}return d}if(j[e]==0){h[++l]=e;i[l]=o;j[e]=j[h[g]]+1;k[l]=g;}}if(g==l)return null;++g;}return null};V0.mu=function mu(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;c=S0.Uj(a.f,0,b);d=S0.Uj(a.f,1,b);g=OL(N0.hN,K1,5,a.f.o,15,1);h=OL(N0.hN,K1,5,a.f.o,15,1);i=OL(N0.hN,K1,5,a.f.o,15,1);j=OL(N0.hN,K1,5,a.f.o,15,1);g[0]=c;g[1]=d;h[1]=b;i[c]=1;i[d]=2;j[0]=-1;j[1]=0;f=1;k=1;while(f<=k){for(l=0;l<S0.Qm(a.f,g[f]);l++){e=S0.Pm(a.f,g[f],l);if(f>1&&e==c){o=new V0.ev(i[g[f]]);h[0]=S0.Rm(a.f,g[f],l);m=f;for(n=0;n<o.a.length;n++){o.a[n]=g[m];o.b[n]=h[m];m=j[m];}return o}if(i[e]==0&&S0.Rn(a.f,e)){g[++k]=e;h[k]=S0.Rm(a.f,g[f],l);i[e]=i[g[f]]+1;j[k]=f;}}++f;}return null};V0.nu=function nu(a,b,c,d){var e,f,g,h,i,j;g=OL(N0.hN,K1,5,a.f.o,15,1);h=OL(N0.hN,K1,5,a.f.o,15,1);g[0]=c;g[1]=b;h[c]=1;h[b]=2;f=1;i=1;while(f<=i){for(j=0;j<S0.Qm(a.f,g[f]);j++){e=S0.Pm(a.f,g[f],j);if(e==d)return 1+h[g[f]];if(h[e]==0&&S0.Rn(a.f,e)){g[++i]=e;h[e]=h[g[f]]+1;}}++f;}return 0};V0.ou=function ou(a,b){var c,d,e,f,g,h,i;h=(b.R&15)!=0;i=b.R&248;!a.g&&(a.g=new T0.i$);(a.e&2)!=0&&S0.ao(b,false);a.f=b;S0.Ls(a.f,7);a.d=new V0.Lu;a.b=OL(N0.xQ,c2,5,a.f.o,16,1);a.c=OL(N0.xQ,c2,5,a.f.p,16,1);a.i=OL(N0.hN,K1,5,a.f.o,15,1);for(c=0;c<a.f.o;c++)a.i[c]=S0.yj(a.f,c);(a.e&12)!=0&&V0.zu(a);(a.e&1)==0&&!!V0.Tt&&V0.Bu(a,V0.Tt);V0.yu(a);V0.uu(a);V0.wu(a);V0.uu(a);for(e=new T0.iZ(a.d);e.a<e.c.a.length;){d=T0.hZ(e);V0.vv(d);}V0.Yt(a);V0.Cu(a);V0.Au(a);V0.tu(a);V0.ru(a);V0.vu(a);for(f=0;f<a.d.a.length;f++){d=T0.Yh(a.d,f);for(g=0;g<d.e.length;g++){S0.rl(a.f,d.e[g],d.a[g]);S0.sl(a.f,d.e[g],d.b[g]);S0.tl(a.f,d.e[g],0);}}if(h){S0.eo(a.f,i);S0.ho(a.f);}a.a&&S0.Sk(a.f);};V0.pu=function pu(a,b,c,d){var e,f;for(f=0;f<S0.Qm(a.f,c);f++){e=S0.Pm(a.f,c,f);if(e!=d&&e<b)return false}return true};V0.qu=function qu(a,b,c){var d;V0.$u(b,c,(a.e&12)!=0);d=V0.ku(a,b.b[0],b.b[1],0);V0.Fu(a,b.b[0],b.b[1],d);};V0.ru=function ru(a){var b;b=V0.Zt(a);while(b){V0.qu(a,b,1.5);b=V0.Zt(a);}};V0.su=function su(a,b,c,d){var e,f,g,h,i;e=OL(N0.hN,K1,5,d,15,1);f=0;for(g=0;g<b.e.length;g++)for(h=0;h<c.e.length;h++)b.e[g]==c.e[h]&&(e[f++]=b.e[g]);i=d==1?V0.fu(a,b,c,e[0]):V0.gu(a,b,c,e,d);V0.Fu(a,b,c,i);};V0.tu=function tu(a){var b,c;c=V0.au(a);while(c){b=V0.ju(c);V0.qu(a,b,1.2);c=V0.au(a);}};V0.uu=function uu(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;while(true){s=0;n=0;q=null;r=null;for(g=1;g<a.d.a.length;g++){d=T0.Yh(a.d,g);for(h=0;h<g;h++){e=T0.Yh(a.d,h);b=0;c=0;o=0;p=0;for(k=0;k<d.e.length;k++){for(m=0;m<e.e.length;m++){if(d.e[k]==e.e[m]){++c;b=d.e[k];o<d.k[k]&&(o=d.k[k]);p<e.k[m]&&(p=e.k[m]);}}}if(c>0){f=c==1&&V0.eu(a,d,b)==1&&V0.eu(a,e,b)==1?0:1;o>p?(i=(f<<24)+(o<<16)+(p<<8)+c):(i=(f<<24)+(p<<16)+(o<<8)+c);if(s<i){s=i;n=c;o=0;p=0;for(l=0;l<d.e.length;l++)o<d.k[l]&&(o=d.k[l]);for(j=0;j<e.e.length;j++)p<e.k[j]&&(p=e.k[j]);if(o>p){q=d;r=e;}else {q=e;r=d;}}}}}if(s==0)break;n==q.e.length?T0.di(a.d,q):n==r.e.length?T0.di(a.d,r):V0.su(a,q,r,n);}};V0.vu=function vu(a){var b;b=V0.$t(a);while(b){V0.qu(a,b,1.8);b=V0.$t(a);}};V0.wu=function wu(a){var b,c,d,e,f,g,h;while(true){f=null;for(b=0;b<a.f.o;b++){h=0;for(e=0;e<S0.Bm(a.f,b);e++)a.c[S0.Rm(a.f,b,e)]||++h;if(h==1){g=V0.iu(a,b);(!f||g.a.length>f.a.length)&&(f=g);}}if(!f)break;c=new V0.zv(a.f,f.a.length,false);for(d=0;d<f.a.length;d++){a.b[f.a[d]]=true;d<f.a.length-1&&(a.c[f.b[d]]=true);c.e[d]=f.a[d];c.a[d]=$wnd.Math.cos(T2)*d;c.b[d]=(d&1)==1?0:0.5;c.k[d]=128+f.a.length;}V0.Ju(a.d,c);}};V0.xu=function xu(a,b,c){var d,e,f,g,h,i,j,k,l,m;for(f=0;f<a.f.p;f++){d=S0.Uj(a.f,0,f);e=S0.Uj(a.f,1,f);if(S0.Sn(a.f,f)||S0.ak(a.f,f)!=1||S0.Bm(a.f,d)==1||S0.Bm(a.f,e)==1)continue;if((a.e&4)!=0&&S0.Dk(a.f,d)&&S0.Dk(a.f,e))continue;l=false;for(j=0;j<2;j++){g=S0.Uj(a.f,j,f);if(S0.Bm(a.f,g)>2){m=true;i=-1;for(k=0;k<S0.Bm(a.f,g);k++){h=S0.Pm(a.f,g,k);h!=S0.Uj(a.f,1-j,f)&&(i==-1?(i=c[h]):i!=c[h]&&(m=false));}if(m){l=true;break}}}l||((a.e&8)!=0&&S0.Dk(a.f,d)&&S0.Dk(a.f,e)?(b[f]=1):(b[f]=2));}};V0.yu=function yu(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M;for(d=0;d<a.f.d;d++){if(S0.Bm(a.f,d)>4){m=new V0.zv(a.f,1+S0.Bm(a.f,d),false);m.a[S0.Bm(a.f,d)]=0;m.b[S0.Bm(a.f,d)]=0;m.k[S0.Bm(a.f,d)]=32;m.e[S0.Bm(a.f,d)]=d;a.b[d]=true;for(o=0;o<S0.Bm(a.f,d);o++){j=S0.Pm(a.f,d,o);m.a[o]=$wnd.Math.sin(S2*o-f4);m.b[o]=$wnd.Math.cos(S2*o-f4);m.k[o]=32;m.e[o]=j;a.b[j]=true;a.c[S0.Rm(a.f,d,o)]=true;}V0.Ju(a.d,m);}}I=S0.pn(a.f);for(H=0;H<I.i.a.length;H++){J=T0.Yh(I.j,H).length;F=T0.Yh(I.i,H);K=false;if((a.e&12)!=0){K=true;for(o=0;o<J;o++){if(!S0.Dk(a.f,F[o])){K=false;break}}}if(!K){r=false;for(p=0;p<J;p++){if(S0.Km(a.f,F[p])==J){r=true;break}}if(r){G=T0.Yh(I.j,H);V0.Ut(a,F,G);for(o=0;o<J;o++){a.b[F[o]]=true;a.c[G[o]]=true;}}}}for(h=0;h<a.f.e;h++){if(S0.Sn(a.f,h)&&!a.c[h]){M=V0.mu(a,h);F=M.a;G=M.b;V0.Ut(a,F,G);for(o=0;o<M.a.length;o++){a.b[F[o]]=true;a.c[G[o]]=true;}}}for(i=0;i<a.f.p;i++){if(!a.c[i]&&S0.ak(a.f,i)==3){e=S0.Uj(a.f,0,i);f=S0.Uj(a.f,1,i);w=S0.Bm(a.f,e)+S0.Bm(a.f,f);if(w>2){m=new V0.zv(a.f,w,false);k=0;for(p=0;p<S0.Bm(a.f,e);p++){j=S0.Pm(a.f,e,p);if(j!=f){m.e[k++]=j;a.b[j]=true;a.c[S0.Rm(a.f,e,p)]=true;}}m.e[k++]=e;m.e[k++]=f;for(q=0;q<S0.Bm(a.f,f);q++){j=S0.Pm(a.f,f,q);if(j!=e){m.e[k++]=j;a.b[j]=true;a.c[S0.Rm(a.f,f,q)]=true;}}for(o=0;o<w;o++){m.a[o]=o;m.b[o]=0;m.k[o]=1;}a.b[e]=true;a.b[f]=true;a.c[i]=true;V0.Ju(a.d,m);}}}for(g=0;g<a.f.p;g++){if(!a.c[g]&&S0.ak(a.f,g)==2){b=OL(N0.hN,K1,5,a.f.o,15,1);for(o=0;o<2;o++){b[0]=S0.Uj(a.f,o,g);b[1]=S0.Uj(a.f,1-o,g);if(S0.Gm(a.f,b[0])==1&&S0.Gm(a.f,b[1])==2&&S0.Bm(a.f,b[1])==2){a.b[b[0]]=true;a.b[b[1]]=true;a.c[g]=true;v=1;do{A=S0.Pm(a.f,b[v],0)==b[v-1]?1:0;b[v+1]=S0.Pm(a.f,b[v],A);if(S0.Gm(a.f,b[v+1])==2&&S0.Bm(a.f,b[v+1])>2)break;a.b[b[v+1]]=true;a.c[S0.Rm(a.f,b[v],A)]=true;++v;}while(S0.Gm(a.f,b[v])==2&&S0.Bm(a.f,b[v])==2);w=S0.Bm(a.f,b[0])+S0.Bm(a.f,b[v])+v-1;m=new V0.zv(a.f,w,false);for(t=0;t<=v;t++){m.a[t]=t;m.b[t]=0;m.k[t]=64;m.e[t]=b[t];}l=v+1;n=false;for(u=0;u<S0.Bm(a.f,b[0]);u++){j=S0.Pm(a.f,b[0],u);if(j!=b[1]){m.a[l]=-0.5;m.b[l]=n?$wnd.Math.sin(S2):-$wnd.Math.sin(S2);m.k[l]=64;m.e[l]=j;++l;n=true;}}n=false;for(s=0;s<S0.Bm(a.f,b[v]);s++){j=S0.Pm(a.f,b[v],s);if(j!=b[v-1]){m.a[l]=v+0.5;m.b[l]=n?-$wnd.Math.sin(S2):$wnd.Math.sin(S2);m.k[l]=64;m.e[l]=j;++l;n=true;}}V0.Ju(a.d,m);}}}}for(c=0;c<a.f.o;c++){if(S0.Bm(a.f,c)==4){B=OL(N0.hN,K1,5,4,15,1);C=OL(N0.hN,K1,5,4,15,1);D=0;for(p=0;p<4;p++){B[D]=S0.Pm(a.f,c,p);C[D]=S0.Rm(a.f,c,p);S0.Bm(a.f,B[D])==1&&!a.c[C[D]]&&++D;}if(D==2){m=new V0.zv(a.f,3,false);for(o=0;o<2;o++){a.b[B[o]]=true;a.c[C[o]]=true;m.e[o]=B[o];m.k[o]=32;}m.a[0]=-0.5;m.b[0]=0.866;m.a[1]=0.5;m.b[1]=0.866;m.a[2]=0;m.b[2]=0;m.k[2]=32;m.e[2]=c;V0.Ju(a.d,m);}if(D==3){for(q=0;q<2;q++){if(S0.ak(a.f,C[q])==1){L=B[q];B[q]=B[2];B[2]=L;L=C[q];C[q]=C[2];C[2]=L;}}m=new V0.zv(a.f,4,false);for(o=0;o<3;o++){a.b[B[o]]=true;a.c[C[o]]=true;m.e[o]=B[o];m.k[o]=32;}m.a[0]=-1;m.b[0]=0;m.a[1]=1;m.b[1]=0;m.a[2]=0;m.b[2]=1;m.a[3]=0;m.b[3]=0;m.k[3]=32;m.e[3]=c;V0.Ju(a.d,m);}}}};V0.zu=function zu(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;h=0;for(c=0;c<a.f.o;c++)S0.Dk(a.f,c)&&++h;if(h<2)return;l=0;j=0;for(k=0;k<a.f.p;k++){d=S0.Uj(a.f,0,k);e=S0.Uj(a.f,1,k);if(S0.Dk(a.f,d)&&S0.Dk(a.f,e)){a.c[k]=true;a.b[d]=true;a.b[e]=true;j+=S0.$j(a.f,k);++l;}}l!=0&&j!=0?(j/=l):(j=S0.Qj(a.f));for(f=0;f<a.f.o;f++)S0.Dk(a.f,f)&&!a.b[f]&&--h;if(h<2)return;t=OL(N0.hN,K1,5,a.f.o,15,1);m=S0.Ym(a.f,t,true,true);s=OL(N0.hN,K1,5,m,15,1);for(g=0;g<a.f.o;g++)t[g]!=-1&&++s[t[g]];r=OL(N0.mO,z1,29,m,0,1);for(o=0;o<m;o++)r[o]=new V0.zv(a.f,s[o],true);i=OL(N0.hN,K1,5,m,15,1);for(b=0;b<a.f.o;b++){p=t[b];if(p!=-1){r[p].k[i[p]]=p2;r[p].e[i[p]]=b;r[p].a[i[p]]=S0.Mj(a.f,b)/j;r[p].b[i[p]]=S0.Nj(a.f,b)/j;++i[p];}}u=-1;v=0;for(q=0;q<m;q++){if(v<s[q]){v=s[q];u=q;}}V0.Ju(a.d,r[u]);for(n=0;n<m;n++)n!=u&&V0.Ju(a.d,r[n]);};V0.Au=function Au(a){var b,c;for(b=0;b<a.f.o;b++){if(!a.b[b]&&S0.Bm(a.f,b)==0){c=new V0.zv(a.f,1,false);a.b[b]=true;c.e[0]=b;c.a[0]=0;c.b[0]=0;c.k[0]=0;V0.Ju(a.d,c);}}};V0.Bu=function Bu(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;o=null;o=new S0.qr;S0.kr(o,a.f);g=OL(N0.xQ,c2,5,a.f.d,16,1);for(q=b.rb();q.Wb();){p=q.Xb();n=null;s=p.b;S0.jr(o,s);S0.Zq(o,4,8)!=0&&(n=o.D);if(n){for(m=new T0.iZ(n);m.a<m.c.a.length;){l=T0.hZ(m);r=0;for(d=l,e=0,f=d.length;e<f;++e){c=d[e];g[c]&&++r;}if(r<=1){i=p.c;a.a?(i=false):(a.a=true);j=new V0.zv(a.f,l.length,i);for(k=0;k<l.length;k++){c=l[k];i&&S0.kl(a.f,c,true);j.k[k]=256;j.e[k]=c;j.a[k]=S0.Mj(p.b,k)/p.a;j.b[k]=S0.Nj(p.b,k)/p.a;g[c]=true;a.b[c]=true;}for(h=0;h<s.e;h++)a.c[S0.Nm(a.f,l[s.B[0][h]],l[s.B[1][h]])]=true;V0.Ju(a.d,j);}}}}return g};V0.Cu=function Cu(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;b=V0.Wt(a);f=OL(N0.dN,d3,5,a.f.p,15,1);V0.xu(a,f,b);for(e=0;e<a.f.p;e++)f[e]==2&&(S0.Rn(a.f,S0.Uj(a.f,0,e))||S0.Rn(a.f,S0.Uj(a.f,1,e)))&&(f[e]=3);for(n=0;n<a.d.a.length;n++){l=T0.Yh(a.d,n);i=V0.qv(l);r=l.c;q=new V0.Av(l);p=-1;for(m=0;m<224&&i.a.length!=0;m++){j=T0.f$(a.g,i.a.length);h=(R0.y0(j,i.a.length),i.a[j]);g=V0.lu(a,h[0],h[1]);c=OL(N0.hN,K1,5,g.length,15,1);d=0;if(m<32){for(o=1;o<g.length-1;o++)f[g[o]]==3&&(c[d++]=g[o]);}else if(m<96){for(o=1;o<g.length-1;o++)f[g[o]]>=2&&(c[d++]=g[o]);}else {for(o=1;o<g.length-1;o++)f[g[o]]>=1&&(c[d++]=g[o]);}if(d!=0){t=c[0];if(d>1){do{t=c[T0.f$(a.g,d)];}while(t==p)}if(t!=p){p=t;V0.nv(l,t);i=V0.qv(l);if(r>l.c){r=l.c;q=new V0.Av(l);}}}}T0.fi(a.d,n,q);l=q;k=1;do{s=9999;for(o=0;o<l.e.length;o++){u=b[l.e[o]];u==k?V0.wv(l,o):u>k&&u<s&&(s=u);}k=s;}while(s!=9999)}};V0.Du=function Du(a,b){a.g=new T0.j$(b);};V0.Eu=function Eu(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;e=OL(N0.fN,O2,5,S0.Bm(a.f,c)+1,15,1);g=OL(N0.hN,K1,5,S0.Bm(a.f,c)+1,15,1);h=OL(N0.hN,K1,5,S0.Bm(a.f,c)+1,15,1);q=V0.sv(b,c);f=0;for(j=0;j<S0.Bm(a.f,c);j++){g[f]=S0.Pm(a.f,c,j);h[f]=S0.Rm(a.f,c,j);l=V0.sv(b,g[f]);l!=-1&&(e[f++]=V0.dv(b.a[q],b.b[q],b.a[l],b.b[l]));}if(f==1)return e[0]+h2;for(k=f-1;k>0;k--){for(m=0;m<k;m++){if(e[m]>e[m+1]){r=e[m];e[m]=e[m+1];e[m+1]=r;s=g[m];g[m]=g[m+1];g[m+1]=s;t=h[m];h[m]=h[m+1];h[m+1]=t;}}}e[f]=e[0]+g2;g[f]=g[0];h[f]=h[0];n=-100;o=0;for(i=0;i<f;i++){d=e[i+1]-e[i];if(f>2&&S0.Sn(a.f,h[i])&&S0.Sn(a.f,h[i+1])){p=V0.nu(a,g[i],c,g[i+1]);p!=0&&(d-=100-p);}if(n<d){n=d;o=i;}}return (e[o]+e[o+1])/2};V0.Fu=function Fu(a,b,c,d){var e;e=$wnd.Math.min(T0.$h(a.d,b,0),T0.$h(a.d,c,0));T0.Sh(a.d,e,d);T0.di(a.d,b);T0.di(a.d,c);};V0.Gu=function Gu(){V0.Hu.call(this,2);};V0.Hu=function Hu(a){this.e=a;(a&1)==0&&!V0.Tt&&!V0.Tt&&(V0.Tt=new V0.iv);};V0.Iu=function Iu(a,b){var c,d,e,f,g;g=0;c=0;for(d=0;d<b;d++){g+=a[d].b*$wnd.Math.sin(a[d].a);c+=a[d].b*$wnd.Math.cos(a[d].a);}if(c==0)f=g>0?i2:P2;else {f=$wnd.Math.atan(g/c);c<0&&(f+=h2);}e=$wnd.Math.sqrt(g*g+c*c)/b;return new V0.bv(f,e)};sR(69,1,{},V0.Gu,V0.Hu);_.a=false;_.e=0;N0.gO=LS(69);V0.Ju=function Ju(a,b){var c,d;for(d=new T0.iZ(a);d.a<d.c.a.length;){c=T0.hZ(d);if(V0.lv(c,b))return false}return R0.e0(a.a,b),true};V0.Ku=function Ku(a,b){return V0.Ju(a,b)};V0.Lu=function Lu(){T0.ki.call(this);};sR(152,19,l3,V0.Lu);_.add=function Mu(a){return V0.Ku(this,a)};N0.cO=LS(152);V0.Nu=function Nu(a,b){var c,d;c=$wnd.Math.abs(a.b);d=$wnd.Math.abs(b.b);return c<d?-1:c==d?0:1};V0.Ou=function Ou(){};sR(153,1,{},V0.Ou);_.pb=function Pu(a,b){return V0.Nu(a,b)};_.ib=function Qu(a){return this===a};N0.dO=LS(153);V0.Ru=function Ru(a){var b,c;b=a.c.e.length;c=a.c.e.length;return b<c?1:b==c?0:-1};V0.Su=function Su(){};sR(154,1,{},V0.Su);_.pb=function Tu(a,b){var c;return V0.Ru((c=a,c))};_.ib=function Uu(a){return this===a};N0.eO=LS(154);V0.Vu=function Vu(a){var b,c;b=a.c.e.length;c=a.c.e.length;return b<c?-1:b==c?0:1};V0.Wu=function Wu(){};sR(155,1,{},V0.Wu);_.pb=function Xu(a,b){var c;return V0.Vu((c=a,c))};_.ib=function Yu(a){return this===a};N0.fO=LS(155);V0.Zu=function Zu(a,b,c){a.c[0]+=V0.ov(a.b[0],b);a.d[0]+=V0.pv(a.b[0],b);a.c[1]+=V0.ov(a.b[1],c);a.d[1]+=V0.pv(a.b[1],c);++a.a[0];++a.a[1];};V0.$u=function $u(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;d=OL(N0.fN,O2,5,2,15,1);for(j=0;j<2;j++){a.c[j]/=a.a[j];a.d[j]/=a.a[j];d[j]=V0.jv(a.b[j],a.c[j],a.d[j],a.b[1-j].e.length,b);}V0.xv(a.b[0],a.c[0],a.d[0],i2-d[0]);V0.xv(a.b[1],a.c[1],a.d[1],4.71238898038469-d[1]);w=q3;v=-1.7976931348623157E308;g=a.d[0]-a.d[1];for(k=0;k<a.b[1].b.length;k++){a.b[1].b[k]+=g;w>a.b[1].b[k]&&(w=a.b[1].b[k]);v<a.b[1].b[k]&&(v=a.b[1].b[k]);}t=v-w+2*b;e=cN($wnd.Math.ceil(t));w+=(t-e)/2-b;r=OL(N0.fN,O2,5,e,15,1);for(l=0;l<e;l++)r[l]=a.c[1]+b;for(m=0;m<a.b[1].b.length;m++){u=a.b[1].b[m]-w;s=cN(u-b);h=$wnd.Math.min(cN(u+b),e-1);for(q=s;q<=h;q++){r[q]>a.b[1].a[m]&&(r[q]=a.b[1].a[m]);}}for(n=0;n<e;n++)r[n]-=b;f=a.c[0]-a.c[1];for(o=0;o<a.b[0].a.length;o++){p=cN(a.b[0].b[o]-w);p>=0&&p<r.length&&f<a.b[0].a[o]-r[p]&&(f=a.b[0].a[o]-r[p]);}for(i=0;i<a.b[1].a.length;i++)a.b[1].a[i]+=f;if(c){V0.xv(a.b[0],a.c[0],a.d[0],d[0]-i2);V0.xv(a.b[1],a.c[0],a.d[0],d[0]-i2);}};V0._u=function _u(a,b){var c,d;this.b=OL(N0.mO,z1,29,2,0,1);this.b[0]=a;this.b[1]=b;this.c=OL(N0.fN,O2,5,2,15,1);this.d=OL(N0.fN,O2,5,2,15,1);this.a=OL(N0.hN,K1,5,2,15,1);for(c=0;c<2;c++){for(d=0;d<this.b[c].e.length;d++){this.c[c]+=V0.ov(this.b[c],d);this.d[c]+=V0.pv(this.b[c],d);}this.a[c]=this.b[c].e.length;}};V0.av=function av(a,b,c,d){this.b=OL(N0.mO,z1,29,2,0,1);this.b[0]=a;this.b[1]=b;this.c=OL(N0.fN,O2,5,2,15,1);this.d=OL(N0.fN,O2,5,2,15,1);this.c[0]=V0.ov(this.b[0],c);this.d[0]=V0.pv(this.b[0],c);this.c[1]=V0.ov(this.b[1],d);this.d[1]=V0.pv(this.b[1],d);this.a=OL(N0.hN,K1,5,2,15,1);this.a[0]=1;this.a[1]=1;};sR(55,1,{55:1},V0._u,V0.av);N0.hO=LS(55);V0.bv=function bv(a,b){this.a=a;this.b=b;};V0.cv=function cv(a,b,c,d){var e,f;this.a=V0.dv(a,b,c,d);e=c-a;f=d-b;this.b=$wnd.Math.sqrt(e*e+f*f);};V0.dv=function dv(a,b,c,d){var e,f,g;f=c-a;g=d-b;if(g!=0){e=$wnd.Math.atan(f/g);g<0&&(f<0?(e-=h2):(e+=h2));}else e=f>0?i2:P2;return e};sR(22,1,{22:1},V0.bv,V0.cv);_.a=0;_.b=0;N0.iO=LS(22);V0.ev=function ev(a){this.a=OL(N0.hN,K1,5,a,15,1);this.b=OL(N0.hN,K1,5,a,15,1);};sR(128,1,{},V0.ev);N0.jO=LS(128);V0.fv=function fv(a,b,c){this.c=a;this.a=b;this.b=c;};sR(101,1,{101:1},V0.fv);_.a=0;_.b=0;N0.kO=LS(101);V0.hv=function hv(){V0.hv=uR;V0.gv=WL(IL(N0.CP,1),B1,2,6,['gkvt@@@@LddTTTrbTRTRTRRRRRRRRRRRRRrVRrIh\\IAaQxlY@gRHdJCJcRXlv_CfJx|A\\hRHejiLaQjTje^kSjtFcIhvXmVKMjt{lN{Kavy\\^wGjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjh@@vo@HBC@PhLN@bPhtFKCcpDbILaRhtzCIbsX\\nOO`JDbqDjSKdJeJmQjtz}Ahr[LVkMnpz\\nwGj{PBhBdBlBBBjBfBnBaBiBeBmBcBkBgBoB`bhbdblbbbjbfbnbabibebmbcbkbgbob`RhRdRlRbRjRfRnRaRiReRmRcRkRgRoR`rhrdrlrbrjrfrnrarirermrcrkrgror`JhJdJlJbJjJfJnJaJiJeJmJcJkJgJoJ`jhjdjljbjjjfjnjajijej` !BnkjyVwsVr|iQn|Q|goTZWPIJwbudnRkVYBez]siZymNJZUqNFBqZWxS~iCXVU]SeRjwrtSPAjkvXLpBAZauDPzq]PfMlecrMnkv|@\\SFD`m|mWiEoCXp`SIe_J[l|[XCbloTV`[Gc@FJGopyyoOlFQfUy^w\\Bgz|','gcrt@@@@LdbbbbTRbRbRbRRRRRRRRRRRRVRrVQIA`HtRGAaIxZAHfShTjCIbqylQGKgqdBaXeQJeruBiPitZmFoPZLFSYbvZlVGMnsZ]vWSmr{]UUUUUUUUUUUUUUUUUUUUUUUUUUUUUT@@[G`DAA`HTFG@QHTZCEaqxBQDfPiTZ]AdqYlNWGgpEBQXbUIerEReVhuZ]^`tYMfKUfwX]NW[jkPBhBdBlBbBjBfBnBaBiBeBmBcBkBgBoB`bhbdblbbbjbfbnbabibebmbcbkbgbob`RhRdRlRbRjRfRnRaRiReRmRcRkRgRoR`rhrdrlrbrjrfrnrarirermrcrkrgror`JhJdJlJbJjJfJnJaJiJeJmJcJkJgJoJ`jhjdjljbjjjfjnjajij` !B^cR]`]Fm]QkfljE\\p\x7FUVfgOmFXsQe_gXPyXis_wF|vUUX_XbxpzU]HUFgYViwFo~@uemc@}~T\x7FIEPioYVwr]JnM~[ZEC\\g}~o_pUfdo~irsklTLiyVJshnw^iVAsZ`_~}PYkckURH{FYMImFaRaccUlCZSHMfP','dml@@Dje^VGiyZjjjh@vtHSBinFU@ !BPTCTy[skMzUPF`AJbBixEZHS[Il','dml@@DjYVvGiyZjjjh@vtHSBinFU@ !BwLo~BJ~UquhXBinZ\\ykA@F_eMrT','dml@@LdfbbQX^fUZjjj`C[PaLJfxYT !BzxIHVc{OiJVRpprePho~]}y\x7FwLl','deL@@DjUYkfEijjjj@MeBDpj[ad !B\x7FaA\x7FMVr[AvkKzm_jKvVbD{sk','dil@@LddTQRl[NX^Fjjjj@MiBDpj[a@ !BPfL@\x7Fox@M~T@\x7Fox@\x7F`C~@@','daL@@DjYtKJqjynjjjj@MaBDpj[` !B`bL@_gx@@Gy~@Gx@_`@']);};V0.iv=function iv(){V0.hv();var a,b,c,d,e,f,g;T0.ki.call(this);f=new S0.Fr;for(c=V0.gv,d=0,e=c.length;d<e;++d){b=c[d];a=S0.vo(new S0.Ao,b);S0.yr(f,a);g=new V0.Bv(a);g.a=S0.Qj(g.b);R0.e0(this.a,g);}};sR(169,19,l3,V0.iv);N0.lO=LS(169);V0.jv=function jv(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;if(a.e.length==1)return 0;C=e+$wnd.Math.sqrt(d);k=OL(N0.fN,O2,5,36,15,1);for(o=0;o<a.e.length;o++){f=V0.dv(b,c,a.a[o],a.b[o]);h=V0.kv(gR(PQ($wnd.Math.round(f*36/g2))));l=b-a.a[o];m=c-a.b[o];F=l*l+m*m;k[h]<F&&(k[h]=F);}v=-1;u=-1;for(p=0;p<36;p++){k[p]=$wnd.Math.sqrt(k[p]);if(v<k[p]){v=k[p];u=p;}}D=u-18<0?u-18+36:u-18>=36?u-18-36:u-18;for(q=0;q<=18;q++){k[D+q<0?D+q+36:D+q>=36?D+q-36:D+q]+=0.01*q;k[D-q<0?D-q+36:D-q>=36?D-q-36:D-q]+=0.01*q;}G=OL(N0.fN,O2,5,9,15,1);i=OL(N0.fN,O2,5,9,15,1);for(r=1;r<9;r++){G[r]=$wnd.Math.sin(r*g4);i[r]=$wnd.Math.cos(r*g4);}A=q3;w=-1;for(g=0;g<36;g++){if(k[g]>=A)continue;t=k[g];for(n=1;n<9;n++){for(s=-1;s<=1;s+=2){B=g+s*n<0?g+s*n+36:g+s*n>=36?g+s*n-36:g+s*n;if(k[B]*i[n]<=t)continue;j=i[n]*$wnd.Math.min(k[B],C/G[n]);if(t<j){t=j;if(A<=t)break}}if(A<=t)break}if(A>t){A=t;w=g;}}return g2*w/36};V0.kv=function kv(a){return a<0?a+36:a>=36?a-36:a};V0.lv=function lv(a,b){var c,d,e;if(b.e.length!=a.e.length)return false;d=V0.tv(a);e=V0.tv(b);for(c=0;c<d.length;c++)if(d[c]!=e[c])return false;return true};V0.mv=function mv(a,b,c){var d,e,f;for(f=0;f<a.e.length;f++){e=$wnd.Math.sqrt((a.a[f]-b)*(a.a[f]-b)+(a.b[f]-c)*(a.b[f]-c));d=0-V0.dv(b,c,a.a[f],a.b[f]);a.a[f]=b+e*$wnd.Math.sin(d);a.b[f]=c+e*$wnd.Math.cos(d);}};V0.nv=function nv(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;a.d==null&&(a.d=OL(N0.hN,a3,6,a.j.p,0,2));if(a.d[b]==null){n=OL(N0.hN,K1,5,a.e.length,15,1);t=OL(N0.xQ,c2,5,a.j.o,16,1);e=S0.Uj(a.j,0,b);f=S0.Uj(a.j,1,b);n[0]=e;t[e]=true;k=0;o=0;while(k<=o){for(q=0;q<S0.Bm(a.j,n[k]);q++){g=S0.Pm(a.j,n[k],q);if(!t[g]&&g!=f){n[++o]=g;t[g]=true;}}if(k==o)break;++k;}m=o+1>(a.e.length/2|0);if(a.i){i=false;h=false;for(q=0;q<a.e.length;q++){d=a.e[q];S0.Dk(a.j,d)&&d!=e&&d!=f&&(t[a.e[q]]?(i=true):(h=true));}i!=h&&(m=i);}j=2;a.d[b]=OL(N0.hN,K1,5,m?a.e.length-o:o+2,15,1);for(r=0;r<a.e.length;r++){a.e[r]==e?(a.d[b][m?0:1]=r):a.e[r]==f?(a.d[b][m?1:0]=r):m^t[a.e[r]]&&(a.d[b][j++]=r);}}v=a.a[a.d[b][0]];w=a.b[a.d[b][0]];u=V0.dv(v,w,a.a[a.d[b][1]],a.b[a.d[b][1]]);for(p=2;p<a.d[b].length;p++){s=a.d[b][p];l=$wnd.Math.sqrt((a.a[s]-v)*(a.a[s]-v)+(a.b[s]-w)*(a.b[s]-w));c=2*u-V0.dv(v,w,a.a[s],a.b[s]);a.a[s]=v+l*$wnd.Math.sin(c);a.b[s]=w+l*$wnd.Math.cos(c);}};V0.ov=function ov(a,b){return a.a[b]};V0.pv=function pv(a,b){return a.b[b]};V0.qv=function qv(a){var b,c,d,e,f,g,h,i;a.c=0;c=new T0.ki;for(e=1;e<a.e.length;e++){for(f=0;f<e;f++){h=$wnd.Math.abs(a.a[e]-a.a[f]);i=$wnd.Math.abs(a.b[e]-a.b[f]);d=$wnd.Math.sqrt(h*h+i*i);if(d<0.8){b=OL(N0.hN,K1,5,2,15,1);b[0]=a.e[e];b[1]=a.e[f];R0.e0(c.a,b);}g=1-$wnd.Math.min(d,1);a.c+=g*g;}}return c};V0.rv=function rv(a,b){return a.e[b]};V0.sv=function sv(a,b){var c;for(c=0;c<a.e.length;c++)if(b==a.e[c])return c;return -1};V0.tv=function tv(a){if(a.n==null){a.n=T0.oZ(a.e,a.e.length);R0.g0(a.n,R0.I0(vR(T0.MZ.prototype.ac,T0.MZ,[])));}return a.n};V0.uv=function uv(a,b){var c;for(c=0;c<a.e.length;c++)if(b==a.e[c])return true;return false};V0.vv=function vv(a){var b,c,d,e,f,g;d=0;for(f=0;f<a.e.length;f++){b=a.e[f];c=S0.Bm(a.j,b);for(g=0;g<c;g++)S0.Pm(a.j,b,g)>b&&++d;}a.f=OL(N0.hN,K1,5,d,15,1);a.g=OL(N0.hN,K1,5,a.j.o,15,1);d=0;for(e=0;e<a.e.length;e++){b=a.e[e];c=S0.Bm(a.j,b);a.g[b]=e;for(g=0;g<c;g++)S0.Pm(a.j,b,g)>b&&(a.f[d++]=S0.Rm(a.j,b,g));}};V0.wv=function wv(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;o=a.a[b];s=a.b[b];f=OL(N0.iO,z1,22,4,0,1);k=0;for(l=0;l<a.f.length;l++){if(k>=4)break;if(b==a.g[S0.Uj(a.j,0,a.f[l])]||b==a.g[S0.Uj(a.j,1,a.f[l])])continue;p=a.a[a.g[S0.Uj(a.j,0,a.f[l])]];t=a.b[a.g[S0.Uj(a.j,0,a.f[l])]];q=a.a[a.g[S0.Uj(a.j,1,a.f[l])]];u=a.b[a.g[S0.Uj(a.j,1,a.f[l])]];h=$wnd.Math.sqrt((p-o)*(p-o)+(t-s)*(t-s));i=$wnd.Math.sqrt((q-o)*(q-o)+(u-s)*(u-s));e=$wnd.Math.sqrt((q-p)*(q-p)+(u-t)*(u-t));if(h<e&&i<e){if(p==q){g=$wnd.Math.abs(o-p);g<0.5&&(f[k++]=new V0.bv(V0.dv(p,s,o,s),(0.5-g)/2));}else if(t==u){g=$wnd.Math.abs(s-t);g<0.5&&(f[k++]=new V0.bv(V0.dv(o,t,o,s),(0.5-g)/2));}else {m=(u-t)/(q-p);n=-1/m;c=t-m*p;d=s-n*o;r=(d-c)/(m-n);v=m*r+c;g=$wnd.Math.sqrt((r-o)*(r-o)+(v-s)*(v-s));g<0.5&&(f[k++]=new V0.bv(V0.dv(r,v,o,s),(0.5-g)/2));}continue}if(h<0.5){f[k++]=new V0.bv(V0.dv(p,t,o,s),(0.5-h)/2);continue}if(i<0.5){f[k++]=new V0.bv(V0.dv(q,u,o,s),(0.5-i)/2);continue}}if(k>0){j=V0.Iu(f,k);a.a[b]+=j.b*$wnd.Math.sin(j.a);a.b[b]+=j.b*$wnd.Math.cos(j.a);}};V0.xv=function xv(a,b,c,d){var e,f,g;for(g=0;g<a.e.length;g++){f=$wnd.Math.sqrt((a.a[g]-b)*(a.a[g]-b)+(a.b[g]-c)*(a.b[g]-c));e=V0.dv(b,c,a.a[g],a.b[g])+d;a.a[g]=b+f*$wnd.Math.sin(e);a.b[g]=c+f*$wnd.Math.cos(e);}};V0.yv=function yv(a,b,c){var d;for(d=0;d<a.e.length;d++){a.a[d]+=b;a.b[d]+=c;}};V0.zv=function zv(a,b,c){this.j=a;this.i=c;this.e=OL(N0.hN,K1,5,b,15,1);this.k=OL(N0.hN,K1,5,b,15,1);this.a=OL(N0.fN,O2,5,b,15,1);this.b=OL(N0.fN,O2,5,b,15,1);};V0.Av=function Av(a){var b,c;this.j=a.j;this.i=a.i;this.e=OL(N0.hN,K1,5,a.e.length,15,1);this.k=OL(N0.hN,K1,5,a.e.length,15,1);this.a=OL(N0.fN,O2,5,a.e.length,15,1);this.b=OL(N0.fN,O2,5,a.e.length,15,1);for(c=0;c<a.e.length;c++){this.e[c]=a.e[c];this.k[c]=a.k[c];this.a[c]=a.a[c];this.b[c]=a.b[c];}if(a.f!=null){this.f=OL(N0.hN,K1,5,a.f.length,15,1);for(b=0;b<a.f.length;b++)this.f[b]=a.f[b];}if(a.g!=null){this.g=OL(N0.hN,K1,5,a.g.length,15,1);for(b=0;b<a.g.length;b++)this.g[b]=a.g[b];}};sR(29,1,{29:1},V0.zv,V0.Av);_.c=0;_.i=false;N0.mO=LS(29);V0.Bv=function Bv(a){this.b=a;this.c=false;};sR(127,1,{127:1},V0.Bv);_.a=0;_.c=false;N0.nO=LS(127);sR(182,1,{});N0.oO=LS(182);W0.Cv=function Cv(a){};W0.Dv=function Dv(a){var b,c,d;b=0;c=0;for(d=0;d<a.g.a.length+a.f.a.length;d++){b+=S0.Qj(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length))*(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length)).p;c+=(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length)).p;}if(c!=0)return c/b;return 1};W0.Ev=function Ev(b,c){var d,e,f,g;W0.Cv(this);e=new X0.vw(b);try{g=new h1.WR;O0.zU(g.a,'$RXN\n');O0.zU(g.a,c!=null?c:'');O0.zU(g.a,'\n\n');h1.VR(g,h4+X0.Ew(b,27));O0.zU(g.a,o1);h1.VR(g,'  '+e.g.a.length+'  '+e.f.a.length+o1);f=W0.Dv(e);for(d=0;d<e.g.a.length+e.f.a.length;d++){O0.zU(g.a,'$MOL\n');S0.yp(new S0.Bp(d<e.g.a.length?T0.Yh(e.g,d):T0.Yh(e.f,d-e.g.a.length),f,null),g);}this.a=g.a;}catch(a){a=BQ(a);if(VM(a,13)){O0.PU();}else throw CQ(a)}};sR(139,1,{},W0.Ev);_.a=null;N0.pO=LS(139);W0.Fv=function Fv(a){var b,c;b=new X0.uw;c=new h1.QR(new h1.UR(a));W0.Gv(b,c);return b};W0.Gv=function Gv(a,b){var c,d;d=h1.PR(b);c=false;if(d==null||!O0.eU(R0.I0(d).substr(0,4),'$RXN')){throw CQ(new O0.FJ("'$RXN' tag not found"))}O0.eU(d,'$RXN V3000')?(c=W0.Iv(a,b,false)):(c=W0.Hv(a,b,false));return c};
W0.Hv=function Hv(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;j=O0.rU(h1.PR(b));R0.I0(j).length!=0&&(a.e=j);h1.PR(b);d=h1.PR(b);if(!c&&O0.eU(R0.I0(d).substr(0,13),h4)){e=(R0.F0(13,R0.I0(d).length+1),R0.I0(d).substr(13));if(X0.Dw(e,a))return true}o=h1.PR(b);n=O0.cT(O0.rU((R0.E0(0,3,R0.I0(o).length),R0.I0(o).substr(0,3))));l=O0.cT(O0.rU((R0.E0(3,6,R0.I0(o).length),R0.I0(o).substr(3,3))));h=new S0.Zp;for(g=0;g<n;g++){o=h1.PR(b);if(o==null||!O0.eU(R0.I0(o).substr(0,4),'$MOL')){throw CQ(new O0.FJ(i4))}m=new S0.at;i=new O0.BU;do{o=h1.PR(b);i.a+=''+o;i.a+=o1;}while(o!=null&&!O0.eU(R0.I0(o).substr(0,6),J3));if(o==null){throw CQ(new O0.FJ(j4))}S0.Vp(h,m,new h1.QR(new h1.UR(i.a)));T0.Th(a.g,m);a.d=-1;}for(f=0;f<l;f++){o=h1.PR(b);if(o==null||!O0.eU(R0.I0(o).substr(0,4),'$MOL')){throw CQ(new O0.FJ(i4))}k=new S0.at;i=new O0.BU;do{o=h1.PR(b);i.a+=''+o;i.a+=o1;}while(o!=null&&!O0.eU(R0.I0(o).substr(0,6),J3));if(o==null){throw CQ(new O0.FJ(j4))}S0.Vp(h,k,new h1.QR(new h1.UR(i.a)));T0.Th(a.f,k);a.d=-1;}return true};W0.Iv=function Iv(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;j=O0.rU(h1.PR(b));R0.I0(j).length!=0&&(a.e=j);h1.PR(b);d=h1.PR(b);if(!c&&O0.eU(R0.I0(d).substr(0,13),h4)){e=(R0.F0(13,R0.I0(d).length+1),R0.I0(d).substr(13));if(X0.Dw(e,a))return true}o=h1.PR(b);g=new S0.Zp;if(o!=null&&O0.eU(R0.I0(o).substr(0,13),'M  V30 COUNTS')){n=O0.rU((R0.F0(13,R0.I0(o).length+1),R0.I0(o).substr(13)));k=O0.oU(n);m=O0.cT(k[0]);l=O0.cT(k[1]);if(m>0){o=h1.PR(b);if(O0.eU('M  V30 BEGIN REACTANT',o)){for(f=0;f<m;f++){h=new S0.at;i=new O0.BU;i.a+=k4;do{o=h1.PR(b);i.a+=''+o;i.a+=o1;}while(o!=null&&!O0.eU(R0.I0(o).substr(0,15),l4));S0.Vp(g,h,new h1.QR(new h1.UR(i.a)));T0.Th(a.g,h);a.d=-1;}}o=h1.PR(b);}if(l>0){o=h1.PR(b);if(O0.eU('M  V30 BEGIN PRODUCT',o)){for(f=0;f<l;f++){h=new S0.at;i=new O0.BU;i.a+=k4;do{o=h1.PR(b);i.a+=''+o;i.a+=o1;}while(o!=null&&!O0.eU(R0.I0(o).substr(0,15),l4));S0.Vp(g,h,new h1.QR(new h1.UR(i.a)));T0.Th(a.f,h);a.d=-1;}o=h1.PR(b);}}return true}return false};W0.Jv=function Jv(a){};W0.Kv=function Kv(a){var b,c,d;b=0;c=0;for(d=0;d<a.g.a.length+a.f.a.length;d++){b+=S0.Qj(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length))*(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length)).p;c+=(d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length)).p;}if(c!=0)return c/b;return 1};W0.Lv=function Lv(b,c){var d,e,f,g,h,i;W0.Jv(this);g=new X0.vw(b);try{i=new h1.WR;O0.zU(i.a,'$RXN V3000\n');O0.zU(i.a,c!=null?c:'');O0.zU(i.a,'\n\n');h1.VR(i,h4+X0.Ew(b,11));O0.zU(i.a,o1);f=g.g.a.length;e=g.f.a.length;O0.zU(i.a,(R0.E0(f,f+e,R0.I0(M3+f+' '+e+o1).length),R0.I0(M3+f+' '+e+o1).substr(f,f+e-f)));h=W0.Kv(g);if(f>0){O0.zU(i.a,'M  V30 BEGIN REACTANT\n');for(d=0;d<g.g.a.length;d++){h1.VR(i,S0.hq(T0.Yh(g.g,d),h));}O0.zU(i.a,'M  V30 END REACTANT\n');}if(e>0){O0.zU(i.a,'M  V30 BEGIN PRODUCT\n');for(d=0;d<g.f.a.length;d++){h1.VR(i,S0.hq(T0.Yh(g.f,d),h));}O0.zU(i.a,'M  V30 END PRODUCT\n');}O0.zU(i.a,H3);this.a=i.a;}catch(a){a=BQ(a);if(VM(a,13)){O0.PU();}else throw CQ(a)}};sR(140,1,{},W0.Lv);_.a=null;N0.qO=LS(140);W0.Nv=function Nv(){W0.Nv=uR;W0.Mv=WL(IL(N0.CP,1),B1,2,6,['Idorsia No','Actelion No','ID','IDNUMBER','COMPOUND_ID','NAME','COMPND']);};W0.Ov=function Ov(b){var c,d,e,f,g,h,i,j,k;if(!b.g)return false;O0._R(b.f,0);O0._R(b.a,0);b.e=null;k=false;d=-1;e=null;b.b=b.c==null?null:OL(N0.CP,B1,2,b.c.length,6,1);b.d=-1;do{try{j=h1.PR(b.g);if(j==null){O0._R(b.f,0);return false}}catch(a){a=BQ(a);if(VM(a,76)){O0._R(b.f,0);return false}else throw CQ(a)}if(k){O0.HU(b.a,j);O0.DU(b.a,10);}else {if(O0.eU(R0.I0(j).substr(0,1),'>')){k=true;O0.HU(b.f,J3);O0.DU(b.f,10);O0.HU(b.a,j);O0.DU(b.a,10);}else {O0.HU(b.f,j);O0.DU(b.f,10);O0.eU(R0.I0(j).substr(0,6),J3)&&(k=true);continue}}if(b.c!=null){if(R0.I0(j).length==0){d=-1;}else if(d==-1){e=W0.Qv(j);if(e!=null){d=-1;for(c=0;c<b.c.length;c++){if(O0.eU(e,b.c[c])){d=c;break}}if(b.d==-1){for(g=W0.Mv,h=0,i=g.length;h<i;++h){f=g[h];if(O0.eU(e,f)){b.d=d;break}}}}}else {b.b[d]==null?(b.b[d]=j):(b.b[d]=O0.cU(O0.cU(b.b[d],o1),j));}}}while(!O0.eU(R0.I0(j).substr(0,4),K3));return true};W0.Pv=function Pv(b,c){var d,e,f,g;g=0;e=new S0.vt;while(g<c){try{f=h1.PR(b.g);}catch(a){a=BQ(a);if(VM(a,76)){break}else throw CQ(a)}if(f==null){break}O0.eU(R0.I0(f).substr(0,4),K3)&&++g;if(O0.eU(R0.I0(f).substr(0,1),'>')){d=W0.Qv(f);d!=null&&S0.ut(e,d);}}b.c=T0.ji(e.b,OL(N0.CP,B1,2,0,6,1));};W0.Qv=function Qv(a){var b,c,d,e;if(R0.I0(a).length==0||(R0.F0(0,R0.I0(a).length),R0.I0(a).charCodeAt(0)!=62))return null;d=1;e=0;b=0;while(d<R0.I0(a).length){R0.F0(d,R0.I0(a).length);if(R0.I0(a).charCodeAt(d)==60){if(e!=0)return null;e=d;}else {R0.F0(d,R0.I0(a).length);if(R0.I0(a).charCodeAt(d)==62){if(b!=0)return null;b=d;}}++d;}if(e!=0&&e<b)return R0.E0(e+1,b,R0.I0(a).length),R0.I0(a).substr(e+1,b-(e+1));d=R0.I0(a).indexOf('DT',1);if(d==-1)return null;c=d+2;while(R0.I0(a).length>c&&wS((R0.F0(c,R0.I0(a).length),R0.I0(a).charCodeAt(c))))++c;return c==d+2?null:(R0.E0(d,c,R0.I0(a).length),R0.I0(a).substr(d,c-d))};W0.Rv=function Rv(a,b){if(a.b==null)return null;return a.b[b]};W0.Sv=function Sv(a){a.c==null&&W0.Pv(a,10240);return a.c};W0.Tv=function Tv(a,b){a.c==null&&W0.Pv(a,b);return a.c};W0.Uv=function Uv(a){var b;if(a.e)return a.e;a.e=S0.Fp(new S0.Zp,(b=a.f.a,b));!!a.e&&(a.e.N==null||R0.I0(a.e.N).length==0)&&S0.Ml(a.e,a.d!=-1&&a.b!=null?a.b[a.d]:a.e?a.e.N:null);return a.e};W0.Vv=function Vv(a,b){W0.Nv();this.c=b;this.g=new h1.QR(a);this.f=new O0.LU;this.a=new O0.LU;};sR(141,182,{},W0.Vv);_.d=0;N0.rO=LS(141);X0.Wv=function Wv(a,b){T0.Th(a.a,b);};X0.Xv=function Xv(a,b,c){T0.Sh(a.a,c,b);};X0.Yv=function Yv(a,b){T0.Th(a.f,b);a.d=-1;};X0.Zv=function Zv(a,b,c){T0.Sh(a.f,c,b);a.d=-1;};X0.$v=function $v(a,b){T0.Th(a.g,b);a.d=-1;};X0._v=function _v(a,b,c){T0.Sh(a.g,c,b);a.d=-1;};X0.aw=function aw(a){R0.I0(a.g.a).length=0;R0.I0(a.f.a).length=0;R0.I0(a.a.a).length=0;a.b=null;a.d=-1;};X0.bw=function bw(a){var b,c,d;for(d=new T0.iZ(a.g);d.a<d.c.a.length;){b=T0.hZ(d);if(b.I)return true}for(c=new T0.iZ(a.f);c.a<c.c.a.length;){b=T0.hZ(c);if(b.I)return true}return false};X0.cw=function cw(a){var b,c,d,e;c=0;b=0;for(d=0;d<a.g.a.length+a.f.a.length;d++){e=d<a.g.a.length?T0.Yh(a.g,d):T0.Yh(a.f,d-a.g.a.length);if(e.p!=0){c+=e.p;b+=S0.Rj(e,e.o,e.p,(S0.Ri(),S0.Qi))*e.p;}}return c==0?(S0.Ri(),S0.Ri(),S0.Qi):b/c};X0.dw=function dw(a,b){return T0.Yh(a.a,b)};X0.ew=function ew(a){var b,c,d;if(a.d!=-1)return a.d;a.d=0;for(c=0;c<a.g.a.length+a.f.a.length;c++){d=c<a.g.a.length?T0.Yh(a.g,c):T0.Yh(a.f,c-a.g.a.length);for(b=0;b<d.o;b++){a.d<$wnd.Math.abs(d.u[b])&&(a.d=$wnd.Math.abs(d.u[b]));}}return a.d};X0.fw=function fw(a){var b,c,d,e;c=new X0.uw;if(a.g.a.length!=0){e=new S0.ct(T0.Yh(a.g,0));for(b=1;b<a.g.a.length;b++)S0.Wi(e,T0.Yh(a.g,b));T0.Th(c.g,e);c.d=-1;}if(a.f.a.length!=0){d=new S0.ct(T0.Yh(a.f,0));for(b=1;b<a.f.a.length;b++)S0.Wi(d,T0.Yh(a.f,b));T0.Th(c.f,d);c.d=-1;}return c};X0.gw=function gw(a,b){return b<a.g.a.length?T0.Yh(a.g,b):T0.Yh(a.f,b-a.g.a.length)};X0.hw=function hw(a){return a.g.a.length+a.f.a.length};X0.iw=function iw(a){return a.e==null?'':a.e};X0.jw=function jw(a,b){return T0.Yh(a.f,b)};X0.kw=function kw(a,b){return T0.Yh(a.g,b)};X0.lw=function lw(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;if(a.g.a.length==0||a.f.a.length==0)return null;m=X0.ew(a);if(m==0)return null;l=OL(N0.hN,a3,6,a.f.a.length,0,2);for(f=0;f<a.f.a.length;f++){p=T0.Yh(a.f,f);S0.Ls(p,15);l[f]=OL(N0.hN,K1,5,m+1,15,1);T0.rZ(l[f]);for(b=0;b<p.o;b++){k=$wnd.Math.abs(p.u[b]);if(k!=0&&l[f][k]!=-1)return null;l[f][k]=b;}}g=OL(N0.xQ,c2,5,m+1,16,1);for(e=0;e<a.g.a.length;e++){t=T0.Yh(a.g,e);S0.Ls(t,15);for(r=0;r<t.o;r++){k=$wnd.Math.abs(t.u[r]);if(k!=0&&!g[k]){for(h=0;h<a.f.a.length;h++){n=l[h][k];if(n!=-1){p=T0.Yh(a.f,h);if(t.g[r]!=p.g[n]){g[k]=true;break}if((t.s[r]&3)!=(p.s[n]&3)){g[k]=true;break}for(i=0;i<t.g[r];i++){c=S0.Hj(t,t.f[r][i]);if(c==0){g[k]=true;}else {s=t.i[r][i];d=false;for(j=0;j<p.g[n];j++){q=S0.Hj(p,p.f[n][j]);if(q==0){g[k]=true;break}if(q==c){d=true;o=p.i[n][j];if((s<t.e&&(S0.Eq(t.n,s)||t.F[s]==64))^(o<p.e&&(S0.Eq(p.n,o)||p.F[o]==64))||!(s<t.e&&(S0.Eq(t.n,s)||t.F[s]==64))&&(S0.ak(t,s)!=S0.ak(p,o)||(t.C[s]&3)!=(p.C[o]&3))){g[k]=true;g[c]=true;break}break}}d||(g[k]=true);}}}}}}}return g};X0.mw=function mw(a){var b,c,d,e;for(d=new T0.iZ(a.g);d.a<d.c.a.length;){b=T0.hZ(d);if(b.o!=0)return false}for(e=new T0.iZ(a.f);e.a<e.c.a.length;){b=T0.hZ(e);if(b.o!=0)return false}for(c=new T0.iZ(a.a);c.a<c.c.a.length;){b=T0.hZ(c);if(b.o!=0)return false}return true};X0.nw=function nw(a){return a.c||X0.bw(a)};X0.ow=function ow(a){var b,c,d,e,f,g,h,i,j,k,l;c=0;for(l=new T0.iZ(a.g);l.a<l.c.a.length;){j=T0.hZ(l);S0.Ls(j,1);if(j.I){for(b=0;b<j.d;b++){if(OQ(EQ(j.w[b],d2),0))++c;else if($wnd.Math.abs(j.u[b])!=0)return false}}else {c+=j.d;}}for(i=new T0.iZ(a.f);i.a<i.c.a.length;){g=T0.hZ(i);S0.Ls(g,1);if(g.I){for(b=0;b<g.d;b++){if(OQ(EQ(g.w[b],d2),0))--c;else if($wnd.Math.abs(g.u[b])!=0)return false}}else {c-=g.d;}}if(c!=0)return false;f=X0.ew(a);d=OL(N0.xQ,c2,5,f+1,16,1);for(k=new T0.iZ(a.g);k.a<k.c.a.length;){j=T0.hZ(k);for(b=0;b<j.d;b++){if(!j.I||OQ(EQ(j.w[b],d2),0)){e=$wnd.Math.abs(j.u[b]);if(d[e])return false;d[e]=true;}}}for(h=new T0.iZ(a.f);h.a<h.c.a.length;){g=T0.hZ(h);S0.Ls(g,1);for(b=0;b<g.d;b++){if(!g.I||OQ(EQ(g.w[b],d2),0)){e=$wnd.Math.abs(g.u[b]);if(e>=f||!d[e])return false;d[e]=false;}}}return true};X0.pw=function pw(a){var b,c,d,e;if(a.g.a.length+a.f.a.length<=1)return false;b=X0.cw(a);e=OL(N0.wO,z1,31,a.g.a.length+a.f.a.length,0,1);for(c=0;c<a.g.a.length+a.f.a.length;c++){e[c]=S0.fk(c<a.g.a.length?T0.Yh(a.g,c):T0.Yh(a.f,c-a.g.a.length),null);if(e[c]){for(d=0;d<c;d++){if(e[d]){if(e[c].c+e[c].b>=e[d].c&&e[c].c<=e[d].c+e[d].b)return true;if(e[c].d+e[c].a>=e[d].d&&e[c].d<=e[d].d+e[d].a)return true}}if(c!=0&&!!e[c-1]){if(e[c].c-e[c-1].c-e[c].b>5*b)return true;if(e[c].d-e[c-1].d-e[c].a>5*b)return true}}}return false};X0.qw=function qw(a,b){a.b=b;};X0.rw=function rw(a,b){var c,d,e;a.c=b;for(e=new T0.iZ(a.g);e.a<e.c.a.length;){c=T0.hZ(e);S0.Gl(c,b);}for(d=new T0.iZ(a.f);d.a<d.c.a.length;){c=T0.hZ(d);S0.Gl(c,b);}};X0.sw=function sw(a,b){a.e=b;};X0.tw=function tw(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;l=X0.ew(a);k=OL(N0.xQ,c2,5,l+1,16,1);for(c=0;c<a.g.a.length;c++){o=T0.Yh(a.g,c);for(g=0;g<o.o;g++){i=$wnd.Math.abs(o.u[g]);if(i!=0){if(k[i])throw CQ(new O0.FJ('Duplicate mapping no in reactants'));k[i]=true;}}}j=OL(N0.xQ,c2,5,l+1,16,1);for(d=0;d<a.f.a.length;d++){n=T0.Yh(a.f,d);for(g=0;g<n.o;g++){i=$wnd.Math.abs(n.u[g]);if(i!=0){if(j[i])throw CQ(new O0.FJ('Duplicate mapping no in products'));j[i]=true;}}}m=OL(N0.hN,K1,5,l+1,15,1);h=0;for(e=1;e<=l;e++)k[e]&&j[e]&&(m[e]=++h);if(h!=l){for(f=0;f<a.g.a.length;f++){o=T0.Yh(a.g,f);for(g=0;g<o.o;g++)S0.jl(o,g,m[$wnd.Math.abs(o.u[g])],o.u[g]<0);}for(b=0;b<a.f.a.length;b++){n=T0.Yh(a.f,b);for(g=0;g<n.o;g++)S0.jl(n,g,m[$wnd.Math.abs(n.u[g])],n.u[g]<0);}}};X0.uw=function uw(){this.g=new T0.ki;this.f=new T0.ki;this.a=new T0.ki;this.d=-1;this.c=false;};X0.vw=function vw(a){var b,c,d,e,f,g;X0.uw.call(this);g=!a?0:!a.g?0:a.g.a.length;f=!a?0:!a.f?0:a.f.a.length;b=!a?0:!a.a?0:a.a.a.length;for(d=0;d<g;d++)T0.Th(this.g,new S0.ct(T0.Yh(a.g,d)));for(e=0;e<f;e++)T0.Th(this.f,new S0.ct(T0.Yh(a.f,e)));for(c=0;c<b;c++)T0.Th(this.a,new S0.ct(T0.Yh(a.a,c)));this.b=new S0.Ei(a.b);a.e!=null&&(this.e=a.e);this.c=a.c||X0.bw(a);};X0.ww=function ww(a,b){var c,d;X0.uw.call(this);for(d=0;d<b;d++)T0.Th(this.g,a[d]);for(c=b;c<a.length;c++)T0.Th(this.f,a[c]);this.c=X0.bw(this);};sR(44,1,c3,X0.uw,X0.vw,X0.ww);_.c=false;_.d=0;N0.tO=LS(44);X0.xw=function xw(){this.e=OL(N0.uO,z1,35,2,0,1);this.e[0]=new Z0.Kw;this.e[1]=new Z0.Kw;};X0.yw=function yw(b){var c,d,e,f;X0.xw.call(this);c=0;while(c!=-1){d=R0.I0(b).indexOf('="',c);if(d==-1)break;e=(R0.E0(c+1,d,R0.I0(b).length),R0.I0(b).substr(c+1,d-(c+1)));c=R0.I0(b).indexOf('"',d+2);f=c==-1?(R0.F0(d+1,R0.I0(b).length+1),R0.I0(b).substr(d+1)):(R0.E0(d+1,c,R0.I0(b).length),R0.I0(b).substr(d+1,c-(d+1)));if(O0.eU(e,'x1'))try{this.e[0].a=xT(f);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}else if(O0.eU(e,'y1'))try{this.e[0].b=xT(f);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}else if(O0.eU(e,'x2'))try{this.e[1].a=xT(f);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}else if(O0.eU(e,'y2'))try{this.e[1].b=xT(f);}catch(a){a=BQ(a);if(!VM(a,26))throw CQ(a)}}};sR(103,102,{102:1},X0.xw,X0.yw);_.mb=function zw(){var a;a=new X0.xw;a.e[0].a=this.e[0].a;a.e[0].b=this.e[0].b;a.e[1].a=this.e[1].a;a.e[1].b=this.e[1].b;a.d=this.d;return a};_.nb=function Aw(){var a;a=new O0.KU;O0.HU(a,' x1="'+this.e[0].a+'"');O0.HU(a,' y1="'+this.e[0].b+'"');O0.HU(a,' x2="'+this.e[1].a+'"');O0.HU(a,' y2="'+this.e[1].b+'"');return a.a};_.ob=function Bw(){return 'arrow'};N0.sO=LS(103);X0.Cw=function Cw(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;if(a==null||R0.I0(a).length==0){return null}n=false;k=0;s=0;h=0;v=O0.iU(a,tU(33));if(v==-1){return null}X0.aw(f);while(k!=-1){k>v&&(n=true);i=O0.jU(a,tU(32),k);!n&&(i>v||i==-1)&&(i=v);j=null;if(i==-1){j=(R0.F0(k,R0.I0(a).length+1),R0.I0(a).substr(k));k=-1;}else {j=(R0.E0(k,i,R0.I0(a).length),R0.I0(a).substr(k,i-k));k=i+1;}r=null;if(b!=null&&R0.I0(b).length!=0){i=O0.jU(b,tU(32),s);if(i==-1){r=(R0.F0(s,R0.I0(b).length+1),R0.I0(b).substr(s));}else {r=(R0.E0(s,i,R0.I0(b).length),R0.I0(b).substr(s,i-s));s=i+1;}}g=null;if(c!=null&&R0.I0(c).length!=0){i=O0.jU(c,tU(32),h);if(i==-1){g=(R0.F0(h,R0.I0(c).length+1),R0.I0(c).substr(h));}else {g=(R0.E0(h,i,R0.I0(c).length),R0.I0(c).substr(h,i-h));h=i+1;}}u=new S0.Eo(true);t=j==null?null:S0.xo(u,R0.n0((p=j,R0.i0(),p)),g==null?null:R0.n0((q=g,q)));r!=null&&S0.zo(u,R0.n0((o=r,R0.i0(),o)));n?(T0.Th(f.f,t),f.d=-1):(T0.Th(f.g,t),f.d=-1);}d!=null&&R0.I0(d).length!=0&&X0.qw(f,new S0.Fi(d));if(e!=null&&R0.I0(e).length!=0){u=new S0.Eo(true);l=0;m=O0.iU(e,tU(43));while(m!=-1){X0.Wv(f,S0.vo(u,(R0.E0(l,m,R0.I0(e).length),R0.I0(e).substr(l,m-l))));l=m+1;m=O0.jU(e,tU(43),l);}X0.Wv(f,S0.vo(u,(R0.F0(l,R0.I0(e).length+1),R0.I0(e).substr(l))));}return f};X0.Dw=function Dw(a,b){var c,d,e,f,g,h,i,j,k;if(a==null)return null;h=a;j=null;i=null;k=null;g=null;c=O0.iU(a,tU(35));if(c==-1){h=a;}else {h=(R0.E0(0,c,R0.I0(a).length),R0.I0(a).substr(0,c));d=O0.jU(a,tU(35),c+1);if(d==-1){j=(R0.F0(c+1,R0.I0(a).length+1),R0.I0(a).substr(c+1));}else {j=(R0.E0(c+1,d,R0.I0(a).length),R0.I0(a).substr(c+1,d-(c+1)));e=O0.jU(a,tU(35),d+1);if(e==-1){i=(R0.F0(d+1,R0.I0(a).length+1),R0.I0(a).substr(d+1));}else {i=(R0.E0(d+1,e,R0.I0(a).length),R0.I0(a).substr(d+1,e-(d+1)));f=O0.jU(a,tU(35),e+1);if(f==-1){k=(R0.F0(e+1,R0.I0(a).length+1),R0.I0(a).substr(e+1));}else {k=(R0.E0(e+1,f,R0.I0(a).length),R0.I0(a).substr(e+1,f-(e+1)));g=(R0.F0(f+1,R0.I0(a).length+1),R0.I0(a).substr(f+1));}}}}return X0.Cw(h,j,i,k,g,b)};X0.Ew=function Ew(a,b){var c,d;d=X0.Fw(a,(b&16)==0);if(d==null){return null}c=new O0.CU(d[0]);if(b!=0){c.a+='#';(b&1)!=0&&d.length>1&&d[1]!=null&&O0.zU(c,d[1]);}b&=-2;if(b!=0){c.a+='#';(b&2)!=0&&d.length>2&&d[2]!=null&&O0.zU(c,d[2]);}b&=-3;if(b!=0){c.a+='#';(b&4)!=0&&d.length>3&&d[3]!=null&&O0.zU(c,d[3]);}b&=-5;if(b!=0){c.a+='#';(b&8)!=0&&d.length>4&&d[4]!=null&&O0.zU(c,d[4]);}return c.a};X0.Fw=function Fw(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(!a||a.g.a.length==0||a.f.a.length==0){return null}j=OL(N0.CP,B1,2,a.g.a.length+a.f.a.length,6,1);n=OL(N0.CP,B1,2,a.g.a.length+a.f.a.length,6,1);e=OL(N0.CP,B1,2,a.g.a.length+a.f.a.length,6,1);for(h=0;h<a.g.a.length+a.f.a.length;h++){q=h<a.g.a.length?T0.Yh(a.g,h):T0.Yh(a.f,h-a.g.a.length);if(q.I&&h<a.g.a.length)for(c=0;c<q.o;c++)S0.nl(q,c,h3,false);d=new S0.Of(q);j[h]=S0.tf(d);if(j[h]==null){return null}n[h]=S0.sf(d);e[h]=S0.rf(d,true);}k=new O0.KU;f=new O0.KU;o=new O0.KU;for(i=0;i<a.g.a.length;i++){l=i;if(b){p='';l=-1;for(m=0;m<a.g.a.length;m++){if(O0.aU(p,j[m])<0){p=j[m];l=m;}}}if(i>0){k.a+=' ';o.a+=' ';f.a+=' ';}O0.HU(k,j[l]);O0.HU(o,n[l]);O0.HU(f,e[l]);j[l]='';}k.a+='!';o.a+=' ';f.a+=' ';for(g=a.g.a.length;g<a.g.a.length+a.f.a.length;g++){l=g;if(b){p='';l=-1;for(m=a.g.a.length;m<a.g.a.length+a.f.a.length;m++){if(O0.aU(p,j[m])<0){p=j[m];l=m;}}}if(g>a.g.a.length){k.a+=' ';o.a+=' ';f.a+=' ';}O0.HU(k,j[l]);O0.HU(o,n[l]);O0.HU(f,e[l]);j[l]='';}r=OL(N0.CP,B1,2,5,6,1);r[0]=k.a;R0.I0(o.a).length>a.g.a.length+a.f.a.length-1&&(r[1]=o.a);R0.I0(f.a).length>a.g.a.length+a.f.a.length-1&&(r[2]=f.a);!!a.b&&(r[3]=S0.Di(a.b));a.a.a.length!=0&&(r[4]=X0.Gw(a));return r};X0.Gw=function Gw(a){var b,c,d;d=new O0.KU;for(c=0;c<a.a.a.length;c++){R0.I0(d.a).length!=0&&(d.a+='+',d);b=new S0.Of(T0.Yh(a.a,c));O0.HU(d,S0.tf(b));d.a+=' ';O0.HU(d,S0.rf(b,true));}return d.a};Y0.Jw=function Jw(){Y0.Jw=uR;Y0.Hw=WL(IL(N0.CP,1),B1,2,6,['','r0','r','r3','r3-4','r3-5','r3-6','r3-7','r4','r4-5','r4-6','r4-7','r>3','r5','r5-6','r5-7','r>4','r6','r6-7','r>5','r7','r>6','r>7']);Y0.Iw=WL(IL(N0.iN,1),c3,5,14,[0,P1,B3,Q1,25769803776,60129542144,128849018880,266287972352,R1,51539607552,120259084288,257698037760,532575944704,S1,103079215104,240518168576,515396075520,T1,206158430208,481036337152,U1,412316860416,V1]);};Z0.Kw=function Kw(){};Z0.Lw=function Lw(a,b){this.a=a;this.b=b;};sR(35,1,{35:1},Z0.Kw,Z0.Lw);_.lb=function Mw(){return 'x:'+this.a+' y:'+this.b};_.a=0;_.b=0;N0.uO=LS(35);Z0.Nw=function Nw(a,b,c){if(a.a==a.b.length){a.b=T0.nZ(a.b,2*a.a);a.c=T0.nZ(a.c,2*a.a);}a.b[a.a]=b;a.c[a.a]=c;++a.a;};Z0.Ow=function Ow(a){this.b=OL(N0.fN,O2,5,a,15,1);this.c=OL(N0.fN,O2,5,a,15,1);this.a=0;};sR(132,1,{180:1},Z0.Ow);_.a=0;N0.vO=LS(132);Z0.Pw=function Pw(a,b,c){return b>=a.c&&b<=a.c+a.b&&c>=a.d&&c<=a.d+a.a};Z0.Qw=function Qw(a,b){return Z0.Pw(a,b.c,b.d)&&Z0.Pw(a,b.c+b.b,b.d+b.a)};Z0.Rw=function Rw(a,b,c,d,e){a.c=b;a.d=c;a.b=d;a.a=e;};Z0.Sw=function Sw(a,b){var c,d,e,f;e=$wnd.Math.min(a.c,b.c);f=$wnd.Math.min(a.d,b.d);d=$wnd.Math.max(a.c+a.b,b.c+b.b)-e;c=$wnd.Math.max(a.d+a.a,b.d+b.a)-f;return new Z0.Uw(e,f,d,c)};Z0.Tw=function Tw(){};Z0.Uw=function Uw(a,b,c,d){this.c=a;this.d=b;this.b=c;this.a=d;};sR(31,1,{31:1,180:1},Z0.Tw,Z0.Uw);_.lb=function Vw(){return 'x:'+this.c+' y:'+this.d+' w:'+this.b+' h:'+this.a};_.a=0;_.b=0;_.c=0;_.d=0;N0.wO=LS(31);$0.tB=function tB(){$0.tB=uR;$0.sB=(!$0.MI&&($0.MI=new $0.QI),$0.MI);$0.rB=new Z0.Tw;$0.Ax=WL(IL(N0.CP,1),B1,2,6,['?','H','He','Li','Be','B','C','N','O','F','Ne','Na','Mg','Al','Si','P','S','Cl','Ar','K','Ca','Sc','Ti','V','Cr','Mn','Fe','Co','Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd','In','Sn','Sb','Te','I','Xe','Cs','Ba','La','Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb','Lu','Hf','Ta','W','Re','Os','Ir','Pt','Au','Hg','Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac','Th','Pa','U','Np','Pu','Am','Cm','Bk','Cf','Es','Fm','Md','No','Lr','Rf','Db','Sg','Bh','Hs','Mt','Ds','Rg','Cn','Nh','Fl','Mc','Lv','Ts','Og',m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,'R4','R5','R6','R7','R8','R9','R10','R11','R12','R13','R14','R15','R16','R1','R2','R3','A','A1','A2','A3',m3,m3,'D','T','X','R','H2','H+','Nnn','HYD','Pol',m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,m3,'Ala','Arg','Asn','Asp','Cys','Gln','Glu','Gly','His','Ile','Leu','Lys','Met','Phe','Pro','Ser','Thr','Trp','Tyr','Val']);$0.qB=WL(IL(N0.wQ,1),c3,5,15,[0,1,4,7,9,11,12,14,16,19,20,23,24,27,28,31,32,35,40,39,40,45,48,51,52,55,56,59,58,63,64,69,74,75,80,79,84,85,88,89,90,93,98,0,102,103,106,107,114,115,120,121,130,127,132,133,138,139,140,141,142,0,152,153,158,159,164,165,166,169,174,175,180,181,184,187,192,193,195,197,202,205,208,209,209,210,222,223,226,227,232,231,238,237,244,243,247,247,251,252,257,258,259,262,267,268,271,270,277,276,281,281,283,285,289,289,293,294,294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,156,114,115,103,128,129,57,137,113,113,128,131,147,97,87,101,186,163,99]);$0.lz=WL(IL(N0.dN,2),p1,7,0,[null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0,2]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[1,2,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1,3,5,7]),WL(IL(N0.dN,1),d3,5,15,[0,2,4,6]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[2])]);$0.EA=WL(IL(N0.dN,2),p1,7,0,[null,WL(IL(N0.dN,1),d3,5,15,[1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),null,null,WL(IL(N0.dN,1),d3,5,15,[-3]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),null,WL(IL(N0.dN,1),d3,5,15,[-3]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3,4]),WL(IL(N0.dN,1),d3,5,15,[2,3,4,5]),WL(IL(N0.dN,1),d3,5,15,[2,3,6]),WL(IL(N0.dN,1),d3,5,15,[2,3,4,7]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[1,2]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[-3,3,5]),WL(IL(N0.dN,1),d3,5,15,[-2]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[6]),WL(IL(N0.dN,1),d3,5,15,[4,6,7]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[-3,3,5]),WL(IL(N0.dN,1),d3,5,15,[-2,4,6]),WL(IL(N0.dN,1),d3,5,15,[-1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[5]),WL(IL(N0.dN,1),d3,5,15,[6]),WL(IL(N0.dN,1),d3,5,15,[4,6,7]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[1,3]),WL(IL(N0.dN,1),d3,5,15,[1,2]),WL(IL(N0.dN,1),d3,5,15,[1,3]),WL(IL(N0.dN,1),d3,5,15,[2,4]),WL(IL(N0.dN,1),d3,5,15,[3,5]),WL(IL(N0.dN,1),d3,5,15,[-2,2,4]),WL(IL(N0.dN,1),d3,5,15,[-1,1]),null,WL(IL(N0.dN,1),d3,5,15,[1]),WL(IL(N0.dN,1),d3,5,15,[2]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[4]),WL(IL(N0.dN,1),d3,5,15,[4,5]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3,4,5,6]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3,4]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[2,3]),WL(IL(N0.dN,1),d3,5,15,[3])]);$0.kx=WL(IL(N0.CP,1),B1,2,6,[_3,a4,b4]);};$0.uB=function uB(a,b,c,d){return {x:a,y:b,width:c,height:d}};$0.vB=function vB(){$0.tB();$0.wB.call(this,32,32,null);};$0.wB=function wB(a,b,c){$0.tB();c?(this.a=c):(this.a=new S0.bt(a,b));};$0.xB=function xB(a){$0.tB();$0.wB.call(this,0,0,a);};$0._B=function _B(a,b){return {molecule:a,map:b}};$0.pC=function pC(a,b){$0.tB();var c;typeof b===m4&&(b=true);typeof b===r1?(c=$0.rC(a,b)):typeof b===t1&&(c=$0.qC(a,b));return c};$0.qC=function qC(a,b){return new $0.xB(S0.wo(new S0.Eo(false),a,b))};$0.rC=function rC(a,b){return new $0.xB(S0.vo(new S0.Eo(b),a))};$0.sC=function sC(a){$0.tB();return new $0.xB(S0.Fp(new S0.Zp,a))};$0.tC=function tC(a){$0.tB();var b,c,d;d=new S0.$p;c=(d.j=null,S0.Xp(d,new h1.QR(new h1.UR(a)))?d.j:null);b=d.f==null?S0._m(d.j):d.f;return $0._B(new $0.xB(c),b)};$0.uC=function uC(a,b){$0.tB();b=b||{};var c=!b.noCoordinates;var d=!b.noStereo;return $0.vC(a,c,d)};$0.vC=function vC(a,b,c){var d,e,f;f=new S0.us;e=new $0.vB;S0.ms(f,e.a,R0.n0((d=a,R0.i0(),d)),b,c);return e};$0.DC=function DC(a,b,c,d){$0.tB();return S0.em(a,b,c,d)};$0.EC=function EC(a,b){$0.tB();return S0.fm(a,b)};$0.bD=function bD(a,b){$0.tB();return S0.gm(a,b)};$0.FD=function FD(){$0.tB();return S0.Ri(),S0.Ri(),S0.Qi};$0.LE=function LE(a){$0.tB();return S0.hm(a)};$0.ME=function ME(a){$0.tB();return S0.im(a)};$0.hG=function hG(a){$0.tB();S0.Ri();S0.Qi=a;};sR(30,1,{30:1},$0.vB,$0.wB,$0.xB);_.addAtom=function yB(a){return S0.Ti(this.a,a)};_.addBond=function zB(a,b){return S0.Ui(this.a,a,b)};_.addFragment=function AB(a,b,c){S0.nm(this.a,a.a,b,c);};_.zb=function BB(){U0.Qt(this.a);};_.Ab=function CB(a){U0.Rt(this.a,a);};_.addImplicitHydrogens=function DB(a){a===undefined?this.zb():this.Ab(a);};_.Bb=function EB(){U0.xt();U0.yt(this.a,1);};_.Cb=function FB(a){U0.yt(this.a,a);};_.addMissingChirality=function GB(a){a===undefined?this.Bb():this.Cb(a);};_.addMolecule=function HB(a){return S0.Wi(this.a,a.a)};_.addOrChangeAtom=function IB(a,b,c,d,e,f,g){return S0.Yi(this.a,a,b,c,d,e,f,g)};_.addOrChangeBond=function JB(a,b,c){return S0.Zi(this.a,a,b,c)};_.addRing=function KB(a,b,c,d,e){return S0.$i(this.a,a,b,c,d,e)};_.addRingToAtom=function LB(a,b,c,d){return S0._i(this.a,a,b,c,d)};_.addRingToBond=function MB(a,b,c,d){return S0.aj(this.a,a,b,c,d)};_.addSubstituent=function NB(a,b){return S0.bj(this.a,a.a,b)};_.calculateTorsion=function OB(a){return S0.cj(this.a,a)};_.canonizeCharge=function PB(a){return S0.pm(this.a,a,false)};_.changeAtom=function QB(a,b,c,d,e){return S0.dj(this.a,a,b,c,d,e)};_.changeAtomCharge=function RB(a,b){return S0.ej(this.a,a,b)};_.changeBond=function SB(a,b){return S0.fj(this.a,a,b)};_.clear=function TB(){S0.gj(this.a);};_.convertStereoBondsToSingleBonds=function UB(a){S0.rm(this.a,a);};_.copyAtom=function VB(a,b,c,d){return S0.ij(this.a,a.a,b,c,d)};_.copyBond=function WB(a,b,c,d,e,f){return S0.kj(this.a,a.a,b,c,d,e,f)};_.copyMolecule=function XB(a){S0.lj(this.a,a.a);};_.copyMoleculeByAtoms=function YB(a,b,c,d){S0.sm(this.a,a.a,b,c,d);};_.copyMoleculeByBonds=function ZB(a,b,c,d){return S0.tm(this.a,a.a,b,c,d)};_.copyMoleculeProperties=function $B(a){S0.Ks(this.a,a.a);};_.deleteAtom=function aC(a){S0.nj(this.a,a);};_.deleteAtomOrBond=function bC(a,b){return S0.oj(this.a,a,b)};_.deleteAtoms=function cC(a){return S0.pj(this.a,a)};_.deleteBond=function dC(a){S0.qj(this.a,a);};_.deleteBondAndSurrounding=function eC(a){S0.rj(this.a,a);};_.deleteMarkedAtomsAndBonds=function fC(){return S0.sj(this.a)};_.deleteMolecule=function gC(){S0.gj(this.a);};_.deleteSelectedAtoms=function hC(){return S0.tj(this.a)};_.ensureHelperArrays=function iC(a){S0.Ls(this.a,a);};_.findAlleneCenterAtom=function jC(a){return S0.vm(this.a,a)};_.findAlleneEndAtom=function kC(a,b){return S0.wm(this.a,a,b)};_.findAtom=function lC(a,b){return S0.uj(this.a,a,b)};_.findBINAPChiralityBond=function mC(a){return S0.xm(this.a,a)};_.findBond=function nC(a,b){return S0.vj(this.a,a,b)};_.findRingSystem=function oC(a,b,c,d){S0.ym(this.a,a,b,c,d);};_.getAbsoluteAtomParity=function wC(a){return S0.Ms(this.a,a)};_.getAbsoluteBondParity=function xC(a){return S0.Ns(this.a,a)};_.getAllAtoms=function yC(){return this.a.o};_.getAllBonds=function zC(){return this.a.p};_.getAllConnAtoms=function AC(a){return S0.Bm(this.a,a)};_.getAllConnAtomsPlusMetalBonds=function BC(a){return S0.Cm(this.a,a)};_.getAllHydrogens=function CC(a){return S0.Dm(this.a,a)};_.getAromaticRingCount=function FC(){return S0.Em(this.a)};_.getAtomAbnormalValence=function GC(a){return S0.wj(this.a,a)};_.getAtomCIPParity=function HC(a){return S0.xj(this.a,a)};_.getAtomCharge=function IC(a){return S0.yj(this.a,a)};_.getAtomColor=function JC(a){return S0.zj(this.a,a)};_.getAtomCustomLabel=function KC(a){return S0.Aj(this.a,a)};_.getAtomESRGroup=function LC(a){return S0.Cj(this.a,a)};_.getAtomESRType=function MC(a){return S0.Dj(this.a,a)};_.getAtomLabel=function NC(a){return S0.Ej(this.a,a)};_.getAtomList=function OC(a){return S0.Fj(this.a,a)};_.getAtomListString=function PC(a){return S0.Gj(this.a,a)};_.getAtomMapNo=function QC(a){return S0.Hj(this.a,a)};_.getAtomMass=function RC(a){return S0.Ij(this.a,a)};_.getAtomParity=function SC(a){return S0.Jj(this.a,a)};_.getAtomPi=function TC(a){return S0.Gm(this.a,a)};_.getAtomPreferredStereoBond=function UC(a){return S0.Hm(this.a,a)};
_.getAtomRadical=function VC(a){return S0.Lj(this.a,a)};_.getAtomRingBondCount=function WC(a){return S0.Im(this.a,a)};_.getAtomRingCount=function XC(a,b){return S0.Jm(this.a,a,b)};_.getAtomRingSize=function YC(a){return S0.Km(this.a,a)};_.getAtomX=function ZC(a){return S0.Mj(this.a,a)};_.getAtomY=function $C(a){return S0.Nj(this.a,a)};_.getAtomZ=function _C(a){return S0.Oj(this.a,a)};_.getAtomicNo=function aD(a){return S0.Pj(this.a,a)};_.getAtoms=function cD(){return this.a.d};_.getAverageBondLength=function dD(a){return S0.Lm(this.a,a)};_.getAverageTopologicalAtomDistance=function eD(){return S0.Mm(this.a)};_.getBond=function fD(a,b){return S0.Nm(this.a,a,b)};_.getBondAngle=function gD(a,b){return S0.Tj(this.a,a,b)};_.getBondAtom=function hD(a,b){return S0.Uj(this.a,a,b)};_.getBondBridgeMaxSize=function iD(a){return S0.Vj(this.a,a)};_.getBondBridgeMinSize=function jD(a){return S0.Wj(this.a,a)};_.getBondCIPParity=function kD(a){return S0.Xj(this.a,a)};_.getBondESRGroup=function lD(a){return S0.Yj(this.a,a)};_.getBondESRType=function mD(a){return S0.Zj(this.a,a)};_.getBondLength=function nD(a){return S0.$j(this.a,a)};_.getBondOrder=function oD(a){return S0.ak(this.a,a)};_.getBondParity=function pD(a){return S0.bk(this.a,a)};_.getBondPreferredStereoBond=function qD(a){return S0.$n(this.a,a)};_.getBondQueryFeatures=function rD(a){return S0.ck(this.a,a)};_.getBondRingSize=function sD(a){return S0.Om(this.a,a)};_.getBondType=function tD(a){return S0.dk(this.a,a)};_.getBondTypeSimple=function uD(a){return S0.ek(this.a,a)};_.getBonds=function vD(){return this.a.e};_.getBounds=function wD(){var a;a=S0.fk(this.a,$0.rB);if(!a)return null;return $0.uB(a.c,a.d,a.b,a.a)};_.getCanonizedIDCode=function xD(a){var b;b=new S0.Pf(this.a,a);return S0.tf(b)};_.getChiralText=function yD(){return S0.Os(this.a)};_.getChirality=function zD(){return this.a.G};_.getCompactCopy=function AD(){return new $0.xB(S0.Ps(this.a))};_.getConnAtom=function BD(a,b){return S0.Pm(this.a,a,b)};_.getConnAtoms=function CD(a){return S0.Qm(this.a,a)};_.getConnBond=function DD(a,b){return S0.Rm(this.a,a,b)};_.getConnBondOrder=function ED(a,b){return S0.Sm(this.a,a,b)};_.getDefaultMaxValenceUncharged=function GD(a){return S0.gk(this.a,a)};_.getDiastereotopicAtomIDs=function HD(){return U0.zt(this.a)};_.getElectronValenceCorrection=function ID(a,b){return S0.hk(this.a,a,b)};_.getExcludedNeighbourCount=function JD(a){return S0.Tm(this.a,a)};_.getExplicitHydrogens=function KD(a){return S0.Um(this.a,a)};_.getFinalRanks=function LD(a){var b;b=new S0.Pf(this.a,a);return b.d};_.getFisherProjectionParity=function MD(a,b,c,d){return S0.Wm(this.a,a,b,c,d)};_.getFragmentAtoms=function ND(a,b){return S0.Xm(this.a,a,b)};_.getFragmentNumbers=function OD(a,b,c){return S0.Ym(this.a,a,b,c)};_.getFragments=function PD(){var a,b,c;a=S0.Rs(this.a);c=OL(N0.xO,z1,30,a.length,0,1);for(b=0;b<a.length;b++){c[b]=new $0.xB(a[b]);}return c};_.getFreeValence=function QD(a){return S0.Zm(this.a,a)};_.getHandleHydrogenMap=function RD(){return S0._m(this.a)};_.getHelperArrayStatus=function SD(){return this.a.R};_.getHoseCodes=function TD(a){a=a||{};var b=(typeof a.maxSphereSize===m4?5:a.maxSphereSize)|0;var c=(typeof a.type===m4?0:a.type)|0;return U0.Bt(this.a,b,c)};_.getIDCode=function UD(){var a;a=S0.Ts(this.a);a==null&&(a=S0.tf(new S0.Of(this.a)));return a};_.getIDCodeAndCoordinates=function VD(){return {idCode:this.getIDCode(),coordinates:this.getIDCoordinates()}};_.getIDCoordinates=function WD(){var a;a=S0.Us(this.a);a==null&&(a=S0.qf(new S0.Of(this.a)));return a};_.getImplicitHigherValence=function XD(a,b){return S0.an(this.a,a,b)};_.getImplicitHydrogens=function YD(a){return S0.bn(this.a,a)};_.getIndex=function ZD(){return S0.xr($0.OI($0.sB),this.a)};_.getLowestFreeValence=function $D(a){return S0.cn(this.a,a)};_.getMaxAtoms=function _D(){return this.a.K};_.getMaxBonds=function aE(){return this.a.L};_.getMaxValence=function bE(a){return S0.ik(this.a,a)};_.getMaxValenceUncharged=function cE(a){return S0.jk(this.a,a)};_.getMetalBondedConnAtoms=function dE(a){return S0.dn(this.a,a)};_.getMolecularFormula=function eE(){return new $0.II(this.a)};_.getMoleculeColor=function fE(){return this.a.M};_.getMolweight=function gE(){return S0.en(this.a)};_.getName=function hE(){return this.a.N};_.getNonHydrogenNeighbourCount=function iE(a){return S0.fn(this.a,a)};_.getNumberOfHydrogens=function jE(){return U0.St(this.a)};_.getOCL=function kE(){return $wnd.OCL};_.getOccupiedValence=function lE(a){return S0.gn(this.a,a)};_.getPath=function mE(a,b,c,d,e){return S0.jn(this.a,a,b,c,d,null,e)};_.getPathBonds=function nE(a,b,c){S0.kn(this.a,a,b,c);};_.getPathLength=function oE(a,b){return S0.ln(this.a,a,b)};_.getRingSet=function pE(){return new $0.BH(S0.pn(this.a))};_.getRotatableBondCount=function qE(){return S0.qn(this.a)};_.Db=function rE(a,b,c,d,e,f,g){var h,i,j,k,l,m,n,o;j=$0.RI(g);i=new S0.Yr(this.a,j,f);i.H=c;S0.Nd(i,new Z0.Uw(0,0,a,b));h=i.u;S0.Gd(i);o=S0.Wr(i);if(d){l=gR(PQ($wnd.Math.round(h.b+e*2)));k=gR(PQ($wnd.Math.round(h.a+e*2)));m=gR(PQ($wnd.Math.round(h.c-e)));n=gR(PQ($wnd.Math.round(h.d-e)));return O0.nU(o,'width="'+l+'px" height="'+k+'px" viewBox="'+m+' '+n+' '+l+' '+k+'"')}else {return o}};_.getStereoBond=function sE(a){return S0.tn(this.a,a)};_.getStereoCenterCount=function tE(){return S0.Vs(this.a)};_.getStereoProblem=function uE(a){return S0.lk(this.a,a)};_.getSubstituent=function vE(a,b,c,d,e){return S0.vn(this.a,a,b,c,d.a,e)};_.getSubstituentSize=function wE(a,b){return S0.wn(this.a,a,b)};_.getSymmetryRank=function xE(a){return S0.Ws(this.a,a)};_.getZNeighbour=function yE(a,b){return S0.xn(this.a,a,b)};_.invalidateHelperArrays=function zE(a){S0.ok(this.a,a);};_.inventCoordinates=function AE(){var a;a=new V0.Gu;a.g=new T0.j$(0);V0.ou(a,this.a);S0.ho(this.a);};_.is3D=function BE(){return S0.pk(this.a)};_.isAlkaliMetal=function CE(a){return S0.Bn(this.a,a)};_.isAllylicAtom=function DE(a){return S0.Cn(this.a,a)};_.isAmideTypeBond=function EE(a){return S0.Dn(this.a,a)};_.isAromaticAtom=function FE(a){return S0.En(this.a,a)};_.isAromaticBond=function GE(a){return S0.Fn(this.a,a)};_.isAtomConfigurationUnknown=function HE(a){return S0.qk(this.a,a)};_.isAtomMarkedForDeletion=function IE(a){return S0.rk(this.a,a)};_.isAtomParityPseudo=function JE(a){return S0.sk(this.a,a)};_.isAtomStereoCenter=function KE(a){return S0.tk(this.a,a)};_.isAutoMappedAtom=function NE(a){return S0.uk(this.a,a)};_.isBINAPChiralityBond=function OE(a){return S0.Gn(this.a,a)};_.isBondBackgroundHilited=function PE(a){return S0.vk(this.a,a)};_.isBondBridge=function QE(a){return S0.wk(this.a,a)};_.isBondForegroundHilited=function RE(a){return S0.xk(this.a,a)};_.isBondMarkedForDeletion=function SE(a){return S0.yk(this.a,a)};_.isBondParityPseudo=function TE(a){return S0.zk(this.a,a)};_.isBondParityUnknownOrNone=function UE(a){return S0.Ak(this.a,a)};_.isChalcogene=function VE(a){return S0.In(this.a,a)};_.isDelocalizedBond=function WE(a){return S0.Jn(this.a,a)};_.isEarthAlkaliMetal=function XE(a){return S0.Kn(this.a,a)};_.isElectronegative=function YE(a){return S0.Bk(this.a,a)};_.isElectropositive=function ZE(a){return S0.Ck(this.a,a)};_.isFlatNitrogen=function $E(a){return S0.Ln(this.a,a,true)};_.isFragment=function _E(){return this.a.I};_.isHalogene=function aF(a){return S0.Mn(this.a,a)};_.isMarkedAtom=function bF(a){return S0.Dk(this.a,a)};_.isMetalAtom=function cF(a){return S0.Ek(this.a,a)};_.isNaturalAbundance=function dF(a){return S0.Fk(this.a,a)};_.isNitrogenFamily=function eF(a){return S0.Nn(this.a,a)};_.isOrganicAtom=function fF(a){return S0.Gk(this.a,a)};_.isPseudoRotatableBond=function gF(a){return S0.On(this.a,a)};_.isPurelyOrganic=function hF(){return S0.Hk(this.a)};_.isRingAtom=function iF(a){return S0.Rn(this.a,a)};_.isRingBond=function jF(a){return S0.Sn(this.a,a)};_.isSelectedAtom=function kF(a){return S0.Ik(this.a,a)};_.isSelectedBond=function lF(a){return S0.Jk(this.a,a)};_.isSimpleHydrogen=function mF(a){return S0.Tn(this.a,a)};_.isSmallRingAtom=function nF(a){return S0.Un(this.a,a)};_.isSmallRingBond=function oF(a){return S0.Vn(this.a,a)};_.isStabilizedAtom=function pF(a){return S0.Wn(this.a,a)};_.isStereoBond=function qF(a){return S0.Kk(this.a,a)};_.markAtomForDeletion=function rF(a){S0.Nk(this.a,a);};_.markBondForDeletion=function sF(a){S0.Ok(this.a,a);};_.normalizeAmbiguousBonds=function tF(){return S0.Xn(this.a)};_.removeAtomColors=function uF(){S0.Rk(this.a);};_.removeAtomCustomLabels=function vF(){this.a.r=null;};_.removeAtomMarkers=function wF(){S0.Sk(this.a);};_.removeAtomSelection=function xF(){S0.Tk(this.a);};_.removeBondHiliting=function yF(){S0.Uk(this.a);};_.removeExplicitHydrogens=function zF(a){S0.ao(this.a,true);};_.removeQueryFeatures=function AF(){return S0.Wk(this.a)};_.renumberESRGroups=function BF(a){return S0.Xk(this.a,a)};_.scaleCoords=function CF(a){S0.Yk(this.a,a);};_.setAllAtoms=function DF(a){S0.Zk(this.a,a);};_.setAllBonds=function EF(a){S0.$k(this.a,a);};_.setAssignParitiesToNitrogen=function FF(a){S0.Xs(this.a,a);};_.setAtomAbnormalValence=function GF(a,b){S0._k(this.a,a,b);};_.setAtomCIPParity=function HF(a,b){S0.al(this.a,a,b);};_.setAtomCharge=function IF(a,b){S0.bl(this.a,a,b);};_.setAtomColor=function JF(a,b){S0.cl(this.a,a,b);};_.setAtomConfigurationUnknown=function KF(a,b){S0.dl(this.a,a,b);};_.setAtomCustomLabel=function LF(a,b){S0.el(this.a,a,b);};_.setAtomESR=function MF(a,b,c){S0.gl(this.a,a,b,c);};_.setAtomList=function NF(a,b,c){S0.il(this.a,a,b,c);};_.setAtomMapNo=function OF(a,b,c){S0.jl(this.a,a,b,c);};_.setAtomMarker=function PF(a,b){S0.kl(this.a,a,b);};_.setAtomMass=function QF(a,b){S0.ll(this.a,a,b);};_.setAtomParity=function RF(a,b,c){S0.ml(this.a,a,b,c);};_.setAtomRadical=function SF(a,b){S0.ol(this.a,a,b);};_.setAtomSelection=function TF(a,b){S0.pl(this.a,a,b);};_.setAtomX=function UF(a,b){S0.rl(this.a,a,b);};_.setAtomY=function VF(a,b){S0.sl(this.a,a,b);};_.setAtomZ=function WF(a,b){S0.tl(this.a,a,b);};_.setAtomicNo=function XF(a,b){S0.ul(this.a,a,b);};_.setBondAtom=function YF(a,b,c){S0.vl(this.a,a,b,c);};_.setBondBackgroundHiliting=function ZF(a,b){S0.wl(this.a,a,b);};_.setBondCIPParity=function $F(a,b){S0.xl(this.a,a,b);};_.setBondESR=function _F(a,b,c){S0.yl(this.a,a,b,c);};_.setBondForegroundHiliting=function aG(a,b){S0.zl(this.a,a,b);};_.setBondOrder=function bG(a,b){S0.Al(this.a,a,b);};_.setBondParity=function cG(a,b,c){S0.Bl(this.a,a,b,c);};_.setBondParityUnknownOrNone=function dG(a){S0.Cl(this.a,a);};_.setBondQueryFeature=function eG(a,b,c){S0.Dl(this.a,a,b,c);};_.setBondType=function fG(a,b){S0.El(this.a,a,b);};_.setChirality=function gG(a){S0.Fl(this.a,a);};_.setFragment=function iG(a){S0.Gl(this.a,a);};_.setHelperValidity=function jG(a){S0.Hl(this.a,a);};_.setHydrogenProtection=function kG(a){S0.Il(this.a,a);};_.setMaxAtoms=function lG(a){S0.Jl(this.a,a);};_.setMaxBonds=function mG(a){S0.Kl(this.a,a);};_.setMoleculeColor=function nG(a){S0.Ll(this.a,a);};_.setName=function oG(a){S0.Ml(this.a,a);};_.setParitiesValid=function pG(a){S0.eo(this.a,a);};_.setStereoBondFromAtomParity=function qG(a){S0.fo(this.a,a);};_.setStereoBondFromBondParity=function rG(a){S0.go(this.a,a);};_.setStereoBondsFromParity=function sG(){S0.ho(this.a);};_.setToRacemate=function tG(){this.a.J=true;};_.setUnknownParitiesToExplicitlyUnknown=function uG(){S0.Ys(this.a);};_.shareSameFragment=function vG(a,b){return S0.ln(this.a,a,b)!=-1};_.stripIsotopInfo=function wG(){return S0.Pl(this.a)};_.stripSmallFragments=function xG(a){return S0.io(this.a,a)};_.stripStereoInformation=function yG(){S0.Zs(this.a);};_.suggestBondType=function zG(a,b){return S0.Ql(this.a,a,b)};_.supportsImplicitHydrogen=function AG(a){return S0.jo(this.a,a)};_.swapAtoms=function BG(a,b){S0.Rl(this.a,a,b);};_.swapBonds=function CG(a,b){S0.Sl(this.a,a,b);};_.toIsomericSmiles=function DG(a){return S0.Vo(new S0.cp(this.a,a))};_.toMolfile=function EG(){var a;a=new S0.zp(this.a);return a.a.a};_.toMolfileV3=function FG(){var a;a=new S0.cq(this.a);return a.a.a};_.toSVG=function GG(a,b,c,d){if(!a||!b){throw new Error('Molecule#toSVG requires width and height to be specified')}d=d||{};var e=d.factorTextSize||1;var f=d.autoCrop===true;var g=typeof d.autoCropMargin===m4?5:d.autoCropMargin;var h=this.Db(a,b,e,f,g,c,d);h=h.replace('<style>','<style> text {font-family: sans-serif;}');d.fontWeight&&(h=h.replace(/font-size=/g,'font-weight="'+d.fontWeight+'" font-size='));d.strokeWidth&&(h=h.replace(/stroke-width="[^"]+"/g,a2+d.strokeWidth+'"'));return h};_.toSmiles=function HG(){return S0.as(new S0.ds,this.a)};_.translateCoords=function IG(a,b){S0.Tl(this.a,a,b);};_.validate=function JG(){S0.$s(this.a);};_.zoomAndRotate=function KG(a,b,c){S0.Vl(this.a,a,b,c);};_.zoomAndRotateInit=function LG(a,b){S0.Wl(this.a,a,b);};$0.Ww=32;$0.Xw=2;$0.Yw=4;$0.Zw=6;$0.$w=64;$0._w=128;$0.ax=1;$0.bx=256;$0.cx=8;$0.dx=p2;$0.ex=16;$0.fx=N2;$0.gx=512;$0.hx=n4;$0.ix=24;$0.jx=n4;$0.lx=b4;$0.mx=_3;$0.nx=a4;$0.ox=0;$0.px=3;$0.qx=1;$0.rx=2;$0.sx=64;$0.tx=384;$0.ux=448;$0.vx=192;$0.wx=256;$0.xx=0;$0.yx=320;$0.zx=128;$0.Bx=1;$0.Cx=2;$0.Dx=4;$0.Ex=0;$0.Fx=3;$0.Gx=1;$0.Hx=f3;$0.Ix=2;$0.Jx=1;$0.Kx=2;$0.Lx=q2;$0.Mx=3;$0.Nx=25;$0.Ox=5;$0.Px=39;$0.Qx=A2;$0.Rx=d2;$0.Sx=L2;$0.Tx=n2;$0.Ux=o2;$0.Vx=4;$0.Wx=7;$0.Xx=m2;$0.Yx=l2;$0.Zx=M2;$0.$x=k2;$0._x=U3;$0.ay=5;$0.by=17;$0.cy=v2;$0.dy=O1;$0.ey=7;$0.fy=32;$0.gy=N2;$0.hy=46;$0.iy=G2;$0.jy=128;$0.ky=e3;$0.ly=j2;$0.my=Y3;$0.ny=256;$0.oy=W2;$0.py=u3;$0.qy=Z3;$0.ry=512;$0.sy=V2;$0.ty=C1;$0.uy=16;$0.vy=$3;$0.wy=p2;$0.xy=g3;$0.yy=32;$0.zy=F2;$0.Ay=w2;$0.By=64;$0.Cy=4;$0.Dy=8;$0.Ey=t3;$0.Fy=s3;$0.Gy=134217728;$0.Hy=3;$0.Iy=14;$0.Jy=u2;$0.Ky=P1;$0.Ly=Q1;$0.My=R1;$0.Ny=S1;$0.Oy=T1;$0.Py=U1;$0.Qy=V1;$0.Ry=120;$0.Sy=4;$0.Ty=3;$0.Uy=2;$0.Vy=h3;$0.Wy=2147483648;$0.Xy=h3;$0.Yy=A3;$0.Zy=30;$0.$y=T3;$0._y=K2;$0.az=3;$0.bz=22;$0.cz=i3;$0.dz=2;$0.ez=44;$0.fz=48;$0.gz=32;$0.hz=0;$0.iz=16;$0.jz=4;$0.kz=48;$0.mz=1;$0.nz=0;$0.oz=3;$0.pz=2;$0.qz=1;$0.rz=0;$0.sz=3;$0.tz=2;$0.uz=L1;$0.vz=R2;$0.wz=2;$0.xz=21;$0.yz=w2;$0.zz=31;$0.Az=5;$0.Bz=0;$0.Cz=Q2;$0.Dz=8;$0.Ez=7680;$0.Fz=4;$0.Gz=9;$0.Hz=9;$0.Iz=122880;$0.Jz=4;$0.Kz=13;$0.Lz=8;$0.Mz=2;$0.Nz=j3;$0.Oz=g3;$0.Pz=16;$0.Qz=6291840;$0.Rz=23;$0.Sz=S3;$0.Tz=128;$0.Uz=32;$0.Vz=64;$0.Wz=96;$0.Xz=2;$0.Yz=5;$0.Zz=256;$0.$z=y2;$0._z=3;$0.aA=17;$0.bA=384;$0.cA=2;$0.dA=7;$0.eA=6291967;$0.fA=1;$0.gA=4;$0.hA=386;$0.iA=512;$0.jA=64;$0.kA=2;$0.lA=129;$0.mA=511;$0.nA=127;$0.oA=384;$0.pA=32;$0.qA=8;$0.rA=16;$0.sA=1;$0.tA=4;$0.uA=257;$0.vA=458752;$0.wA=x2;$0.xA=D1;$0.yA=W2;$0.zA=e3;$0.AA=C1;$0.BA=196608;$0.CA=0;$0.DA=327680;$0.FA=24;$0.GA=321;$0.HA=6;$0.IA=5;$0.JA=32;$0.KA=0;$0.LA=1;$0.MA=2;$0.NA=16;$0.OA=128;$0.PA=1;$0.QA=8;$0.RA=4;$0.SA=2;$0.TA=32;$0.UA=64;$0.VA=248;$0.WA=31;$0.XA=1;$0.YA=0;$0.ZA=15;$0.$A=7;$0._A=3;$0.aB=63;$0.bB=95;$0.cB=190;$0.dB=16;$0.eB=0;$0.fB=1;$0.gB=16;$0.hB=256;$0.iB=128;$0.jB=8;$0.kB=32;$0.lB=4;$0.mB=511;$0.nB=64;$0.oB=1;$0.pB=2;N0.xO=LS(30);$0.MG=function MG(a){this.a=a;};$0.VG=function VG(){return new $0.MG(new X0.uw)};$0.WG=function WG(a,b){var c,d;d=OL(N0._N,p1,21,a.length,0,1);for(c=0;c<a.length;c++){d[c]=a[c].a;}return new $0.MG(new X0.ww(d,b))};$0.XG=function XG(a){return new $0.MG(W0.Fv(a))};$0.YG=function YG(a){var b,c;c=S0.os(new S0.us,R0.n0((b=a,R0.i0(),b)));return new $0.MG(c)};sR(54,1,{},$0.MG);_.addCatalyst=function NG(a){X0.Wv(this.a,a.a);};_.addCatalystAt=function OG(a,b){X0.Xv(this.a,a.a,b);};_.addProduct=function PG(a){X0.Yv(this.a,a.a);};_.addProductAt=function QG(a,b){X0.Zv(this.a,a.a,b);};_.addReactant=function RG(a){X0.$v(this.a,a.a);};_.addReactantAt=function SG(a,b){X0._v(this.a,a.a,b);};_.clear=function TG(){X0.aw(this.a);};_.clone=function UG(){return new $0.MG(new X0.vw(this.a))};_.getAverageBondLength=function ZG(){return X0.cw(this.a)};_.getCatalyst=function $G(a){return new $0.xB(X0.dw(this.a,a))};_.getCatalysts=function _G(){return this.a.a.a.length};_.getHighestMapNo=function aH(){return X0.ew(this.a)};_.getMergedCopy=function bH(){return new $0.MG(X0.fw(this.a))};_.getMolecule=function cH(a){return new $0.xB(X0.gw(this.a,a))};_.getMolecules=function dH(){return X0.hw(this.a)};_.getName=function eH(){return X0.iw(this.a)};_.getOCL=function fH(){return $wnd.OCL};_.getProduct=function gH(a){return new $0.xB(X0.jw(this.a,a))};_.getProducts=function hH(){return this.a.f.a.length};_.getReactant=function iH(a){return new $0.xB(X0.kw(this.a,a))};_.getReactants=function jH(){return this.a.g.a.length};_.getReactionCenterMapNos=function kH(){return X0.lw(this.a)};_.isEmpty=function lH(){return X0.mw(this.a)};_.isFragment=function mH(){return X0.nw(this.a)};_.isPerfectlyMapped=function nH(){return X0.ow(this.a)};_.isReactionLayoutRequired=function oH(){return X0.pw(this.a)};_.removeCatalysts=function pH(){R0.I0(this.a.a.a).length=0;};_.setFragment=function qH(a){X0.rw(this.a,a);};_.setName=function rH(a){X0.sw(this.a,a);};_.toRxn=function sH(a){var b;b=new W0.Ev(this.a,a);return b.a?b.a.a:null};_.toRxnV3=function tH(a){var b;b=new W0.Lv(this.a,a);return b.a?b.a.a:null};_.toSmiles=function uH(){return S0.dp(this.a)};_.validateMapping=function vH(){X0.tw(this.a);};N0.yO=LS(54);$0.BH=function BH(a){this.a=a;};sR(138,1,{},$0.BH);_.determineAromaticity=function CH(a,b,c,d){S0.lq(this.a,a,b,c,d);};_.getAtomIndex=function DH(a,b){return S0.nq(this.a,a,b)};_.getAtomRingSize=function EH(a){return S0.oq(this.a,a)};_.getBondIndex=function FH(a,b){return S0.pq(this.a,a,b)};_.getBondRingSize=function GH(a){return S0.qq(this.a,a)};_.getHeteroPosition=function HH(a){return S0.rq(this.a,a)};_.getOCL=function IH(){return $wnd.OCL};_.getRingAtoms=function JH(a){return S0.sq(this.a,a)};_.getRingBonds=function KH(a){return S0.tq(this.a,a)};_.getRingSize=function LH(a){return S0.vq(this.a,a)};_.getSharedRing=function MH(a,b){return S0.wq(this.a,a,b)};_.getSize=function NH(){return this.a.i.a.length};_.isAromatic=function OH(a){return S0.yq(this.a,a)};_.isAtomMember=function PH(a,b){return S0.Bq(this.a,a,b)};_.isBondMember=function QH(a,b){return S0.Cq(this.a,a,b)};_.isDelocalized=function RH(a){return S0.Dq(this.a,a)};_.qualifiesAsAmideTypeBond=function SH(a){return S0.Gq(this.a,a)};_.validateMemberIndex=function TH(a,b){return S0.Mq(this.a,a,b)};$0.wH=7;$0.xH=3;$0.yH=7;$0.zH=5;$0.AH=1;N0.zO=LS(138);$0.UH=function UH(a,b){this.a=new W0.Vv(new h1.UR(a),b);};sR(181,1,{},$0.UH);_.getField=function VH(a){var b,c;c=W0.Sv(this.a);for(b=0;b<c.length;b++){if(O0.eU(c[b],a)){return W0.Rv(this.a,b)}}return null};_.getFieldData=function WH(a){return W0.Rv(this.a,a)};_.getFieldNames=function XH(a){return W0.Tv(this.a,a)};_.getMolecule=function YH(){return new $0.xB(W0.Uv(this.a))};_.getNextFieldData=function ZH(){var a;return a=this.a.a.a,a};_.getNextMolFile=function _H(){var a;return a=this.a.f.a,a};_.getOCL=function aI(){return $wnd.OCL};_.next=function bI(){return W0.Ov(this.a)};N0.AO=LS(181);$0.cI=function cI(a){a.a=new S0.qr;};$0.dI=function dI(a,b){S0.jr(a.a,b.a);};$0.eI=function eI(a,b){S0.kr(a.a,b.a);};$0.fI=function fI(){$0.cI(this);};sR(183,1,{},$0.fI);_.getOCL=function gI(){return $wnd.OCL};_.isFragmentInMolecule=function hI(){return S0.er(this.a)};_.setFragment=function iI(a){$0.dI(this,a);};_.setMol=function jI(a,b){S0.kr(this.a,b.a);S0.jr(this.a,a.a);};_.setMolecule=function kI(a){$0.eI(this,a);};N0.CO=LS(183);$0.lI=function lI(a){a.a=new S0.Fr;};$0.mI=function mI(){$0.lI(this);};$0.nI=function nI(a){return ET(a)};$0.pI=function pI(a){return S0.Gr(a)};$0.qI=function qI(a){return S0.Hr(a)};$0.rI=function rI(){return S0.wr(),S0.ur};$0.tI=function tI(a,b){return S0.Ir(a,b)};$0.uI=function uI(a,b){return S0.Jr(a,b)};sR(184,1,{},$0.mI);_.createIndex=function oI(a){return S0.xr(this.a,a.a)};_.getOCL=function sI(){return $wnd.OCL};_.isFragmentInMolecule=function vI(){return S0.Ar(this.a)};_.setFragment=function wI(a,b){S0.Dr(this.a,a.a,b);};_.setMolecule=function xI(a,b){S0.Er(this.a,a.a,b);};N0.BO=LS(184);$0.yI=function yI(g,a){a=a||{};var b=a.smartsMode||'smiles';var c=a.createSmartsWarnings||false;var d=a.skipCoordinateTemplates||false;var e=a.makeHydrogenExplicit||false;var f=a.noCactvs||false;g.Eb(b,c,d,e,f);};$0.zI=function zI(a){$0.yI(this,a);};sR(185,1,{},$0.zI);_.getSmartsWarning=function AI(){return S0.js(this.a)};_.Eb=function BI(a,b,c,d,e){var f;f=0;switch(a){case 'smarts':f=2;break;case 'guess':f=1;}d&&(f|=8);c&&(f|=4);e&&(f|=16);this.a=new S0.vs(f,b);};_.Fb=function CI(a,b,c,d){var e;S0.ms(this.a,a.a,R0.n0((e=b,R0.i0(),e)),c,d);return a};_.parseMolecule=function DI(a,b){b=b||{};var c=b.molecule||new $0.vB;var d=!b.noCoordinates;var e=!b.noStereo;return this.Fb(c,a,d,e)};_.parseReaction=function EI(a){return new $0.MG(S0.ns(this.a,a))};_.setRandomSeed=function FI(a){S0.ss(this.a,N0.MQ(a));};N0.DO=LS(185);$0.GI=function GI(){};$0.HI=function HI(a,b){b=b||{};var c=(typeof b.maxSphereSize===m4?5:b.maxSphereSize)|0;var d=(typeof b.type===m4?0:b.type)|0;return U0.Dt(a,c,d)};sR(186,1,{},$0.GI);N0.EO=LS(186);$0.II=function II(a){S0.qp();S0.up.call(this,a);};sR(137,81,{81:1},$0.II);tR(_,{absoluteWeight:{'get':function JI(){return S0.rp(this)}}});tR(_,{formula:{'get':function KI(){return S0.sp(this)}}});tR(_,{relativeWeight:{'get':function LI(){return S0.tp(this)}}});N0.FO=LS(137);$0.NI=function NI(a){};$0.OI=function OI(a){!a.a&&(a.a=new S0.Fr);return a.a};$0.QI=function QI(){$0.NI(this);};sR(134,1,{},$0.QI);_.a=null;$0.MI=null;N0.GO=LS(134);$0.RI=function RI(a){if(!a)return 0;var b=0;a.inflateToMaxAVBL&&(b|=C1);a.inflateToHighResAVBL&&(b|=e3);a.chiralTextBelowMolecule&&(b|=0);a.chiralTextAboveMolecule&&(b|=W2);a.chiralTextOnFrameTop&&(b|=V2);a.chiralTextOnFrameBottom&&(b|=U2);a.noTabus&&(b|=1);a.showAtomNumber&&(b|=2);a.showBondNumber&&(b|=4);a.highlightQueryFeatures&&(b|=8);a.showMapping&&(b|=16);a.suppressChiralText&&(b|=32);a.suppressCIPParity&&(b|=64);a.suppressESR&&(b|=128);a.showSymmetryAny&&(b|=768);a.showSymmetrySimple&&(b|=256);a.showSymmetryStereoHeterotopicity&&(b|=512);a.noImplicitAtomLabelColors&&(b|=p2);a.noStereoProblem&&(b|=N2);a.noColorOnESRAndCIP&&(b|=k2);a.noImplicitHydrogen&&(b|=M2);a.drawBondsInGray&&(b|=j2);return b};_0.SI=function SI(a,b){var c;c=a-b;c>=h2?(c-=g2):c<w3&&(c+=g2);return c};_0.TI=function TI(a,b){var c;for(c=b;c<a.length;c++){if(a[c]==62)return c}return -1};_0.VI=function VI(){_0.VI=uR;_0.UI=WL(IL(N0.gN,1),c3,5,15,[0.29899999499320984,0.5870000123977661,0.11400000005960464]);};_0.WI=function WI(a,b){var c;c=OL(N0.gN,c3,5,4,15,1);c[0]=o4*((a&Y2)>>16);c[1]=o4*((a&M1)>>8);c[2]=o4*(a&255);_0.XI(c,b);return a&X2|cN($wnd.Math.round(c[0]*255))<<16|cN($wnd.Math.round(c[1]*255))<<8|cN($wnd.Math.round(c[2]*255))};_0.XI=function XI(a,b){var c,d,e,f,g,h,i,j;g=_0.UI[0]*a[0]+_0.UI[1]*a[1]+_0.UI[2]*a[2];if(g==0){a[0]=0;a[1]=0;a[2]=0;return}c=b/g;j=0;i=0;for(e=0;e<3;e++){a[e]*=c;if(a[e]<1){i+=_0.UI[e];}else {j+=(a[e]-1)*_0.UI[e];a[e]=1;}}if(j!=0){h=0;for(f=0;f<3;f++){if(a[f]<1){a[f]+=j/i;if(a[f]>1){h+=(a[f]-1)*_0.UI[f];a[f]=1;}}}if(h!=0){for(d=0;d<3;d++){if(a[d]<1){a[d]+=h/_0.UI[d];a[d]>1&&(a[d]=1);}}}}};_0.YI=function YI(a,b){_0.VI();var c,d,e,f,g,h,i,j,k,l,m;c=(_0.UI[0]*((b&Y2)>>16)+_0.UI[1]*((b&M1)>>8)+_0.UI[2]*(b&255))/255;g=(_0.UI[0]*((a&Y2)>>16)+_0.UI[1]*((a&M1)>>8)+_0.UI[2]*(a&255))/255;e=$wnd.Math.abs(c-g);if(e>N1)return a;h=f1.DR(((b&Y2)>>16)/255,((b&M1)>>8)/255,(b&255)/255,null);i=f1.DR(((a&Y2)>>16)/255,((a&M1)>>8)/255,(a&255)/255,null);j=$wnd.Math.abs(i[0]-h[0]);j>0.5&&(j=1-j);m=1-$wnd.Math.max(i[1],h[1]);d=$wnd.Math.abs(g+c-1);k=$wnd.Math.cos(h2*j*3);l=N1*$wnd.Math.max(m,$wnd.Math.max(d,k));if(e>l)return a;f=g>c?g+l>1:g-l>0;return _0.WI(a,f?c-l:c+l)};_0.ZI=function ZI(a){_0.VI();var b,c,d;d=(a&Y2)>>16;c=(a&M1)>>8;b=a&255;return (d+cN($wnd.Math.round(N1*(92-d)))<<16)+(c+cN($wnd.Math.round(N1*(160-c)))<<8)+b+cN($wnd.Math.round(N1*(255-b)))};_0.$I=function $I(a,b){var c;if(a==null)return b==null?0:1;if(b==null)return -1;for(c=0;c<a.length;c++){if(b.length==c)return 1;if(a[c]!=b[c])return a[c]<b[c]?-1:1}return b.length>a.length?-1:0};_0._I=function _I(){};sR(143,1,c3,_0._I);_.pb=function aJ(a,b){return _0.$I(a,b)};_.ib=function bJ(a){return this===a};N0.HO=LS(143);_0.cJ=function cJ(a){a.a=new T0.ki;};_0.dJ=function dJ(a,b){var c;c=_0.eJ(a,b);if(c<0){c=-(c+1);T0.Sh(a.a,c,b);}return c};_0.eJ=function eJ(a,b){var c,d,e,f;f=a.a.a.length;if(f==0){return -1}e=1;while(2*e<=f)e<<=1;d=e;--e;while(d!=0){d>>=1;if(e>=f){e-=d;continue}c=O0.BT(b,T0.Yh(a.a,e));if(c==0)return e;if(d==0)break;c<0?(e-=d):(e+=d);}e<f&&O0.BT(b,T0.Yh(a.a,e))>0&&++e;return -(e+1)};_0.fJ=function fJ(){_0.gJ.call(this);};_0.gJ=function gJ(){_0.cJ(this);};sR(110,1,{},_0.fJ);N0.IO=LS(110);Q0.MJ=function MJ(a){O0.KJ.call(this,a);};sR(158,66,A1);N0.MO=LS(158);P0.OJ=function OJ(){P0.OJ=uR;P0.NJ=new Ec;};P0.PJ=function PJ(a){a.a='';};P0.QJ=function QJ(a){var b;if(a.c==null){b=bN(a.b)===bN(P0.NJ)?null:a.b;a.d=b==null?w1:YM(b)?P0.VJ(b):$M(b)?'String':O0.FS(O0.Ic(b));a.a=a.a+': '+(YM(b)?P0.UJ(b):b+'');a.c='('+a.d+') '+a.a;}};P0.RJ=function RJ(a){return bN(a.b)===bN(P0.NJ)?null:a.b};P0.SJ=function SJ(a){P0.OJ();P0.TJ.call(this,a);};P0.TJ=function TJ(a){Q0.MJ.call(this,a);P0.PJ(this);this.b=a;this.a='';};P0.UJ=function UJ(a){return a==null?null:a.message};P0.VJ=function VJ(a){return a==null?null:a.name};sR(84,158,{84:1,4:1,13:1,18:1},P0.SJ);_.Kb=function WJ(){P0.QJ(this);return this.c};_.Mb=function XJ(){return P0.RJ(this)};N0.JO=LS(84);P0.fK=function fK(b,a){return b[a]};P0.gK=function gK(a){return a.length};P0.hK=function hK(b,a){b[b.length]=a;};P0.iK=function iK(b,a){return b[a]};P0.jK=function jK(a){return a.length};P0.kK=function kK(){return Date.now()};sR(177,1,{});N0.LO=LS(177);Q0.oK=function oK(){Q0.oK=uR;!!(Q0.JK(),Q0.IK);};Q0.pK=function pK(a,b,c){return a.apply(b,c);};Q0.qK=function qK(){var a;if(lK!=0){a=P0.kK();if(a-mK>2000){mK=a;nK=Q0.xK();}}if(lK++==0){Q0.AK((Q0.zK(),Q0.yK));return true}return false};function rK(b){Q0.oK();return function(){return Q0.sK(b,this,arguments);}}
Q0.sK=function sK(a,b,c){var d;d=Q0.qK();try{return Q0.pK(a,b,c)}finally{Q0.tK(d);}};Q0.tK=function tK(a){a&&Q0.BK((Q0.zK(),Q0.yK));--lK;if(a){if(nK!=-1){Q0.vK(nK);nK=-1;}}};Q0.uK=function uK(a){Q0.oK();$wnd.setTimeout(function(){throw a},0);};Q0.vK=function vK(a){$wnd.clearTimeout(a);};Q0.wK=function wK(){lK!=0&&(lK=0);nK=-1;};Q0.xK=function xK(){return $wnd.setTimeout(Q0.wK,10)};var lK=0;var mK=0;var nK=-1;Q0.zK=function zK(){Q0.zK=uR;Q0.yK=new Q0.CK;};Q0.AK=function AK(a){var b,c;if(a.a){c=null;do{b=a.a;a.a=null;c=Q0.EK(b,c);}while(a.a);a.a=c;}};Q0.BK=function BK(a){var b,c;if(a.b){c=null;do{b=a.b;a.b=null;c=Q0.EK(b,c);}while(a.b);a.b=c;}};Q0.CK=function CK(){};Q0.DK=function DK(a,b){!a&&(a=P0.bK());P0.hK(a,b);return a};Q0.EK=function EK(b,c){var d,e,f,g;for(e=0,f=P0.gK(b);e<f;e++){g=P0.fK(b,e);try{Q0.HK(g)?Q0.FK(g).hc()&&(c=Q0.DK(c,g)):Q0.GK(g).hc();}catch(a){a=BQ(a);if(VM(a,18)){d=a;Q0.oK();Q0.uK(VM(d,84)?d.Mb():d);}else throw CQ(a)}}return c};sR(171,177,{},Q0.CK);N0.NO=LS(171);Q0.FK=function FK(a){return a[0]};Q0.GK=function GK(a){return a[0]};Q0.HK=function HK(a){return a[1]};a1.bL=function bL(a){return a.compatMode};a1.cL=function cL(){return $doc};b1.dL=function dL(){return ['USD','US$',2,'US$','$']};b1.fL=function fL(){b1.fL=uR;b1.eL=new b1.hL;};b1.gL=function gL(a){!a.a&&(a.a=new c1.CL);return a.a};b1.hL=function hL(){};sR(173,1,{},b1.hL);N0.SO=LS(173);b1.iL=function iL(){b1.iL=uR;b1.gL((b1.fL(),b1.fL(),b1.eL));};b1.jL=function jL(a){};b1.kL=function kL(a,b){var c,d;b.a+='E';if(a.e<0){a.e=-a.e;b.a+='-';}c=''+a.e;for(d=R0.I0(c).length;d<a.k;++d){b.a+='0';}b.a+=c;};b1.lL=function lL(a,b,c){if(a.d==0){O0.JU(b,0,String.fromCharCode(48));++a.b;++a.d;}if(a.b<a.d||a.c){O0.JU(b,a.b,String.fromCharCode(c));++a.d;}};b1.mL=function mL(a,b){var c,d;c=a.b+a.n;if(a.d<c){while(a.d<c){b.a+='0';++a.d;}}else {d=a.b+a.i;d>a.d&&(d=a.d);while(d>c&&O0.$T(b.a,d-1)==48){--d;}if(d<a.d){O0.IU(b,d,a.d);a.d=d;}}};b1.nL=function nL(a,b){var c,d;d=0;while(d<a.d-1&&O0.$T(b.a,d)==48){++d;}if(d>0){O0.ZR(b,0,d,'');a.d-=d;a.e-=d;}if(a.j>a.o&&a.j>0){a.e+=a.b-1;c=a.e%a.j;c<0&&(c+=a.j);a.b=c+1;a.e-=c;}else {a.e+=a.b-a.o;a.b=a.o;}if(a.d==1&&O0.$T(b.a,0)==48){a.e=0;a.b=a.o;}};b1.oL=function oL(a,b){var c,d,e,f;if(isNaN(b)){return 'NaN'}d=b<0||b==0&&1/b<0;d&&(b=-b);c=new O0.KU;if(!isNaN(b)&&!isFinite(b)){O0.HU(c,d?a.q:a.t);c.a+='\u221E';O0.HU(c,d?a.r:a.u);return c.a}b*=a.p;f=b1.BL(c,b);e=R0.I0(c.a).length+f+a.i+3;if(e>0&&e<R0.I0(c.a).length&&O0.$T(c.a,e)==57){b1.wL(a,c,e-1);f+=R0.I0(c.a).length-e;O0.IU(c,e,R0.I0(c.a).length);}b1.pL(a,d,c,f);return c.a};b1.pL=function pL(a,b,c,d){var e,f,g,h,i;if(a.g){f=(R0.F0(0,R0.I0('.').length),R0.I0('.').charCodeAt(0));g=(R0.F0(0,R0.I0(',').length),R0.I0(',').charCodeAt(0));}else {f=(R0.F0(0,R0.I0('.').length),R0.I0('.').charCodeAt(0));g=(R0.F0(0,R0.I0(',').length),R0.I0(',').charCodeAt(0));}a.e=0;a.d=R0.I0(c.a).length;a.b=a.d+d;h=a.v;e=a.f;a.b>p2&&(h=true);h&&b1.nL(a,c);b1.vL(a,c);b1.xL(a,c);b1.qL(a,c,g,e);b1.mL(a,c);b1.lL(a,c,f);h&&b1.kL(a,c);i=(R0.F0(0,R0.I0('0').length),R0.I0('0').charCodeAt(0));i!=48&&b1.rL(c,i);O0.JU(c,0,b?a.q:a.t);O0.HU(c,b?a.r:a.u);};b1.qL=function qL(a,b,c,d){var e;if(d>0){for(e=d;e<a.b;e+=d+1){O0.JU(b,a.b-e,String.fromCharCode(c));++a.b;++a.d;}}};b1.rL=function rL(a,b){var c,d,e;e=R0.I0(a.a).length;for(d=0;d<e;++d){c=O0.$T(a.a,d);c>=48&&c<=57&&O0.$R(a,d,c-48+b&D1);}};b1.sL=function sL(a,b,c,d,e){var f,g,h,i;O0.IU(d,0,R0.I0(d.a).length);g=false;h=R0.I0(b).length;for(i=c;i<h;++i){f=(R0.F0(i,R0.I0(b).length),R0.I0(b).charCodeAt(i));if(f==39){if(i+1<h&&(R0.F0(i+1,R0.I0(b).length),R0.I0(b).charCodeAt(i+1)==39)){++i;d.a+="'";}else {g=!g;}continue}if(g){d.a+=String.fromCharCode(f);}else {switch(f){case 35:case 48:case 44:case 46:case 59:return i-c;case 164:a.g=true;if(i+1<h&&(R0.F0(i+1,R0.I0(b).length),R0.I0(b).charCodeAt(i+1)==164)){++i;if(i<h-2&&(R0.F0(i+1,R0.I0(b).length),R0.I0(b).charCodeAt(i+1)==164)&&(R0.F0(i+2,R0.I0(b).length),R0.I0(b).charCodeAt(i+2)==164)){i+=2;O0.HU(d,d1.GL(a.a));}else {O0.HU(d,d1.DL(a.a));}}else {O0.HU(d,d1.EL(a.a));}break;case 37:if(!e){if(a.p!=1){throw CQ(new O0.zT(p4+b+'"'))}a.p=100;}d.a+='%';break;case 8240:if(!e){if(a.p!=1){throw CQ(new O0.zT(p4+b+'"'))}a.p=1000;}d.a+='\u2030';break;case 45:d.a+='-';break;default:d.a+=String.fromCharCode(f);}}}return h-c};
b1.tL=function tL(a,b){var c,d;d=0;c=new O0.KU;d+=b1.sL(a,b,d,c,false);a.t=c.a;d+=b1.uL(a,b,d,false);d+=b1.sL(a,b,d,c,false);a.u=c.a;if(d<R0.I0(b).length&&(R0.F0(d,R0.I0(b).length),R0.I0(b).charCodeAt(d)==59)){++d;d+=b1.sL(a,b,d,c,true);a.q=c.a;d+=b1.uL(a,b,d,true);d+=b1.sL(a,b,d,c,true);a.r=c.a;}else {a.q='-'+a.t;a.r=a.u;}};b1.uL=function uL(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p;f=-1;g=0;p=0;h=0;j=-1;k=R0.I0(b).length;n=c;l=true;for(;n<k&&l;++n){e=(R0.F0(n,R0.I0(b).length),R0.I0(b).charCodeAt(n));switch(e){case 35:p>0?++h:++g;j>=0&&f<0&&++j;break;case 48:if(h>0){throw CQ(new O0.zT("Unexpected '0' in pattern \""+b+'"'))}++p;j>=0&&f<0&&++j;break;case 44:j=0;break;case 46:if(f>=0){throw CQ(new O0.zT('Multiple decimal separators in pattern "'+b+'"'))}f=g+p+h;break;case 69:if(!d){if(a.v){throw CQ(new O0.zT('Multiple exponential symbols in pattern "'+b+'"'))}a.v=true;a.k=0;}while(n+1<k&&(R0.F0(n+1,R0.I0(b).length),R0.I0(b).charCodeAt(n+1)==48)){++n;d||++a.k;}if(!d&&g+p<1||a.k<1){throw CQ(new O0.zT('Malformed exponential pattern "'+b+'"'))}l=false;break;default:--n;l=false;}}if(p==0&&g>0&&f>=0){m=f;m==0&&++m;h=g-m;g=m-1;p=1;}if(f<0&&h>0||f>=0&&(f<g||f>g+p)||j==0){throw CQ(new O0.zT('Malformed pattern "'+b+'"'))}if(d){return n-c}o=g+p+h;a.i=f>=0?o-f:0;if(f>=0){a.n=g+p-f;a.n<0&&(a.n=0);}i=f>=0?f:o;a.o=i-g;if(a.v){a.j=g+a.o;a.i==0&&a.o==0&&(a.o=1);}a.f=j>0?j:0;a.c=f==0||f==o;return n-c};b1.vL=function vL(a,b){var c,d,e;if(a.b>a.d){while(a.d<a.b){b.a+='0';++a.d;}}if(!a.v){if(a.b<a.o){d=new O0.KU;while(a.b<a.o){d.a+='0';++a.b;++a.d;}O0.JU(b,0,d.a);}else if(a.b>a.o){e=a.b-a.o;for(c=0;c<e;++c){if(O0.$T(b.a,c)!=48){e=c;break}}if(e>0){O0.ZR(b,0,e,'');a.d-=e;a.b-=e;}}}};b1.wL=function wL(a,b,c){var d,e;d=true;while(d&&c>=0){e=O0.$T(b.a,c);if(e==57){O0.$R(b,c--,48);}else {O0.$R(b,c,e+1&D1);d=false;}}if(d){O0.JU(b,0,String.fromCharCode(49));++a.b;++a.d;}};b1.xL=function xL(a,b){var c;if(a.d>a.b+a.i&&O0.YR(b,a.b+a.i)>=53){c=a.b+a.i-1;b1.wL(a,b,c);}};b1.yL=function yL(a,b,c){b1.jL(this);if(!b){throw CQ(new O0.zT('Unknown currency code'))}this.s=a;this.a=b;b1.tL(this,this.s);if(!c&&this.g){this.n=d1.FL(this.a)&7;this.i=this.n;}};b1.zL=function zL(a,b){b1.iL();b1.yL.call(this,a,b,true);};b1.AL=function AL(a,b){return a.toPrecision(b)};b1.BL=function BL(a,b){var c,d,e,f,g;g=R0.I0(a.a).length;O0.HU(a,b1.AL(b,20));f=0;e=O0.jU(a.a,'e',g);e<0&&(e=O0.jU(a.a,'E',g));if(e>=0){d=e+1;d<R0.I0(a.a).length&&O0.$T(a.a,d)==43&&++d;d<R0.I0(a.a).length&&(f=O0.cT(O0.pU(a.a,d)));O0.IU(a,e,R0.I0(a.a).length);}c=O0.jU(a.a,'.',g);if(c>=0){O0.ZR(a,c,c+1,'');f-=R0.I0(a.a).length-c;}return f};sR(130,1,{},b1.zL);_.b=0;_.c=false;_.d=0;_.e=0;_.f=3;_.g=false;_.i=3;_.j=40;_.k=0;_.n=0;_.o=1;_.p=1;_.q='-';_.r='';_.t='';_.u='';_.v=false;N0.TO=LS(130);c1.CL=function CL(){};sR(175,1,{},c1.CL);N0.UO=LS(175);d1.DL=function DL(a){return a[0]};d1.EL=function EL(a){return a[1]};d1.FL=function FL(a){return a[2]};d1.GL=function GL(a){return a[4]||a[1]};N0.ZL=function ZL(a){var b,c,d;b=a&x3;c=a>>22&x3;d=a<0?q4:0;return N0._L(b,c,d)};N0.$L=function $L(a){return N0._L(N0.fM(a),N0.gM(a),N0.eM(a))};N0._L=function _L(a,b,c){return {l:a,m:b,h:c}};N0.aM=function aM(a,b,c){var d,e,f,g,h,i;if(N0.fM(b)==0&&N0.gM(b)==0&&N0.eM(b)==0){throw CQ(new O0.dS('divide by zero'))}if(N0.fM(a)==0&&N0.gM(a)==0&&N0.eM(a)==0){c&&(N0.YL=N0._L(0,0,0));return N0._L(0,0,0)}if(N0.eM(b)==V2&&N0.gM(b)==0&&N0.fM(b)==0){return N0.bM(a,c)}i=false;if(N0.eM(b)>>19!=0){b=N0.AM(b);i=!i;}g=N0.kM(b);f=false;e=false;d=false;if(N0.eM(a)==V2&&N0.gM(a)==0&&N0.fM(a)==0){e=true;f=true;if(g==-1){a=N0.$L((N0.PM(),N0.LM));d=true;i=!i;}else {h=N0.EM(a,g);i&&N0.iM(h);c&&(N0.YL=N0._L(0,0,0));return h}}else if(N0.eM(a)>>19!=0){f=true;a=N0.AM(a);d=true;i=!i;}if(g!=-1){return N0.cM(a,g,i,f,c)}if(N0.xM(a,b)<0){c&&(f?(N0.YL=N0.AM(a)):(N0.YL=N0._L(N0.fM(a),N0.gM(a),N0.eM(a))));return N0._L(0,0,0)}return N0.dM(d?a:N0._L(N0.fM(a),N0.gM(a),N0.eM(a)),b,i,f,e,c)};N0.bM=function bM(a,b){if(N0.eM(a)==V2&&N0.gM(a)==0&&N0.fM(a)==0){b&&(N0.YL=N0._L(0,0,0));return N0.$L((N0.PM(),N0.NM))}b&&(N0.YL=N0._L(N0.fM(a),N0.gM(a),N0.eM(a)));return N0._L(0,0,0)};N0.cM=function cM(a,b,c,d,e){var f;f=N0.EM(a,b);c&&N0.iM(f);if(e){a=N0.hM(a,b);d?(N0.YL=N0.AM(a)):(N0.YL=N0._L(N0.fM(a),N0.gM(a),N0.eM(a)));}return f};N0.dM=function dM(a,b,c,d,e,f){var g,h,i,j;j=N0.jM(b)-N0.jM(a);g=N0.DM(b,j);i=N0._L(0,0,0);while(j>=0){h=N0.uM(a,g);if(h){j<22?N0.mM(i,j):j<44?N0.nM(i,j-22):N0.lM(i,j-44);if(N0.fM(a)==0&&N0.gM(a)==0&&N0.eM(a)==0){break}}N0.sM(g);--j;}c&&N0.iM(i);if(f){if(d){N0.YL=N0.AM(a);e&&(N0.YL=N0.GM(N0.YL,(N0.PM(),N0.NM)));}else {N0.YL=N0._L(N0.fM(a),N0.gM(a),N0.eM(a));}}return i};N0.eM=function eM(a){return a.h};N0.fM=function fM(a){return a.l};N0.gM=function gM(a){return a.m};N0.hM=function hM(a,b){var c,d,e;if(b<=22){c=N0.fM(a)&(1<<b)-1;d=e=0;}else if(b<=44){c=N0.fM(a);d=N0.gM(a)&(1<<b-22)-1;e=0;}else {c=N0.fM(a);d=N0.gM(a);e=N0.eM(a)&(1<<b-44)-1;}return N0._L(c,d,e)};N0.iM=function iM(a){var b,c,d;b=~N0.fM(a)+1&x3;c=~N0.gM(a)+(b==0?1:0)&x3;d=~N0.eM(a)+(b==0&&c==0?1:0)&q4;N0.pM(a,b);N0.qM(a,c);N0.oM(a,d);};N0.jM=function jM(a){var b,c;c=JT(N0.eM(a));if(c==32){b=JT(N0.gM(a));return b==32?JT(N0.fM(a))+32:b+20-10}else {return c-12}};N0.kM=function kM(a){var b,c,d;c=N0.fM(a);if((c&c-1)!=0){return -1}d=N0.gM(a);if((d&d-1)!=0){return -1}b=N0.eM(a);if((b&b-1)!=0){return -1}if(b==0&&d==0&&c==0){return -1}if(b==0&&d==0&&c!=0){return KT(c)}if(b==0&&d!=0&&c==0){return KT(d)+22}if(b!=0&&d==0&&c==0){return KT(b)+44}return -1};N0.lM=function lM(a,b){a.h|=1<<b;};N0.mM=function mM(a,b){a.l|=1<<b;};N0.nM=function nM(a,b){a.m|=1<<b;};N0.oM=function oM(a,b){a.h=b;};N0.pM=function pM(a,b){a.l=b;};N0.qM=function qM(a,b){a.m=b;};N0.rM=function rM(a){return N0.fM(a)+N0.gM(a)*S3+N0.eM(a)*r4};N0.sM=function sM(a){var b,c,d;c=N0.gM(a);d=N0.eM(a);b=N0.fM(a);N0.oM(a,d>>>1);N0.qM(a,c>>>1|(d&1)<<21);N0.pM(a,b>>>1|(c&1)<<21);};N0.uM=function uM(a,b){var c,d,e;e=N0.eM(a)-N0.eM(b);if(e<0){return false}c=N0.fM(a)-N0.fM(b);d=N0.gM(a)-N0.gM(b)+(c>>22);e+=d>>22;if(e<0){return false}N0.pM(a,c&x3);N0.qM(a,d&x3);N0.oM(a,e&q4);return true};N0.vM=function vM(a,b){var c,d,e;c=N0.fM(a)+N0.fM(b);d=N0.gM(a)+N0.gM(b)+(c>>22);e=N0.eM(a)+N0.eM(b)+(d>>22);return N0._L(c&x3,d&x3,e&q4)};N0.wM=function wM(a,b){return N0._L(N0.fM(a)&N0.fM(b),N0.gM(a)&N0.gM(b),N0.eM(a)&N0.eM(b))};N0.xM=function xM(a,b){var c,d,e,f,g,h,i,j;i=N0.eM(a)>>19;j=N0.eM(b)>>19;if(i!=j){return j-i}e=N0.eM(a);h=N0.eM(b);if(e!=h){return e-h}d=N0.gM(a);g=N0.gM(b);if(d!=g){return d-g}c=N0.fM(a);f=N0.fM(b);return c-f};N0.yM=function yM(a){var b,c,d,e,f;if(isNaN(a)){return N0.PM(),N0.OM}if(a<-9223372036854775808){return N0.PM(),N0.MM}if(a>=9223372036854775807){return N0.PM(),N0.LM}e=false;if(a<0){e=true;a=-a;}d=0;if(a>=r4){d=cN(a/r4);a-=d*r4;}c=0;if(a>=S3){c=cN(a/S3);a-=c*S3;}b=cN(a);f=N0._L(b,c,d);e&&N0.iM(f);return f};N0.zM=function zM(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;c=N0.fM(a)&8191;d=N0.fM(a)>>13|(N0.gM(a)&15)<<9;e=N0.gM(a)>>4&8191;f=N0.gM(a)>>17|(N0.eM(a)&255)<<5;g=(N0.eM(a)&1048320)>>8;h=N0.fM(b)&8191;i=N0.fM(b)>>13|(N0.gM(b)&15)<<9;j=N0.gM(b)>>4&8191;k=N0.gM(b)>>17|(N0.eM(b)&255)<<5;l=(N0.eM(b)&1048320)>>8;B=c*h;C=d*h;D=e*h;F=f*h;G=g*h;if(i!=0){C+=c*i;D+=d*i;F+=e*i;G+=f*i;}if(j!=0){D+=c*j;F+=d*j;G+=e*j;}if(k!=0){F+=c*k;G+=d*k;}l!=0&&(G+=c*l);n=B&x3;o=(C&511)<<13;m=n+o;q=B>>22;r=C>>9;s=(D&262143)<<4;t=(F&31)<<17;p=q+r+s+t;v=D>>18;w=F>>5;A=(G&4095)<<8;u=v+w+A;p+=m>>22;m&=x3;u+=p>>22;p&=x3;u&=q4;return N0._L(m,p,u)};N0.AM=function AM(a){var b,c,d;b=~N0.fM(a)+1&x3;c=~N0.gM(a)+(b==0?1:0)&x3;d=~N0.eM(a)+(b==0&&c==0?1:0)&q4;return N0._L(b,c,d)};N0.BM=function BM(a){return N0._L(~N0.fM(a)&x3,~N0.gM(a)&x3,~N0.eM(a)&q4)};N0.CM=function CM(a,b){return N0._L(N0.fM(a)|N0.fM(b),N0.gM(a)|N0.gM(b),N0.eM(a)|N0.eM(b))};N0.DM=function DM(a,b){var c,d,e;b&=63;if(b<22){c=N0.fM(a)<<b;d=N0.gM(a)<<b|N0.fM(a)>>22-b;e=N0.eM(a)<<b|N0.gM(a)>>22-b;}else if(b<44){c=0;d=N0.fM(a)<<b-22;e=N0.gM(a)<<b-22|N0.fM(a)>>44-b;}else {c=0;d=0;e=N0.fM(a)<<b-44;}return N0._L(c&x3,d&x3,e&q4)};N0.EM=function EM(a,b){var c,d,e,f,g;b&=63;c=N0.eM(a);d=(c&V2)!=0;d&&(c|=-1048576);if(b<22){g=c>>b;f=N0.gM(a)>>b|c<<22-b;e=N0.fM(a)>>b|N0.gM(a)<<22-b;}else if(b<44){g=d?q4:0;f=c>>b-22;e=N0.gM(a)>>b-22|c<<44-b;}else {g=d?q4:0;f=d?x3:0;e=c>>b-44;}return N0._L(e&x3,f&x3,g&q4)};N0.FM=function FM(a,b){var c,d,e,f;b&=63;c=N0.eM(a)&q4;if(b<22){f=c>>>b;e=N0.gM(a)>>b|c<<22-b;d=N0.fM(a)>>b|N0.gM(a)<<22-b;}else if(b<44){f=0;e=c>>>b-22;d=N0.gM(a)>>b-22|N0.eM(a)<<44-b;}else {f=0;e=0;d=c>>>b-44;}return N0._L(d&x3,e&x3,f&q4)};N0.GM=function GM(a,b){var c,d,e;c=N0.fM(a)-N0.fM(b);d=N0.gM(a)-N0.gM(b)+(c>>22);e=N0.eM(a)-N0.eM(b)+(d>>22);return N0._L(c&x3,d&x3,e&q4)};N0.HM=function HM(a){if(N0.xM(a,(N0.PM(),N0.OM))<0){return -N0.rM(N0.AM(a))}return N0.fM(a)+N0.gM(a)*S3+N0.eM(a)*r4};N0.IM=function IM(a){return N0.fM(a)|N0.gM(a)<<22};N0.JM=function JM(a){var b,c,d,e,f;if(N0.fM(a)==0&&N0.gM(a)==0&&N0.eM(a)==0){return '0'}if(N0.eM(a)==V2&&N0.gM(a)==0&&N0.fM(a)==0){return '-9223372036854775808'}if(N0.eM(a)>>19!=0){return '-'+N0.JM(N0.AM(a))}c=a;d='';while(!(N0.fM(c)==0&&N0.gM(c)==0&&N0.eM(c)==0)){e=N0.ZL(s4);c=N0.aM(c,e,true);b=''+N0.IM(N0.YL);if(!(N0.fM(c)==0&&N0.gM(c)==0&&N0.eM(c)==0)){f=9-R0.I0(b).length;for(;f>0;f--){b='0'+b;}}d=b+d;}return d};N0.KM=function KM(a,b){return N0._L(N0.fM(a)^N0.fM(b),N0.gM(a)^N0.gM(b),N0.eM(a)^N0.eM(b))};N0.PM=function PM(){N0.PM=uR;N0.LM=N0._L(x3,x3,524287);N0.MM=N0._L(0,0,V2);N0.NM=N0.ZL(1);N0.ZL(2);N0.OM=N0.ZL(0);};function DQ(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))+N0.GQ(N0.HQ(b));if(t4<c&&c<r4){return N0.MQ(c)}}return N0.LQ(N0.vM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
function EQ(a,b){return N0.LQ(N0.wM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
N0.FQ=function FQ(a){return a};N0.GQ=function GQ(a){return a};N0.HQ=function HQ(a){return a};N0.IQ=function IQ(a){return a|0};function JQ(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))-N0.GQ(N0.HQ(b));if(!isNaN(c)){return c}}return N0.xM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b))}
N0.KQ=function KQ(a){return a};N0.LQ=function LQ(a){var b;b=N0.eM(a);if(b==0){return N0.MQ(N0.fM(a)+N0.gM(a)*S3)}if(b==q4){return N0.MQ(N0.fM(a)+N0.gM(a)*S3-r4)}return N0.KQ(a)};N0.MQ=function MQ(a){return a};function NQ(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))/N0.GQ(N0.HQ(b));if(t4<c&&c<r4){return N0.MQ(c<0?$wnd.Math.ceil(c):$wnd.Math.floor(c))}}return N0.LQ(N0.aM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b),false))}
function OQ(a,b){return JQ(a,b)==0}
function PQ(a){if(t4<a&&a<r4){return N0.MQ(a<0?$wnd.Math.ceil(a):$wnd.Math.floor(a))}return N0.LQ(N0.yM(a))}
function QQ(a){return N0.MQ(a)}
function RQ(a,b){return JQ(a,b)>0}
function SQ(a,b){return JQ(a,b)>=0}
N0.TQ=function TQ(a){return typeof a===s1};function UQ(a,b){return JQ(a,b)<0}
function VQ(a,b){return JQ(a,b)<=0}
function WQ(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))%N0.GQ(N0.HQ(b));if(t4<c&&c<r4){return N0.MQ(c)}}return N0.LQ((N0.aM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b),true),N0.YL))}
function XQ(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))*N0.GQ(N0.HQ(b));if(t4<c&&c<r4){return N0.MQ(c)}}return N0.LQ(N0.zM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
function YQ(a){var b;if(N0.TQ(a)){b=0-N0.GQ(N0.HQ(a));if(!isNaN(b)){return N0.MQ(b)}}return N0.LQ(N0.AM(N0.FQ(a)))}
function ZQ(a,b){return JQ(a,b)!=0}
function $Q(a){return N0.LQ(N0.BM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a)))}
function _Q(a,b){return N0.LQ(N0.CM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
function aR(a,b){return N0.LQ(N0.DM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),b))}
function bR(a,b){return N0.LQ(N0.EM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),b))}
function cR(a,b){return N0.LQ(N0.FM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),b))}
function dR(a,b){var c;if(N0.TQ(a)&&N0.TQ(b)){c=N0.GQ(N0.HQ(a))-N0.GQ(N0.HQ(b));if(t4<c&&c<r4){return N0.MQ(c)}}return N0.LQ(N0.GM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
N0.eR=function eR(a){var b,c,d,e;e=N0.GQ(a);d=0;if(e<0){e+=r4;d=q4;}c=cN(e/S3);b=cN(e-c*S3);return N0._L(b,c,d)};function fR(a){var b;if(N0.TQ(a)){b=N0.GQ(N0.HQ(a));return b==-0.?0:b}return N0.HM(N0.FQ(a))}
function gR(a){if(N0.TQ(a)){return N0.IQ(N0.GQ(N0.HQ(a)))}return N0.IM(N0.FQ(a))}
function hR(a){if(N0.TQ(a)){return ''+N0.GQ(N0.HQ(a))}return N0.JM(N0.FQ(a))}
function iR(a,b){return N0.LQ(N0.KM(N0.TQ(a)?N0.eR(N0.HQ(a)):N0.FQ(a),N0.TQ(b)?N0.eR(N0.HQ(b)):N0.FQ(b)))}
function BR(){e1.CR();}
e1.CR=function CR(){var a,b,c;b=a1.bL(a1.cL());a=WL(IL(N0.CP,1),B1,2,6,[u4]);for(c=0;c<a.length;c++){if(O0.eU(a[c],b)){return}}a.length==1&&O0.eU(u4,a[0])&&O0.eU('BackCompat',b)?"GWT no longer supports Quirks Mode (document.compatMode=' BackCompat').<br>Make sure your application's host HTML page has a Standards Mode (document.compatMode=' CSS1Compat') doctype,<br>e.g. by using &lt;!doctype html&gt; at the start of your application's HTML page.<br><br>To continue using this unsupported rendering mode and risk layout problems, suppress this message by adding<br>the following line to your*.gwt.xml module file:<br>&nbsp;&nbsp;&lt;extend-configuration-property name=\"document.compatMode\" value=\""+b+'"/&gt;':"Your *.gwt.xml module configuration prohibits the use of the current document rendering mode (document.compatMode=' "+b+"').<br>Modify your application's host HTML page doctype, or update your custom "+"'document.compatMode' configuration property settings.";};f1.DR=function DR(a,b,c,d){var e,f,g,h,i,j;g=0;j=0;e=0;d==null&&(d=OL(N0.gN,c3,5,3,15,1));i=$wnd.Math.min(a,$wnd.Math.min(b,c));h=$wnd.Math.max(a,$wnd.Math.max(b,c));e=h;f=h-i;if(f==0){e=i;g=0;d[0]=g;d[1]=j;d[2]=e;return d}if(h!=0)j=f/h;else {j=0;g=0;d[0]=g;d[1]=j;d[2]=e;return d}a==h?(g=(b-c)/f):b==h?(g=2+(c-a)/f):(g=4+(a-b)/f);g*=60;g<0&&(g+=360);d[0]=g/360;d[1]=j;d[2]=e;return d};f1.GR=function GR(){f1.GR=uR;f1.FR=WL(IL(N0.fN,1),O2,5,15,[5.55,15,15,15,15,15,15,15,15,v4,v4,v4,v4,v4,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,v4,v4,7.1,w4,w4,17.78,x4,3.82,6.66,6.66,7.78,11.68,v4,6.66,v4,v4,w4,w4,w4,w4,w4,w4,w4,w4,w4,w4,v4,v4,11.68,11.68,11.68,w4,20.3,x4,x4,y4,y4,x4,12.22,15.56,y4,v4,10,x4,w4,16.66,y4,15.56,x4,15.56,y4,x4,12.22,y4,x4,18.88,x4,x4,12.22,v4,v4,v4,9.38,w4,6.66,w4,w4,10,w4,w4,v4,w4,w4,4.44,4.44,10,4.44,16.66,w4,w4,w4,w4,6.66,10,v4,w4,10,y4,10,10,10,6.68,5.2,6.68,11.68,10.5]);};f1.HR=function HR(a,b){var c,d,e,f,g;if(O0.eU(a.a,'Helvetica')){f=0;for(d=0,e=R0.I0(b).length;d<e;d++){c=(R0.F0(d,R0.I0(b).length),R0.I0(b).charCodeAt(d));f+=(c<128?(g=f1.FR[c]):(g=v4),g*a.b/20);}return f}else {return f1.IR(a,b)}};f1.IR=function IR(e,a){var b=f1.ER;if(!b){b=$doc.createElement('canvas');f1.ER=b;}var c=''+e.b+'px '+e.a;var d=b.getContext('2d');d.font=c;var a=d.measureText(a);return a.width};f1.JR=function JR(a){f1.GR();this.a='Helvetica';this.b=a;};sR(125,1,{},f1.JR);_.b=0;f1.ER=null;N0.VO=LS(125);sR(208,1,{});N0.YO=LS(208);sR(129,208,{129:1});_.ib=function KR(a){var b;if(a===this){return true}if(VM(a,38)){b=a;return this.c==b.c&&this.d==b.d&&this.b==b.b&&this.a==b.a}return false};_.kb=function LR(){var a;a=lT(this.c);a=DQ(a,XQ(lT(this.d),37));a=DQ(a,XQ(lT(this.b),43));a=DQ(a,XQ(lT(this.a),47));return gR(a)^gR(bR(a,32))};N0.XO=LS(129);g1.MR=function MR(a,b){a.c=0;a.d=0;a.b=b;a.a=0;};g1.NR=function NR(a){g1.MR(this,a);};sR(38,129,{129:1,38:1},g1.NR);_.a=0;_.b=0;_.c=0;_.d=0;N0.WO=LS(38);sR(202,1,{});N0.bP=LS(202);h1.OR=function OR(a){var b;b=-1;if(a.a!=-2){b=a.a;a.a=-2;}else {b=h1.TR(a.b);}return b};h1.PR=function PR(a){var b,c,d;c=h1.OR(a);if(c==-1)return null;d=new O0.KU;b=false;while(!b){if(c==10){b=true;}else if(c==13){b=true;c=h1.OR(a);c!=10&&(a.a=c);}if(!b){if(c==-1){break}O0.DU(d,c&D1);c=h1.OR(a);}}return d.a};h1.QR=function QR(a){this.b=a;this.a=-2;};sR(50,202,{},h1.QR);_.a=0;N0.ZO=LS(50);sR(179,1,{});N0._O=LS(179);sR(178,179,{});N0.$O=LS(178);h1.RR=function RR(){};sR(133,178,{},h1.RR);N0.aP=LS(133);h1.TR=function TR(a){return a.a==R0.I0(a.b).length?-1:O0.$T(a.b,a.a++)};h1.UR=function UR(a){this.b=a;this.a=0;};sR(49,202,{},h1.UR);_.a=0;N0.cP=LS(49);sR(203,1,{});N0.eP=LS(203);h1.VR=function VR(a,b){O0.zU(a.a,b);};h1.WR=function WR(){this.a=new O0.AU;};sR(122,203,{},h1.WR);_.lb=function XR(){return this.a.a};N0.dP=LS(122);O0.YR=function YR(a,b){return O0.$T(a.a,b)};O0.ZR=function ZR(a,b,c,d){var e;e=R0.I0(a.a).length;c>e?(c=e):R0.F0(b,c+1);a.a=O0.qU(a.a,0,b)+(''+d)+O0.pU(a.a,c);};O0.$R=function $R(a,b,c){O0.ZR(a,b,b+1,String.fromCharCode(c));};O0._R=function _R(a,b){var c;c=R0.I0(a.a).length;b<c?(a.a=O0.qU(a.a,0,b)):b>c&&(a.a+=O0.vU(OL(N0.eN,c3,5,b-c,15,1)));};O0.aS=function aS(a){return a.a};O0.bS=function bS(a){this.a=a;};sR(59,1,{106:1});_.lb=function cS(){return O0.aS(this)};N0.fP=LS(59);O0.dS=function dS(a){O0.IJ.call(this,a);};sR(64,37,A1,O0.dS);N0.gP=LS(64);O0.gS=function gS(){O0.eS.call(this);};O0.hS=function hS(a){O0.fS.call(this,a);};sR(131,53,A1,O0.gS,O0.hS);N0.hP=LS(131);function tS(a){if(!a){throw CQ(new O0.yT)}}
function uS(a,b,c){var d,e;d=O0.$T(a,b++);if(d>=55296&&d<=56319&&b<c&&yS(e=(R0.F0(b,R0.I0(a).length),R0.I0(a).charCodeAt(b)))){return C1+((d&1023)<<10)+(e&1023)}return d}
function vS(a){if(a>=48&&a<48+$wnd.Math.min(10,10)){return a-48}if(a>=97&&a<97){return a-97+10}if(a>=65&&a<65){return a-65+10}return -1}
function wS(a){return null!=String.fromCharCode(a).match(/\d/)}
function xS(a){return null!=String.fromCharCode(a).match(/[A-Z]/i)}
function yS(a){return a>=56320&&a<=57343}
function zS(a,b,c){tS(a>=0&&a<=1114111);if(a>=C1){b[c++]=55296+(a-C1>>10&1023)&D1;b[c]=56320+(a-C1&1023)&D1;return 2}else {b[c]=a&D1;return 1}}
function AS(a){return String.fromCharCode(a).toLowerCase().charCodeAt(0)}
function BS(a){return String.fromCharCode(a).toUpperCase().charCodeAt(0)}
O0.mT=function mT(a,b){return a.b-b.b};O0.nT=function nT(a){return a.a!=null?a.a:''+a.b};O0.oT=function oT(a){return a.b};function pT(a,b){this.a=a;this.b=b;}
sR(48,1,{4:1,27:1,48:1});_.qb=function rT(a){return O0.mT(this,a)};_.compareTo=function qT(a){return O0.mT(this,a)};_.equals=function sT(a){return this===a};_.ib=function(a){return this.equals(a)};_.hashCode=function tT(){return R0.t0(this)};_.kb=function(){return this.hashCode()};_.name=function uT(){return O0.nT(this)};_.ordinal=function vT(){return O0.oT(this)};_.toString=function wT(){return this.a!=null?this.a:''+this.b};_.lb=function(){return this.toString()};_.b=0;N0.lP=LS(48);function xT(a){var b;b=O0.bT(a);if(b>Q3){return Infinity}else if(b<-3.4028234663852886E38){return -Infinity}return b}
O0.yT=function yT(){O0.GJ.call(this);};O0.zT=function zT(a){O0.IJ.call(this,a);};sR(28,37,A1,O0.yT,O0.zT);N0.nP=LS(28);O0.AT=function AT(){O0.GJ.call(this);};sR(159,37,A1,O0.AT);N0.oP=LS(159);O0.BT=function BT(a,b){return FT(a.a,b.a)};O0.CT=function CT(a,b){return O0.BT(a,b)};O0.DT=function DT(a){this.a=a;};function ET(a){a-=a>>1&1431655765;a=(a>>2&858993459)+(a&858993459);a=(a>>4)+a&252645135;a+=a>>8;a+=a>>16;return a&63}
function FT(a,b){return a<b?-1:a>b?1:0}
function JT(a){var b,c,d;if(a<0){return 0}else if(a==0){return 32}else {d=-(a>>16);b=d>>16&16;c=16-b;a=a>>b;d=a-256;b=d>>16&8;c+=b;a<<=b;d=a-k2;b=d>>16&4;c+=b;a<<=b;d=a-j2;b=d>>16&2;c+=b;a<<=b;d=a>>14;b=d&~(d>>1);return c+2-b}}
function KT(a){var b,c;if(a==0){return 32}else {c=0;for(b=1;(b&a)==0;b<<=1){++c;}return c}}
O0.MT=function MT(a){if(a>-129&&a<128){return O0.PT(a)}return new O0.DT(a)};sR(39,72,{4:1,27:1,39:1,72:1},O0.DT);_.qb=function GT(a){return O0.CT(this,a)};_.ib=function HT(a){return VM(a,39)&&a.a==this.a};_.kb=function IT(){return this.a};_.lb=function LT(){return ''+this.a};_.a=0;N0.qP=LS(39);O0.OT=function OT(){O0.OT=uR;O0.NT=OL(N0.qP,r3,39,256,0,1);};O0.PT=function PT(a){O0.OT();var b,c;b=a+128;c=O0.NT[b];!c&&(c=O0.NT[b]=new O0.DT(a));return c};sR(244,1,{});O0.QT=function QT(a){O0.IJ.call(this,a);};sR(172,37,A1,O0.QT);N0.sP=LS(172);O0.VT=function VT(a){O0.zT.call(this,a);};sR(26,28,{4:1,13:1,26:1,18:1},O0.VT);N0.uP=LS(26);O0.WT=function WT(a,b,c){this.a=q1;this.d=a;this.b=b;this.c=c;};sR(47,1,{4:1,47:1},O0.WT);_.ib=function XT(a){var b;if(VM(a,47)){b=a;return this.c==b.c&&this.d==b.d&&this.a==b.a&&this.b==b.b}return false};_.kb=function YT(){return T0.xZ(WL(IL(N0.wP,1),z1,1,5,[O0.MT(this.c),this.a,this.d,this.b]))};_.lb=function ZT(){return this.a+'.'+this.d+'('+(this.b!=null?this.b:'Unknown Source')+(this.c>=0?':'+this.c:'')+')'};_.c=0;N0.yP=LS(47);O0.xU=function xU(a,b){a.a+=String.fromCharCode(b);return a};O0.yU=function yU(a,b){a.a+=b;return a};O0.zU=function zU(a,b){a.a+=''+b;return a};O0.AU=function AU(){O0.bS.call(this,'');};O0.BU=function BU(){O0.bS.call(this,'');};O0.CU=function CU(a){O0.bS.call(this,(R0.z0(a),a));};sR(40,59,{106:1},O0.AU,O0.BU,O0.CU);N0.zP=LS(40);O0.DU=function DU(a,b){a.a+=String.fromCharCode(b);return a};O0.EU=function EU(a,b){a.a+=b;return a};O0.FU=function FU(a,b){a.a+=hR(b);return a};O0.GU=function GU(a,b){a.a+=''+b;return a};O0.HU=function HU(a,b){a.a+=''+b;return a};O0.IU=function IU(a,b,c){O0.ZR(a,b,c,'');return a};O0.JU=function JU(a,b,c){O0.ZR(a,b,b,c);return a};O0.KU=function KU(){O0.bS.call(this,'');};O0.LU=function LU(){O0.bS.call(this,'');};O0.MU=function MU(a){O0.bS.call(this,(R0.z0(a),a));};sR(20,59,{106:1},O0.KU,O0.LU,O0.MU);N0.AP=LS(20);O0.PU=function PU(){O0.PU=uR;O0.OU=new h1.RR;};O0.QU=function QU(a,b,c,d,e){O0.PU();R0.A0(a,'src');R0.A0(c,'dest');O0.RU(a,b,c,d,e);R0.a0(a,b,c,d,e,true);return};O0.RU=function RU(a,b,c,d,e){var f,g;g=R0.I0(a).length;f=R0.I0(c).length;if(b<0||d<0||e<0||b+e>g||d+e>f){throw CQ(new O0.eS)}};sR(246,1,{});O0.SU=function SU(){O0.GJ.call(this);};O0.TU=function TU(a){O0.IJ.call(this,a);};sR(57,37,A1,O0.SU,O0.TU);N0.EP=LS(57);i1.aV=function aV(){i1.aV=uR;var a,b,c;new i1.jV(1,0);new i1.jV(10,0);new i1.jV(0,0);i1.UU=OL(N0.FP,r3,12,11,0,1);i1.VU=OL(N0.eN,c3,5,100,15,1);i1.WU=WL(IL(N0.fN,1),O2,5,15,[1,5,25,125,625,3125,15625,78125,390625,1953125,9765625,48828125,244140625,1220703125,6103515625,30517578125,152587890625,762939453125,3814697265625,19073486328125,95367431640625,476837158203125,2384185791015625]);i1.XU=OL(N0.hN,K1,5,i1.WU.length,15,1);i1.YU=WL(IL(N0.fN,1),O2,5,15,[1,10,100,1000,E1,100000,1000000,10000000,100000000,s4,10000000000,100000000000,1000000000000,10000000000000,100000000000000,1000000000000000,10000000000000000]);i1.ZU=OL(N0.hN,K1,5,i1.YU.length,15,1);i1.$U=OL(N0.FP,r3,12,11,0,1);a=0;for(;a<i1.$U.length;a++){i1.UU[a]=new i1.jV(N0.MQ(a),0);i1.$U[a]=new i1.jV(0,a);i1.VU[a]=48;}for(;a<i1.VU.length;a++){i1.VU[a]=48;}for(c=0;c<i1.XU.length;c++){i1.XU[c]=i1.mV(i1.WU[c]);}for(b=0;b<i1.ZU.length;b++){i1.ZU[b]=i1.mV(i1.YU[b]);}i1.IW();};i1.bV=function bV(a,b){var c,d,e,f,g,h;e=i1.fV(a);h=i1.fV(b);if(e==h){if(a.e==b.e&&a.a<54&&b.a<54){return a.f<b.f?-1:a.f>b.f?1:0}d=a.e-b.e;c=(a.d>0?a.d:$wnd.Math.floor((a.a-1)*z4)+1)-(b.d>0?b.d:$wnd.Math.floor((b.a-1)*z4)+1);if(c>d+1){return e}else if(c<d-1){return -e}else {f=(!a.c&&(a.c=i1.eW(PQ(a.f))),a.c);g=(!b.c&&(b.c=i1.eW(PQ(b.f))),b.c);d<0?(f=i1.LV(f,i1.RW(-d))):d>0&&(g=i1.LV(g,i1.RW(d)));return i1.EV(f,g)}}else return e<h?-1:1};i1.cV=function cV(a,b){var c,d,e,f,g,h,i,j;c=0;g=0;f=R0.I0(b).length;h=null;j=(R0.I0(b),new O0.LU);if(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==43)){++g;++c;if(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==43||(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==45))){throw CQ(new O0.VT(v1+b+'"'))}}while(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=46)&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=101)&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=69)){++g;}j.a+=''+O0.qU(b==null?w1:(R0.z0(b),b),c,g);if(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==46)){++g;c=g;while(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=101)&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=69)){++g;}a.e=g-c;j.a+=''+O0.qU(b==null?w1:(R0.z0(b),b),c,g);}else {a.e=0;}if(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==101||(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==69))){++g;c=g;if(g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)==43)){++g;g<f&&(R0.F0(g,R0.I0(b).length),R0.I0(b).charCodeAt(g)!=45)&&++c;}h=(R0.E0(c,f,R0.I0(b).length),R0.I0(b).substr(c,f-c));a.e=a.e-O0.cT(h);if(a.e!=cN(a.e)){throw CQ(new O0.VT('Scale out of range.'))}}i=j.a;if(R0.I0(i).length<16){a.f=(i1._U==null&&(i1._U=new RegExp('^[+-]?\\d*$','i')),i1._U.test(i)?parseInt(i,10):NaN);if(isNaN(a.f)){throw CQ(new O0.VT(v1+b+'"'))}a.a=i1.mV(a.f);}else {i1.eV(a,new i1.XV(i));}a.d=R0.I0(j.a).length;for(e=0;e<R0.I0(j.a).length;++e){d=O0.$T(j.a,e);if(d!=45&&d!=48){break}--a.d;}a.d==0&&(a.d=1);};i1.dV=function dV(a,b){var c;R0.z0(b);c=2-a.e;if(c==0){return a}if(c>0){if(c<i1.YU.length&&a.a+i1.ZU[cN(c)]<54){return new i1.iV(a.f*i1.YU[cN(c)])}return new i1.lV(i1.OW((!a.c&&(a.c=i1.eW(PQ(a.f))),a.c),cN(c)))}if(a.a<54&&-c<i1.YU.length){return i1.qV(a.f,i1.YU[cN(-c)],b)}return i1.pV((!a.c&&(a.c=i1.eW(PQ(a.f))),a.c),i1.RW(-c),b)};i1.eV=function eV(a,b){var c;a.c=b;a.a=i1.fW(b);a.a<54&&(a.f=(c=b.d>1?R0.L0(b.a[0],b.a[1]):R0.L0(b.a[0],0),fR(b.e>0?c:YQ(c))));};i1.fV=function fV(a){if(a.a<54){return a.f<0?-1:a.f>0?1:0}return (!a.c&&(a.c=i1.eW(PQ(a.f))),a.c).e};i1.gV=function gV(a){var b,c,d,e,f;if(a.g!=null){return a.g}if(a.a<32){a.g=i1.qW(PQ(a.f),cN(a.e));return a.g}e=i1.rW((!a.c&&(a.c=i1.eW(PQ(a.f))),a.c),0);if(a.e==0){return e}b=(!a.c&&(a.c=i1.eW(PQ(a.f))),a.c).e<0?2:1;c=R0.I0(e).length;d=-a.e+c-b;f=new O0.KU;f.a+=''+e;if(a.e>0&&d>=-6){if(d>=0){O0.JU(f,c-cN(a.e),String.fromCharCode(46));}else {O0.ZR(f,b-1,b-1,'0.');O0.JU(f,b+1,O0.wU(i1.VU,0,-cN(d)-1));}}else {if(c-b>=1){O0.JU(f,b,String.fromCharCode(46));++c;}O0.JU(f,c,String.fromCharCode(69));d>0&&O0.JU(f,++c,String.fromCharCode(43));O0.JU(f,++c,''+hR(PQ(d)));}a.g=f.a;return a.g};i1.hV=function hV(a){i1.aV();var b;if(!isNaN(a)&&!isFinite(a)||isNaN(a)){throw CQ(new O0.VT('Infinite or NaN'))}i1.cV(this,(b=R0.I0(a),b.toPrecision(20)));};i1.iV=function iV(a){this.f=a;this.e=2;this.a=i1.mV(a);};i1.jV=function jV(a,b){this.e=b;this.a=i1.nV(a);this.a<54?(this.f=fR(a)):(this.c=(i1.CV(),JQ(a,0)>=0?i1._V(a):i1.MV(i1._V(YQ(a)))));};i1.kV=function kV(a){this.e=2;i1.eV(this,(R0.z0(a),a));};i1.lV=function lV(a){i1.kV.call(this,a);};i1.mV=function mV(a){var b,c;if(a>-140737488355328&&a<140737488355328){if(a==0){return 0}b=a<0;b&&(a=-a);c=cN($wnd.Math.floor($wnd.Math.log(a)/0.6931471805599453));(!b||a!=$wnd.Math.pow(2,c))&&++c;return c}return i1.nV(PQ(a))};i1.nV=function nV(a){var b;JQ(a,0)<0&&(a=$Q(a));return b=gR(cR(a,32)),64-(b!=0?JT(b):JT(gR(a))+32)};i1.pV=function pV(a,b,c){var d,e,f,g,h,i,j,k,l;f=i1.GV(a,b);g=f[0];i=f[1];if(i.e==0){return new i1.lV(g)}j=a.e*b.e;if(i1.fW(b)<54){h=(l=i.d>1?R0.L0(i.a[0],i.a[1]):R0.L0(i.a[0],0),i.e>0?l:YQ(l));e=(k=b.d>1?R0.L0(b.a[0],b.a[1]):R0.L0(b.a[0],0),b.e>0?k:YQ(k));d=UQ(aR(JQ(h,0)<0?YQ(h):h,1),JQ(e,0)<0?YQ(e):e)?-1:RQ(aR(JQ(h,0)<0?YQ(h):h,1),JQ(e,0)<0?YQ(e):e)?1:0;d=i1.tV(i1.RV(g,0)?1:0,j*(5+d),c);}else {d=i1.EV(i1.PV(i.e<0?i.e==0?i:new i1.VV(-i.e,i.d,i.a):i),b.e<0?b.e==0?b:new i1.VV(-b.e,b.d,b.a):b);d=i1.tV(i1.RV(g,0)?1:0,j*(5+d),c);}if(d!=0){if(i1.fW(g)<54){return i1.vV((k=g.d>1?R0.L0(g.a[0],g.a[1]):R0.L0(g.a[0],0),DQ(g.e>0?k:YQ(k),N0.MQ(d))))}g=i1.xW(g,(i1.CV(),SQ(N0.MQ(d),0)?i1._V(N0.MQ(d)):i1.MV(i1._V(YQ(N0.MQ(d))))));return new i1.lV(g)}return new i1.lV(g)};i1.qV=function qV(a,b,c){var d,e,f,g,h;f=(e=a/b,e>0?$wnd.Math.floor(e):$wnd.Math.ceil(e));g=a%b;h=kT(a*b,0);if(g!=0){d=kT($wnd.Math.abs(g)*2,$wnd.Math.abs(b));f+=i1.tV(cN(f)&1,h*(5+d),c);}return new i1.iV(f)};i1.tV=function tV(a,b,c){var d;d=0;switch(c.b){case 7:if(b!=0){throw CQ(new O0.dS('Rounding necessary'))}break;case 0:d=b==0?0:b<0?-1:1;break;case 2:d=$wnd.Math.max(b==0?0:b<0?-1:1,0);break;case 3:d=$wnd.Math.min(b==0?0:b<0?-1:1,0);break;case 4:$wnd.Math.abs(b)>=5&&(d=b==0?0:b<0?-1:1);break;case 5:$wnd.Math.abs(b)>5&&(d=b==0?0:b<0?-1:1);break;case 6:$wnd.Math.abs(b)+a>5&&(d=b==0?0:b<0?-1:1);}return d};i1.vV=function vV(a){if(JQ(a,0)==0&&2<i1.$U.length){return i1.$U[2]}return new i1.jV(a,2)};sR(12,72,{4:1,27:1,72:1,12:1},i1.hV,i1.iV,i1.jV,i1.lV);_.qb=function oV(a){return i1.bV(this,a)};_.ib=function rV(a){var b;if(this===a){return true}if(VM(a,12)){b=a;return this.e==b.e&&i1.bV(this,b)==0}return false};_.kb=function sV(){var a;if(this.b!=0){return this.b}if(this.a<54){a=PQ(this.f);this.b=gR(EQ(a,-1));this.b=33*this.b+gR(EQ(bR(a,32),-1));this.b=17*this.b+cN(this.e);return this.b}this.b=17*i1.KV(this.c)+cN(this.e);return this.b};_.lb=function uV(){return i1.gV(this)};_.a=0;_.b=0;_.d=0;_.e=0;_.f=0;N0.FP=LS(12);i1.CV=function CV(){i1.CV=uR;var a;i1.xV=new i1.TV(1,1);i1.zV=new i1.TV(1,10);i1.BV=new i1.TV(0,0);i1.wV=new i1.TV(-1,1);i1.yV=WL(IL(N0.GP,1),r3,14,0,[i1.BV,i1.xV,new i1.TV(1,2),new i1.TV(1,3),new i1.TV(1,4),new i1.TV(1,5),new i1.TV(1,6),new i1.TV(1,7),new i1.TV(1,8),new i1.TV(1,9),i1.zV]);i1.AV=OL(N0.GP,r3,14,32,0,1);for(a=0;a<i1.AV.length;a++){i1.AV[a]=SQ(aR(1,a),0)?i1._V(aR(1,a)):i1.MV(i1._V(YQ(aR(1,a))));}};i1.DV=function DV(a){};i1.EV=function EV(a,b){if(a.e>b.e){return 1}if(a.e<b.e){return -1}if(a.d>b.d){return a.e}if(a.d<b.d){return -b.e}return a.e*i1.AW(a.a,b.a,a.d)};i1.FV=function FV(a){while(a.d>0&&a.a[--a.d]==0);a.a[a.d++]==0&&(a.e=0);};i1.GV=function GV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;f=b.e;if(f==0){throw CQ(new O0.dS('BigInteger divide by zero'))}e=b.d;d=b.a;if(e==1){return i1.tW(a,d[0],f)}n=a.a;o=a.d;c=o!=e?o>e?1:-1:i1.AW(n,d,o);if(c<0){return WL(IL(N0.GP,1),r3,14,0,[i1.BV,a])}p=a.e;h=o-e+1;k=e;i=p==f?1:-1;g=OL(N0.hN,K1,5,h,15,1);j=i1.sW(g,h,n,o,d,e);l=new i1.VV(i,h,g);m=new i1.VV(p,k,j);i1.FV(l);i1.FV(m);return WL(IL(N0.GP,1),r3,14,0,[l,m])};i1.HV=function HV(a,b){var c;if(bN(a)===bN(b)){return true}if(VM(b,14)){c=b;return a.e==c.e&&a.d==c.d&&i1.IV(a,c.a)}return false};i1.IV=function IV(a,b){var c;for(c=a.d-1;c>=0&&a.a[c]==b[c];c--);return c<0};i1.JV=function JV(a){var b;if(a.b==-2){if(a.e==0){b=-1;}else {for(b=0;a.a[b]==0;b++);}a.b=b;}return a.b};i1.KV=function KV(a){var b;if(a.c!=0){return a.c}for(b=0;b<a.a.length;b++){a.c=a.c*33+(a.a[b]&-1);}a.c=a.c*a.e;return a.c};i1.LV=function LV(a,b){if(b.e==0||a.e==0){return i1.BV}return i1.IW(),i1.JW(a,b)};
i1.MV=function MV(a){return a.e==0?a:new i1.VV(-a.e,a.d,a.a)};i1.NV=function NV(a,b){var c;if(b<0){throw CQ(new O0.dS('Negative exponent'))}if(b==0){return i1.xV}else if(b==1||i1.HV(a,i1.xV)||i1.HV(a,i1.BV)){return a}if(!i1.RV(a,0)){c=1;while(!i1.RV(a,c)){++c;}return i1.LV(i1.aW(c*b),i1.NV(i1.QV(a,c),b))}return i1.QW(a,b)};i1.OV=function OV(a,b){if(b==0||a.e==0){return a}return b>0?i1.gW(a,b):i1.kW(a,-b)};i1.PV=function PV(a){return a.e==0?a:i1.iW(a)};i1.QV=function QV(a,b){if(b==0||a.e==0){return a}return b>0?i1.kW(a,b):i1.gW(a,-b)};i1.RV=function RV(a,b){var c,d,e;if(b==0){return (a.a[0]&1)!=0}if(b<0){throw CQ(new O0.dS('Negative bit address'))}e=b>>5;if(e>=a.d){return a.e<0}c=a.a[e];b=1<<(b&31);if(a.e<0){d=i1.JV(a);if(e<d){return false}else d==e?(c=-c):(c=~c);}return (c&b)!=0};i1.SV=function SV(a){return i1.rW(a,0)};i1.TV=function TV(a,b){i1.CV();i1.VV.call(this,a,1,WL(IL(N0.hN,1),K1,5,15,[b]));};i1.UV=function UV(a,b){i1.VV.call(this,1,2,WL(IL(N0.hN,1),K1,5,15,[a,b]));};i1.VV=function VV(a,b,c){i1.CV();i1.DV(this);this.e=a;this.d=b;this.a=c;};i1.WV=function WV(a){i1.CV();i1.DV(this);if(a.length==0){this.e=0;this.d=1;this.a=WL(IL(N0.hN,1),K1,5,15,[0]);}else {this.e=1;this.d=a.length;this.a=a;i1.FV(this);}};i1.XV=function XV(a){i1.CV();i1.YV.call(this,a);};i1.YV=function YV(a){i1.DV(this);R0.z0(a);if(R0.I0(a).length==0){throw CQ(new O0.VT('Zero length BigInteger'))}i1.cW(this,a);};i1._V=function _V(a){i1.CV();var b,c;c=gR(a);b=gR(cR(a,32));if(b!=0){return new i1.UV(c,b)}if(c>10||c<0){return new i1.TV(1,c)}return i1.yV[c]};i1.aW=function aW(a){var b,c,d;if(a<i1.AV.length){return i1.AV[a]}c=a>>5;b=a&31;d=OL(N0.hN,K1,5,c+1,15,1);d[c]=1<<b;return new i1.VV(1,c+1,d)};i1.cW=function cW(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;n=R0.I0(b).length;i=n;R0.F0(0,R0.I0(b).length);if(R0.I0(b).charCodeAt(0)==45){l=-1;m=1;--n;}else {l=1;m=0;}f=(i1.oW(),i1.nW)[10];e=n/f|0;q=n%f;q!=0&&++e;h=OL(N0.hN,K1,5,e,15,1);c=i1.mW[8];g=0;o=m+(q==0?f:q);for(p=m;p<i;p=o,o=p+f){d=O0.cT((R0.E0(p,o,R0.I0(b).length),R0.I0(b).substr(p,o-p)));j=(i1.IW(),i1.MW(h,h,g,c));j+=i1.BW(h,g,d);h[g++]=j;}k=g;a.e=l;a.d=k;a.a=h;i1.FV(a);};i1.eW=function eW(a){i1.CV();return JQ(a,0)>=0?i1._V(a):i1.MV(i1._V(YQ(a)))};sR(14,72,{4:1,27:1,72:1,14:1},i1.TV,i1.UV,i1.VV,i1.WV,i1.XV);_.qb=function ZV(a){return i1.EV(this,a)};_.ib=function $V(a){return i1.HV(this,a)};_.kb=function bW(){return i1.KV(this)};_.lb=function dW(){return i1.SV(this)};_.b=-2;_.c=0;_.d=0;_.e=0;N0.GP=LS(14);i1.fW=function fW(a){var b,c,d;if(a.e==0){return 0}b=a.d<<5;c=a.a[a.d-1];if(a.e<0){d=i1.JV(a);if(d==a.d-1){--c;c=c|0;}}b-=JT(c);return b};i1.gW=function gW(a,b){var c,d,e,f;c=b>>5;b&=31;e=a.d+c+(b==0?0:1);d=OL(N0.hN,K1,5,e,15,1);i1.hW(d,a.a,c,b);f=new i1.VV(a.e,e,d);i1.FV(f);return f};i1.hW=function hW(a,b,c,d){var e,f,g;if(d==0){O0.QU(b,0,a,c,a.length-c);}else {g=32-d;a[a.length-1]=0;for(f=a.length-1;f>c;f--){a[f]|=b[f-c-1]>>>g;a[f-1]=b[f-c-1]<<d;}}for(e=0;e<c;e++){a[e]=0;}};i1.iW=function iW(a){var b,c,d,e;e=a.d;c=e+1;b=OL(N0.hN,K1,5,c,15,1);i1.jW(b,a.a,e);d=new i1.VV(a.e,c,b);i1.FV(d);return d};i1.jW=function jW(a,b,c){var d,e,f;d=0;for(e=0;e<c;e++){f=b[e];a[e]=f<<1|d;d=f>>>31;}d!=0&&(a[c]=d);};i1.kW=function kW(a,b){var c,d,e,f,g;d=b>>5;b&=31;if(d>=a.d){return a.e<0?(i1.CV(),i1.wV):(i1.CV(),i1.BV)}f=a.d-d;e=OL(N0.hN,K1,5,f+1,15,1);i1.lW(e,f,a.a,d,b);if(a.e<0){for(c=0;c<d&&a.a[c]==0;c++);if(c<d||b>0&&a.a[c]<<32-b!=0){for(c=0;c<f&&e[c]==-1;c++){e[c]=0;}c==f&&++f;++e[c];}}g=new i1.VV(a.e,f,e);i1.FV(g);return g};i1.lW=function lW(a,b,c,d,e){var f,g,h;f=true;for(g=0;g<d;g++){f=f&c[g]==0;}if(e==0){O0.QU(c,d,a,0,b);g=b;}else {h=32-e;f=f&c[g]<<h==0;for(g=0;g<b-1;g++){a[g]=c[g+d]>>>e|c[g+d+1]<<h;}a[g]=c[g+d]>>>e;++g;}return f};i1.oW=function oW(){i1.oW=uR;i1.mW=WL(IL(N0.hN,1),K1,5,15,[x1,1162261467,A3,1220703125,362797056,1977326743,A3,387420489,s4,214358881,429981696,815730721,1475789056,170859375,L2,410338673,612220032,893871739,1280000000,1801088541,113379904,148035889,191102976,244140625,308915776,387420489,481890304,594823321,729000000,887503681,A3,1291467969,1544804416,1838265625,60466176]);i1.nW=WL(IL(N0.hN,1),K1,5,15,[-1,-1,31,19,15,13,11,11,10,9,9,8,8,8,8,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5]);};i1.pW=function pW(a){var b,c,d;if(JQ(a,0)>=0){c=NQ(a,s4);d=WQ(a,s4);}else {b=cR(a,1);c=NQ(b,500000000);d=WQ(b,500000000);d=DQ(aR(d,1),EQ(a,1));}return _Q(aR(d,32),EQ(c,A4))};i1.qW=function qW(a,b){i1.oW();var c,d,e,f,g,h,i,j,k,l,m,n,o,p;i=JQ(a,0)<0;i&&(a=YQ(a));if(JQ(a,0)==0){switch(b){case 0:return '0';case 1:return '0.0';case 2:return '0.00';case 3:return '0.000';case 4:return G3;case 5:return '0.00000';case 6:return '0.000000';default:n=new O0.KU;b<0?(n.a+='0E+',n):(n.a+='0E',n);n.a+=b==x1?'2147483648':''+-b;return n.a;}}k=18;l=OL(N0.eN,c3,5,k+1,15,1);c=k;p=a;do{j=p;p=NQ(p,10);l[--c]=gR(DQ(48,dR(j,XQ(p,10))))&D1;}while(JQ(p,0)!=0);e=dR(dR(dR(N0.MQ(k),N0.MQ(c)),N0.MQ(b)),1);if(b==0){i&&(l[--c]=45);return O0.wU(l,c,k-c)}if(b>0&&JQ(e,-6)>=0){if(JQ(e,0)>=0){f=c+gR(e);for(h=k-1;h>=f;h--){l[h+1]=l[h];}l[++f]=46;i&&(l[--c]=45);return O0.wU(l,c,k-c+1)}for(g=2;UQ(N0.MQ(g),DQ(YQ(e),1));g++){l[--c]=48;}l[--c]=46;l[--c]=48;i&&(l[--c]=45);return O0.wU(l,c,k-c)}o=c+1;d=k;m=new O0.LU;i&&(m.a+='-',m);if(d-o>=1){O0.DU(m,l[c]);m.a+='.';m.a+=O0.wU(l,c+1,k-c-1);}else {m.a+=O0.wU(l,c,k-c);}m.a+='E';JQ(e,0)>0&&(m.a+='+',m);m.a+=''+hR(e);return m.a};i1.rW=function rW(a,b){i1.oW();var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H;B=a.e;o=a.d;e=a.a;if(B==0){switch(b){case 0:return '0';case 1:return '0.0';case 2:return '0.00';case 3:return '0.000';case 4:return G3;case 5:return '0.00000';case 6:return '0.000000';default:w=new O0.KU;b<0?(w.a+='0E+',w):(w.a+='0E',w);w.a+=-b;return w.a;}}t=o*10+1+7;u=OL(N0.eN,c3,5,t+1,15,1);c=t;if(o==1){h=e[0];if(h<0){H=EQ(N0.MQ(h),A4);do{p=H;H=NQ(H,10);u[--c]=48+gR(dR(p,XQ(H,10)))&D1;}while(JQ(H,0)!=0)}else {H=h;do{p=H;H=H/10|0;u[--c]=48+(p-H*10)&D1;}while(H!=0)}}else {D=OL(N0.hN,K1,5,o,15,1);G=o;O0.QU(e,0,D,0,G);I:while(true){A=0;for(j=G-1;j>=0;j--){F=DQ(aR(A,32),EQ(N0.MQ(D[j]),A4));r=i1.pW(F);D[j]=gR(r);A=QQ(gR(bR(r,32)));}s=gR(A);q=c;do{u[--c]=48+s%10&D1;}while((s=s/10|0)!=0&&c!=0);d=9-q+c;for(i=0;i<d&&c>0;i++){u[--c]=48;}l=G-1;for(;D[l]==0;l--){if(l==0){break I}}G=l+1;}while(u[c]==48){++c;}}n=B<0;g=t-c-b-1;if(b==0){n&&(u[--c]=45);return O0.wU(u,c,t-c)}if(b>0&&g>=-6){if(g>=0){k=c+g;for(m=t-1;m>=k;m--){u[m+1]=u[m];}u[++k]=46;n&&(u[--c]=45);return O0.wU(u,c,t-c+1)}for(l=2;l<-g+1;l++){u[--c]=48;}u[--c]=46;u[--c]=48;n&&(u[--c]=45);return O0.wU(u,c,t-c)}C=c+1;f=t;v=new O0.LU;n&&(v.a+='-',v);if(f-C>=1){O0.DU(v,u[c]);v.a+='.';v.a+=O0.wU(u,c+1,t-c-1);}else {v.a+=O0.wU(u,c,t-c);}v.a+='E';g>0&&(v.a+='+',v);v.a+=''+g;return v.a};i1.sW=function sW(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;q=OL(N0.hN,K1,5,d+1,15,1);r=OL(N0.hN,K1,5,f+1,15,1);s=f;i=JT(e[f-1]);if(i!=0){i1.hW(r,e,0,i);i1.hW(q,c,0,i);}else {O0.QU(c,0,q,0,d);O0.QU(e,0,r,0,f);}j=r[s-1];l=b-1;m=d;while(l>=0){k=0;if(q[m]==j){k=-1;}else {t=DQ(aR(EQ(N0.MQ(q[m]),A4),32),EQ(N0.MQ(q[m-1]),A4));w=i1.vW(t,j);k=gR(w);v=gR(bR(w,32));if(k!=0){o=0;A=0;u=false;++k;do{--k;if(u){break}o=XQ(EQ(N0.MQ(k),A4),EQ(N0.MQ(r[s-2]),A4));A=DQ(aR(N0.MQ(v),32),EQ(N0.MQ(q[m-2]),A4));p=DQ(EQ(N0.MQ(v),A4),EQ(N0.MQ(j),A4));JT(gR(cR(p,32)))<32?(u=true):(v=gR(p));}while(RQ(iR(o,B4),iR(A,B4)))}}if(k!=0){g=i1.wW(q,m-s,r,s,k);if(g!=0){--k;h=0;for(n=0;n<s;n++){h=DQ(h,DQ(EQ(N0.MQ(q[m-s+n]),A4),EQ(N0.MQ(r[n]),A4)));q[m-s+n]=gR(h);h=cR(h,32);}}}a[l]=k;--m;--l;}if(i!=0){i1.lW(r,s,q,0,i);return r}O0.QU(q,0,r,0,f);return q};i1.tW=function tW(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;n=a.a;o=a.d;p=a.e;if(o==1){d=EQ(N0.MQ(n[0]),A4);e=EQ(N0.MQ(b),A4);f=NQ(d,e);j=WQ(d,e);p!=c&&(f=YQ(f));p<0&&(j=YQ(j));return WL(IL(N0.GP,1),r3,14,0,[(i1.CV(),JQ(f,0)>=0?i1._V(f):i1.MV(i1._V(YQ(f)))),JQ(j,0)>=0?i1._V(j):i1.MV(i1._V(YQ(j)))])}h=o;i=p==c?1:-1;g=OL(N0.hN,K1,5,h,15,1);k=WL(IL(N0.hN,1),K1,5,15,[i1.uW(g,n,o,b)]);l=new i1.VV(i,h,g);m=new i1.VV(p,1,k);i1.FV(l);i1.FV(m);return WL(IL(N0.GP,1),r3,14,0,[l,m])};i1.uW=function uW(a,b,c,d){var e,f,g,h,i,j,k;j=0;f=EQ(N0.MQ(d),A4);for(h=c-1;h>=0;h--){k=_Q(aR(j,32),EQ(N0.MQ(b[h]),A4));if(JQ(k,0)>=0){i=NQ(k,f);j=WQ(k,f);}else {e=cR(k,1);g=N0.MQ(d>>>1);i=NQ(e,g);j=WQ(e,g);j=DQ(aR(j,1),EQ(k,1));if((d&1)!=0){if(JQ(i,j)<=0){j=dR(j,i);}else {if(VQ(dR(i,j),f)){j=DQ(j,dR(f,i));i=dR(i,1);}else {j=DQ(j,dR(aR(f,1),i));i=dR(i,2);}}}}a[h]=gR(EQ(i,A4));}return gR(j)};i1.vW=function vW(a,b){var c,d,e,f,g;d=EQ(N0.MQ(b),A4);if(JQ(a,0)>=0){f=NQ(a,d);g=WQ(a,d);}else {c=cR(a,1);e=N0.MQ(b>>>1);f=NQ(c,e);g=WQ(c,e);g=DQ(aR(g,1),EQ(a,1));if((b&1)!=0){if(JQ(f,g)<=0){g=dR(g,f);}else {if(VQ(dR(f,g),d)){g=DQ(g,dR(d,f));f=dR(f,1);}else {g=DQ(g,dR(aR(d,1),f));f=dR(f,2);}}}}return _Q(aR(g,32),EQ(f,A4))};i1.wW=function wW(a,b,c,d,e){var f,g,h;f=0;g=0;for(h=0;h<d;h++){f=(i1.IW(),DQ(XQ(EQ(N0.MQ(c[h]),A4),EQ(N0.MQ(e),A4)),EQ(QQ(gR(f)),A4)));g=DQ(dR(EQ(N0.MQ(a[b+h]),A4),EQ(f,A4)),g);a[b+h]=gR(g);g=bR(g,32);f=cR(f,32);}g=DQ(dR(EQ(N0.MQ(a[b+d]),A4),f),g);a[b+d]=gR(g);return gR(bR(g,32))};i1.xW=function xW(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;g=a.e;i=b.e;if(g==0){return b}if(i==0){return a}f=a.d;h=b.d;if(f+h==2){c=EQ(QQ(a.a[0]),A4);d=EQ(QQ(b.a[0]),A4);if(g==i){k=DQ(c,d);o=gR(k);n=gR(cR(k,32));return n==0?new i1.TV(g,o):new i1.VV(g,2,WL(IL(N0.hN,1),K1,5,15,[o,n]))}return i1.CV(),SQ(g<0?dR(d,c):dR(c,d),0)?i1._V(g<0?dR(d,c):dR(c,d)):i1.MV(i1._V(YQ(g<0?dR(d,c):dR(c,d))))}else if(g==i){m=g;l=f>=h?i1.yW(a.a,f,b.a,h):i1.yW(b.a,h,a.a,f);}else {e=f!=h?f>h?1:-1:i1.AW(a.a,b.a,f);if(e==0){return i1.CV(),i1.BV}if(e==1){m=g;l=i1.DW(a.a,f,b.a,h);}else {m=i;l=i1.DW(b.a,h,a.a,f);}}j=new i1.VV(m,l.length,l);i1.FV(j);return j};i1.yW=function yW(a,b,c,d){var e;e=OL(N0.hN,K1,5,b+1,15,1);i1.zW(e,a,b,c,d);return e};i1.zW=function zW(a,b,c,d,e){var f,g;f=DQ(EQ(N0.MQ(b[0]),A4),EQ(N0.MQ(d[0]),A4));a[0]=gR(f);f=bR(f,32);if(c>=e){for(g=1;g<e;g++){f=DQ(f,DQ(EQ(N0.MQ(b[g]),A4),EQ(N0.MQ(d[g]),A4)));a[g]=gR(f);f=bR(f,32);}for(;g<c;g++){f=DQ(f,EQ(N0.MQ(b[g]),A4));a[g]=gR(f);f=bR(f,32);}}else {for(g=1;g<c;g++){f=DQ(f,DQ(EQ(N0.MQ(b[g]),A4),EQ(N0.MQ(d[g]),A4)));a[g]=gR(f);f=bR(f,32);}for(;g<e;g++){f=DQ(f,EQ(N0.MQ(d[g]),A4));a[g]=gR(f);f=bR(f,32);}}JQ(f,0)!=0&&(a[g]=gR(f));};i1.AW=function AW(a,b,c){var d;for(d=c-1;d>=0&&a[d]==b[d];d--);return d<0?0:UQ(EQ(N0.MQ(a[d]),A4),EQ(N0.MQ(b[d]),A4))?-1:1};i1.BW=function BW(a,b,c){var d,e;d=EQ(N0.MQ(c),A4);for(e=0;JQ(d,0)!=0&&e<b;e++){d=DQ(d,EQ(N0.MQ(a[e]),A4));a[e]=gR(d);d=bR(d,32);}return gR(d)};i1.CW=function CW(a,b){var c,d,e,f,g,h,i,j,k,l;g=a.e;i=b.e;if(i==0){return a}if(g==0){return b.e==0?b:new i1.VV(-b.e,b.d,b.a)}f=a.d;h=b.d;if(f+h==2){c=EQ(QQ(a.a[0]),A4);d=EQ(QQ(b.a[0]),A4);g<0&&(c=YQ(c));i<0&&(d=YQ(d));return i1.CV(),SQ(dR(c,d),0)?i1._V(dR(c,d)):i1.MV(i1._V(YQ(dR(c,d))))}e=f!=h?f>h?1:-1:i1.AW(a.a,b.a,f);if(e==-1){l=-i;k=g==i?i1.DW(b.a,h,a.a,f):i1.yW(b.a,h,a.a,f);}else {l=g;if(g==i){if(e==0){return i1.CV(),i1.BV}k=i1.DW(a.a,f,b.a,h);}else {k=i1.yW(a.a,f,b.a,h);}}j=new i1.VV(l,k.length,k);i1.FV(j);return j};i1.DW=function DW(a,b,c,d){var e;e=OL(N0.hN,K1,5,b,15,1);i1.EW(e,a,b,c,d);return e};i1.EW=function EW(a,b,c,d,e){var f,g;f=0;for(g=0;g<e;g++){f=DQ(f,dR(EQ(N0.MQ(b[g]),A4),EQ(N0.MQ(d[g]),A4)));a[g]=gR(f);f=bR(f,32);}for(;g<c;g++){f=DQ(f,EQ(N0.MQ(b[g]),A4));a[g]=gR(f);f=bR(f,32);}};i1.IW=function IW(){i1.IW=uR;var a,b;i1.FW=OL(N0.GP,r3,14,32,0,1);i1.GW=OL(N0.GP,r3,14,32,0,1);i1.HW=WL(IL(N0.hN,1),K1,5,15,[1,10,100,1000,E1,100000,1000000,10000000,100000000,s4]);a=1;for(b=0;b<=18;b++){i1.FW[b]=(i1.CV(),JQ(a,0)>=0?i1._V(a):i1.MV(i1._V(YQ(a))));i1.GW[b]=SQ(aR(a,b),0)?i1._V(aR(a,b)):i1.MV(i1._V(YQ(aR(a,b))));a=XQ(a,5);}for(;b<i1.GW.length;b++){i1.FW[b]=i1.LV(i1.FW[b-1],i1.FW[1]);i1.GW[b]=i1.LV(i1.GW[b-1],(i1.CV(),i1.zV));}};i1.JW=function JW(a,b){i1.IW();var c,d,e,f,g,h,i,j,k;if(b.d>a.d){h=a;a=b;b=h;}if(b.d<63){return i1.PW(a,b)}g=(a.d&-2)<<4;j=i1.QV(a,g);k=i1.QV(b,g);d=i1.CW(a,i1.OV(j,g));e=i1.CW(b,i1.OV(k,g));i=i1.JW(j,k);c=i1.JW(d,e);f=i1.JW(i1.CW(j,d),i1.CW(e,k));f=i1.xW(i1.xW(f,i),c);f=i1.OV(f,g);i=i1.OV(i,g<<1);return i1.xW(i1.xW(i,f),c)};i1.KW=function KW(a,b,c,d,e){if(b==0||d==0){return}b==1?(e[d]=i1.MW(e,c,d,a[0])):d==1?(e[b]=i1.MW(e,a,b,c[0])):i1.LW(a,c,e,b,d);};i1.LW=function LW(a,b,c,d,e){var f,g,h,i;if(bN(a)===bN(b)&&d==e){i1.SW(a,d,c);return}for(h=0;h<d;h++){g=0;f=a[h];for(i=0;i<e;i++){g=DQ(DQ(XQ(EQ(N0.MQ(f),A4),EQ(N0.MQ(b[i]),A4)),EQ(N0.MQ(c[h+i]),A4)),EQ(QQ(gR(g)),A4));c[h+i]=gR(g);g=cR(g,32);}c[h+e]=gR(g);}};i1.MW=function MW(a,b,c,d){i1.IW();var e,f;e=0;for(f=0;f<c;f++){e=DQ(XQ(EQ(N0.MQ(b[f]),A4),EQ(N0.MQ(d),A4)),EQ(QQ(gR(e)),A4));a[f]=gR(e);e=cR(e,32);}return gR(e)};i1.NW=function NW(a,b){var c,d,e,f,g,h,i,j,k;j=a.e;if(j==0){return i1.CV(),i1.BV}d=a.d;c=a.a;if(d==1){e=XQ(EQ(N0.MQ(c[0]),A4),EQ(N0.MQ(b),A4));i=gR(e);g=gR(cR(e,32));return g==0?new i1.TV(j,i):new i1.VV(j,2,WL(IL(N0.hN,1),K1,5,15,[i,g]))}h=d+1;f=OL(N0.hN,K1,5,h,15,1);f[d]=i1.MW(f,c,d,b);k=new i1.VV(j,h,f);i1.FV(k);return k};i1.OW=function OW(a,b){i1.IW();return b<i1.HW.length?i1.NW(a,i1.HW[b]):i1.LV(a,i1.RW(b))};i1.PW=function PW(a,b){var c,d,e,f,g,h,i,j,k,l,m;d=a.d;f=b.d;h=d+f;i=a.e!=b.e?-1:1;if(h==2){k=XQ(EQ(QQ(a.a[0]),A4),EQ(QQ(b.a[0]),A4));m=gR(k);l=gR(cR(k,32));return l==0?new i1.TV(i,m):new i1.VV(i,2,WL(IL(N0.hN,1),K1,5,15,[m,l]))}c=a.a;e=b.a;g=OL(N0.hN,K1,5,h,15,1);i1.KW(c,d,e,f,g);j=new i1.VV(i,h,g);i1.FV(j);return j};i1.QW=function QW(a,b){i1.IW();var c,d;d=(i1.CV(),i1.xV);c=a;for(;b>1;b>>=1){(b&1)!=0&&(d=i1.LV(d,c));c.d==1?(c=i1.LV(c,c)):(c=new i1.WV(i1.SW(c.a,c.d,OL(N0.hN,K1,5,c.d<<1,15,1))));}d=i1.LV(d,c);return d};i1.RW=function RW(a){i1.IW();var b,c,d,e;b=cN(a);if(a<i1.GW.length){return i1.GW[b]}else if(a<=50){return i1.NV((i1.CV(),i1.zV),b)}else if(a<=1000){return i1.OV(i1.NV(i1.FW[1],b),b)}if(a>1000000){throw CQ(new O0.dS('power of ten too big'))}if(a<=u1){return i1.OV(i1.NV(i1.FW[1],b),b)}d=i1.NV(i1.FW[1],u1);e=d;c=PQ(a-u1);b=cN(a%u1);while(JQ(c,u1)>0){e=i1.LV(e,d);c=dR(c,u1);}e=i1.LV(e,i1.NV(i1.FW[1],b));e=i1.OV(e,u1);c=PQ(a-u1);while(JQ(c,u1)>0){e=i1.OV(e,u1);c=dR(c,u1);}e=i1.OV(e,b);return e};i1.SW=function SW(a,b,c){var d,e,f,g,h;for(f=0;f<b;f++){d=0;for(h=f+1;h<b;h++){d=DQ(DQ(XQ(EQ(N0.MQ(a[f]),A4),EQ(N0.MQ(a[h]),A4)),EQ(N0.MQ(c[f+h]),A4)),EQ(QQ(gR(d)),A4));c[f+h]=gR(d);d=cR(d,32);}c[f+b]=gR(d);}i1.jW(c,c,b<<1);d=0;for(e=0,g=0;e<b;++e,g++){d=DQ(DQ(XQ(EQ(N0.MQ(a[e]),A4),EQ(N0.MQ(a[e]),A4)),EQ(N0.MQ(c[g]),A4)),EQ(QQ(gR(d)),A4));c[g]=gR(d);d=cR(d,32);++g;d=DQ(d,EQ(N0.MQ(c[g]),A4));c[g]=gR(d);d=cR(d,32);}return c};i1._W=function _W(){i1._W=uR;i1.$W=new i1.aX('UP',0);i1.UW=new i1.aX('DOWN',1);i1.TW=new i1.aX('CEILING',2);i1.VW=new i1.aX('FLOOR',3);i1.YW=new i1.aX('HALF_UP',4);i1.WW=new i1.aX('HALF_DOWN',5);i1.XW=new i1.aX('HALF_EVEN',6);i1.ZW=new i1.aX('UNNECESSARY',7);};i1.aX=function aX(a,b){pT.call(this,a,b);};i1.bX=function bX(){i1._W();return WL(IL(N0.HP,1),r3,45,0,[i1.$W,i1.UW,i1.TW,i1.VW,i1.YW,i1.WW,i1.XW,i1.ZW])};sR(45,48,{4:1,27:1,48:1,45:1},i1.aX);N0.HP=MS(45,i1.bX);j1.cX=function cX(a,b){return O0.bU(a.a,b.a)};j1.dX=function dX(a){this.a=a;};sR(58,1,C4);_.qb=function eX(a){return j1.cX(this,a)};_.ib=function fX(a){var b;if(a===this){return true}if(!VM(a,58)){return false}b=a;return O0.eU(this.a,b.a)};_.kb=function gX(){return O0.hU(this.a)};_.lb=function hX(){return this.a};N0.IP=LS(58);sR(207,1,{});N0.KP=LS(207);k1.iX=function iX(a,b){return b1.oL(a.a,b)};k1.jX=function jX(a){this.a=(b1.iL(),new b1.zL(a,b1.dL()));};k1.kX=function kX(a){k1.jX.call(this,a);};sR(100,207,{},k1.jX,k1.kX);N0.JP=LS(100);T0.WZ=function WZ(){throw CQ(new O0.SU)};T0.lX=function lX(a){};T0.mX=function mX(a){return a.a<a.c.size()};T0.nX=function nX(a){R0.x0(a.a<a.c.size());return a.c.getAtIndex(a.b=a.a++)};T0.oX=function oX(a){R0.D0(a.b!=-1);a.c.removeAtIndex(a.b);a.a=a.b;a.b=-1;};T0.pX=function pX(a){this.c=a;T0.lX(this);};sR(118,1,{},T0.pX);_.Wb=function qX(){return T0.mX(this)};_.Xb=function rX(){return T0.nX(this)};_.Yb=function sX(){T0.oX(this);};_.a=0;_.b=-1;N0.MP=LS(118);T0.tX=function tX(a){T0.oX(a);};T0.uX=function uX(a,b){T0.pX.call(this,a);R0.B0(b,a.size());this.a=b;};sR(119,118,{},T0.uX);_.Yb=function vX(){T0.tX(this);};N0.NP=LS(119);T0.wX=function wX(a,b,c){R0.C0(b,c,a.size());this.c=a;this.a=b;this.b=c-b;};sR(120,201,{65:1},T0.wX);_.addAtIndex=function xX(a,b){R0.B0(a,this.b);this.c.addAtIndex(this.a+a,b);++this.b;};_.getAtIndex=function yX(a){R0.y0(a,this.b);return this.c.getAtIndex(this.a+a)};_.removeAtIndex=function zX(a){var b;R0.y0(a,this.b);b=this.c.removeAtIndex(this.a+a);--this.b;return b};_.setAtIndex=function AX(a,b){R0.y0(a,this.b);return this.c.setAtIndex(this.a+a,b)};_.size=function BX(){return this.b};_.a=0;_.b=0;N0.OP=LS(120);T0.XZ=function XZ(a,b,c){var d,e,f;d=(f=b,T0.LX(T0.r$(a,f)));return d==null&&(e=b,!T0.r$(a,e))?c:d};T0.YZ=function YZ(a,b,c){var d,e;d=(e=b,T0.LX(T0.r$(a,e)));return d!=null?d:T0.w$(a,b,c)};T0.ZZ=function ZZ(a,b,c){var d;return d=b,T0.r$(a,d)?T0.w$(a,b,c):null};T0.CX=function CX(a,b){var c,d,e;for(d=new T0.O$((new T0.T$(a)).b);T0.mX(d.a);){c=d.b=T0.nX(d.a);e=c._b();if(bN(b)===bN(e)||b!=null&&O0.Gc(b,e)){return true}}return false};T0.DX=function DX(a,b,c){var d,e,f;for(e=new T0.O$((new T0.T$(a)).b);T0.mX(e.a);){d=e.b=T0.nX(e.a);f=d.$b();if(bN(b)===bN(f)||b!=null&&O0.Gc(b,f)){if(c){d=new T0.EY(d.$b(),d._b());T0.N$(e);}return d}}return null};T0.EX=function EX(a,b){return b===a?'(this Map)':b==null?w1:zR(b)};T0.FX=function FX(a){return new T0.kY(a)};T0.LX=function LX(a){return !a?null:a._b()};sR(205,1,{176:1});_.getOrDefault=function MX(a,b){var c,d,e;return c=(e=a,T0.LX(T0.r$(this,e))),c==null&&(d=a,!T0.r$(this,d))?b:c};_.putIfAbsent=function SX(a,b){var c,d;return c=(d=a,T0.LX(T0.r$(this,d))),c!=null?c:T0.w$(this,a,b)};_.replace=function UX(a,b){var c;return c=a,T0.r$(this,c)?T0.w$(this,a,b):null};_.clear=function GX(){this.Zb().clear();};_.containsKey=function HX(a){return !!T0.DX(this,a,false)};_.containsValue=function IX(a){return T0.CX(this,a)};_.ib=function JX(a){var b,c,d;if(a===this){return true}if(!VM(a,52)){return false}d=a;if(this.c!=d.c){return false}for(c=new T0.O$((new T0.T$(d)).b);T0.mX(c.a);){b=c.b=T0.nX(c.a);if(!T0.FY(this,b)){return false}}return true};_.get=function KX(a){return T0.LX(T0.DX(this,a,false))};_.kb=function NX(){return T0.OZ(this.Zb())};_.isEmpty=function OX(){return this.c==0};_.keySet=function PX(){return new T0._X(this)};_.put=function QX(a,b){throw CQ(new O0.TU('Put not supported on this map'))};_.putAll=function RX(a){var b,c;R0.z0(a);for(c=new T0.O$(a.Zb().b);T0.mX(c.a);){b=c.b=T0.nX(c.a);T0.w$(this,b.$b(),b._b());}};_.remove=function TX(a){return T0.LX(T0.DX(this,a,true))};_.size=function VX(){return this.Zb().b.c};_.lb=function WX(){var a,b,c;c=new T0.m$('{','}');for(b=new T0.O$(this.Zb().b);T0.mX(b.a);){a=b.b=T0.nX(b.a);T0.k$(c,T0.EX(this,a.$b())+'='+T0.EX(this,a._b()));}return !c.a?c.c:R0.I0(c.e).length==0?c.a.a:c.a.a+(''+c.e)};_.values=function XX(){return T0.FX(this)};N0.WP=LS(205);sR(204,200,D4);_.ib=function YX(a){var b;if(a===this){return true}if(!VM(a,75)){return false}b=a;if(b.size()!=this.size()){return false}return T0.oh(this,b)};_.kb=function ZX(){return T0.OZ(this)};_.removeAll=function $X(a){var b,c,d,e;R0.z0(a);e=this.size();if(e<a.size()){for(b=this.rb();b.Wb();){c=b.Xb();a.contains(c)&&b.Yb();}}else {for(d=a.rb();d.Wb();){c=d.Xb();this.remove(c);}}return e!=this.size()};N0._P=LS(204);T0._X=function _X(a){this.a=a;};sR(160,204,D4,T0._X);_.clear=function aY(){T0.p$(this.a);};_.contains=function bY(a){return T0.GY(this.a,a)};_.rb=function cY(){var a;a=new T0.O$((new T0.T$(this.a)).b);return new T0.fY(a)};_.remove=function dY(a){if(T0.GY(this.a,a)){T0.x$(this.a,a);return true}return false};_.size=function eY(){return this.a.c};N0.RP=LS(160);T0.fY=function fY(a){this.a=a;};sR(161,1,{},T0.fY);_.Wb=function gY(){return T0.mX(this.a.a)};_.Xb=function hY(){var a;a=T0.M$(this.a);return a.$b()};_.Yb=function iY(){T0.N$(this.a);};N0.QP=LS(161);T0.jY=function jY(a){var b;b=new T0.O$((new T0.T$(a.a)).b);return new T0.rY(b)};T0.kY=function kY(a){this.a=a;};sR(112,200,{},T0.kY);_.clear=function lY(){T0.p$(this.a);};_.contains=function mY(a){return T0.CX(this.a,a)};_.rb=function nY(){return T0.jY(this)};_.size=function oY(){return this.a.c};N0.TP=LS(112);T0.pY=function pY(a){return T0.mX(a.a.a)};T0.qY=function qY(a){var b;b=T0.M$(a.a);return b._b()};T0.rY=function rY(a){this.a=a;};sR(113,1,{},T0.rY);_.Wb=function sY(){return T0.pY(this)};_.Xb=function tY(){return T0.qY(this)};_.Yb=function uY(){T0.N$(this.a);};N0.SP=LS(113);T0.vY=function vY(a){return a.c};T0.wY=function wY(a){return a.d};T0.xY=function xY(a,b){var c;c=a.d;a.d=b;return c};T0.yY=function yY(a,b){this.c=a;this.d=b;};sR(85,1,{85:1,88:1});_.ib=function zY(a){var b;if(!VM(a,88)){return false}b=a;return T0._Z(this.c,b.$b())&&T0._Z(this.d,b._b())};_.$b=function AY(){return T0.vY(this)};_._b=function BY(){return T0.wY(this)};_.kb=function CY(){return T0.a$(this.c)^T0.a$(this.d)};_.lb=function DY(){return this.c+'='+this.d};N0.UP=LS(85);T0.EY=function EY(a,b){T0.yY.call(this,a,b);};sR(86,85,{85:1,86:1,88:1},T0.EY);N0.VP=LS(86);T0.FY=function FY(a,b){var c,d;c=b.$b();d=T0.r$(a,c);return !!d&&T0._Z(d.d,b._b())};T0.GY=function GY(a,b){var c;c=b;return !!T0.r$(a,c)};T0.HY=function HY(a,b){var c;c=b;return T0.LX(T0.r$(a,c))};T0.IY=function IY(a){return new T0.VY(a)};sR(206,205,{176:1});_.containsKey=function JY(a){return T0.GY(this,a)};_.Zb=function KY(){return new T0.PY(this)};_.get=function LY(a){return T0.HY(this,a)};_.keySet=function MY(){return T0.IY(this)};N0.$P=LS(206);T0.NY=function NY(a){return new T0.O$(a.b)};T0.OY=function OY(a){return a.b.c};T0.PY=function PY(a){this.b=a;};sR(126,204,D4,T0.PY);_.contains=function QY(a){return VM(a,88)&&T0.FY(this.b,a)};_.rb=function RY(){return T0.NY(this)};_.remove=function SY(a){var b;if(VM(a,88)){b=a;return T0.y$(this.b,b)}return false};_.size=function TY(){return T0.OY(this)};N0.XP=LS(126);T0.UY=function UY(a){var b;b=new T0.O$((new T0.T$(a.a)).b);return new T0.bZ(b)};T0.VY=function VY(a){this.a=a;};sR(82,204,D4,T0.VY);_.clear=function WY(){T0.p$(this.a);};_.contains=function XY(a){return T0.GY(this.a,a)};_.rb=function YY(){return T0.UY(this)};_.remove=function ZY(a){if(T0.GY(this.a,a)){T0.x$(this.a,a);return true}return false};_.size=function $Y(){return this.a.c};N0.ZP=LS(82);T0._Y=function _Y(a){return T0.mX(a.a.a)};T0.aZ=function aZ(a){var b;b=T0.M$(a.a);return b.$b()};T0.bZ=function bZ(a){this.a=a;};sR(83,1,{},T0.bZ);_.Wb=function cZ(){return T0._Y(this)};_.Xb=function dZ(){return T0.aZ(this)};_.Yb=function eZ(){T0.N$(this.a);};N0.YP=LS(83);T0.fZ=function fZ(a){};T0.gZ=function gZ(a){return a.a<a.c.a.length};T0.hZ=function hZ(a){R0.x0(a.a<a.c.a.length);a.b=a.a++;return a.c.a[a.b]};T0.iZ=function iZ(a){this.c=a;T0.fZ(this);};sR(17,1,{},T0.iZ);_.Wb=function jZ(){return T0.gZ(this)};_.Xb=function kZ(){return T0.hZ(this)};_.Yb=function lZ(){R0.D0(this.b!=-1);T0.ci(this.c,this.a=this.b);this.b=-1;};_.a=0;_.b=-1;N0.aQ=LS(17);T0.mZ=function mZ(a,b){R0.w0(b);return T0.pZ(a,OL(N0.dN,d3,5,b,15,1),b)};T0.nZ=function nZ(a,b){R0.w0(b);return T0.pZ(a,OL(N0.fN,O2,5,b,15,1),b)};T0.oZ=function oZ(a,b){R0.w0(b);return T0.pZ(a,OL(N0.hN,K1,5,b,15,1),b)};T0.pZ=function pZ(a,b,c){var d,e;e=R0.I0(a).length;d=$wnd.Math.min(c,e);R0.a0(a,0,b,0,d,true);return b};T0.qZ=function qZ(a){T0.tZ(a,a.length);};T0.rZ=function rZ(a){T0.uZ(a,a.length,-1);};T0.sZ=function sZ(a){T0.vZ(a,a.length);};T0.tZ=function tZ(a,b){var c;for(c=0;c<b;++c){a[c]=-1;}};T0.uZ=function uZ(a,b,c){var d;for(d=0;d<b;++d){a[d]=c;}};T0.vZ=function vZ(a,b){var c;for(c=0;c<b;++c){a[c]=0;}};T0.wZ=function wZ(a,b){var c;for(c=0;c<b;++c){a[c]=false;}};T0.xZ=function xZ(a){var b,c,d,e,f;f=1;for(c=a,d=0,e=c.length;d<e;++d){b=c[d];f=31*f+(b!=null?O0.Kc(b):0);f=f|0;}return f};T0.yZ=function yZ(a,b,c,d){var e,f,g;for(e=b+1;e<c;++e){for(f=e;f>b&&d.pb(a[f-1],a[f])>0;--f){g=a[f];N0.RL(a,f,a[f-1]);N0.RL(a,f-1,g);}}};T0.zZ=function zZ(a,b,c,d,e,f,g,h){var i;i=c;while(f<g){i>=d||b<c&&h.pb(a[b],a[i])<=0?SL(e,f++,a[b++]):SL(e,f++,a[i++]);}};T0.AZ=function AZ(a,b,c,d){var e;d=(T0.RZ(),!d?T0.QZ:d);e=R0.I0(a).slice(b,c);T0.BZ(e,a,b,c,-b,d);};T0.BZ=function BZ(a,b,c,d,e,f){var g,h,i,j;g=d-c;if(g<7){T0.yZ(b,c,d,f);return}i=c+e;h=d+e;j=i+(h-i>>1);T0.BZ(b,a,i,j,-e,f);T0.BZ(b,a,j,h,-e,f);if(f.pb(a[j-1],a[j])<=0){while(c<d){SL(b,c++,a[i++]);}return}T0.zZ(a,i,j,h,b,c,d,f);};T0.CZ=function CZ(a){T0.AZ(a,0,a.length,null);};T0.DZ=function DZ(a,b,c){R0.v0(b,a.length);T0.AZ(a,0,b,c);};T0.EZ=function EZ(a,b){T0.AZ(a,0,a.length,b);};T0.FZ=function FZ(){return N0.KO};T0.GZ=function GZ(){};sR(217,$wnd.Function,{},T0.GZ);_.ac=function HZ(a,b){return kT(a,b)};T0.IZ=function IZ(){return N0.KO};T0.JZ=function JZ(){};sR(216,$wnd.Function,{},T0.JZ);_.bc=function KZ(a,b){return JQ(a,b)<0?-1:JQ(a,b)>0?1:0};T0.LZ=function LZ(){return N0.KO};T0.MZ=function MZ(){};sR(41,$wnd.Function,{},T0.MZ);_.ac=function NZ(a,b){return a-b};T0.OZ=function OZ(a){var b,c,d;d=0;for(c=a.rb();c.Wb();){b=c.Xb();d=d+(b!=null?O0.Kc(b):0);d=d|0;}return d};T0.PZ=function PZ(a){var b,c,d;d=1;for(c=a.rb();c.Wb();){b=c.Xb();d=31*d+(b!=null?O0.Kc(b):0);d=d|0;}return d};T0.RZ=function RZ(){T0.RZ=uR;T0.QZ=new T0.TZ;};T0.SZ=function SZ(a,b){return R0.z0(a),O0.rS(a,(R0.z0(b),b))};T0.TZ=function TZ(){};sR(170,1,c3,T0.TZ);_.pb=function UZ(a,b){return T0.SZ(a,b)};_.ib=function VZ(a){return this===a};N0.cQ=LS(170);T0.$Z=function $Z(){O0.GJ.call(this);};sR(174,37,A1,T0.$Z);N0.dQ=LS(174);T0._Z=function _Z(a,b){return bN(a)===bN(b)||a!=null&&O0.Gc(a,b)};T0.a$=function a$(a){return a!=null?O0.Kc(a):0};T0.e$=function e$(){T0.e$=uR;var a,b,c,d;T0.b$=OL(N0.fN,O2,5,25,15,1);T0.c$=OL(N0.fN,O2,5,33,15,1);d=1.52587890625E-5;for(b=32;b>=0;b--){T0.c$[b]=d;d*=0.5;}c=1;for(a=24;a>=0;a--){T0.b$[a]=c;c*=0.5;}};T0.f$=function f$(a,b){var c,d;R0.u0(b>0);if((b&-b)==b){return cN(b*T0.g$(a)*4.6566128730773926E-10)}do{c=T0.g$(a);d=c%b;}while(c-d+(b-1)<0);return cN(d)};T0.g$=function g$(a){var b,c,d,e,f,g;e=a.a*E4+a.b*1502;g=a.b*E4+11;b=$wnd.Math.floor(g*F4);e+=b;g-=b*G4;e%=G4;a.a=e;a.b=g;d=a.a*128;f=$wnd.Math.floor(a.b*T0.c$[31]);c=d+f;c>=2147483648&&(c-=P1);return c};T0.h$=function h$(a,b,c){a.a=b^1502;a.b=c^E4;};T0.i$=function i$(){T0.e$();var a,b,c;c=T0.d$+++Date.now();a=cN($wnd.Math.floor(c*F4))&L1;b=cN(c-a*G4);this.a=a^1502;this.b=b^E4;};T0.j$=function j$(a){T0.e$();T0.h$(this,gR(EQ(bR(a,24),L1)),gR(EQ(a,L1)));};sR(78,1,{},T0.i$,T0.j$);_.a=0;_.b=0;T0.d$=0;N0.eQ=LS(78);T0.k$=function k$(a,b){!a.a?(a.a=new O0.MU(a.d)):O0.HU(a.a,a.b);O0.GU(a.a,b);return a};T0.l$=function l$(a){return !a.a?a.c:R0.I0(a.e).length==0?a.a.a:a.a.a+(''+a.e)};T0.m$=function m$(a,b){this.b=', ';this.d=a;this.e=b;this.c=this.d+(''+this.e);};sR(114,1,{},T0.m$);_.lb=function n$(){return T0.l$(this)};N0.fQ=LS(114);T0.o$=function o$(a){};T0.p$=function p$(a){a.b=null;a.c=0;};T0.q$=function q$(a){return new T0.T$(a)};T0.r$=function r$(a,b){var c,d,e;e=a.b;while(e){c=a.a.pb(b,e.c);if(c==0){return e}d=c<0?0:1;e=e.a[d];}return null};T0.s$=function s$(a,b,c,d,e,f,g,h){var i,j;if(!d){return}i=d.a[0];!!i&&T0.s$(a,b,c,i,e,f,g,h);T0.t$(a,c,d.c,e,f,g,h)&&b.add(d);j=d.a[1];!!j&&T0.s$(a,b,c,j,e,f,g,h);};T0.t$=function t$(a,b,c,d,e,f,g){var h,i;if(b.cc()&&(i=a.a.pb(c,d),i<0||!e&&i==0)){return false}if(b.dc()&&(h=a.a.pb(c,f),h>0||!g&&h==0)){return false}return true};T0.u$=function u$(a,b,c,d){var e,f;if(!b){return c}else {e=a.a.pb(c.c,b.c);if(e==0){d.d=T0.xY(b,c.d);d.b=true;return b}f=e<0?0:1;b.a[f]=T0.u$(a,b.a[f],c,d);if(T0.v$(b.a[f])){if(T0.v$(b.a[1-f])){b.b=true;b.a[0].b=false;b.a[1].b=false;}else {T0.v$(b.a[f].a[f])?(b=T0.C$(b,1-f)):T0.v$(b.a[f].a[1-f])&&(b=T0.B$(b,1-f));}}}return b};T0.v$=function v$(a){return !!a&&a.b};T0.w$=function w$(a,b,c){var d,e;d=new T0.W$(b,c);e=new T0.Y$;a.b=T0.u$(a,a.b,d,e);e.b||++a.c;a.b.b=false;return e.d};T0.x$=function x$(a,b){var c,d;c=b;d=new T0.Y$;T0.z$(a,c,d);return d.d};T0.y$=function y$(a,b){var c;c=new T0.Y$;c.c=true;c.d=b._b();return T0.z$(a,b.$b(),c)};T0.z$=function z$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;if(!a.b){return false}g=null;m=null;i=new T0.W$(null,null);e=1;i.a[1]=a.b;l=i;while(l.a[e]){j=e;h=m;m=l;l=l.a[e];d=a.a.pb(b,l.c);e=d<0?0:1;d==0&&(!c.c||T0._Z(l.d,c.d))&&(g=l);if(!(!!l&&l.b)&&!T0.v$(l.a[e])){if(T0.v$(l.a[1-e])){m=m.a[j]=T0.C$(l,e);}else if(!T0.v$(l.a[1-e])){n=m.a[1-j];if(n){if(!T0.v$(n.a[1-j])&&!T0.v$(n.a[j])){m.b=false;n.b=true;l.b=true;}else {f=h.a[1]==m?1:0;T0.v$(n.a[j])?(h.a[f]=T0.B$(m,j)):T0.v$(n.a[1-j])&&(h.a[f]=T0.C$(m,j));l.b=h.a[f].b=true;h.a[f].a[0].b=false;h.a[f].a[1].b=false;}}}}}if(g){c.b=true;c.d=g.d;if(l!=g){k=new T0.W$(l.c,l.d);T0.A$(a,i,g,k);m==g&&(m=k);}m.a[m.a[1]==l?1:0]=l.a[!l.a[0]?1:0];--a.c;}a.b=i.a[1];!!a.b&&(a.b.b=false);return c.b};T0.A$=function A$(a,b,c,d){var e,f;f=b;e=f.c==null||a.a.pb(c.c,f.c)>0?1:0;while(f.a[e]!=c){f=f.a[e];e=a.a.pb(c.c,f.c)>0?1:0;}f.a[e]=d;d.b=c.b;d.a[0]=c.a[0];d.a[1]=c.a[1];c.a[0]=null;c.a[1]=null;};T0.B$=function B$(a,b){var c;c=1-b;a.a[c]=T0.C$(a.a[c],c);return T0.C$(a,b)};T0.C$=function C$(a,b){var c,d;c=1-b;d=a.a[c];a.a[c]=d.a[b];d.a[b]=a;a.b=true;d.b=false;return d};T0.D$=function D$(a){return a.c};T0.E$=function E$(){T0.F$.call(this,null);};T0.F$=function F$(a){T0.o$(this);this.b=null;this.a=(T0.RZ(),!a?T0.QZ:a);};sR(52,206,{4:1,176:1,52:1},T0.E$,T0.F$);_.clear=function G$(){T0.p$(this);};_.Zb=function H$(){return T0.q$(this)};_.put=function I$(a,b){return T0.w$(this,a,b)};_.remove=function J$(a){return T0.x$(this,a)};_.size=function K$(){return T0.D$(this)};_.c=0;N0.oQ=LS(52);T0.L$=function L$(a){return T0.mX(a.a)};T0.M$=function M$(a){return a.b=T0.nX(a.a)};T0.N$=function N$(a){T0.oX(a.a);T0.y$(a.c,a.b);a.b=null;};T0.O$=function O$(a){T0.P$.call(this,a,(T0.c_(),T0.$$));};T0.P$=function P$(a,b){var c;this.c=a;c=new T0.ki;T0.s$(a,c,b,a.b,null,false,null,false);this.a=new T0.uX(c,0);};sR(34,1,{},T0.O$);_.Xb=function R$(){return T0.M$(this)};_.Wb=function Q$(){return T0.L$(this)};_.Yb=function S$(){T0.N$(this);};N0.gQ=LS(34);T0.T$=function T$(a){this.a=a;T0.PY.call(this,a);};sR(42,126,D4,T0.T$);_.clear=function U$(){T0.p$(this.a);};N0.hQ=LS(42);T0.V$=function V$(a){a.a=OL(N0.iQ,z1,63,2,0,1);};T0.W$=function W$(a,b){T0.X$.call(this,a,b);};T0.X$=function X$(a,b){T0.EY.call(this,a,b);T0.V$(this);this.b=true;};sR(63,86,{85:1,86:1,88:1,63:1},T0.W$);_.b=false;N0.iQ=LS(63);T0.Y$=function Y$(){};
sR(99,1,{},T0.Y$);_.lb=function Z$(){return 'State: mv='+this.c+' value='+this.d+' done='+this.a+' found='+this.b};_.a=false;_.b=false;_.c=false;N0.jQ=LS(99);T0.c_=function c_(){T0.c_=uR;T0.$$=new T0.d_('All',0);T0._$=new T0.h_;T0.a_=new T0.j_;T0.b_=new T0.m_;};T0.d_=function d_(a,b){pT.call(this,a,b);};T0.g_=function g_(){T0.c_();return WL(IL(N0.nQ,1),r3,46,0,[T0.$$,T0._$,T0.a_,T0.b_])};sR(46,48,H4,T0.d_);_.cc=function e_(){return false};_.dc=function f_(){return false};N0.nQ=MS(46,T0.g_);T0.h_=function h_(){T0.d_.call(this,'Head',1);};sR(166,46,H4,T0.h_);_.dc=function i_(){return true};N0.kQ=MS(166,null);T0.j_=function j_(){T0.d_.call(this,'Range',2);};sR(167,46,H4,T0.j_);_.cc=function k_(){return true};_.dc=function l_(){return true};N0.lQ=MS(167,null);T0.m_=function m_(){T0.d_.call(this,'Tail',3);};sR(168,46,H4,T0.m_);_.cc=function n_(){return true};N0.mQ=MS(168,null);T0.o_=function o_(a,b){return T0.w$(a.a,b,(O0.jS(),iS))==null};T0.p_=function p_(a){T0.p$(a.a);};T0.q_=function q_(a,b){return T0.GY(a.a,b)};T0.r_=function r_(a){var b;return b=new T0.O$((new T0.T$((new T0.VY(a.a)).a)).b),new T0.bZ(b)};T0.s_=function s_(a){return a.a.c};T0.t_=function t_(){this.a=new T0.E$;};T0.u_=function u_(a){this.a=new T0.F$(a);};sR(108,204,{4:1,75:1},T0.t_,T0.u_);_.add=function v_(a){return T0.o_(this,a)};_.clear=function w_(){T0.p_(this);};_.contains=function x_(a){return T0.q_(this,a)};_.rb=function y_(){return T0.r_(this)};_.remove=function z_(a){return T0.x$(this.a,a)!=null};_.size=function A_(){return T0.s_(this)};N0.pQ=LS(108);T0.B_=function B_(a,b){return T0.Th(a.a,b)};T0.C_=function C_(a){return a.a.a.length};T0.D_=function D_(a,b){return T0.ji(a.a,b)};T0.E_=function E_(){this.a=new T0.ki;};T0.J_=function J_(a,b){if(a<0||a>=b){throw CQ(new O0.gS)}};sR(165,201,l3,T0.E_);_.addAtIndex=function F_(a,b){T0.J_(a,this.a.a.length+1);T0.Sh(this.a,a,b);};_.add=function G_(a){return T0.B_(this,a)};_.addAllAtIndex=function H_(a,b){T0.J_(a,this.a.a.length+1);return T0.Uh(this.a,a,b)};_.addAll=function I_(a){return T0.Vh(this.a,a)};_.clear=function K_(){R0.I0(this.a.a).length=0;};_.contains=function L_(a){return T0.$h(this.a,a,0)!=-1};_.containsAll=function M_(a){return T0.oh(this.a,a)};_.getAtIndex=function N_(a){T0.J_(a,this.a.a.length);return T0.Yh(this.a,a)};_.indexOf=function O_(a){return T0.$h(this.a,a,0)};_.isEmpty=function P_(){return this.a.a.length==0};_.rb=function Q_(){return new T0.iZ(this.a)};_.lastIndexOf=function R_(a){return T0.ai(this.a,a)};_.removeAtIndex=function S_(a){T0.J_(a,this.a.a.length);return T0.ci(this.a,a)};_.removeAll=function T_(a){return T0.ph(this.a,a)};_.tb=function U_(a,b){T0.ei(this.a,a,b);};_.setAtIndex=function V_(a,b){T0.J_(a,this.a.a.length);return T0.fi(this.a,a,b)};_.size=function W_(){return T0.C_(this)};_.subList=function X_(a,b){return new T0.wX(this.a,a,b)};_.toArray=function Y_(){return R0.__(this.a.a)};_.sb=function Z_(a){return T0.D_(this,a)};_.lb=function $_(){return T0.qh(this.a)};N0.qQ=LS(165);R0.h0=function h0(a,b){return N0.XL(a,b)};R0.i0=function i0(){R0.i0=uR;new R0.o0;new R0.k0('ISO-LATIN-1');new R0.k0('ISO-8859-1');};R0.j0=function j0(a){j1.dX.call(this,a);};sR(115,58,C4);N0.tQ=LS(115);R0.k0=function k0(a){R0.j0.call(this,a);};sR(116,115,C4,R0.k0);N0.rQ=LS(116);R0.l0=function l0(a,b,c){var d,e,f,g,h,i,j,k,l;f=0;for(j=0;j<c;){++f;e=a[b+j];if((e&192)==128){throw CQ(new O0.zT(I4))}else if((e&128)==0){++j;}else if((e&224)==192){j+=2;}else if((e&240)==224){j+=3;}else if((e&248)==240){j+=4;}else {throw CQ(new O0.zT(I4))}if(j>c){throw CQ(new O0.fS(I4))}}g=OL(N0.eN,c3,5,f,15,1);l=0;h=0;for(i=0;i<c;){e=a[b+i++];if((e&128)==0){h=1;e&=127;}else if((e&224)==192){h=2;e&=31;}else if((e&240)==224){h=3;e&=15;}else if((e&248)==240){h=4;e&=7;}else if((e&252)==248){h=5;e&=3;}while(--h>0){d=a[b+i++];if((d&192)!=128){throw CQ(new O0.zT('Invalid UTF8 sequence at '+(b+i-1)+', byte='+(k=R0.I0(R0.H0(d)),k.toString(16))))}e=e<<6|d&63;}l+=zS(e,g,l);}return g};R0.m0=function m0(a,b){if(b<128){R0.d0(a,(b&127)<<24>>24);}else if(b<N2){R0.d0(a,(b>>6&31|192)<<24>>24);R0.d0(a,(b&63|128)<<24>>24);}else if(b<C1){R0.d0(a,(b>>12&15|224)<<24>>24);R0.d0(a,(b>>6&63|128)<<24>>24);R0.d0(a,(b&63|128)<<24>>24);}else if(b<w2){R0.d0(a,(b>>18&7|240)<<24>>24);R0.d0(a,(b>>12&63|128)<<24>>24);R0.d0(a,(b>>6&63|128)<<24>>24);R0.d0(a,(b&63|128)<<24>>24);}else if(b<t3){R0.d0(a,(b>>24&3|248)<<24>>24);R0.d0(a,(b>>18&63|128)<<24>>24);R0.d0(a,(b>>12&63|128)<<24>>24);R0.d0(a,(b>>6&63|128)<<24>>24);R0.d0(a,(b&63|128)<<24>>24);}else {throw CQ(new O0.zT('Character out of range: '+b))}};R0.n0=function n0(a){var b,c,d,e;e=R0.I0(a).length;b=OL(N0.dN,d3,5,0,15,1);for(d=0;d<e;){c=uS(a,d,R0.I0(a).length);d+=c>=C1?2:1;R0.m0(b,c);}return b};R0.o0=function o0(){R0.j0.call(this,'UTF-8');};sR(147,115,C4,R0.o0);N0.sQ=LS(147);R0.L0=function L0(a,b){var c,d;d=EQ(N0.MQ(a),A4);c=aR(N0.MQ(b),32);return _Q(c,d)};N0.eN=NS('C');N0.wQ=NS('S');N0.dN=NS('B');N0.hN=NS('I');N0.xQ=NS('Z');N0.fN=NS('D');N0.gN=NS('F');N0.iN=NS('J');$0.tB();_=yR('OCL.Molecule',$0.wB);_.CANONIZER_ASSIGN_PARITIES_TO_TETRAHEDRAL_N=$0.Ww;_.CANONIZER_CONSIDER_DIASTEREOTOPICITY=$0.Xw;_.CANONIZER_CONSIDER_ENANTIOTOPICITY=$0.Yw;_.CANONIZER_CONSIDER_STEREOHETEROTOPICITY=$0.Zw;_.CANONIZER_COORDS_ARE_3D=$0.$w;_.CANONIZER_CREATE_PSEUDO_STEREO_GROUPS=$0._w;_.CANONIZER_CREATE_SYMMETRY_RANK=$0.ax;_.CANONIZER_DISTINGUISH_RACEMIC_OR_GROUPS=$0.bx;_.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS=$0.cx;_.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS_WITHOUT_RANKING=$0.dx;_.CANONIZER_ENCODE_ATOM_SELECTION=$0.ex;_.CANONIZER_NEGLECT_ANY_STEREO_INFORMATION=$0.fx;_.CANONIZER_TIE_BREAK_FREE_VALENCE_ATOMS=$0.gx;_.FISCHER_PROJECTION_LIMIT=$0.hx;_.FISCHER_PROJECTION_RING_LIMIT=$0.ix;_.STEREO_ANGLE_LIMIT=$0.jx;_.VALIDATION_ERRORS_STEREO=$0.kx;_.VALIDATION_ERROR_AMBIGUOUS_CONFIGURATION=$0.lx;_.VALIDATION_ERROR_ESR_CENTER_UNKNOWN=$0.mx;_.VALIDATION_ERROR_OVER_UNDER_SPECIFIED=$0.nx;_.cAtomCIPParityNone=$0.ox;_.cAtomCIPParityProblem=$0.px;_.cAtomCIPParityRorM=$0.qx;_.cAtomCIPParitySorP=$0.rx;_.cAtomColorBlue=$0.sx;_.cAtomColorDarkGreen=$0.tx;_.cAtomColorDarkRed=$0.ux;_.cAtomColorGreen=$0.vx;_.cAtomColorMagenta=$0.wx;_.cAtomColorNone=$0.xx;_.cAtomColorOrange=$0.yx;_.cAtomColorRed=$0.zx;_.cAtomLabel=$0.Ax;_.cAtomParity1=$0.Bx;_.cAtomParity2=$0.Cx;_.cAtomParityIsPseudo=$0.Dx;_.cAtomParityNone=$0.Ex;_.cAtomParityUnknown=$0.Fx;_.cAtomQFAny=$0.Gx;_.cAtomQFAromState=$0.Hx;_.cAtomQFAromStateBits=$0.Ix;_.cAtomQFAromStateShift=$0.Jx;_.cAtomQFAromatic=$0.Kx;_.cAtomQFCharge=$0.Lx;_.cAtomQFChargeBits=$0.Mx;_.cAtomQFChargeShift=$0.Nx;_.cAtomQFENeighbourBits=$0.Ox;_.cAtomQFENeighbourShift=$0.Px;_.cAtomQFENeighbours=$0.Qx;_.cAtomQFExcludeGroup=$0.Rx;_.cAtomQFFlatNitrogen=$0.Sx;_.cAtomQFHeteroAromatic=$0.Tx;_.cAtomQFHydrogen=$0.Ux;_.cAtomQFHydrogenBits=$0.Vx;_.cAtomQFHydrogenShift=$0.Wx;_.cAtomQFIsNotStereo=$0.Xx;_.cAtomQFIsStereo=$0.Yx;_.cAtomQFMatchStereo=$0.Zx;_.cAtomQFMoreNeighbours=$0.$x;_.cAtomQFNarrowing=$0._x;_.cAtomQFNeighbourBits=$0.ay;_.cAtomQFNeighbourShift=$0.by;_.cAtomQFNeighbours=$0.cy;_.cAtomQFNewRingSize=$0.dy;_.cAtomQFNewRingSizeBits=$0.ey;_.cAtomQFNewRingSizeShift=$0.fy;_.cAtomQFNoMoreNeighbours=$0.gy;_.cAtomQFNoOfBits=$0.hy;_.cAtomQFNot0ENeighbours=$0.iy;_.cAtomQFNot0Hydrogen=$0.jy;_.cAtomQFNot0Neighbours=$0.ky;_.cAtomQFNot0PiElectrons=$0.ly;_.cAtomQFNot1ENeighbour=$0.my;_.cAtomQFNot1Hydrogen=$0.ny;_.cAtomQFNot1Neighbour=$0.oy;_.cAtomQFNot1PiElectron=$0.py;_.cAtomQFNot2ENeighbours=$0.qy;_.cAtomQFNot2Hydrogen=$0.ry;_.cAtomQFNot2Neighbours=$0.sy;_.cAtomQFNot2PiElectrons=$0.ty;_.cAtomQFNot2RingBonds=$0.uy;_.cAtomQFNot3ENeighbours=$0.vy;_.cAtomQFNot3Hydrogen=$0.wy;_.cAtomQFNot3Neighbours=$0.xy;_.cAtomQFNot3RingBonds=$0.yy;_.cAtomQFNot4ENeighbours=$0.zy;_.cAtomQFNot4Neighbours=$0.Ay;_.cAtomQFNot4RingBonds=$0.By;_.cAtomQFNotAromatic=$0.Cy;_.cAtomQFNotChain=$0.Dy;_.cAtomQFNotCharge0=$0.Ey;_.cAtomQFNotChargeNeg=$0.Fy;_.cAtomQFNotChargePos=$0.Gy;_.cAtomQFPiElectronBits=$0.Hy;_.cAtomQFPiElectronShift=$0.Iy;_.cAtomQFPiElectrons=$0.Jy;_.cAtomQFRingSize0=$0.Ky;_.cAtomQFRingSize3=$0.Ly;_.cAtomQFRingSize4=$0.My;_.cAtomQFRingSize5=$0.Ny;_.cAtomQFRingSize6=$0.Oy;_.cAtomQFRingSize7=$0.Py;_.cAtomQFRingSizeLarge=$0.Qy;_.cAtomQFRingState=$0.Ry;_.cAtomQFRingStateBits=$0.Sy;_.cAtomQFRingStateShift=$0.Ty;_.cAtomQFRxnParityBits=$0.Uy;_.cAtomQFRxnParityHint=$0.Vy;_.cAtomQFRxnParityInvert=$0.Wy;_.cAtomQFRxnParityRacemize=$0.Xy;_.cAtomQFRxnParityRetain=$0.Yy;_.cAtomQFRxnParityShift=$0.Zy;_.cAtomQFSimpleFeatures=$0.$y;_.cAtomQFSmallRingSize=$0._y;_.cAtomQFSmallRingSizeBits=$0.az;_.cAtomQFSmallRingSizeShift=$0.bz;_.cAtomQFStereoState=$0.cz;_.cAtomQFStereoStateBits=$0.dz;_.cAtomQFStereoStateShift=$0.ez;_.cAtomRadicalState=$0.fz;_.cAtomRadicalStateD=$0.gz;_.cAtomRadicalStateNone=$0.hz;_.cAtomRadicalStateS=$0.iz;_.cAtomRadicalStateShift=$0.jz;_.cAtomRadicalStateT=$0.kz;_.cAtomValence=$0.lz;_.cBondCIPParityEorP=$0.mz;_.cBondCIPParityNone=$0.nz;_.cBondCIPParityProblem=$0.oz;_.cBondCIPParityZorM=$0.pz;_.cBondParityEor1=$0.qz;_.cBondParityNone=$0.rz;_.cBondParityUnknown=$0.sz;_.cBondParityZor2=$0.tz;_.cBondQFAllFeatures=$0.uz;_.cBondQFAromState=$0.vz;_.cBondQFAromStateBits=$0.wz;_.cBondQFAromStateShift=$0.xz;_.cBondQFAromatic=$0.yz;_.cBondQFBondTypes=$0.zz;_.cBondQFBondTypesBits=$0.Az;_.cBondQFBondTypesShift=$0.Bz;_.cBondQFBridge=$0.Cz;_.cBondQFBridgeBits=$0.Dz;_.cBondQFBridgeMin=$0.Ez;_.cBondQFBridgeMinBits=$0.Fz;_.cBondQFBridgeMinShift=$0.Gz;_.cBondQFBridgeShift=$0.Hz;_.cBondQFBridgeSpan=$0.Iz;_.cBondQFBridgeSpanBits=$0.Jz;_.cBondQFBridgeSpanShift=$0.Kz;_.cBondQFDelocalized=$0.Lz;_.cBondQFDouble=$0.Mz;_.cBondQFMatchFormalOrder=$0.Nz;_.cBondQFMatchStereo=$0.Oz;_.cBondQFMetalLigand=$0.Pz;_.cBondQFNarrowing=$0.Qz;_.cBondQFNoOfBits=$0.Rz;_.cBondQFNotAromatic=$0.Sz;_.cBondQFNotRing=$0.Tz;_.cBondQFQuadruple=$0.Uz;_.cBondQFQuintuple=$0.Vz;_.cBondQFRareBondTypes=$0.Wz;_.cBondQFRareBondTypesBits=$0.Xz;_.cBondQFRareBondTypesShift=$0.Yz;_.cBondQFRing=$0.Zz;_.cBondQFRingSize=$0.$z;_.cBondQFRingSizeBits=$0._z;_.cBondQFRingSizeShift=$0.aA;_.cBondQFRingState=$0.bA;_.cBondQFRingStateBits=$0.cA;_.cBondQFRingStateShift=$0.dA;_.cBondQFSimpleFeatures=$0.eA;_.cBondQFSingle=$0.fA;_.cBondQFTriple=$0.gA;_.cBondTypeCross=$0.hA;_.cBondTypeDeleted=$0.iA;_.cBondTypeDelocalized=$0.jA;_.cBondTypeDouble=$0.kA;_.cBondTypeDown=$0.lA;_.cBondTypeIncreaseOrder=$0.mA;_.cBondTypeMaskSimple=$0.nA;_.cBondTypeMaskStereo=$0.oA;_.cBondTypeMetalLigand=$0.pA;_.cBondTypeQuadruple=$0.qA;_.cBondTypeQuintuple=$0.rA;_.cBondTypeSingle=$0.sA;_.cBondTypeTriple=$0.tA;_.cBondTypeUp=$0.uA;_.cChiralityDiastereomers=$0.vA;_.cChiralityEpimers=$0.wA;_.cChiralityIsomerCountMask=$0.xA;_.cChiralityKnownEnantiomer=$0.yA;_.cChiralityMeso=$0.zA;_.cChiralityNotChiral=$0.AA;_.cChiralityRacemic=$0.BA;_.cChiralityUnknown=$0.CA;_.cChiralityUnknownEnantiomer=$0.DA;_.cCommonOxidationState=$0.EA;_.cDefaultAVBL=$0.FA;_.cDefaultAllowedPseudoAtoms=$0.GA;_.cDefaultAtomValence=$0.HA;_.cESRGroupBits=$0.IA;_.cESRMaxGroups=$0.JA;_.cESRTypeAbs=$0.KA;_.cESRTypeAnd=$0.LA;_.cESRTypeOr=$0.MA;_.cHelperBitCIP=$0.NA;_.cHelperBitIncludeNitrogenParities=$0.OA;_.cHelperBitNeighbours=$0.PA;_.cHelperBitParities=$0.QA;_.cHelperBitRings=$0.RA;_.cHelperBitRingsSimple=$0.SA;_.cHelperBitSymmetrySimple=$0.TA;_.cHelperBitSymmetryStereoHeterotopicity=$0.UA;_.cHelperBitsStereo=$0.VA;_.cHelperCIP=$0.WA;_.cHelperNeighbours=$0.XA;_.cHelperNone=$0.YA;_.cHelperParities=$0.ZA;_.cHelperRings=$0.$A;_.cHelperRingsSimple=$0._A;_.cHelperSymmetrySimple=$0.aB;_.cHelperSymmetryStereoHeterotopicity=$0.bB;_.cMaxAtomicNo=$0.cB;_.cMaxConnAtoms=$0.dB;_.cMoleculeColorDefault=$0.eB;_.cMoleculeColorNeutral=$0.fB;_.cPseudoAtomA=$0.gB;_.cPseudoAtomAttachmentPoint=$0.hB;_.cPseudoAtomPolymer=$0.iB;_.cPseudoAtomR=$0.jB;_.cPseudoAtomX=$0.kB;_.cPseudoAtomsAGroups=$0.lB;_.cPseudoAtomsAll=$0.mB;_.cPseudoAtomsAminoAcids=$0.nB;_.cPseudoAtomsHydrogenIsotops=$0.oB;_.cPseudoAtomsRGroups=$0.pB;_.cRoundedMass=$0.qB;_.fromIDCode=$0.pC;_.fromMolfile=$0.sC;_.fromMolfileWithAtomMap=$0.tC;_.fromSmiles=$0.uC;_.getAngle=$0.DC;_.getAngleDif=$0.EC;_.getAtomicNoFromLabel=$0.bD;_.getDefaultAverageBondLength=$0.FD;_.isAtomicNoElectronegative=$0.LE;_.isAtomicNoElectropositive=$0.ME;_.setDefaultAverageBondLength=$0.hG;_=yR('OCL.Reaction');_.create=$0.VG;_.fromMolecules=$0.WG;_.fromRxn=$0.XG;_.fromSmiles=$0.YG;_=yR('OCL.RingCollection');_.MAX_SMALL_RING_SIZE=$0.wH;_.MODE_SMALL_AND_LARGE_RINGS=$0.xH;_.MODE_SMALL_AND_LARGE_RINGS_AND_AROMATICITY=$0.yH;_.MODE_SMALL_RINGS_AND_AROMATICITY=$0.zH;_.MODE_SMALL_RINGS_ONLY=$0.AH;_=yR('OCL.SDFileParser',$0.UH);_=yR('OCL.SSSearcher',$0.fI);_=yR('OCL.SSSearcherWithIndex',$0.mI);_.bitCount=$0.nI;_.getHexStringFromIndex=$0.pI;_.getIndexFromHexString=$0.qI;_.getKeyIDCode=$0.rI;_.getSimilarityAngleCosine=$0.tI;_.getSimilarityTanimoto=$0.uI;_=yR('OCL.SmilesParser',$0.zI);_=yR('OCL.Util',$0.GI);_.getHoseCodesFromDiastereotopicID=$0.HI;_=yR('java.io.Serializable');_.$isInstance=SR;O0.jS();_=yR('java.lang.Boolean');_.$isInstance=pS;_=yR('java.lang.CharSequence');_.$isInstance=sS;_=yR('java.lang.Cloneable');_.$isInstance=ZS;_=yR('java.lang.Comparable');_.$isInstance=$S;_=yR('java.lang.Double');_.$isInstance=jT;_=yR('java.lang.Number');_.$isInstance=O0.aT;_=yR('java.lang.String');_.$isInstance=kU;_=yR('java.lang.Throwable');_.of=BJ;_=yR('javaemul.internal.HashCodes',R0.q0);_.getIdentityHashCode=R0.r0;_.getNextHash=R0.s0;_.getObjectIdentityHashCode=R0.t0;_=yR('javaemul.internal.JsUtils');_.toDoubleFromUnsignedInt=R0.H0;var M0=(Q0.oK(),rK);var gwtOnLoad=gwtOnLoad=nR;lR(BR);oR('permProps',[[['locale','default'],['user.agent','safari']]]);gwtOnLoad(__gwtModuleFunction.__errFn, __gwtModuleFunction.__moduleName, __gwtModuleFunction.__moduleBase, __gwtModuleFunction.__softPermutationId,__gwtModuleFunction.__computePropValue);$gwt && $gwt.permProps && __gwtModuleFunction.__moduleStartupDone($gwt.permProps);


    // End GWT code

    var toReturn = $wnd["OCL"];

    toReturn.version = '8.5.0';

    return toReturn;
  }

  var isBrowser, globalEnv;

  if (typeof self !== 'undefined') { // Usual Browser Window or Web Worker
    isBrowser = true;
    globalEnv = self;
  } else if (typeof commonjsGlobal !== 'undefined') { // Node.js
    isBrowser = false;
    globalEnv = commonjsGlobal;
  } else { // Other environment (example: CouchDB)
    isBrowser = false;
    globalEnv = root;
  }

  var document = globalEnv.document || {};

  if (!document.compatMode) {
    document.compatMode = 'CSS1Compat';
  }

  var fakeWindow;
  if (isBrowser && !true) {
    fakeWindow = globalEnv;
  } else {
    fakeWindow = {};
    fakeWindow.setTimeout = globalEnv.setTimeout ? globalEnv.setTimeout.bind(globalEnv) : noop;
    fakeWindow.clearTimeout = globalEnv.clearTimeout ? globalEnv.clearTimeout.bind(globalEnv) : noop;
    fakeWindow.setInterval = globalEnv.setInterval ? globalEnv.setInterval.bind(globalEnv) : noop;
    fakeWindow.clearInterval = globalEnv.clearInterval ? globalEnv.clearInterval.bind(globalEnv) : noop;
    // required since GWT 2.8.0
    fakeWindow.Error = globalEnv.Error;
    fakeWindow.Math = globalEnv.Math;
    fakeWindow.RegExp = globalEnv.RegExp;
    fakeWindow.TypeError = globalEnv.TypeError;
  }

  if (!fakeWindow.document) {
    fakeWindow.document = document;
  }

  var exportedApi = getExports(fakeWindow);

  { // NodeJS
    fillExports(exportedApi, exports);
  }

  function fillExports(obj, exports) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      exports[keys[i]] = obj[keys[i]];
    }
  }

  function noop() {}

})(commonjsGlobal);
});

var minimal = openchemlibMinimal;

const reactionPathwayCss = ":host{display:block;--background-color:#fafafa;--primary-color:#503291;--honeycomb-border-color:var(--primary-color);--honeycomb-color:var(--background-color);--reaction-name-color:#0f1a2e;--reaction-condition-color:#5e5e72;--reaction-doi-color:#5e5e72;--score-text-color:#eb3c96;--badge-outline-color:var(--background-color);--badge-color:var(--primary-color);--badge-text-color:#ffffff}";

/**
 * The SVG icons of the reaction pathway component
 * @readonly
 * @enum {string}
 */
const SVG_ICONS = ["book", "reference_1", "reference_2", "reference_3", "exclamation", "shield", "flask"];
/**
 * The default width of a node
 */
const NODE_WIDTH = 150;
/**
 * The default height of a node
 */
const NODE_HEIGHT = 200;
/**
 * The default separation between nodes
 */
const TREE_SEPARATION = 1;
/**
 * The default offset of a reaction node
 */
const REACTION_NODE_X_OFFSET = 85;
/**
 * The default radius of a line curve
 */
const LINE_CURVE_RADIUS = 5;
/**
 * The default radius of a hexagon
 */
const HEXAGON_RADIUS = 10;
/**
 * The default radius of a honeycomb badge
 */
const HONEYCOMB_BADGE_RADIUS = 5;
/**
 * The default size of the reference icon
 */
const REFERENCE_ICON_SIZE = 30;
/**
 * The default size of the inventory icon
 */
const INVENTORY_ICON_SIZE = 30;
/**
 * The default zoom speed of the camera
 */
const CAMERA_ZOOM_SPEED = 0.2;
const ReactionPathway = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.click = index.createEvent(this, "reaction-pathway-click", 7);
    this.internalNodes = [];
    this.iconCache = {};
    this.iconObjectCache = {};
    this.objectBoundingBoxCache = {};
    this.nodes = [];
    this.enable3D = false;
    this.displayScore = true;
    this.displayHoneycomb = true;
    this.displayPathway = true;
    this.displayReactionReference = true;
    this.displayReactionName = true;
    this.displayReactionCondition = true;
  }
  async componentWillLoad() {
    if (this.nodes.length === 0)
      return;
    this.svgLoader = new SVGLoader();
    this.internalNodes = this.nodes;
    await this.loadSVGIcons();
    const hierarchy = stratify()
      .id(node => node.id)
      .parentId(node => node.parentId)(this.internalNodes);
    this.tree = tree()
      .size([1000, 1000])
      .nodeSize([NODE_WIDTH, NODE_HEIGHT])
      .separation(() => TREE_SEPARATION)(hierarchy)
      .each(node => {
      const { x, y } = node;
      node.x = -y;
      node.y = x;
      if (node.data.type === "reaction")
        this.internalNodes.filter(({ parentId }) => parentId === node.data.id).length > 1 && (node.x -= REACTION_NODE_X_OFFSET);
    });
  }
  componentDidLoad() {
    if (this.nodes.length === 0)
      return;
    this.renderReactionPathway(this.tree);
  }
  handlePointerDown(event) {
    this.mouse.x = (event.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;
    this.mouse.y = -(event.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;
  }
  handlePointerUp(event) {
    if (this.mouse.x !== (event.offsetX / this.renderer.domElement.clientWidth) * 2 - 1 ||
      this.mouse.y !== -(event.offsetY / this.renderer.domElement.clientHeight) * 2 + 1)
      return;
    this.mouse.x = (event.offsetX / this.renderer.domElement.clientWidth) * 2 - 1;
    this.mouse.y = -(event.offsetY / this.renderer.domElement.clientHeight) * 2 + 1;
    this.raycaster.setFromCamera(this.mouse, this.camera);
    const object = this.scene.children.find(child => {
      let boundingBox = this.objectBoundingBoxCache[child.uuid];
      if (!boundingBox) {
        boundingBox = new Box3().setFromObject(child);
        this.objectBoundingBoxCache[child.uuid] = boundingBox;
      }
      return this.raycaster.ray.intersectsBox(boundingBox);
    });
    if (object && object.userData && object.userData.eventSource)
      this.click.emit({ node: object.userData, eventSource: object.userData.eventSource });
  }
  /**
   * Allows to reset position and zoom levels of the reaction pathway
   */
  async zoomReset() {
    const sceneCenter = new Box3().setFromObject(this.scene).getCenter(new Vector3());
    this.controls.target.set(sceneCenter.x, sceneCenter.y, 0);
    this.camera.zoom = 1;
    this.camera.position.set(sceneCenter.x, sceneCenter.y, 200);
    this.camera.updateProjectionMatrix();
    this.controls.dispatchEvent({ type: "change" });
  }
  /**
   * Allows to zoom in the reaction pathway
   * @param {number} zoomSpeed - The zoom speed of the camera
   */
  async zoomIn(zoomSpeed = CAMERA_ZOOM_SPEED) {
    this.camera.zoom *= 1 + zoomSpeed;
    this.camera.updateProjectionMatrix();
    this.controls.dispatchEvent({ type: "change" });
  }
  /**
   * Allows to zoom out the reaction pathway
   * @param {number} zoomSpeed - The zoom speed of the camera
   */
  async zoomOut(zoomSpeed = CAMERA_ZOOM_SPEED) {
    this.camera.zoom *= 1 - zoomSpeed;
    this.camera.updateProjectionMatrix();
    this.controls.dispatchEvent({ type: "change" });
  }
  /**
   * Loads the SVG icons of the reaction pathway component
   * @todo Using async/await for loading the SVG icons is not the best solution
   * preferably the SVG icons should be loaded in the build step
   */
  async loadSVGIcons() {
    for (const icon of SVG_ICONS) {
      await this.loadSVGIcon(icon);
    }
  }
  /**
   * Loads an SVG icon
   * @param {string} icon - The icon
   */
  async loadSVGIcon(icon) {
    const svg = await fetch(index.getAssetPath(`./assets/${icon}.svg`)).then(response => response.text());
    this.iconCache[icon] = svg;
  }
  /**
   * Appends the label renderer to the container
   * @param {number} width - The width of the container
   * @param {number} height - The height of the container
   */
  appendLabelRendererToContainer(width, height) {
    const labelRenderer = new CSS2DRenderer();
    labelRenderer.setSize(width, height);
    labelRenderer.domElement.style.position = "absolute";
    labelRenderer.domElement.style.top = "0";
    labelRenderer.domElement.style.pointerEvents = "none";
    this.container.appendChild(labelRenderer.domElement);
  }
  /**
   * Renders the reaction pathway
   * @param {HierarchyPointNode<Node>} tree - The tree
   * @todo Implement
   */
  renderReactionPathway(tree) {
    // FIXME: This is a temporary fix for the width and height of the container
    // The width and height should be calculated from the container's parent element
    const width = window.innerWidth;
    const height = window.innerHeight;
    this.renderer = new WebGLRenderer({ antialias: true, alpha: true });
    this.renderer.setSize(width, height);
    this.renderer.setClearColor(0x000000, 0);
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.scene = new Scene();
    this.scene.background = new Color(getComputedStyle(this.element).getPropertyValue("--background-color").trim());
    this.fontLoader = new FontLoader();
    this.helvetiker = this.fontLoader.parse(Helvetiker);
    this.helvetikerBold = this.fontLoader.parse(HelvetikerBold);
    this.raycaster = new Raycaster();
    this.mouse = new Vector2();
    tree
      .descendants()
      .filter(node => node.data.type === "molecule")
      .forEach(node => this.renderMolecule(node));
    tree
      .descendants()
      .filter(node => node.data.type === "reaction")
      .forEach(node => this.renderReaction(node));
    const sceneCenter = new Box3().setFromObject(this.scene).getCenter(new Vector3());
    this.camera = new OrthographicCamera(-width / 2, width / 2, height / 2, -height / 2, 1, 1000);
    this.addLigths();
    this.container.appendChild(this.renderer.domElement);
    // FIXME: Resolve initial positions
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.controls.enableRotate = this.enable3D;
    this.controls.mouseButtons = { LEFT: MOUSE.PAN, RIGHT: MOUSE.ROTATE };
    this.controls.screenSpacePanning = true;
    this.appendLabelRendererToContainer(width, height);
    this.controls.target.set(sceneCenter.x, sceneCenter.y, 0);
    this.camera.position.set(sceneCenter.x, sceneCenter.y, 200);
    this.camera.updateProjectionMatrix();
    this.renderer.render(this.scene, this.camera);
    this.controls.addEventListener("change", () => this.renderer.render(this.scene, this.camera));
  }
  /**
   * Adds the lights to the scene
   */
  addLigths() {
    const frontLight = new DirectionalLight(0xffffff, 1);
    const backLight = new DirectionalLight(0xffffff, 1);
    frontLight.position.set(0, 0, 1);
    backLight.position.set(0, 0, -1);
    this.scene.add(frontLight, backLight);
  }
  /**
   * Renders a molecule
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   * @todo Implement
   */
  renderMolecule(molecule) {
    this.renderSmiles(molecule);
    this.renderMoleculeScore(molecule);
    this.renderMoleculeInventoryIcon(molecule);
    this.renderHoneycomb(molecule);
  }
  /**
   * Renders the score of a molecule
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   * @todo Implement
   */
  renderMoleculeScore(molecule) {
    if (!molecule.data.score || !this.displayScore || molecule.data.isInInventory)
      return;
    const scoreObject3D = new Object3D();
    const geometry = new TextGeometry(molecule.data.score, {
      font: this.helvetikerBold,
      size: 10,
      height: 0,
      curveSegments: 12,
    });
    const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--score-text-color") });
    const mesh = new Mesh(geometry, material);
    scoreObject3D.add(mesh);
    const textWidth = new Box3().setFromObject(mesh).getSize(new Vector3()).x;
    scoreObject3D.position.x = molecule.x - textWidth / 2;
    // FIXME: This is a temporary fix for the y position of the score offset
    scoreObject3D.position.y = molecule.y - molecule.data.boundingBox.y / 2;
    scoreObject3D.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "molecule_score" });
    this.scene.add(scoreObject3D);
  }
  /**
   * Renders the inventory icon of a molecule if it is in the inventory
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   */
  renderMoleculeInventoryIcon(molecule) {
    if (!molecule.data.isInInventory || !this.displayScore)
      return;
    const svgIcon = this.iconCache["flask"];
    let object;
    if (this.iconObjectCache["flask"]) {
      object = this.iconObjectCache["flask"].clone();
    }
    else {
      const data = this.svgLoader.parse(svgIcon);
      object = new Object3D();
      for (const path of data.paths) {
        this.createLineShapes(path).forEach(mesh => object.add(mesh));
        this.createSolidShapes(path).forEach(mesh => object.add(mesh));
      }
      object.rotation.z = Math.PI;
      object.rotation.y = Math.PI;
    }
    const objectSize = new Box3().setFromObject(object).getSize(new Vector3());
    const scalingFactor = INVENTORY_ICON_SIZE / Math.max(objectSize.x, objectSize.y);
    object.position.x = molecule.x - (objectSize.x * scalingFactor) / 2;
    object.position.y = molecule.y - objectSize.y * scalingFactor;
    object.scale.set(scalingFactor, scalingFactor, 1);
    object.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "inventory_icon" });
    this.scene.add(object);
  }
  /**
   * Renders the smiles of a molecule
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   */
  renderSmiles(molecule) {
    const { smiles } = molecule.data;
    const options = {
      suppressChiralText: true,
      suppressCIPParity: true,
      suppressESR: true,
      factorTextSize: 1,
      noStereoProblem: true,
    };
    const svg = minimal.Molecule.fromSmiles(smiles).toSVG(100, 150, "svg", options);
    const data = this.svgLoader.parse(svg);
    const textElements = Array.from(data.xml.children).filter(child => child.nodeName === "text");
    const textObject3D = this.createTextObject3D(textElements);
    const shapeObject3D = this.createSVGMeshObject3D(data.paths);
    const smilesObject3D = new Object3D().add(shapeObject3D, textObject3D);
    const smilesBoundingBox = new Box3().setFromObject(smilesObject3D);
    const smilesBoundingBoxSize = new Vector3();
    const smilesBoundingBoxCenter = new Vector3();
    smilesBoundingBox.getSize(smilesBoundingBoxSize);
    smilesBoundingBox.getCenter(smilesBoundingBoxCenter);
    smilesObject3D.children.forEach(child => {
      child.position.x = -smilesBoundingBoxCenter.x;
      child.position.y = -smilesBoundingBoxCenter.y;
    });
    smilesObject3D.rotation.x = Math.PI;
    smilesObject3D.rotation.y = 2 * Math.PI;
    molecule.data.boundingBox = smilesBoundingBoxCenter;
    smilesObject3D.position.x = molecule.x;
    smilesObject3D.position.y = molecule.y;
    smilesObject3D.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "smiles" });
    this.scene.add(smilesObject3D);
  }
  /**
   * Creates an object3D from an SVG text
   * @param {SVGTextElement[]} textElements - The SVG text elements
   * @returns {THREE.Object3D} The object3D
   */
  createTextObject3D(textElements) {
    const object = new Object3D();
    textElements.forEach(textElement => {
      const fontSize = parseInt(textElement.attributes.getNamedItem("font-size").nodeValue, 10);
      const text = textElement.textContent;
      const textWidth = this.calculateTextWidth(textElement);
      const x = parseFloat(textElement.attributes.getNamedItem("x").nodeValue) + textWidth / 2;
      const y = parseFloat(textElement.attributes.getNamedItem("y").nodeValue) + fontSize / 3;
      const data = {
        x,
        y,
        fontSize,
        color: textElement.getAttribute("fill"),
        text,
      };
      const geometry = new TextGeometry(data.text, {
        font: this.helvetiker,
        size: data.fontSize * 0.7,
        height: 0,
        curveSegments: 12,
      });
      const material = new MeshBasicMaterial({ color: data.color });
      const mesh = new Mesh(geometry, material);
      const meshSize = new Box3().setFromObject(mesh).getSize(new Vector3());
      mesh.position.set(data.x - meshSize.x / 2, data.y - fontSize / 3, 0);
      mesh.rotation.x = Math.PI;
      mesh.rotation.y = 2 * Math.PI;
      object.add(mesh);
    });
    return object;
  }
  /**
   * Creates an object3D from an SVG path
   * @param {SVGResultPaths[]} paths - The SVG paths
   * @returns {THREE.Object3D} The object3D
   */
  createSVGMeshObject3D(paths) {
    const object = new Object3D();
    for (const path of paths) {
      this.createLineShapes(path).forEach(mesh => object.add(mesh));
    }
    return object;
  }
  /**
   * Creates line shapes from an SVG path
   * @param {SVGResultPaths} path - The SVG path
   * @returns {THREE.Mesh[]} The line shapes
   */
  createLineShapes(path) {
    const meshes = [];
    const strokeColor = path.userData.style.stroke;
    let renderOrder = 0;
    if (strokeColor !== undefined && strokeColor !== "none") {
      const material = new MeshBasicMaterial({
        color: new Color().setStyle(strokeColor),
        opacity: path.userData.style.strokeOpacity,
        transparent: path.userData.style.strokeOpacity < 1,
        side: DoubleSide,
        depthWrite: false,
        wireframe: false,
      });
      for (const subPath of path.subPaths) {
        const geometry = SVGLoader.pointsToStroke(subPath.getPoints(), path.userData.style);
        if (geometry) {
          const mesh = new Mesh(geometry, material);
          mesh.renderOrder = renderOrder++;
          meshes.push(mesh);
        }
      }
    }
    return meshes;
  }
  /**
   * Creates solid shapes from an SVG path
   * @param {SVGResultPaths} path - The SVG path
   * @returns {THREE.Mesh[]} The solid shapes
   */
  createSolidShapes(path) {
    const meshes = [];
    const fillColor = path.userData.style.fill;
    let renderOrder = 0;
    if (fillColor !== undefined && fillColor !== "none") {
      const material = new MeshBasicMaterial({
        color: new Color().setStyle(fillColor),
        opacity: path.userData.style.fillOpacity,
        transparent: path.userData.style.fillOpacity < 1,
        side: DoubleSide,
        depthWrite: false,
        wireframe: false,
      });
      const shapes = SVGLoader.createShapes(path);
      for (const shape of shapes) {
        const geometry = new ShapeGeometry(shape);
        const mesh = new Mesh(geometry, material);
        // FIXME: This is a temporary fix for the render order of the meshes
        // The render order should be calculated from the z position of the meshes
        mesh.renderOrder = fillColor === "#F9C727" ? 100 : 0 + renderOrder++;
        meshes.push(mesh);
      }
    }
    return meshes;
  }
  /**
   * Renders a reaction node
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReaction(reaction) {
    this.renderReactionPath(reaction);
    this.renderReactionReference(reaction);
    this.renderReactionDetails(reaction);
  }
  /**
   * Renders the reaction path of a reaction
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReactionPath(reaction) {
    if (!this.displayPathway)
      return;
    const parent = reaction.parent;
    const children = reaction.children;
    const positions = [];
    const colors = [];
    const color = new Color();
    color.setHSL(0.0, 0.0, 0.73, SRGBColorSpace);
    const parentX = parent.x - parent.data.boundingBox.x;
    positions.push(parentX, parent.y, 0);
    colors.push(color.r, color.g, color.b);
    positions.push(reaction.x, reaction.y, 0);
    colors.push(color.r, color.g, color.b);
    const geometry = new LineGeometry();
    geometry.setPositions(positions);
    geometry.setColors(colors);
    const lineMaterial = new LineMaterial({
      color: 0xffffff,
      linewidth: 1,
      vertexColors: true,
      dashed: false,
      alphaToCoverage: false,
    });
    lineMaterial.resolution.set(500, 500);
    const line = new Line2(geometry, lineMaterial);
    line.computeLineDistances();
    line.scale.set(1, 1, 1);
    this.scene.add(line);
    const arrowTip = new ConeGeometry(2, 5, 3);
    const arrowTipMaterial = new MeshBasicMaterial({ color });
    const arrowTipMesh = new Mesh(arrowTip, arrowTipMaterial);
    arrowTipMesh.position.set(parentX, parent.y, 0);
    arrowTipMesh.rotation.z = -Math.PI / 2;
    this.scene.add(arrowTipMesh);
    for (const child of children) {
      this.createReactionJoinLine(reaction, child);
    }
  }
  /**
   * Renders the reaction corner line of a reaction
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   */
  createReactionJoinLine(reaction, molecule) {
    const sourceX = reaction.x;
    const sourceY = reaction.y;
    const targetX = molecule.x + molecule.data.boundingBox.x + HEXAGON_RADIUS * 2;
    const targetY = molecule.y;
    const horizontalRadiusDirection = targetX - sourceX > 0 ? 1 : -1;
    const verticalRadiusDirection = targetY === sourceY ? 0 : targetY - sourceY > 0 ? 1 : -1;
    const radius = Math.abs(sourceX - targetX) / 2 < LINE_CURVE_RADIUS ? Math.abs(sourceX - targetX) / 2 : LINE_CURVE_RADIUS;
    const positions = [];
    const colors = [];
    const color = new Color();
    color.setHSL(0.0, 0.0, 0.73, SRGBColorSpace);
    positions.push(sourceX, sourceY, 0);
    colors.push(color.r, color.g, color.b);
    positions.push(sourceX + radius * horizontalRadiusDirection, sourceY, 0);
    colors.push(color.r, color.g, color.b);
    positions.push(sourceX + radius * horizontalRadiusDirection, targetY - radius * verticalRadiusDirection, 0);
    colors.push(color.r, color.g, color.b);
    const cornerCurve = new QuadraticBezierCurve3(new Vector3(sourceX + radius * horizontalRadiusDirection, targetY - radius * verticalRadiusDirection, 0), new Vector3(sourceX + radius * horizontalRadiusDirection, targetY, 0), new Vector3(sourceX + 2 * radius * horizontalRadiusDirection, targetY, 0));
    cornerCurve.getPoints(50).forEach(point => {
      positions.push(point.x, point.y, point.z);
      colors.push(color.r, color.g, color.b);
    });
    positions.push(targetX, targetY, 0);
    colors.push(color.r, color.g, color.b);
    const geometry = new LineGeometry();
    geometry.setPositions(positions);
    geometry.setColors(colors);
    const lineMaterial = new LineMaterial({
      color: 0xffffff,
      linewidth: 1,
      vertexColors: true,
      dashed: false,
      alphaToCoverage: false,
    });
    lineMaterial.resolution.set(500, 500);
    const line = new Line2(geometry, lineMaterial);
    line.computeLineDistances();
    line.scale.set(1, 1, 1);
    this.scene.add(line);
  }
  /**
   * Renders the honeycomb of a molecule
   * @param {HierarchyPointNode<Molecule>} molecule - The molecule
   */
  renderHoneycomb(molecule) {
    if (!this.displayHoneycomb)
      return;
    const { isProtected, isRegulated, publishedMoleculeCount: publishedMoleculeCount } = molecule.data;
    const count = (isProtected ? 1 : 0) + (isRegulated ? 1 : 0) + (publishedMoleculeCount ? 1 : 0);
    if (count === 0)
      return;
    const isUpwards = molecule.parent !== null ? molecule.y > molecule.parent.y : false;
    const moleculeRightEdge = molecule.x + molecule.data.boundingBox.x;
    const coordinates = this.createHoneycombCoordinates({ x: moleculeRightEdge, y: molecule.y }, 10, count, isUpwards);
    const hexagonObject = new Object3D();
    const geometry = new CircleGeometry(HEXAGON_RADIUS, 6);
    const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--honeycomb-border-color") });
    const mesh = new Mesh(geometry, material);
    const innerGeometry = new CircleGeometry(HEXAGON_RADIUS - 2, 6);
    const innerMaterial = new MeshBasicMaterial({ color: this.getCSSVariableValue("--honeycomb-color") });
    const innerMesh = new Mesh(innerGeometry, innerMaterial);
    mesh.rotation.z = Math.PI / 2;
    mesh.position.z = 1;
    innerMesh.rotation.z = Math.PI / 2;
    innerMesh.position.z = 2;
    hexagonObject.add(mesh, innerMesh);
    if (publishedMoleculeCount) {
      const { x, y } = coordinates.shift();
      const object = hexagonObject.clone();
      object.position.set(x + HEXAGON_RADIUS, y, 1);
      object.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "published_molecule_icon" });
      this.scene.add(object);
      this.renderHoneycombIcon("book", { x, y });
      this.renderHoneycombBadge({ x, y }, molecule.data.publishedMoleculeCount.toString());
    }
    if (isProtected) {
      const { x, y } = coordinates.shift();
      const object = hexagonObject.clone();
      object.position.set(x + HEXAGON_RADIUS, y, 1);
      object.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "protected_icon" });
      this.scene.add(object);
      this.renderHoneycombIcon("shield", { x, y });
    }
    if (isRegulated) {
      const { x, y } = coordinates.shift();
      const object = hexagonObject.clone();
      object.position.set(x + HEXAGON_RADIUS, y, 1);
      object.userData = Object.assign(Object.assign({}, molecule.data), { eventSource: "regulated_icon" });
      this.scene.add(object);
      this.renderHoneycombIcon("exclamation", { x, y });
    }
  }
  /**
   * Renders the honeycomb icon of a molecule
   * @param {Coordinate} coordinate - The coordinate
   * @todo Implement the icon caching to improve performance
   */
  renderHoneycombIcon(icon, coordinate) {
    const svgIcon = this.iconCache[icon];
    let object;
    if (object)
      object = this.iconObjectCache[icon].clone();
    else {
      const data = this.svgLoader.parse(svgIcon);
      object = new Object3D();
      for (const path of data.paths) {
        this.createLineShapes(path).forEach(mesh => object.add(mesh));
        this.createSolidShapes(path).forEach(mesh => object.add(mesh));
      }
      object.rotation.z = Math.PI;
      object.rotation.y = Math.PI;
    }
    const objectSize = new Box3().setFromObject(object).getSize(new Vector3());
    const scalingFactor = HEXAGON_RADIUS / Math.max(objectSize.x, objectSize.y);
    object.position.x = coordinate.x + HEXAGON_RADIUS - (objectSize.x * scalingFactor) / 2;
    object.position.y = coordinate.y + (objectSize.y * scalingFactor) / 2;
    object.position.z = 4;
    object.scale.set(scalingFactor, scalingFactor, 1);
    this.scene.add(object);
  }
  /**
   * Creates the coordinates of a honeycomb
   * @param {Coordinate} initial - The initial coordinate
   * @param {number} radius - The radius of the honeycomb
   * @param {number} n - The number of hexagons
   * @returns {Coordinate[]} The coordinates of the honeycomb
   */
  createHoneycombCoordinates(initial, radius, n, calculateUpwards = false) {
    const coordinates = [initial];
    const sqrt = Math.sqrt(1);
    const directionMultiplier = calculateUpwards ? -1 : 1;
    for (let index = 0; index < n - 1; index++) {
      const x = coordinates[index].x + (index % 2 === 0 ? 1 : -1) * radius * sqrt;
      const y = coordinates[index].y - 1.5 * radius * directionMultiplier;
      coordinates.push({ x, y });
    }
    return coordinates;
  }
  /**
   * Renders the honeycomb badge of a molecule
   * @param {Coordinate} coordinate - The coordinate
   * @param {string} text - The text
   */
  renderHoneycombBadge(coordinate, text) {
    const x = coordinate.x + 2 * HEXAGON_RADIUS;
    const y = coordinate.y + HEXAGON_RADIUS / 2;
    const geometry = new CircleGeometry(HONEYCOMB_BADGE_RADIUS, 32);
    const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-outline-color") });
    const mesh = new Mesh(geometry, material);
    mesh.position.set(x, y, 4);
    const innerGeometry = new CircleGeometry(HONEYCOMB_BADGE_RADIUS * 0.9, 32);
    const innerMaterial = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-color") });
    const innerMesh = new Mesh(innerGeometry, innerMaterial);
    innerMesh.position.set(x, y, 5);
    const textGeometry = new TextGeometry(text, {
      font: this.helvetikerBold,
      size: 2.5,
      height: 0,
      curveSegments: 12,
    });
    const textMaterial = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-text-color") });
    const textMesh = new Mesh(textGeometry, textMaterial);
    const textSize = new Box3().setFromObject(textMesh).getSize(new Vector3());
    // FIXME: This is a temporary fix for the x and y position of the text offset
    // The x and y position should be calculated from the text size
    textMesh.position.set(x - textSize.x / 2, y - textSize.y / 2, 6);
    this.scene.add(mesh, innerMesh, textMesh);
  }
  /**
   * Renders the reaction name of a reaction and its condition
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReactionDetails(reaction) {
    const conditionObject = this.createReactionCondition3DObject(reaction);
    if (this.displayReactionName && reaction.data.name) {
      const { name } = reaction.data;
      const distance = Math.abs(reaction.parent !== null ? reaction.x - reaction.parent.x : 0);
      const lines = this.linebreakText(name, distance, 6, 10);
      const conditionHeight = conditionObject ? new Box3().setFromObject(conditionObject).getSize(new Vector3()).y : 0;
      lines.forEach((line, index, initial) => {
        const geometry = new TextGeometry(line, {
          font: this.helvetikerBold,
          size: 6,
          height: 0,
          curveSegments: 12,
        });
        const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--reaction-name-color") });
        const mesh = new Mesh(geometry, material);
        const meshSize = new Box3().setFromObject(mesh).getSize(new Vector3());
        const x = reaction.x + 8;
        const y = reaction.y + meshSize.y / 2 + 15 + conditionHeight + (initial.length - 1 - index) * 10;
        mesh.position.set(x, y, 10);
        mesh.userData = Object.assign(Object.assign({}, reaction.data), { eventSource: "reaction_name" });
        this.scene.add(mesh);
      });
    }
    if (conditionObject) {
      conditionObject.userData = Object.assign(Object.assign({}, reaction.data), { eventSource: "reaction_condition" });
      this.scene.add(conditionObject);
    }
  }
  /**
   * Creates the reaction condition of a reaction
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   * @returns {THREE.Object3D} The object3D
   */
  createReactionCondition3DObject(reaction) {
    if (!this.displayReactionCondition || !reaction.data.condition)
      return;
    const object = new Object3D();
    const distance = Math.abs(reaction.parent !== null ? reaction.x - reaction.parent.x : 0);
    const lines = this.linebreakText(reaction.data.condition, distance, 5, 20);
    lines.forEach((line, index, initial) => {
      const geometry = new TextGeometry(line, {
        font: this.helvetiker,
        size: 5,
        height: 0,
        curveSegments: 12,
      });
      const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--reaction-condition-color") });
      const mesh = new Mesh(geometry, material);
      mesh.position.set(reaction.x + 8, reaction.y + 10 + (initial.length - 1 - index) * 10, 10);
      object.add(mesh);
    });
    return object;
  }
  /**
   * Breaks a text into lines
   * @param {string} text - The text
   * @param {number} width - The width of the text
   * @param {number} fontSize - The font size of the text
   * @param {number} padding - The padding of the text
   * @returns {string[]} The result
   */
  linebreakText(text, width, fontSize, padding = 0) {
    const words = text.split(" ");
    const result = words.reduce((acc, word) => {
      const { lines, currentLine } = acc;
      // FIXME: This is a temporary fix for the width of the text
      if ((currentLine + word).length * fontSize >= width - padding) {
        lines.push(currentLine.trim());
        acc.currentLine = "";
      }
      acc.currentLine += `${word} `;
      return acc;
    }, { lines: [], currentLine: "" });
    result.lines.push(result.currentLine.trim());
    return result.lines;
  }
  /**
   * Renders the reaction reference of a reaction
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReactionReference(reaction) {
    if (!this.displayReactionReference)
      return;
    if (reaction.data.doi)
      this.renderReactionReferenceDOI(reaction);
    if (reaction.data.score)
      this.renderReactionReferenceIcon(reaction);
  }
  /**
   * Renders the DOI of a reaction reference
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReactionReferenceDOI(reaction) {
    const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--reaction-doi-color") });
    const doi = reaction.data.doi;
    const geometry = new TextGeometry(doi, {
      font: this.helvetiker,
      size: 6,
      height: 0,
      curveSegments: 12,
    });
    const mesh = new Mesh(geometry, material);
    // FIXME: This is a temporary fix for the x and y position of the text offset
    mesh.position.set(reaction.x + 7, reaction.y - 15, 10);
    const textWidth = new Box3().setFromObject(mesh).getSize(new Vector3()).x;
    const underlineGeometry = new PlaneGeometry(textWidth, 0.5);
    const underlineMesh = new Mesh(underlineGeometry, material);
    // FIXME: This is a temporary fix for the x and y position of the underline offset
    underlineMesh.position.set(mesh.position.x + textWidth / 2 + 2, mesh.position.y - 2, 10);
    mesh.userData = Object.assign(Object.assign({}, reaction.data), { eventSource: "doi" });
    this.scene.add(mesh, underlineMesh);
  }
  /**
   * Renders the book icon under a reaction node
   * @param {HierarchyPointNode<Reaction>} reaction - The reaction
   */
  renderReactionReferenceIcon(reaction) {
    const score = reaction.data.score;
    const svgIcon = this.iconCache[`reference_${score}`];
    let object;
    if (this.iconObjectCache[`reference_${score}`]) {
      object = this.iconObjectCache[`reference_${score}`].clone();
    }
    else {
      const data = this.svgLoader.parse(svgIcon);
      object = new Object3D();
      for (const path of data.paths) {
        this.createLineShapes(path).forEach(mesh => object.add(mesh));
        this.createSolidShapes(path).forEach(mesh => object.add(mesh));
      }
      const objectSize = new Box3().setFromObject(object).getSize(new Vector3());
      const scalingFactor = REFERENCE_ICON_SIZE / Math.max(objectSize.x, objectSize.y);
      object.scale.set(scalingFactor, scalingFactor, 1);
      object.rotation.z = Math.PI;
      object.userData = Object.assign(Object.assign({}, reaction.data), { eventSource: "published_reactions_icon" });
      this.iconObjectCache[`reference_${score}`] = object;
    }
    const objectSize = new Box3().setFromObject(object).getSize(new Vector3());
    const doiPadding = reaction.data.doi ? 10 : 0;
    object.position.set(reaction.x + objectSize.x * 1.25, reaction.y - objectSize.y / 2 - doiPadding - 2, 10);
    this.scene.add(object);
    if (reaction.data.reactionCount) {
      this.renderReactionReferenceIconBadge({ x: object.position.x - objectSize.x / 2, y: object.position.y - objectSize.y / 2 }, reaction.data.reactionCount.toString());
    }
  }
  /**
   * Renders the badge of a reaction reference
   * @param {Coordinate} coordinate - The coordinate
   * @param {string} text - The text
   */
  renderReactionReferenceIconBadge(coordinate, text) {
    const geometry = new CircleGeometry(HONEYCOMB_BADGE_RADIUS + 2, 32);
    const material = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-outline-color") });
    const mesh = new Mesh(geometry, material);
    const geometrySize = new Box3().setFromObject(mesh).getSize(new Vector3());
    const x = coordinate.x + (2 * HONEYCOMB_BADGE_RADIUS + 2) / 2 + geometrySize.x / 1.5;
    const y = coordinate.y - (2 * HONEYCOMB_BADGE_RADIUS + 2) / 2 - geometrySize.y / 3;
    const innerGeometry = new CircleGeometry(HONEYCOMB_BADGE_RADIUS + 2 * 0.9, 32);
    const innerMaterial = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-color") });
    const innerMesh = new Mesh(innerGeometry, innerMaterial);
    innerMesh.position.set(x, y, 11);
    mesh.position.x = x;
    mesh.position.y = y;
    mesh.position.z = 10;
    const textGeometry = new TextGeometry(text, {
      font: this.helvetikerBold,
      size: 4,
      height: 0,
      curveSegments: 12,
    });
    const textMaterial = new MeshBasicMaterial({ color: this.getCSSVariableValue("--badge-text-color") });
    const textMesh = new Mesh(textGeometry, textMaterial);
    const textSize = new Box3().setFromObject(textMesh).getSize(new Vector3());
    textMesh.position.set(x - textSize.x / 2, y - textSize.y / 2, 12);
    this.scene.add(mesh, innerMesh, textMesh);
  }
  /**
   * Calculates the width of a text
   * @param {SVGTextElement} text - The text
   * @returns {number} The width of the text
   * @todo Move to a utility class
   */
  calculateTextWidth(text) {
    const svgNamespace = "http://www.w3.org/2000/svg";
    const element = document.createElementNS(svgNamespace, "svg");
    element.style.display = "block";
    element.style.opacity = "0";
    element.style.position = "absolute";
    element.appendChild(text);
    document.body.appendChild(element);
    const width = element.getBBox().width;
    document.body.removeChild(element);
    return width;
  }
  /**
   * Gets the value of a CSS variable
   * @param {string} variable - The variable
   * @returns {string} The value of the variable
   */
  getCSSVariableValue(variable) {
    return getComputedStyle(this.element).getPropertyValue(variable);
  }
  render() {
    return (index.h("div", { class: "container", ref: element => {
        this.container = element;
      } }));
  }
  static get assetsDirs() { return ["assets"]; }
  get element() { return index.getElement(this); }
};
ReactionPathway.style = reactionPathwayCss;

exports.reaction_pathway = ReactionPathway;

//# sourceMappingURL=reaction-pathway.cjs.entry.js.map